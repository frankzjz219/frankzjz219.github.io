<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anaconda配置问题记录</title>
    <url>/2022/10/09/Anaconda%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="找不到-condarc文件"><a href="#找不到-condarc文件" class="headerlink" title="找不到.condarc文件"></a>找不到<code>.condarc</code>文件</h2><ul>
<li>先执行一次<code>conda config</code>就能找到了<h2 id="配置Anaconda使用clash代理"><a href="#配置Anaconda使用clash代理" class="headerlink" title="配置Anaconda使用clash代理"></a>配置Anaconda使用clash代理</h2></li>
<li><a href="https://blog.csdn.net/weixin_43135178/article/details/124499250">链接</a><h2 id="修改Anaconda安装环境的默认位置"><a href="#修改Anaconda安装环境的默认位置" class="headerlink" title="修改Anaconda安装环境的默认位置"></a>修改Anaconda安装环境的默认位置</h2></li>
<li><a href="https://blog.csdn.net/qq_36455412/article/details/125347552">链接</a><h2 id="手动添加Anaconda到环境变量"><a href="#手动添加Anaconda到环境变量" class="headerlink" title="手动添加Anaconda到环境变量"></a>手动添加Anaconda到环境变量</h2></li>
<li><a href="http://news.sohu.com/a/446583263_120918998">链接</a><h2 id="配置pytorch使用CPU的多线程"><a href="#配置pytorch使用CPU的多线程" class="headerlink" title="配置pytorch使用CPU的多线程"></a>配置pytorch使用CPU的多线程</h2></li>
<li><code>torch.set_num_threads(8)</code></li>
<li><a href="https://blog.csdn.net/a_piece_of_ppx/article/details/123714865">参考</a></li>
<li>作用不大<h2 id="GYM-官方文档"><a href="#GYM-官方文档" class="headerlink" title="GYM 官方文档"></a>GYM 官方文档</h2></li>
<li><a href="https://www.gymlibrary.dev/">链接</a><h2 id="word中插入代码"><a href="#word中插入代码" class="headerlink" title="word中插入代码"></a>word中插入代码</h2></li>
<li><a href="https://highlightcode.com/">https://highlightcode.com/</a></li>
</ul>
]]></content>
      <tags>
        <tag>anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>C++二级指针和二维数组（不使用Vector）</title>
    <url>/2022/08/15/C-%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E5%92%8C%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<ul>
<li>不要将二级指针和二维数组混为一谈，二维数组再指针作为起始地址的基础上必须还知道第二维度的长度才可以，因为实际上的数组索引操作是<code>i*&lt;第二维度大小&gt; + j</code><h2 id="动态二维数组的创建和销毁-不使用Vector"><a href="#动态二维数组的创建和销毁-不使用Vector" class="headerlink" title="动态二维数组的创建和销毁(不使用Vector)"></a>动态二维数组的创建和销毁(不使用Vector)</h2></li>
<li>创建<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> **dataMat;</span><br><span class="line">dataMat = <span class="keyword">new</span> <span class="keyword">double</span>* [x_size];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;xSize;i++)</span><br><span class="line">&#123;</span><br><span class="line">    dataMat[i] = <span class="keyword">new</span> <span class="keyword">double</span>[ySize];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><a href="https://blog.csdn.net/wordwarwordwar/article/details/52558583">参考链接</a></li>
<li>释放二维数组<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;数组第一维的数量&gt;;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> dataMat[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> dataMat;</span><br></pre></td></tr></table></figure></li>
<li>先逐个释放数组的行，然后再释放整个数组<h2 id="动态二维数组的传参"><a href="#动态二维数组的传参" class="headerlink" title="动态二维数组的传参"></a>动态二维数组的传参</h2></li>
<li>对于正常创建的二维数组（不是使用上文的方法创建的动态数组）<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1：传递数组，注意第二维必须标明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> arr[][<span class="number">3</span>],<span class="keyword">int</span> iRows)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;iRows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;arr[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当作指针数组传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> (*arr)[<span class="number">3</span>],<span class="keyword">int</span> iRows)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;iRows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;arr[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接传递一级指针（强制类型转换）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span>*arr,<span class="keyword">int</span> iRows,<span class="keyword">int</span> iCols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;iRows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;*(arr+i*iRows+j)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">fun1</span>(a,<span class="number">2</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">fun2</span>(a,<span class="number">2</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//此处必须进行强制类型转换，因为a是二维数组，而需要传入的是指针</span></span><br><span class="line">    <span class="comment">//所以必须强制转换成指针，如果a是一维数组则不必进行强制类型转换</span></span><br><span class="line">    <span class="comment">//为什么一维数组不用强制转换而二维数组必须转换，此问题还没解决，期待大牛！</span></span><br><span class="line">    <span class="built_in">fun3</span>((<span class="keyword">int</span>*)a,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>假如预先<strong>不知道数组的第二维度</strong>是多少的话，还是只能使用强制类型转换为<strong>一级指针</strong>的方法传递。</li>
<li><a href="https://blog.csdn.net/qq_43036419/article/details/110490025">参考链接</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C++语言STL中使用谓词的方法</title>
    <url>/2023/09/04/Cpp%E8%AF%AD%E8%A8%80STL%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%B0%93%E8%AF%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>C++的STL模板库中很多容器都需要谓词，比如有序集合<code>set</code>等，此时定义谓词主要有两种方式<h2 id="使用重载运算符作为谓词"><a href="#使用重载运算符作为谓词" class="headerlink" title="使用重载运算符作为谓词"></a>使用重载运算符作为谓词</h2></li>
<li>新建一个struct<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">compFun</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> shared_ptr&lt;test&gt;&amp; a, <span class="keyword">const</span> shared_ptr&lt;test&gt;&amp; b)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-&gt;id&gt;b-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li> 传参的时候使用<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;shared_ptr&lt;test&gt;, compFun&gt; setTest;</span><br></pre></td></tr></table></figure></li>
<li>上面不需要显式的传入比较函数，因为类型已经包含了比较函数<h2 id="使用lambda表达式作为谓词"><a href="#使用lambda表达式作为谓词" class="headerlink" title="使用lambda表达式作为谓词"></a>使用lambda表达式作为谓词</h2></li>
<li>定义<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">function&lt;<span class="built_in"><span class="keyword">bool</span></span>(<span class="keyword">const</span> test&amp;, <span class="keyword">const</span> test&amp;)&gt; funComp = [](<span class="keyword">const</span> test&amp; a, <span class="keyword">const</span> test&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;comparing!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> (a.id)&lt;(b.id);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>使用<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;test, function&lt;<span class="keyword">bool</span>(<span class="keyword">const</span> test&amp;, <span class="keyword">const</span> test&amp;)&gt;&gt; <span class="built_in">setTest</span>(funComp);</span><br></pre></td></tr></table></figure></li>
<li>注意，<strong>不显式的传入lambda表达式的时候不能向set中插入超过一个元素</strong>，否则会因为触发比较而报错<code>what():  bad_function_call</code></li>
<li>根据<code>leetcode</code>的测试，使用内联函数作为STL标准库的函数的谓词，会比使用<code>static inline</code>但是功能相同的函数作为谓词快一些，比如<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更快的方法是</span></span><br><span class="line"><span class="keyword">auto</span> cmp = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b)-&gt;<span class="keyword">bool</span>&#123;<span class="keyword">return</span> a&gt;b;&#125;;</span><br></pre></td></tr></table></figure></li>
<li>此处注意使用<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> cmp = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b)-&gt;<span class="keyword">bool</span>&#123;<span class="keyword">return</span> a&lt;b;&#125;;</span><br><span class="line"><span class="comment">// 以下二者结果不同，混用可能得到类型错误</span></span><br><span class="line"><span class="keyword">decltype</span>(cmp);function&lt;<span class="built_in"><span class="keyword">bool</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt;;</span><br></pre></td></tr></table></figure></li>
<li>注意对于cpp的优先级队列而言，使用<strong>大于号作为比较符得到的是最小堆，小于号是最大堆</strong></li>
<li>优先级队列在使用谓词之前必须先指定存储的数据结构，比如如下代码<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> cmp = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b)-&gt;<span class="keyword">bool</span>&#123;<span class="keyword">return</span> a&lt;b;&#125;;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, function&lt;<span class="keyword">bool</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt;&gt; <span class="built_in">pq</span>(cmp);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>c</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Cubic插值代码</title>
    <url>/2022/08/16/Cubic%E6%8F%92%E5%80%BC%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="一维Cubic插值代码"><a href="#一维Cubic插值代码" class="headerlink" title="一维Cubic插值代码"></a>一维Cubic插值代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cubicCalc</span><span class="params">(<span class="keyword">double</span> xs[<span class="number">4</span>], <span class="keyword">double</span> ys[<span class="number">4</span>], <span class="keyword">double</span> xInput)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 旧方法</span></span><br><span class="line">    <span class="comment">// return p[1] + 0.5 * x*(p[2] - p[0] + x * (2.0*p[0] - 5.0*p[1] + 4.0*p[2] - p[3] + x * (3.0*(p[1] - p[2]) + p[3] - p[0])));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">double</span>* H,*A,*B,*C,*D,*Z,*F,*X,*Y;</span><br><span class="line">    <span class="keyword">double</span> dbOutY;</span><br><span class="line">    X = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line">    Y = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line"></span><br><span class="line">    A = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line">    B = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line">    C = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line">    D = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line">    H = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">4</span>];   </span><br><span class="line">    <span class="built_in">memcpy</span>(X, xs, <span class="number">4</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(Y, ys, <span class="number">4</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> i,P,L;   </span><br><span class="line">    <span class="comment">// 生成Spline</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=N;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line">        H[i<span class="number">-1</span>]=X[i]-X[i<span class="number">-1</span>];   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    L=N<span class="number">-1</span>;   </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=L;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line">        A[i]=H[i<span class="number">-1</span>]/(H[i<span class="number">-1</span>]+H[i]);   </span><br><span class="line">        B[i]=<span class="number">3</span>*((<span class="number">1</span>-A[i])*(Y[i]-Y[i<span class="number">-1</span>])/H[i<span class="number">-1</span>]+A[i]*(Y[i+<span class="number">1</span>]-Y[i])/H[i]);   </span><br><span class="line">    &#125;   </span><br><span class="line">    A[<span class="number">0</span>]=<span class="number">1</span>;   </span><br><span class="line">    A[N]=<span class="number">0</span>;   </span><br><span class="line">    B[<span class="number">0</span>]=<span class="number">3</span>*(Y[<span class="number">1</span>]-Y[<span class="number">0</span>])/H[<span class="number">0</span>];   </span><br><span class="line">    B[N]=<span class="number">3</span>*(Y[N]-Y[N<span class="number">-1</span>])/H[N<span class="number">-1</span>];   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=N;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line">        D[i]=<span class="number">2</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=N;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line">        C[i]=<span class="number">1</span>-A[i];   </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    P=N;   </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=P;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (  <span class="built_in">fabs</span>(D[i]) &lt;= <span class="number">0.000001</span> )                                  </span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">            <span class="comment">//    MessageBox(0,&quot;�޽�&quot;,&quot;��ʾ,MB_OK);   </span></span><br><span class="line">            <span class="comment">//break;   </span></span><br><span class="line">        &#125;   </span><br><span class="line">        A[i<span class="number">-1</span>]=A[i<span class="number">-1</span>]/D[i<span class="number">-1</span>];   </span><br><span class="line">        B[i<span class="number">-1</span>]=B[i<span class="number">-1</span>]/D[i<span class="number">-1</span>];   </span><br><span class="line">        D[i]=A[i<span class="number">-1</span>]*(-C[i])+D[i];   </span><br><span class="line">        B[i]=-C[i]*B[i<span class="number">-1</span>]+B[i];   </span><br><span class="line">    &#125;   </span><br><span class="line">    B[P]=B[P]/D[P];   </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=P;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line">        B[P-i]=B[P-i]-A[P-i]*B[P-i+<span class="number">1</span>];   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 生成Spline结束</span></span><br><span class="line">    <span class="comment">// 获得Y坐标</span></span><br><span class="line">    <span class="keyword">double</span> E,E1,K,K1,H1;   </span><br><span class="line">    <span class="keyword">int</span> j ;    </span><br><span class="line">    <span class="keyword">if</span>(xInput&lt;X[<span class="number">0</span>])   </span><br><span class="line">    &#123;   </span><br><span class="line">        j = <span class="number">0</span>;   </span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xInput &gt; X[N])   </span><br><span class="line">    &#123;   </span><br><span class="line">        j = N<span class="number">-1</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=N;j++)   </span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="keyword">if</span>(xInput&lt;=X[j])   </span><br><span class="line">            &#123;   </span><br><span class="line">                j=j<span class="number">-1</span>;   </span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//////////////////////////////////////////////////////////////////////////   </span></span><br><span class="line">    E=X[j+<span class="number">1</span>]-xInput;   </span><br><span class="line">    E1=E*E;   </span><br><span class="line">    K=xInput-X[j];   </span><br><span class="line">    K1=K*K;   </span><br><span class="line">    H1=H[j]*H[j];   </span><br><span class="line"></span><br><span class="line">    dbOutY=(<span class="number">3</span>*E1<span class="number">-2</span>*E1*E/H[j])*Y[j]+(<span class="number">3</span>*K1<span class="number">-2</span>*K1*K/H[j])*Y[j+<span class="number">1</span>];   </span><br><span class="line">    dbOutY=dbOutY+(H[j]*E1-E1*E)*B[j]-(H[j]*K1-K1*K)*B[j+<span class="number">1</span>];   </span><br><span class="line">    dbOutY=dbOutY/H1;   </span><br><span class="line">    <span class="keyword">return</span> dbOutY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二维插值"><a href="#二维插值" class="headerlink" title="二维插值"></a>二维插值</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bicubicInterpolate</span><span class="params">(<span class="keyword">double</span>* xs, <span class="keyword">double</span>* ys, <span class="keyword">double</span> p[<span class="number">4</span>][<span class="number">4</span>], <span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> arr[<span class="number">4</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="built_in">cubicCalc</span>(xs, p[<span class="number">0</span>], y);</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="built_in">cubicCalc</span>(xs, p[<span class="number">1</span>], y);</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="built_in">cubicCalc</span>(xs, p[<span class="number">2</span>], y);</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="built_in">cubicCalc</span>(xs, p[<span class="number">3</span>], y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cubicCalc</span>(ys, arr, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上述代码中的<code>xs</code>是描述二维矩阵中取样点的X坐标的集合（从小到大）</li>
<li><code>ys</code>是上述矩阵中取样点的y坐标的集合</li>
<li>二位插值的思路实际上就是<strong>先在一维上</strong>完成插值然后利用<strong>一维插值的结果向量</strong>再进行<strong>正交方向</strong>上的<strong>一维插值</strong></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Cpp中STL的一些使用指南</title>
    <url>/2023/09/04/Cpp%E4%B8%ADSTL%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="C-语法复习"><a href="#C-语法复习" class="headerlink" title="C++语法复习"></a>C++语法复习</h2><h3 id="运算符操作"><a href="#运算符操作" class="headerlink" title="运算符操作"></a>运算符操作</h3><ul>
<li>从左往右多个连续不等号的时候是从左往右依次运算的</li>
<li>连续的多个赋值操作是从右往左的</li>
<li>移位运算最好针对无符号数使用，否则可能因为使用1填充高位导致出错<h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h3></li>
<li>是个运算符<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span> a;</span><br><span class="line"><span class="keyword">sizeof</span> *p; <span class="comment">// 相当于直接求p的指向的类型的大小，与p是否是有效的指针无关</span></span><br></pre></td></tr></table></figure></li>
<li>用<code>sizeof</code>计算数组大小的时候会返回整个数组的大小而不是指针占的空间</li>
<li>sizeof用在<code>string</code>或者<code>vector</code>之类的数据结构的时候只考虑这些机构固定部分的内容，不考虑其中可变元素的体积</li>
</ul>
<h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><ul>
<li>含有两个运算对象，从左往右运算<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="keyword">for</span>(;;++a, ++b)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>返回的是右侧表达式的值<h3 id="对无符号数的操作"><a href="#对无符号数的操作" class="headerlink" title="对无符号数的操作"></a>对无符号数的操作</h3></li>
<li>假如对无符号数赋值负数的话，得到的结果是这个负数<strong>对无符号数最大值（2的位数次方）求模的结果</strong></li>
<li>数字溢出的话是<strong>未定义行为</strong>，程序也许会<strong>崩溃</strong></li>
<li>有符号和无符号的数字不能简单相加，会先把有符号数字转化为无符号数字，编码不同<ul>
<li>假如有符号数字是负数的话，会变为前面说的对最大值求模的结果，再相加，以至于结果错误<h3 id="不同数字"><a href="#不同数字" class="headerlink" title="不同数字"></a>不同数字</h3></li>
</ul>
</li>
<li>十进制：直接写</li>
<li>八进制：开头有个0，比如<code>024</code></li>
<li>16进制：<code>0x15</code></li>
<li>浮点数可以写<code>3.14</code>, <code>3.14e5</code>, <code>.314</code>等等<h3 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h3></li>
<li>换行<code>\n</code>, 制表符横向<code>\t</code>, 报警符号<code>\a</code>, 纵向制表符<code>\v</code>, 退格符<code>\b</code>, 双引号<code>\&quot;</code>, 反斜线<code>\\</code>, 问号<code>\?</code>, 单引号<code>\&#39;</code>, 回车符<code>\r</code>, 进纸符<code>\f</code></li>
<li>如果<code>\</code>后面是x说明是16进制数字转义，如果没有x说明是八进制的，<code>\115</code>和<code>\x4d</code>一样</li>
</ul>
<h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><ul>
<li>case后面的必须是<strong>常量</strong>，不能是变量</li>
<li>不可写初始化的语句<ul>
<li>可以创建，但是不能初始化</li>
</ul>
</li>
</ul>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul>
<li><code>static_cast&lt;type&gt;</code>类似于C的强制类型转换<ul>
<li>只要底层不包含const，都可以，速度快一些</li>
</ul>
</li>
<li><code>dynamic_cast&lt;type&gt;</code>比static安全一些</li>
<li><code>const_cast&lt;type&gt;</code>转化的时候只能去掉底层的const<strong>不能</strong>改变类型，但是可能导致未定义的行为</li>
<li><code>reinterpret_cast&lt;type&gt;</code>对运算对象按底层位进行重新解释<ul>
<li>旧式的强制转换，少用<h3 id="字符串换行"><a href="#字符串换行" class="headerlink" title="字符串换行"></a>字符串换行</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello &quot;</span></span><br><span class="line">    <span class="string">&quot;World&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<h3 id="字面值的类型（支持大写或小写）"><a href="#字面值的类型（支持大写或小写）" class="headerlink" title="字面值的类型（支持大写或小写）"></a>字面值的类型（支持大写或小写）</h3></li>
</ul>
</li>
<li>后缀<code>u</code>是无符号</li>
<li>后缀<code>L</code>是long，小数后缀L是long double</li>
<li>后缀<code>ll</code>是long long</li>
<li>小数后缀<code>f</code>是浮点数<h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 都一样</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = &#123;<span class="number">0</span>&#125;;<span class="comment">// 列表初始化</span></span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>调用<code>new int;</code>创建的时候，假如不加括号的话是个未初始化的int，加括号的话是0</li>
<li>列表初始化对类型检查比较严格，比如用<code>long double</code>初始化<code>int</code>的时候就会报错，但是用传统的 初始化方式不会报错</li>
<li>一个int类型的变量，再函数体内部（包括main），不会初始化</li>
<li>但是假如不在任何函数内部，会初始化为0</li>
<li><strong>赋值操作同样可以用花括号，这样的话会严格检查是否有数据丢失，比如舍弃小数位等</strong><h3 id="变量的声明和定义"><a href="#变量的声明和定义" class="headerlink" title="变量的声明和定义"></a>变量的声明和定义</h3></li>
<li>如果想声明一个变量而不是定义（在别处定义过），那就在变量前面添加<code>extern</code>关键字并且不要赋值</li>
<li><code>extern int a = 0;</code>这句话是定义，但是不能放在任何函数的内部，这个语法的意思是这个变量是<u>给别的文件中的人用的</u>，放在函数中会导致这个变量只能在该函数的作用域中使用，无法被他人看到</li>
<li>但是如果将<code>extern</code>的位置替换为<code>extern</code>，会使其无法被其他文件使用<code>extern</code>应用</li>
</ul>
<p>数据类型    |字节数（16位编译器）|    字节数（32位编译器）    字节数|（64位编译器）|    总结<br>|—|—|—|—|—|<br>char    |1|    1    |1    |char一直占用1个字节<br>char*    |2    |4    |8    |char* 是指针位宽，N位系统含有N个位，占用N/8个字节<br>short    |2    |2    |2    |short一直占用2个字节<br>int    |2    |4    |4    |int在x86和x64都是4个字节<br>unsigned int    |2    |4    |4    |无符号int与int本身的占位一样，不区分编译器<br>long    |4    |4    |8    |long一直等同于float<br>long long|8    |8    |8    |long long一直等同于double<br>float    |4    |4    |8    |float由于带浮点至少需要4字节，在x64编译器里是8字节<br>double|    8    |8    |8    |double一直占8个字节</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul>
<li>只能用数字，字母和下划线，数字不能开头</li>
<li>不能用C++自己的关键字冲突</li>
<li>不能与操作符的替代名冲突<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3></li>
<li>引用类型只能引用左值</li>
<li>引用<strong>必须初始化</strong></li>
<li>不存在指向引用的指针</li>
<li>常量类型的引用必须也是常量</li>
<li>如果引用类型嵌套的话，上层的引用类型也会绑定到最底层被引用的对象上</li>
<li>指针的引用<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> *&amp;i = p;<span class="comment">// 一个对指针的引用</span></span><br></pre></td></tr></table></figure>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3></li>
<li>默认情况下，const对象只对当前文件生效，如果希望在其他文件中使用，必须使用extern声明<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3></li>
<li>指针只能指向与自己类型符合的变量<ul>
<li>不能不同</li>
</ul>
</li>
<li><code>void*</code>类型的指针可以指向任何类型<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> a = &amp;b; <span class="comment">// 此处的a一定指向b的位置，不可修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * a = &amp;b; <span class="comment">// 此处的a指向b，但是不能修改a指向的位置的内容</span></span><br></pre></td></tr></table></figure>
不可以对临时对象取地址，比如<code>&amp;(&amp;a)</code></li>
<li>从右往左看，const离谁近，谁就是const<h3 id="常量表达式"><a href="#常量表达式" class="headerlink" title="常量表达式"></a>常量表达式</h3></li>
<li>编译过程就能知道结果并且值不会改变的式子</li>
<li>可以在语句前面加一个<code>constexpr</code>修饰</li>
<li>常量和指针<ul>
<li><img src="/imgs/2fec4ec8201e68ad12baaac3b9b563260f98cb9118ade179520e0d5a85cdbcf7.png" alt="picture 2">  </li>
<li>被引用的变量必须定义在函数体外面，否则会导致变量生命周期提前结束<h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3></li>
</ul>
</li>
<li><code>typedef a b;</code>是b定义为a的别名</li>
<li><code>typedef a *b</code>是将b定义为<code>a*</code></li>
<li>注意使用<code>const</code>关键字的时候，用法的不同特性</li>
<li><code>typedef A B;</code>和<code>using B = A;</code>等价<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* cstr;</span><br><span class="line"><span class="keyword">const</span> cstr a;<span class="comment">// 指向恒定的某个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* b;<span class="comment">// 指向的对象是常量</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><ul>
<li>让编译器使用初始值判断类型</li>
<li>不可以使用<code>auto i = 0, p = 3.14;</code>二者类型不能不同</li>
<li>用auto推导引用类型的时候会给变量设置为引用原本的类型，不会设置为引用</li>
<li>推导const类型的指针的时候会保留const</li>
<li>但是推导用const类型初始化的变量的时候不会保留const</li>
<li>可以手动指定<code>const</code>或者`&amp;</li>
<li>可以写<code>const auto &amp; i = 42;</code></li>
</ul>
<h3 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h3><ul>
<li>类型分析符<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i) a = <span class="number">1</span>;<span class="comment">// 此处a是与i类型一样的int</span></span><br></pre></td></tr></table></figure></li>
<li><code>*p</code>解引用会被认为是对应基础类型的引用类型</li>
<li><code>int i</code>是int类型，但是假如<code>decltype((i))</code>或者是<code>decltype(((i)))</code>都是int的引用类型，不存在引用的引用，无论嵌套多少层都是引用</li>
</ul>
<h3 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h3><ul>
<li><code>const T&amp;</code>可以接受右值类型的传参</li>
</ul>
<h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><ul>
<li>默认是public</li>
<li>C++11开始，定义的时候可以对其中的变量赋初值</li>
<li>声明成员类型的时候要用分号</li>
</ul>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std:: cout;</span><br><span class="line"><span class="comment">// 在下文就可以直接使用cin和cout了</span></span><br></pre></td></tr></table></figure>
<ul>
<li>也可以用<code>using namespace std;</code></li>
</ul>
<h3 id="for循环的执行顺序"><a href="#for循环的执行顺序" class="headerlink" title="for循环的执行顺序"></a>for循环的执行顺序</h3><ul>
<li><img src="/imgs/217590d6e6a6ee6ba77a0a62694f888b086d15034b97a4efe3df56e6f31a03e6.png" alt="picture 0">  <ul>
<li>判断条件</li>
<li>执行循环体</li>
<li>执行循环表达式</li>
</ul>
</li>
<li>循环</li>
</ul>
<h3 id="cin如何判断输入已经结束"><a href="#cin如何判断输入已经结束" class="headerlink" title="cin如何判断输入已经结束"></a>cin如何判断输入已经结束</h3><p>= <img src="/imgs/9c147de94e7509a616302b568c46b0db3e92e53d812e452bf967ab57b4c559de.png" alt="picture 1">  </p>
<ul>
<li>cin的返回值可以拿来判断用户是输入了还是退出了</li>
<li>遇到<code>Ctrl Z</code>之类的EOF符号或者是输入的值与目标变量类型不匹配（比如要求int遇到字符）也会退出</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>数组不可以使用auto推断类型</li>
<li>数组的长度必须是<code>constexpr</code><ul>
<li>比如常量数字</li>
</ul>
</li>
<li>可以不给大小，初始化的时候使用花括号，<u>让编译器推断大小</u></li>
<li>数组部分没给初始值的时候，会是0或者空字符串</li>
<li>数组初始化不可以拷贝</li>
<li>不存在<strong>引用数组</strong><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*arr)[<span class="number">10</span>] = &amp;array;<span class="comment">// 指向一个含有十个元素的数组</span></span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (&amp;arr)[<span class="number">10</span>] = array;<span class="comment">// 引用一个含有十个元素的数组</span></span><br><span class="line"><span class="keyword">int</span> *(&amp;arr)[<span class="number">10</span>] = ptrs; <span class="comment">// 引用一个含有十个int类型指针的数组</span></span><br></pre></td></tr></table></figure></li>
<li><strong>判断的时候从右往左，从里往外，离谁近先结合谁</strong>，<strong>先跟右边的结合再考虑左边的</strong>，结合后的部分可以删去，方便判断<h3 id="decltype和auto推断类型的不同"><a href="#decltype和auto推断类型的不同" class="headerlink" title="decltype和auto推断类型的不同"></a>decltype和auto推断类型的不同</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">a1</span><span class="params">(a)</span></span>; <span class="comment">// 此时a1被推断为一个指针类型</span></span><br><span class="line"><span class="keyword">decltype</span>(a) a2; <span class="comment">// a2也是一个数组</span></span><br></pre></td></tr></table></figure>
<h3 id="函数传参的时候传递数组的引用"><a href="#函数传参的时候传递数组的引用" class="headerlink" title="函数传参的时候传递数组的引用"></a>函数传参的时候传递数组的引用</h3></li>
<li>形参设置为<code>int (&amp;a)[10]</code></li>
<li>此时在函数内部可以像使用数组一样使用参数，比如使用<strong>范围for循环</strong>等等</li>
<li>而不会退化为指针</li>
<li>注意传递多维数组的时候除了最高维度别的必须给出明确大小<ul>
<li><code>int matrix [][10]</code>或者<code>int (*matrix)[10]</code></li>
</ul>
</li>
</ul>
<h3 id="借用迭代器找到数组头尾"><a href="#借用迭代器找到数组头尾" class="headerlink" title="借用迭代器找到数组头尾"></a>借用迭代器找到数组头尾</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span> </span></span><br><span class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *beg = std::<span class="built_in">begin</span>(ia);</span><br><span class="line"><span class="keyword">int</span> *end = std::<span class="built_in">end</span>(ia);</span><br><span class="line"><span class="comment">// 上述代码就找到了数组的头和尾部的位置</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数组的下标可以是负数<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3></li>
<li>对多维数组非最低维度直接求加法，会跳行而不是连续往前</li>
<li>也可以用范围for<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; row:a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; col:row)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// todo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>上述代码必须用<code>auto&amp;</code>，不使用的话auto会将类型推断为一个int指针，导致下一层范围循环无法使用<h2 id="C风格的字符串"><a href="#C风格的字符串" class="headerlink" title="C风格的字符串"></a>C风格的字符串</h2></li>
<li>操作在<code>&lt;cstring&gt;</code>头文件中</li>
<li>使用头文件中操作函数操作的话必须保证字符串是以<code>\0</code>结尾的</li>
<li><code>string</code>类型的<code>.c_str()</code>函数会返回一个c风格的字符串<ul>
<li>注意假如之后修改了string的话，会导致这个字符串失效</li>
</ul>
</li>
</ul>
<h2 id="STL库函数"><a href="#STL库函数" class="headerlink" title="STL库函数"></a>STL库函数</h2><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><ul>
<li><code>swap(a, b)</code>交换两个容器的元素，比拷贝快很多<h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3></li>
<li>清除原有内容</li>
<li>接受两个参数，开始迭代器和结束迭代器</li>
<li>或者接受一个初始化列表</li>
<li>或者接受n和k两个参数，表示n个k元素，类似于赋初值的操作<h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2></li>
<li>初始化</li>
<li>可以用<code>&#123;&#123;key, val&#125;, &#123;key, val&#125;, ...&#125;</code>的形式初始化</li>
<li><code>unordered_map</code>不能在使用<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : m)&#123;m.<span class="built_in">erase</span>(<span class="comment">/*blabla*/</span>)&#125;</span><br></pre></td></tr></table></figure>
类型的循环中删除元素，否则可能会因为删除了<u>i指向的元素</u><strong>导致迭代器失效</strong>，引起内存错误</li>
<li>安全的删除方式为<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>();) </span><br><span class="line">&#123;</span><br><span class="line">    it = m.<span class="built_in">erase</span>(it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>对于方法erase而言<ul>
<li><code>iterator erase(const_iterator position)</code>：删除迭代器 position 指向的元素，并返回指向下一个元素的迭代器</li>
<li><code>size_type erase(const key_type&amp; k)</code>：删除容器中键为 k 的元素，并返回被删除的元素个数</li>
<li><code>iterator erase(const_iterator first, const_iterator last)</code>删除迭代器范围 <strong>[first, last)</strong> 内的所有元素，并返回指向最后一个被删除元素之后的元素的迭代器</li>
<li><code>template&lt; class K &gt; size_type erase( K&amp;&amp; x )</code>：C++23 引入了这种重载形式，它可以删除容器中与 x 等价的所有元素，并返回被删除的元素个数</li>
</ul>
</li>
<li><u>可以直接使用<code>[]</code>操作尚未添加的键的值，这样会导致这个键对应的值<strong>先被初始化位默认值</strong>（比如int的0），然后再进行对应的操作</u></li>
</ul>
<h3 id="其他获得某个元素的方式"><a href="#其他获得某个元素的方式" class="headerlink" title="其他获得某个元素的方式"></a>其他获得某个元素的方式</h3><ul>
<li><code>find(key)</code>返回的是迭代器，不存在就指向的是尾后<h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历<code>map</code></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) </span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>随机获得容器中的第某个元素<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">unordered_set&lt;<span class="keyword">int</span>&gt; um;</span><br><span class="line"><span class="keyword">auto</span> it = um.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">advance</span>(it, <span class="built_in">rand</span>() % um.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">return</span> *it;</span><br></pre></td></tr></table></figure></li>
<li>注意此处不能直接it+数字，会出错，需要使用<code>advance</code>函数`<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2></li>
<li>使用<code>vector(对象值, 对象数量)</code>初始化vector的时候，会创建一个对象然后调用复制构造函数创建剩余的<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类似数组的初始化方法</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h3></li>
<li>逐个元素比较，都相同的时候看谁先没，没了的小</li>
<li>前提是容器存储的元素本身是可以比较大小的<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3></li>
<li>操作与指针类似</li>
<li>不支持递减，只能递增</li>
<li><code>vector.cbegin()</code>和<code>vector.cend()</code>是常量迭代器，不能修改其中的内容</li>
<li>任何可能改变vector元素<code>capacity</code>（容量）的操作都会使得迭代器失效，因为内存位置变了</li>
<li>迭代器可以像指针一样做差，得到的结果是相差的<strong>元素的个数</strong><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3></li>
<li>insert会返回插入的元素的迭代器</li>
<li>insert也可以用初始化列表的方式插入，只需指定位置和初始化列表即可</li>
<li>也可以给定插入位置，迭代器开始和迭代器结束实现同样功能<h3 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h3></li>
<li>删除某个迭代器指定位置的元素</li>
<li>删除某两个迭代器指定范围的元素（不包括最后一个迭代器指定的元素）</li>
<li>返回被删元素后的第一个元素<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3></li>
<li>清空<h3 id="resize-size-val"><a href="#resize-size-val" class="headerlink" title="resize(size, val)"></a>resize(size, val)</h3></li>
<li>假如超出的话，截断后面的元素</li>
<li>假如没超出的话，用val填充多出来的<h3 id="emplace-back"><a href="#emplace-back" class="headerlink" title="emplace_back"></a>emplace_back</h3></li>
<li>可以给定参数调用容器存储的类型的构造函数构造对象插入<h3 id="back-函数"><a href="#back-函数" class="headerlink" title="back()函数"></a>back()函数</h3></li>
<li>返回的是尾元素的引用<h3 id="front-函数"><a href="#front-函数" class="headerlink" title="front()函数"></a>front()函数</h3></li>
<li>返回的是首元素的引用<h3 id="at-n-函数"><a href="#at-n-函数" class="headerlink" title="at(n)函数"></a>at(n)函数</h3></li>
<li>返回的是下标为n元素的引用</li>
</ul>
<h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><ul>
<li><strong>提取一个数字最右侧为1的位</strong>：<code>i &amp; (~i + 1)</code></li>
</ul>
<h3 id="cpp如何初始化一个类的静态数据成员"><a href="#cpp如何初始化一个类的静态数据成员" class="headerlink" title="cpp如何初始化一个类的静态数据成员"></a>cpp如何初始化一个类的静态数据成员</h3><ul>
<li>类似于初始化全局变量<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> myStaticVar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyClass::myStaticVar = <span class="number">0</span>; <span class="comment">// 初始化静态成员</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>注意在一个文件中定义的类静态变量在其他文件中使用的时候需要先用<code>extern</code>声明<h2 id="string的一些用法"><a href="#string的一些用法" class="headerlink" title="string的一些用法"></a>string的一些用法</h2><h3 id="其他的初始化方法"><a href="#其他的初始化方法" class="headerlink" title="其他的初始化方法"></a>其他的初始化方法</h3></li>
<li><code>string(&lt;char array&gt;, i)</code>从字符数组中拷贝i个字符</li>
<li><code>string(s, pos)</code>s从pos开始的字符的拷贝</li>
<li><code>string(s, pos, len)</code>s从pos开始长度为len的字符串<h3 id="初始化某个重复多次的字符"><a href="#初始化某个重复多次的字符" class="headerlink" title="初始化某个重复多次的字符"></a>初始化某个重复多次的字符</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="整数或者小数转换为字符串"><a href="#整数或者小数转换为字符串" class="headerlink" title="整数或者小数转换为字符串"></a>整数或者小数转换为字符串</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="built_in">to_string</span>(&lt;<span class="keyword">int</span> <span class="keyword">or</span> <span class="keyword">double</span>&gt;);</span><br></pre></td></tr></table></figure>
<h3 id="字符串转化为整数或小数"><a href="#字符串转化为整数或小数" class="headerlink" title="字符串转化为整数或小数"></a>字符串转化为整数或小数</h3><table>
<thead>
<tr>
<th>函数</th>
<th align="left">转化方式</th>
</tr>
</thead>
<tbody><tr>
<td>stoi(s,p,b)</td>
<td align="left">把字符串s从p开始转换成b进制的int</td>
</tr>
<tr>
<td>stol(s,p,b)</td>
<td align="left">把字符串s从p开始转换成b进制的long</td>
</tr>
<tr>
<td>stoul(s,p,b)</td>
<td align="left">把字符串s从p开始转换成b进制的unsigned long</td>
</tr>
<tr>
<td>stoll(s,p,b)</td>
<td align="left">把字符串s从p开始转换成b进制的long long</td>
</tr>
<tr>
<td>stoull(s,p,b)</td>
<td align="left">把字符串s从p开始转换成b进制的unsigned long long</td>
</tr>
<tr>
<td>stof(s,p)</td>
<td align="left">把字符串s从p开始转换成float</td>
</tr>
<tr>
<td>stod(s,p)</td>
<td align="left">把字符串s从p开始转换成double</td>
</tr>
<tr>
<td>stold(s,p)</td>
<td align="left">把字符串s从p开始转换成long double</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="取子串"><a href="#取子串" class="headerlink" title="取子串"></a>取子串</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string.<span class="built_in">substr</span>(startPos, length);</span><br><span class="line">string.<span class="built_in">substr</span>(startPos);<span class="comment">// 取到结束</span></span><br></pre></td></tr></table></figure>
<h3 id="删除特定位置的字符（串）"><a href="#删除特定位置的字符（串）" class="headerlink" title="删除特定位置的字符（串）"></a>删除特定位置的字符（串）</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string.<span class="built_in">erase</span>(startIndex, length);</span><br></pre></td></tr></table></figure>
<h3 id="在特定位置插入字符"><a href="#在特定位置插入字符" class="headerlink" title="在特定位置插入字符"></a>在特定位置插入字符</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string.<span class="built_in">insert</span>(index, &lt;个数&gt;, &lt;字符&gt;);</span><br><span class="line">string.<span class="built_in">insert</span>(index, &lt;string&gt;);</span><br><span class="line">string.<span class="built_in">insert</span>(index, &lt;string&gt;, begin, len);<span class="comment">// 可以选取部分字符串</span></span><br></pre></td></tr></table></figure>
<h3 id="寻找字符串位置"><a href="#寻找字符串位置" class="headerlink" title="寻找字符串位置"></a>寻找字符串位置</h3><ul>
<li><code>find(s, index)</code>函数。从pos开始查找字符或者字符串在哪，返回第一次出现的下标(index默认是0，可以不给)</li>
<li>没找到的话会返回一个<code>string::npos</code><h3 id="插入字符串"><a href="#插入字符串" class="headerlink" title="插入字符串"></a>插入字符串</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string.<span class="built_in">insert</span>(index, string);</span><br></pre></td></tr></table></figure>
<h3 id="字符串字面量不支持直接相加，必须有至少一个string类型的量才行"><a href="#字符串字面量不支持直接相加，必须有至少一个string类型的量才行" class="headerlink" title="字符串字面量不支持直接相加，必须有至少一个string类型的量才行"></a>字符串字面量不支持直接相加，必须有至少一个string类型的量才行</h3></li>
</ul>
<h2 id="lower-bound函数"><a href="#lower-bound函数" class="headerlink" title="lower_bound函数"></a>lower_bound函数</h2><ul>
<li><code>lower_bound</code>函数在一个有序的序列中查找不小于给定值的最小值</li>
<li>底层是二分查找</li>
<li>如果没找到，会返回数组尾迭代器<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; row: matrix) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(row.<span class="built_in">begin</span>(), row.<span class="built_in">end</span>(), target);</span><br><span class="line">            <span class="keyword">if</span> (it != row.<span class="built_in">end</span>() &amp;&amp; *it == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C++复习和Qt（一）</title>
    <url>/2022/01/13/Cpp%E5%A4%8D%E4%B9%A0%E5%92%8CQt%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="C-复习和Qt（Ubuntu）"><a href="#C-复习和Qt（Ubuntu）" class="headerlink" title="C++复习和Qt（Ubuntu）"></a>C++复习和Qt（Ubuntu）</h1><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><ul>
<li>命名空间的定义</li>
<li><code>namespace Ui &#123; class MainWindow; class myThread;&#125;</code></li>
<li>一个命名空间的定义包含两部分：首先是关键字namespace，随后是命名空间的名字。</li>
<li>在命名空间名字后面是<strong>一系列由花括号括起来的声明和定义</strong>。</li>
<li>只要能出现在全局作用域中的声明就能置于命名空间内，主要包括：类、变量(及其初始化操作)、函数(及其定义)、模板和其它命名空间。</li>
<li>命名空间<strong>结束后无须分号</strong>，这一点与块类似。</li>
</ul>
<p><strong>假如在一个类中使用在之后定义的类的对象或者其他内容的话，先在这个类之前使用<code>class &lt;被使用的类名&gt;;</code>声明一下类</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;</span><span class="class"><span class="keyword">class</span> <span class="title">name</span>&gt;</span> : &lt;访问权限修饰符&gt; &lt;super <span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	&lt;函数定义&gt;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	&lt;函数定义&gt;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	&lt;函数定义&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不写权限默认private</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul>
<li>构造函数必须与类名同名；</li>
<li>可以重载，（重载？新概念，后面学到什么是重载。）；</li>
<li>没有返回类型，即使是 void 也不行。</li>
</ul>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><ul>
<li>析构函数的格式为~类名()；</li>
<li>调用时释放内存（资源）；</li>
<li>~类名()不能加参数；</li>
<li>没有返回值，即使是 void 也不行。</li>
</ul>
<h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><ul>
<li>this 指针记录对象的内存地址</li>
<li>this 只能在<strong>成员函数中使用，全局函数、静态函数</strong>都不能使用 this。实际上，<strong>成员函数 默认第一个参数为 T * const this</strong>。也就是一个类里面的成员了函数 int func(int p)，func 的原 型<strong>在编译器看来应该是 int func(T * const this,int p)。</strong></li>
<li>this 在成员函数的开始前构造，在成员函数的结束后清除。</li>
<li>this 指针会因编译器不同而有不同的放置位置。可能是栈，也可能是寄存器，甚至全 局变量。</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;class name&gt; : &lt;访问权限修饰符&gt; &lt;super class&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>公有继承（public）：当一个类派生继承公有基类时，基类的公有成员也是派生类的公有成 员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问，但 是可以通过调用基类的公有和保护成员来访问。</li>
<li>保护继承（protected）： 当一个类派生继承保护基类时，基类的公有和保护成员将成为派 生类的保护成员。</li>
<li>私有继承（private）：当一个类派生继承私有基类时，基类的公有和保护成员将成为派生类 的私有成员。</li>
</ul>
<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><ul>
<li>运算符重载的实质就是函数重载或函数多态。运算符重载是一种形式的 C++多态。目的在 于让人能够用同名的函数来完成不同的基本操作。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;返回类型说明符&gt; <span class="keyword">operator</span> &lt;运算符符号&gt;(&lt;参数表&gt;)</span><br><span class="line">&#123;</span><br><span class="line">	&lt;函数体&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可重载的函数<ul>
<li><img src="/imgs/image-20220114000140555.png" alt="image-20220114000140555"></li>
<li><img src="/imgs/image-20220114000156524.png" alt="image-20220114000156524"></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#比如有一个dog类，具有一个属性是体重weight</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	...</span><br><span class="line">    Dog <span class="keyword">operator</span>+(<span class="keyword">const</span> Dog &amp;d)</span><br><span class="line">    &#123;</span><br><span class="line">        Dog dog;</span><br><span class="line">        dog.weight = <span class="keyword">this</span>-&gt;weight+d.weight;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意传入的参数是引用传递</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li><p>C++多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数</p>
</li>
<li><p>也就是说用<strong>基类的指针调用子类的对象</strong>的时候，会<strong>根据子类的具体类型进行具体的函数的选择</strong></p>
</li>
<li><p><strong>虚函数是 C++中用于实现多态(polymorphism)的机制。核心理念就是通过基类访 问派生类定义的函数</strong></p>
</li>
<li><p>多态的条件</p>
<ul>
<li>必须存在继承关系；</li>
<li>继承关系必须有<strong>同名虚函数</strong>（其中虚函数是在基类中使用关键字 virtual 声明的函数，<strong>在派 生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数</strong>）；</li>
<li>存在基<strong>类类型的指针或者引用</strong>，通过该指针或引用调用虚函数。</li>
</ul>
</li>
</ul>
<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><ul>
<li>我们想要的是在程序中任意点可以根据所调用的对象类 型来选择调用的函数，这种操作被称为动态链接，或后期绑定。</li>
<li><code>virtual  ReturnType FunctionName(Parameter)</code></li>
</ul>
<h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><ul>
<li>若在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基 类中又不能对虚函数给出有意义的实现，这个时候就会用到纯虚函数。</li>
<li><code>virtual void funtion1()=0</code></li>
</ul>
<h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><ul>
<li><p>数据封装是一种把数据和操作数据的函数捆绑在一起的机制，数据抽象是一种仅向用户暴 露接口而把具体的实现细节隐藏起来的机制，C++ 通过创建类来支持封装和数据隐藏（public、 protected、private）。</p>
</li>
<li><p>简而言之就是不直接将变量暴露在用户的访问权限下而设置一个专门的函数处理用户对于变量的访问</p>
</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>如 果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类</li>
<li>设计抽象类（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。 抽象类不能被用于实例化对象，它只能作为接口使用。如果试图实例化一个抽象类的对象，会 导致编译错误。</li>
<li>如果一个 ABC 的子类需要被实例化，则<strong>必须实现每个虚函数</strong>，这也意味着 C++ 支 持使用 ABC 声明接口。如果没有在派生类中重写纯虚函数，就尝试实例化该类的对象，会导 致编译错误。可用于实例化对象的类被称为具体类。</li>
</ul>
<h2 id="Linux下安装Qt"><a href="#Linux下安装Qt" class="headerlink" title="Linux下安装Qt"></a>Linux下安装Qt</h2><ul>
<li><p><a href="https://download.qt.io/archive/qt/5.12/5.12.9/">https://download.qt.io/archive/qt/5.12/5.12.9/</a></p>
</li>
<li><p><img src="/_posts/image-20220114004101649.png" alt="image-20220114004101649"></p>
</li>
<li><p>然后shell基于执行权限（x)然后运行即可</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x qt-opensource-linux-x64-5.12.9.run</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./qt-opensource-linux-x64-5.12.9.run</span><br></pre></td></tr></table></figure>

<ul>
<li>安装开始会要求登录，登录之后选择安装的内容</li>
<li><img src="/_posts/image-20220114004230454.png" alt="image-20220114004230454"></li>
</ul>
<h2 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h2><ul>
<li>信号（Signal）就是在特定情况下被发射的事件，例如 PushButton 最常见的信号就是鼠标 单击时发射的 clicked() 信号，一个 ComboBox 最常见的信号是选择的列表项变化时发射的 CurrentIndexChanged() 信号。</li>
<li>槽（Slot）就是对信号响应的函数。槽就是一个函数，与一般的 C++函数是一样的，可以 定义在类的任何部分（public、private 或 protected），可以具有任何参数，也可以被直接调用。 槽函数与一般的函数不同的是：槽函数可以与一个信号关联，当信号被发射时，关联的槽函数 被自动执行。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QObject::connect(sender, SIGNAL(signal()), receiver, SLOT(slot()));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中，sender 是发射信号的对象的名称，signal() 是信号名称。信号可以看做是特殊的函 数，需要带括号，有参数时还需要指明参数。receiver 是接收信号的对象名称，slot() 是槽函数 的名称，需要带括号，有参数时还需要指明参数。</p>
</li>
<li><p>使用例</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">QObject::connect(pushButton, SIGNAL(clicked()), MainWindow, SLOT(close()));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中的pishButton是动作的发出者，MainWindow是信号的接收者</p>
</li>
<li><p>一个信号可以连接<strong>多个槽</strong></p>
</li>
<li><p>多个信号也可以链接同一个槽</p>
</li>
<li><p>一个信号可以连接另外一个信号</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect(pushButton, SIGNAL(objectNameChanged(QString)),this, SIGNAL(windowTitelChanged(QString)));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当<strong>一个信号发射时，也会发射另外一个信号</strong>，实现某些特殊的功能。</p>
</li>
<li><p>断开连接使用<code>disconnect()</code>，此处略</p>
</li>
</ul>
<h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><ul>
<li>信号只需要声明，无需定义</li>
<li>信号需要在<code>signals</code>里面进行声明</li>
<li><img src="/imgs/image-20220114201719988.png" alt="image-20220114201719988"></li>
</ul>
<h3 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h3><ul>
<li><p>创建槽的方法也很简单，也是直接在 mianwindow.h 里直接声明槽，在 mianwindow.cpp 里 实现槽的定义，声明槽<strong>必须写槽的定义(定义指函数体的实现)，否则编译器编译时将会报错</strong>。</p>
</li>
<li><p>槽可以是任何成员函数、普通全局函数、静态函数</p>
</li>
<li><p><strong><u>槽函数和信号</u>的参数和返回值要一致</strong></p>
</li>
<li><p><img src="/imgs/image-20220114201840110.png" alt="image-20220114201840110"></p>
</li>
</ul>
<p><strong>举例</strong></p>
<ul>
<li>mainwindow.h</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushBtnTxtChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeBtnTxt</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushBtnClicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPushButton *pushBtn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>mainwindow.cpp</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">resize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    pushBtn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    pushBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;I am a Button&quot;</span>);</span><br><span class="line">    <span class="built_in">connect</span>(pushBtn, <span class="built_in">SIGNAL</span>(<span class="built_in">clicked</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">pushBtnClicked</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>, <span class="built_in">SIGNAL</span>(<span class="built_in">pushBtnTxtChanged</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">changeBtnTxt</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> pushBtn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MainWindow:: <span class="built_in">pushBtnClicked</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">emit <span class="title">pushBtnTxtChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::changeBtnTxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pushBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;clicked!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>上面的代码中实现了自定义一个信号<code>pushBtnTxtchanged()</code>，将其通过自定义的槽函数<code>pushBtnClicked()</code>emit出来，然后连接到<code>changeBtnTxt()</code>函数上。通过将自定义的槽函数<code>pushBtnClicked()</code>连接到按钮自带的<code>clicked()</code>信号上，实现按下之后修改按键文字的功能。</p>
</li>
<li><p><img src="/imgs/image-20220114203037162.png" alt="image-20220114203037162"></p>
</li>
<li><p><img src="/imgs/image-20220114203057405.png" alt="image-20220114203057405"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C标准IO函数使用笔记</title>
    <url>/2022/01/12/C%E6%A0%87%E5%87%86IO%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="C标准IO函数使用笔记"><a href="#C标准IO函数使用笔记" class="headerlink" title="C标准IO函数使用笔记"></a>C标准IO函数使用笔记</h1><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><ul>
<li><p><img src="/imgs/image-20220112223547788.png" alt="image-20220112223547788"></p>
</li>
<li><p>上面的函数实现了将一个每个单元大小为4个byte的浮点数存储在文件中，并且再原样读取回来的功能。</p>
</li>
<li><p>写文件和读文件的参数分别是单个单元的大小为4字节，总长度为5.下面看结果</p>
</li>
<li><p><img src="/imgs/image-20220112223727041.png" alt="image-20220112223727041"></p>
</li>
<li><p>测试可知，文件读写函数用的是同一个文件偏移量，也就是随着文件的写入而顺次增加的偏移量，假如文件读取之前不将偏移量移动回初始位置的话，会什么也读不出来</p>
</li>
<li><p><strong>可见sizeof()函数读取数组的时候，读取的是数组的总空间大小而不是数组的元素个数。图上数组的读取结果是20，也就是5*4</strong></p>
</li>
<li><p>同时还可以推测文件写入模式<code>r+</code>的默认起始位置是0</p>
</li>
<li><p>在上述函数中的<code>fwrite</code>后面添加一个<code>ftell()</code>显示偏移量，可见<img src="/imgs/image-20220112224257063.png" alt="image-20220112224257063">fwrite函数执行完毕的时候文件的偏移量自动增加到了20字节处</p>
</li>
</ul>
<h2 id="格式化文本函数的格式控制字符串"><a href="#格式化文本函数的格式控制字符串" class="headerlink" title="格式化文本函数的格式控制字符串"></a>格式化文本函数的格式控制字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%[flags][width][.precision][length]type</span><br></pre></td></tr></table></figure>

<ul>
<li><p>flags：标志，可包含 0 个或多个标志； </p>
</li>
<li><p>width：输出最小宽度，表示转换后输出字符串的最小宽度； </p>
</li>
<li><p>precision：精度，前面有一个点号” . “； </p>
</li>
<li><p>length：长度修饰符； </p>
</li>
<li><p>type：转换类型，指定待转换数据的类型。</p>
</li>
<li><p>type:</p>
<ul>
<li><img src="/imgs/image-20220112225548985.png" alt="image-20220112225548985"></li>
<li><img src="/imgs/image-20220112225613496-16419994522663.png" alt="image-20220112225613496"></li>
</ul>
</li>
<li><p>flags</p>
<ul>
<li><img src="/imgs/image-20220112225757743.png" alt="image-20220112225757743"></li>
<li><img src="/imgs/image-20220112230005582.png" alt="image-20220112230005582"></li>
</ul>
</li>
<li><p>width</p>
<ul>
<li>最小的输出宽度，用十进制数来表示输出的最小位数<strong>，若实际的输出位数大于指定的输出的最小位数， 则以实际的位数进行输出，若实际的位数小于指定输出的最小位数，则可按照指定的 flags 标志补 0 或补空 格。</strong></li>
<li><img src="/imgs/image-20220113000901462.png" alt="image-20220113000901462"></li>
</ul>
</li>
<li><p>precision 精度</p>
<ul>
<li>精度字段<strong>以点号” . “开头，后跟一个十进制正数</strong></li>
<li><img src="/imgs/image-20220113000935320.png" alt="image-20220113000935320"></li>
<li><img src="/imgs/image-20220113001001277.png" alt="image-20220113001001277"></li>
</ul>
</li>
<li><p>length</p>
<ul>
<li>长度修饰符指明待转换数据的长度，因为 <strong>type 字段指定的的类型只有 int、unsigned int 以及 double</strong> 等 几种数据类型，<strong>但是 C 语言内置的数据类型不止这几种，譬如有 16bit 的 short、unsigned short，8bit 的 char、 unsigned char，也有 64bit 的 long long 等</strong>，为了能够区别不同长度的数据类型，于是乎，长度修饰符（length） 应运而生，成为转换说明的一部分。</li>
<li><img src="/../../blogsPage/source/imgs/image-20220113001057843.png" alt="image-20220113001057843"></li>
</ul>
</li>
</ul>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(&quot;%hd\n&quot;, 12345); //将数据以 short int 类型进行转换</span><br><span class="line">printf(&quot;%ld\n&quot;, 12345); //将数据以 long int 类型进行转换</span><br><span class="line">printf(&quot;%lld\n&quot;, 12345); //将数据以 long long int 类型进行转换</span><br></pre></td></tr></table></figure>

<h2 id="格式化输入"><a href="#格式化输入" class="headerlink" title="格式化输入"></a>格式化输入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以看到，这 3 个格式化输入函数也是可变参函数，它们都有一个共同的参数 format，同样也称为格式 控制字符串，用于指定输入数据如何进行格式转换，与格式化输出函数中的 format 参数格式相似，但也有 所不同。 </p>
</li>
<li><p>每个函数除了固定参数之外，还可携带 0 个或多个可变参数。 </p>
</li>
<li><p>scanf()函数可将用户输入（标准输入）的数据进行格式化转换；fscanf()函数从 FILE 指针指定文件中读 取数据，并将数据进行格式化转换；sscanf()函数从参数 str 所指向的字符串中读取数据，并将数据进行格式 化转换。</p>
</li>
</ul>
<h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br></pre></td></tr></table></figure>

<ul>
<li>函数调用成功后，将返回成功匹配和分配的输入项的数量；如果较早匹配失败，则该数目可能小于所提 供的数目，甚至为零。发生错误则返回负值。</li>
</ul>
<h3 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf"></a>fscanf</h3><ul>
<li>注意，该函数的第一个参数可以是标准输入流，此时它的作用与scanf相同</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br></pre></td></tr></table></figure>

<ul>
<li>函数调用成功后，将返回成功匹配和分配的输入项的数量；如果较早匹配失败，则该数目可能小于所提供的数目，甚至为零。发生错误则返回负值。</li>
</ul>
<h3 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *str = <span class="string">&quot;5454 hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">&quot;%d %s&quot;</span>, &amp;a, buf);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>函数调用成功后，将返回成功匹配和分配的输入项的数量；如果较早匹配失败，则该数目可能小于所提 供的数目，甚至为零。发生错误则返回负值。</li>
</ul>
<h3 id="格式控制字符串"><a href="#格式控制字符串" class="headerlink" title="格式控制字符串"></a>格式控制字符串</h3><ul>
<li>本小节的重点依然是这个 format 参数的格式，与格式化输出函数中的 format 参数格式、写法上比较相 似，但也有一些区别。format 字符串包含一个或多个转换说明，每一个转换说明都是以百分号”%”或者”%n$” 开头（n 是一个十进制数字），关于”%n$”这种开头的转换说明就不介绍了，实际上用的不多。</li>
<li>以%百分号开头的转换说明一般格式如下(<code>[]</code>部分是可选的参数)</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%[*][width][length]type</span><br><span class="line">%[m][width][length]type</span><br></pre></td></tr></table></figure>

<ul>
<li>%后面可选择性添加<strong>星号</strong><code>*</code>或**字母 <code>m</code>**，如果添加了星号<code>*</code>，格式化输入函数会按照转换说明的指示读取输 入，但是丢弃输入，意味着不需要对转换后的结果进行存储，所以也就不需要提供相应的指针参数。</li>
<li>如果添加了 m，它只能与%s、%c 以及%[一起使用，调用者无需分配相应的缓冲区来保存格式转换后的 数据，原因在于添加了 m，这些格式化输入函数内部会自动分配足够大小的缓冲区，并将缓冲区的地址值通 过与该格式转换相对应的指针参数返回出来，该指针参数应该是指向 char *变量的指针。随后，当不再需要 此缓冲区时，调用者应调用 free()函数来释放此缓冲区。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *buf;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ms&quot;</span>, &amp;buf);</span><br><span class="line">......</span><br><span class="line"><span class="built_in">free</span>(buf);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>width：最大字符宽度；</p>
</li>
<li><p>length：长度修饰符，与格式化输出函数的 format 参数中的 length 字段意义相同。</p>
</li>
<li><p>type：指定输入数据的类型。</p>
</li>
<li><p><strong>type</strong></p>
<ul>
<li><img src="/imgs/image-20220113130730315.png" alt="image-20220113130730315"></li>
<li><img src="/imgs/image-20220113130752642.png" alt="image-20220113130752641"></li>
</ul>
</li>
<li><p><strong>width</strong>最大字符长度限制。</p>
<ul>
<li>是一个十进制表示的整数，用于指定最大字符宽度，当达到此最大值或发现不匹配的字符时（以先发生 者为准），字符的读取将停止。大多数 type 类型会丢弃初始的空白字符，并且这些丢弃的字符不会计入最 大字符宽度。对于字符串转换来说，scanf()会在字符串末尾自动添加终止符”\0”，最大字符宽度中不包括此 终止符。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%4s&quot;</span>, buf); <span class="comment">//匹配字符串，字符串长度不超过 4 个字符</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此时输入“abcdef”，存储的是“abcd”</li>
<li><strong>length</strong>数据长度修饰符<ul>
<li><img src="/imgs/image-20220113131301042.png" alt="image-20220113131301042"></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%hd&quot;</span>, var); <span class="comment">//匹配 short int 类型数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%hhd&quot;</span>, var); <span class="comment">//匹配 signed char 类型数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, var); <span class="comment">//匹配 long int 类型数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, var); <span class="comment">//匹配 float 类型数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, var); <span class="comment">//匹配 double 类型数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%Lf&quot;</span>, var); <span class="comment">//匹配 long double 类型数据</span></span><br></pre></td></tr></table></figure>

<p>使用例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> inputBuf;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*10[A-Za-z]%f&quot;</span>, &amp;inputBuf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%03.4f&quot;</span>, inputBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意<code>[]</code>里面的内容的写法，比如想一次性收取所有字母，<strong>使用<code>[A-Za-z]</code>，连续写即可，数字写0-9，同</strong></li>
<li>控制台测试输入</li>
<li><img src="/imgs/image-20220113132156094.png" alt="image-20220113132156094"></li>
<li>都能够正确接收到0.01，说明成功识别到了hello并且将其丢弃（因为指定了<code>*</code>符号）</li>
</ul>
<h2 id="I-O缓冲"><a href="#I-O缓冲" class="headerlink" title="I/O缓冲"></a>I/O缓冲</h2><p>略，详见原子教程《I.MX6U嵌入式Linux C应用编程指南》</p>
<ul>
<li>标准 I/O 所维护的 stdio 缓冲是用户空间 的缓冲区，当<u>应用程序中通过标准 I/O 操作磁盘文件时</u>，为了减少调用系统调用的次数，标准 I/O 函数会<u>将 用户写入或读取文件的数据缓存在 stdio 缓冲区</u>，然后<strong>再一次性</strong>将 stdio 缓冲区中缓存的数据通过调用系统 调用 I/O（文件 I/O）<u>写入到文件 I/O 内核缓冲区或者拷贝到应用程序的 buf</u> 中。</li>
<li>通过这样的优化操作，当操作磁盘文件时，在用户空间缓存大块数据以减少调用系统调用的次数，使得 效率、性能得到优化。使用标准 I/O 可以使编程者免于自行处理对数据的缓冲，无论是调用 write()写入数 据、还是调用 read()读取数据。</li>
<li>直接 I/O 方式效率、性能比较低，绝大部分应用程序不会使用直接 I/O 方式对文件进行 I/O 操作，通常 只在一些特殊的应用场合下才可能会使用，那我们<u>可以使用直接 I/O 方式来测试磁盘设备的读写速率</u>，这种 测试方式相比普通 I/O 方式就会更加准确。</li>
</ul>
<h2 id="文件描述符和FILE指针的转化"><a href="#文件描述符和FILE指针的转化" class="headerlink" title="文件描述符和FILE指针的转化"></a>文件描述符和FILE指针的转化</h2><ul>
<li>在应用程序中，在同一个文件上执行 I/O 操作时，还可以<strong>将文件 I/O（系统调用 I/O）与标准 I/O 混合使 用</strong>，这个时候我们就需要将文件描述符和 FILE 指针对象之间进行转换，此时可以借助于库函数 <code>fdopen()</code>、 <code>fileno()</code>来完成。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fileno</span><span class="params">(FILE *stream)</span></span>;</span><br><span class="line"><span class="function">FILE *<span class="title">fdopen</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对于 fileno()函数来说，根据传入的 FILE 指针得到整数文件描述符，<strong>通过返回值得到文件描述符</strong>，如果 转换<strong>错误将返回-1</strong>，并且会设置 errno 来指示错误原因。得到文件描述符之后，便可以使用诸如 read()、write()、 lseek()、fcntl()等文件 I/O 方式操作文件。</p>
</li>
<li><p>fdopen()函数与 fileno()功能相反，给定一个文件描述符，<strong>得到该文件对应的 FILE 指针</strong>，之后便可以使 用诸如 fread()、fwrite()等标准 I/O 方式操作文件了。参数 mode 与 fopen()函数中的 mode 参数含义相同如下表，<strong>若该参数与文件描述符 fd 的访问模式<u>不一致</u>，则会导致调用 fdopen()失败。</strong></p>
<ul>
<li><img src="/image-20220113163201525.png" alt="image-20220113163201525"></li>
<li><img src="/image-20220113163221211.png" alt="image-20220113163221211"></li>
</ul>
</li>
</ul>
<h3 id="混用两种IO函数的时候的缓冲区问题"><a href="#混用两种IO函数的时候的缓冲区问题" class="headerlink" title="混用两种IO函数的时候的缓冲区问题"></a>混用两种IO函数的时候的缓冲区问题</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;print&quot;</span>);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;write\n&quot;</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当混合使用文件 I/O 和标准 I/O 时，需要特别注意缓冲的问题，<strong>文件 I/O 会直接将数据写入到内核缓冲 区进行高速缓存</strong>，而<strong>标准 I/O 则会将数据写入到 stdio 缓冲区，之后再调用 write()将 stdio 缓冲区中的数据写 入到内核缓冲区</strong>。</p>
</li>
<li><p>执行结果你会发现，<strong>先输出了”write”字符串信息，接着再输出了”print”字符串信息</strong></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C语言使用并行执行的for循环</title>
    <url>/2022/06/22/C%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C%E7%9A%84for%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="C语言使用并行执行的for循环"><a href="#C语言使用并行执行的for循环" class="headerlink" title="C语言使用并行执行的for循环"></a>C语言使用并行执行的for循环</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g++ test111.cpp -o paraCpp111 -fopenmp</span><br></pre></td></tr></table></figure>

<ul>
<li>注意要添加<code>-fopenmp</code>选项</li>
</ul>
<h2 id="设置线程数量"><a href="#设置线程数量" class="headerlink" title="设置线程数量"></a>设置线程数量</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">omp_set_num_threads(<span class="number">2</span>); <span class="comment">//参数为线程的数量</span></span><br></pre></td></tr></table></figure>

<h2 id="使用parallel的for循环"><a href="#使用parallel的for循环" class="headerlink" title="使用parallel的for循环"></a>使用parallel的for循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意<code>#pragma omp parallel for</code>这句必须和for循环<strong>紧邻</strong>，中间不能有其他语句，否则会出错</li>
</ul>
<h2 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h2><p>不进行线程设置和线程设置为2的效果对比：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1线程\n&quot;</span>);</span><br><span class="line">    before = clock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    timePeriod = clock()-before;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;timePeriod&lt;&lt;<span class="string">&#x27;!&#x27;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2线程\n&quot;</span>);</span><br><span class="line"><span class="comment">// 此处设置了2线程</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    omp_set_num_threads(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    before = clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    timePeriod = clock()-before;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;timePeriod&lt;&lt;<span class="string">&#x27;!&#x27;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>

<p>输出对比：</p>
<ul>
<li><p><img src="/imgs/image-20220622153605823.png" alt="image-20220622153605823"></p>
</li>
<li><p>注意到没有开启并行for循环的输出是按照顺序的，开启的输出是乱序的</p>
</li>
<li><p>同时经过尝试发现，假如开启了并行for循环的输出但是<strong>指定线程为1</strong>的，输出<strong>仍然是乱序</strong>的，暂时还不清楚原因</p>
</li>
</ul>
<p>对比大量计算和多组计算：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1e8</span>;</span><br><span class="line">    <span class="keyword">int</span> before, timePeriod;</span><br><span class="line">    <span class="keyword">int</span> array1[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> array2[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> array4[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> array8[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">0</span>;count&lt;<span class="number">100</span>;++count)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// printf(&quot;1线程\n&quot;);</span></span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>()-before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// printf(&quot;2线程\n&quot;);</span></span><br><span class="line">        array1[count] = timePeriod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// printf(&quot;2线程\n&quot;);</span></span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>()-before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// printf(&quot;4线程\n&quot;);</span></span><br><span class="line">        array2[count] = timePeriod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    </span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>()-before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// printf(&quot;8线程\n&quot;);</span></span><br><span class="line">        array4[count] = timePeriod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    </span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">8</span>);</span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>() - before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        array8[count] = timePeriod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ofstream out;</span><br><span class="line">    out.<span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array1[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array2[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array4[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array8[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    out.<span class="built_in">close</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;python3 showData.py&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中分别开启1、2、4、8线程，进行for循环的计算，对比所需时间（通过<code>clock()</code>进行测量），最后调用命令行脚本<code>system</code>，开启另外撰写的python脚本进行数据折线图的显示</p>
</li>
<li><p><img src="/imgs/image-20220622154102661.png" alt="image-20220622154102661"></p>
<ul>
<li>上图是分别开启1、2、4、8线程的计算结果</li>
</ul>
</li>
<li><p>对于代码进行简单修改，在<strong>1线程的时候取消对于parallel的使用</strong>，实验结果如下图</p>
</li>
<li><p><img src="/imgs/image-20220622154349763.png" alt="image-20220622154349763"></p>
<ul>
<li>可见结果在1线程的时候，某些情况下会占用很长的时间</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1e8</span>;</span><br><span class="line">    <span class="keyword">int</span> before, timePeriod;</span><br><span class="line">    <span class="keyword">int</span> array1[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> array2[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> array4[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> array8[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> count = <span class="number">0</span>;count&lt;<span class="number">100</span>;++count)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// #pragma omp parallel</span></span><br><span class="line"><span class="comment">//         omp_set_num_threads(1);</span></span><br><span class="line">        <span class="comment">// printf(&quot;1线程\n&quot;);</span></span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="comment">// #pragma omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>()-before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// printf(&quot;2线程\n&quot;);</span></span><br><span class="line">        array1[count] = timePeriod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// printf(&quot;2线程\n&quot;);</span></span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>()-before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// printf(&quot;4线程\n&quot;);</span></span><br><span class="line">        array2[count] = timePeriod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    </span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">4</span>);</span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>()-before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// printf(&quot;8线程\n&quot;);</span></span><br><span class="line">        array4[count] = timePeriod;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel</span></span><br><span class="line">    </span><br><span class="line">        <span class="built_in">omp_set_num_threads</span>(<span class="number">8</span>);</span><br><span class="line">        before = <span class="built_in">clock</span>();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;max;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        timePeriod = <span class="built_in">clock</span>() - before;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;timePeriod&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        array8[count] = timePeriod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ofstream out;</span><br><span class="line">    out.<span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array1[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array2[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array4[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt&lt;<span class="number">100</span>;++cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        out&lt;&lt;array8[cnt]&lt;&lt;<span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    out.<span class="built_in">close</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;python3 showData.py&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>C语言多个线程与客户端通信的服务器</title>
    <url>/2022/02/06/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E4%BF%A1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="C语言多个线程与客户端通信的服务器"><a href="#C语言多个线程与客户端通信的服务器" class="headerlink" title="C语言多个线程与客户端通信的服务器"></a>C语言多个线程与客户端通信的服务器</h1><ul>
<li>代码结构：将与客户端收发信息的部分单独取出放入新的线程中</li>
<li>捕获服务器收到的<code>Ctrl+c</code>信号（也就是<code>SIGINT</code>），将此信号绑定一个自定义的信号处理函数（为了防止程序被中断但是没有关闭socket描述符）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVERPORT 8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*linux上支持（Android上也支持）， 此函数不仅能获取IP，还可以获取MAC地址、掩码和广播地址等*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_local_ip_using_ifconf</span><span class="params">(<span class="keyword">char</span> *str_ip)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sock_fd, intrface;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">buf</span>[<span class="title">INET_ADDRSTRLEN</span>];</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ifconf</span> <span class="title">ifc</span>;</span></span><br><span class="line">	<span class="keyword">char</span> *local_ip = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> status = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ((sock_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ifc.ifc_len = <span class="keyword">sizeof</span>(buf);</span><br><span class="line">		ifc.ifc_buf = (<span class="keyword">caddr_t</span>)buf;</span><br><span class="line">		<span class="keyword">if</span> (!ioctl(sock_fd, SIOCGIFCONF, (<span class="keyword">char</span> *)&amp;ifc))</span><br><span class="line">		&#123;</span><br><span class="line">			intrface = ifc.ifc_len/<span class="keyword">sizeof</span>(struct ifreq);</span><br><span class="line">			<span class="keyword">while</span> (intrface-- &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (!(ioctl(sock_fd, SIOCGIFADDR, (<span class="keyword">char</span> *)&amp;buf[intrface])))</span><br><span class="line">				&#123;</span><br><span class="line">					local_ip = <span class="literal">NULL</span>;</span><br><span class="line">					local_ip = inet_ntoa(((struct sockaddr_in*)(&amp;buf[intrface].ifr_addr))-&gt;sin_addr);</span><br><span class="line">					<span class="keyword">if</span>(local_ip)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">strcpy</span>(str_ip, local_ip);</span><br><span class="line">						status = <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;127.0.0.1&quot;</span>, str_ip))</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		close(sock_fd);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">clientRoutine</span><span class="params">(<span class="keyword">void</span> * clientFd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* clientFdt = (<span class="keyword">int</span>*)clientFd;</span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 接收缓冲区清零</span></span><br><span class="line">        <span class="built_in">memset</span>(recvbuf, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(recvbuf));</span><br><span class="line">        <span class="comment">// 读数据</span></span><br><span class="line">        ret = recv(*clientFdt, recvbuf, <span class="keyword">sizeof</span>(recvbuf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt;= ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;client disconnected&quot;</span>);</span><br><span class="line">            close(*clientFdt);</span><br><span class="line">            pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将读取到的数据以字符串形式打印出来</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;from client: %s\n&quot;</span>, recvbuf);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(<span class="string">&quot;exit&quot;</span>, recvbuf, <span class="number">4</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;server exit...\n&quot;</span>);</span><br><span class="line">            close(*clientFdt);</span><br><span class="line">            pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SIGINTHandler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nServer stopping, already closed socket %d. \n&quot;</span>, sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ip_str[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">char</span> localIPBuf[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    signal(SIGINT, (<span class="keyword">sig_t</span>)SIGINTHandler);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 打开套接字，得到套接字描述符 */</span></span><br><span class="line">    sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; sockfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 将套接字与指定端口号进行绑定 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = htons(SERVERPORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">    get_local_ip_using_ifconf(buf);</span><br><span class="line">    <span class="built_in">puts</span>(buf);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    inet_ntop(AF_INET, &amp;(server_addr.sin_addr), localIPBuf, <span class="keyword">sizeof</span>(localIPBuf));</span><br><span class="line">    <span class="built_in">puts</span>(localIPBuf);</span><br><span class="line"></span><br><span class="line">    ret = bind(sockfd, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        close(sockfd);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 使服务器进入监听状态 */</span></span><br><span class="line">    ret = listen(sockfd, <span class="number">50</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        close(sockfd);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 阻塞等待客户端连接 */</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> clientTemp;</span><br><span class="line">        clientTemp = accept(sockfd, (struct sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; clientTemp)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line">            close(sockfd);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;有客户端接入...\n&quot;</span>);</span><br><span class="line">        inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, ip_str, <span class="keyword">sizeof</span>(ip_str));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;客户端主机的 IP 地址: %s\n&quot;</span>, ip_str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;客户端进程的端口号: %d\n&quot;</span>, client_addr.sin_port);</span><br><span class="line">        <span class="keyword">pthread_t</span> thTemp;</span><br><span class="line">        pthread_create(&amp;thTemp, <span class="literal">NULL</span>, clientRoutine, &amp;clientTemp);</span><br><span class="line">        <span class="comment">/* 接收客户端发送过来的数据 */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭套接字 */</span></span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>效果</li>
<li><img src="/imgs/image-20220206222037573.png" alt="image-20220206222037573"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C语言实现BP神经网络的推理以及反向传播</title>
    <url>/2022/08/07/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E6%8E%A8%E7%90%86%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/</url>
    <content><![CDATA[<h1 id="C语言实现BP神经网络的推理以及反向传播"><a href="#C语言实现BP神经网络的推理以及反向传播" class="headerlink" title="C语言实现BP神经网络的推理以及反向传播"></a>C语言实现BP神经网络的推理以及反向传播</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>头文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BPNETWORK_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BPNETWORK_H</span></span><br><span class="line"><span class="comment">//所需头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(x) Sigmoid(x)<span class="comment">//激活函数设定</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f_(x) Sigmoidf(x)<span class="comment">//导函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span>* ws;<span class="comment">//权重矩阵</span></span><br><span class="line">    <span class="keyword">double</span>* bs;<span class="comment">//偏置数组</span></span><br><span class="line">    <span class="keyword">double</span>* os;<span class="comment">//输出数组</span></span><br><span class="line">    <span class="keyword">double</span>* ss;<span class="comment">//误差(总误差关于加权和的偏导)</span></span><br><span class="line">&#125; Layer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> lns;<span class="comment">//层数</span></span><br><span class="line">    <span class="keyword">int</span>* ns;<span class="comment">//每层神经元的数量</span></span><br><span class="line">    <span class="keyword">double</span>* is;<span class="comment">//神经网络输入</span></span><br><span class="line">    <span class="keyword">double</span>* ts;<span class="comment">//理想输出</span></span><br><span class="line">    Layer* las;<span class="comment">//神经网络各个层(不包括输入层)</span></span><br><span class="line">    <span class="keyword">double</span> ln;<span class="comment">//学习率</span></span><br><span class="line">&#125;BPNetWork;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建神经网络</span></span><br><span class="line"><span class="function">BPNetWork* <span class="title">BPCreate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> len,<span class="keyword">double</span> ln)</span></span>;</span><br><span class="line"><span class="comment">//运行一次神经网络</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunOnce</span><span class="params">(BPNetWork* network)</span></span>;</span><br><span class="line"><span class="comment">//载入训练集</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadIn</span><span class="params">(BPNetWork* network, <span class="keyword">double</span>* input, <span class="keyword">double</span>* putout)</span></span>;</span><br><span class="line"><span class="comment">//反向传播一次(训练一次)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TrainOnce</span><span class="params">(BPNetWork* network)</span></span>;</span><br><span class="line"><span class="comment">//输出总误差</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ETotal</span><span class="params">(BPNetWork* network)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sigmoid激活函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sigmoid(x)  (1 / (1 + exp(-(x))))</span></span><br><span class="line"><span class="comment">//sigmoid激活函数的导函数（用反函数的形式表示）,输入为sigmoid输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sigmoidf(f)  ((f) * (1 - (f)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Tanh(x) ((2 / (1 + exp(-2 * (x))))-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Tanhf(f) ((1+(f))*(1-(f)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>.c文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;BPNetWork.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//神经网络的层数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS network-&gt;lns</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入层神经元的数量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INNS network-&gt;ns[0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入层的第a个输入</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INS(a) network-&gt;is[a-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第a个理想输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TAS(a) network-&gt;ts[a-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出层神经元的数量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTNS network-&gt;ns[LS-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第n层神经元的数量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NS(n) network-&gt;ns[n-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第n层第a个神经元的第p个权重</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WF(n,a,p) network-&gt;las[n-2].ws[(p-1)+(a-1)*NS(n-1)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第n层的第a个神经元的偏置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BF(n,a) network-&gt;las[n-2].bs[a-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第n层第a个神经元的输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OF(n,a) network-&gt;las[n-2].os[a-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第n层第a个神经元的误差</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF(n,a) network-&gt;las[n-2].ss[a-1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学习率</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LN network-&gt;ln</span></span><br><span class="line"></span><br><span class="line"><span class="function">BPNetWork* <span class="title">BPCreate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> len,<span class="keyword">double</span> ln)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BPNetWork* network = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BPNetWork));</span><br><span class="line">    network-&gt;lns = len;</span><br><span class="line">    network-&gt;ns = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    network-&gt;ln = ln;</span><br><span class="line">    <span class="built_in">memcpy</span>(network-&gt;ns, nums, len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// nums传入的是每层的神经元数目，将其拷贝到储存每层神经元数量的ns</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    network-&gt;is = <span class="built_in">malloc</span>(nums[<span class="number">0</span>] * <span class="keyword">sizeof</span>(<span class="keyword">double</span>)); <span class="comment">// 神经网络输入</span></span><br><span class="line">    network-&gt;las = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Layer) * (len - <span class="number">1</span>)); <span class="comment">// 神经网络各个层</span></span><br><span class="line">    network-&gt;ts = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * nums[len - <span class="number">1</span>]); <span class="comment">// 神经网络理想输出</span></span><br><span class="line">    srand(&amp;network);<span class="comment">//用networkd的内存地址做为随机数种子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; len - <span class="number">1</span>; p++) &#123;</span><br><span class="line">        <span class="keyword">int</span> lastnum = nums[p];<span class="comment">//上一层的神经元数量</span></span><br><span class="line">        <span class="keyword">int</span> num = nums[p + <span class="number">1</span>];<span class="comment">//当前层的神经元数量（从第二层开始）</span></span><br><span class="line">        network-&gt;las[p].bs = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * num); <span class="comment">//偏置数组</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        network-&gt;las[p].ws = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * num * lastnum); <span class="comment">//权重矩阵（大小是本层与上一层的节点数量的乘积）</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        network-&gt;las[p].os = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * num); <span class="comment">//输出数组</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        network-&gt;las[p].ss = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * num); <span class="comment">//误差</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pp = <span class="number">0</span>; pp &lt; num; pp++) &#123;</span><br><span class="line">            <span class="comment">//这里rand()/2.0的意思是把整数除整数转换为浮点数除整数</span></span><br><span class="line">            <span class="comment">//如果是整数除整数,输出则为带余的商</span></span><br><span class="line">            network-&gt;las[p].bs[pp] = rand() / <span class="number">2.0</span> / RAND_MAX; <span class="comment">//偏置矩阵初始化随机数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ppp = <span class="number">0</span>; ppp &lt; lastnum; ppp++) &#123;</span><br><span class="line">                network-&gt;las[p].ws[ppp + pp * lastnum] = rand() / <span class="number">2.0</span> / RAND_MAX; <span class="comment">//权重矩阵初始化随机数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> network;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunOnce</span><span class="params">(BPNetWork* network)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计算输入层到第二层</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= NS(<span class="number">2</span>); a++) &#123;</span><br><span class="line">        <span class="keyword">double</span> net = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span>* o = &amp;OF(<span class="number">2</span>,a);<span class="comment">// 第2层的输出值指针</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> aa = <span class="number">1</span>; aa &lt;= INNS; aa++) &#123;</span><br><span class="line">            <span class="comment">// 和是向量积</span></span><br><span class="line">            net += INS(aa) * WF(<span class="number">2</span>, a, aa);<span class="comment">//输入层的某个输入*第一个全连接层中相应的权重*第一个全连接层的神经元数值</span></span><br><span class="line">        &#125;</span><br><span class="line">        *o = f(net + BF(<span class="number">2</span>,a)); <span class="comment">//加偏置计算最终结果，然后乘激活函数，写入第二层的输出数组中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">2</span>; n &lt;= LS<span class="number">-1</span>; n++) &#123; <span class="comment">//LS是层数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= NS(n + <span class="number">1</span>); a++) &#123;<span class="comment">//NS是对应层神经元的数量，循环内容是针对下一层的每个神经元</span></span><br><span class="line">            <span class="keyword">double</span> net = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">double</span>* o = &amp;OF(n+<span class="number">1</span>,a);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> aa = <span class="number">1</span>; aa &lt;= NS(n); aa++) &#123; <span class="comment">// 计算向量积</span></span><br><span class="line">                <span class="keyword">double</span> oo = OF(n, aa); <span class="comment">// 上一层某个神经元的输出</span></span><br><span class="line">                <span class="keyword">double</span>* ww = &amp;WF(n + <span class="number">1</span>, a, aa); <span class="comment">// 第a个和第aa个的权重</span></span><br><span class="line">                net += oo * (*ww); <span class="comment">// 和是向量积</span></span><br><span class="line">            &#125;</span><br><span class="line">            *o = f(net + BF(n + <span class="number">1</span>, a));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TrainOnce</span><span class="params">(BPNetWork* network)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//计算输出层的误差函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= OUTNS; a++) &#123;</span><br><span class="line">        <span class="keyword">double</span>* s = &amp;SF(LS,a);<span class="comment">//获取第a个神经元的误差</span></span><br><span class="line">        <span class="keyword">double</span>* b = &amp;BF(LS, a);<span class="comment">//获取第a个神经元的偏置</span></span><br><span class="line">        <span class="keyword">double</span> o = OF(LS, a);<span class="comment">//获取第a个神经元的输出</span></span><br><span class="line">        *s = (<span class="number">2.0</span> / OUTNS) * (o - TAS(a))* f_(o); <span class="comment">// 2/输出层元素数量*（某个神经元的输出-该位置的理想输出）* 斜率</span></span><br><span class="line">        *b = *b - LN * (*s); <span class="comment">//更新偏置</span></span><br><span class="line">        <span class="comment">//更新权重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> aa = <span class="number">1</span>; aa &lt;=NS(LS<span class="number">-1</span>) ; aa++) &#123;</span><br><span class="line">            <span class="keyword">double</span>* w = &amp;WF(LS, a, aa); <span class="comment">// 获得最后一层权重矩阵的权重</span></span><br><span class="line">            *w = *w - LN * (*s) * OF(LS<span class="number">-1</span>, aa);  <span class="comment">// 权重减去  学习率*上面计算出的s*上一层该神经元的输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算隐藏层的误差</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = LS<span class="number">-1</span>; a &gt; <span class="number">2</span>; a--) &#123;</span><br><span class="line">        <span class="comment">//开始计算第a层每个神经元的误差</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= NS(a); n++) &#123;<span class="comment">//当前层</span></span><br><span class="line">            <span class="keyword">double</span>* s = &amp;SF(a, n);<span class="comment">//获取第a个神经元的误差</span></span><br><span class="line">            *s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">double</span>* b = &amp;BF(a, n);<span class="comment">//获取第a个神经元的偏置</span></span><br><span class="line">            <span class="keyword">double</span> o = OF(a, n);<span class="comment">//获取第a个神经元的输出</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> nn = <span class="number">1</span>; nn &lt;= NS(a+<span class="number">1</span>); nn++) &#123;<span class="comment">//下一层</span></span><br><span class="line">                <span class="keyword">double</span> lw = WF(a + <span class="number">1</span>, nn, n);<span class="comment">//获取下一层到当前神经元的权重</span></span><br><span class="line">                <span class="keyword">double</span> ls = SF(a + <span class="number">1</span>, nn);<span class="comment">//获取下一层第nn个神经元的误差</span></span><br><span class="line">                *s += ls * lw * f_(o); <span class="comment">// 权重*误差*激活函数斜率，和是向量积</span></span><br><span class="line">            &#125;</span><br><span class="line">            *b = *b - LN * (*s);<span class="comment">//更新偏置</span></span><br><span class="line">            <span class="comment">//更新权重</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> nn = <span class="number">1</span>; nn &lt;= NS(a - <span class="number">1</span>); nn++) &#123;<span class="comment">//上一层</span></span><br><span class="line">                <span class="keyword">double</span>* w = &amp;WF(a, n, nn); <span class="comment">// 更新上一层到这一层的权重矩阵</span></span><br><span class="line">                *w = *w - LN * (*s) *OF(a - <span class="number">1</span>, nn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算第2层的误差函数（输入层到第一隐藏层）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt;= NS(<span class="number">2</span>); n++) &#123;<span class="comment">//当前层</span></span><br><span class="line">        <span class="keyword">double</span>* s = &amp;SF(<span class="number">2</span>, n);<span class="comment">//获取第a个神经元的误差</span></span><br><span class="line">        *s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span>* b = &amp;BF(<span class="number">2</span>, n);<span class="comment">//获取第a个神经元的偏置</span></span><br><span class="line">        <span class="keyword">double</span> o = OF(<span class="number">2</span>, n);<span class="comment">//获取第a个神经元的输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> nn = <span class="number">1</span>; nn &lt;= NS(<span class="number">3</span>); nn++) &#123;<span class="comment">//下一层</span></span><br><span class="line">            <span class="keyword">double</span> lw = WF(<span class="number">3</span>, nn, n);<span class="comment">//获取下一层到当前神经元的权重</span></span><br><span class="line">            <span class="keyword">double</span> ls = SF(<span class="number">3</span>, nn);<span class="comment">//获取下一层第nn个神经元的误差</span></span><br><span class="line">            *s += ls * lw * f_(o);</span><br><span class="line">        &#125;</span><br><span class="line">        *b = *b - LN * (*s);<span class="comment">//更新偏置</span></span><br><span class="line">        <span class="comment">//更新权重</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> nn = <span class="number">1</span>; nn &lt;= INNS; nn++) &#123;<span class="comment">//上一层</span></span><br><span class="line">            <span class="keyword">double</span>* w = &amp;WF(<span class="number">2</span>, n, nn);</span><br><span class="line">            *w = *w - LN * (*s) * INS(nn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadIn</span><span class="params">(BPNetWork* network,<span class="keyword">double</span>* input,<span class="keyword">double</span>* putout)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(network-&gt;is, input, INNS*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(network-&gt;ts, putout, OUTNS*<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">1</span> &#125;;<span class="comment">//4层神经元,数量分别为1,20,20,1</span></span><br><span class="line">    <span class="keyword">double</span> in[<span class="number">1</span>] = &#123; <span class="number">0.9</span> &#125;;<span class="comment">//训练样本输入1</span></span><br><span class="line">    <span class="keyword">double</span> in1[<span class="number">1</span>] = &#123; <span class="number">0.1</span> &#125;;<span class="comment">//训练样本输入2</span></span><br><span class="line">    <span class="keyword">double</span> in2[<span class="number">1</span>] = &#123; <span class="number">0.5</span> &#125;;<span class="comment">//训练样本输入3</span></span><br><span class="line">    <span class="keyword">double</span> out[<span class="number">1</span>] = &#123; <span class="number">0.1</span> &#125;;<span class="comment">//理想输出</span></span><br><span class="line">    <span class="comment">//神经网络训练目标:</span></span><br><span class="line">    <span class="comment">//输入任意值,输出0.1</span></span><br><span class="line">    BPNetWork* network = BPCreate(a, <span class="number">4</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">1000</span>;<span class="comment">//训练1000次</span></span><br><span class="line">    <span class="keyword">while</span> (c--) &#123;</span><br><span class="line">        LoadIn(network, in, out);</span><br><span class="line">        RunOnce(network);</span><br><span class="line">        TrainOnce(network);</span><br><span class="line">        LoadIn(network, in1, out);</span><br><span class="line">        RunOnce(network);</span><br><span class="line">        TrainOnce(network);</span><br><span class="line">        LoadIn(network, in2, out);</span><br><span class="line">        RunOnce(network);</span><br><span class="line">        TrainOnce(network);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//训练完后来一波测试</span></span><br><span class="line">    <span class="keyword">double</span> t[<span class="number">1</span>] = &#123; <span class="number">0.7</span> &#125;;<span class="comment">//输入</span></span><br><span class="line">    <span class="keyword">double</span> o[<span class="number">1</span>] = &#123; <span class="number">0.2</span> &#125;;<span class="comment">//凑数</span></span><br><span class="line">    LoadIn(network, t, o);</span><br><span class="line">    RunOnce(network);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%g\n&quot;</span>, ETotal(network));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%g&quot;</span>, OF(<span class="number">4</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><h3 id="正向"><a href="#正向" class="headerlink" title="正向"></a>正向</h3><ul>
<li>正向推理的计算过程是某层的某个节点的输出数值等于<strong>该层上一层</strong>的某个节点的输出×<strong>这个节点到该层待求的节点的权重</strong>， 如上对上一层<strong>每个节点</strong>计算一遍并<strong>求和</strong>，然后加上该层该节点的偏置，并且带入激活函数计算得到这层这个节点的输出</li>
<li><img src="/imgs/f90abed083088d4195ae18b30301ed39ea70dce182200ea6df9ee6df85a66d72.png" alt="图 1">  <h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3></li>
<li>反向传播的计算对于输出层到上一层的权重更新而言就是<strong>上一层到这一层某节点的权重</strong>减去输出层某节点的实际输出和理想输出的差×激活函数的导数×系数×学习率×<strong>上一层对应节点的输出</strong></li>
<li>对于中间层的计算，某个节点的误差等于下一层某节点到该节点的权重×下一层对应节点的误差×该节点激活函数的斜率，如上计算求和得到该节点的误差，然后对于上一层每个节点到这一个节点的权重，更新方法为减去学习率×该节点的误差（前文计算的）×上一层对应节点的输出</li>
<li><img src="/imgs/cb70a13bd33f56aa5a0522be2fccb8da78edbb49b0b66a2aa0d411cbe4f02952.png" alt="图 2">  </li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C语言函数指针</title>
    <url>/2022/01/22/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="C语言函数指针"><a href="#C语言函数指针" class="headerlink" title="C语言函数指针"></a>C语言函数指针</h1><ul>
<li>函数指针是指向函数的指针变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;返回值类型&gt; (*函数指针名称)(&lt;输入参数类型&gt;,...)</span><br></pre></td></tr></table></figure>

<ul>
<li>回调函数使用例：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">populate_array</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">size_t</span> arraySize, <span class="keyword">int</span> (*getNextValue)(<span class="keyword">void</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;arraySize; i++)</span><br><span class="line">        <span class="built_in">array</span>[i] = getNextValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传参：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">populate_array(myarray, <span class="number">10</span>, getNextRandomValue);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>C语言常见内存操作以及系统操作函数</title>
    <url>/2022/02/18/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="C语言常见内存操作函数"><a href="#C语言常见内存操作函数" class="headerlink" title="C语言常见内存操作函数"></a>C语言常见内存操作函数</h1><ul>
<li>&lt;string.h&gt;目录 <a href="https://www.runoob.com/cprogramming/c-standard-library-string-h.html">https://www.runoob.com/cprogramming/c-standard-library-string-h.html</a></li>
</ul>
<h2 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy()"></a>memcpy()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void *memcpy(void *str1, const void *str2, size_t n)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>str1</strong> – 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</p>
</li>
<li><p><strong>str2</strong> – 指向要复制的数据源，类型强制转换为 void* 指针。</p>
</li>
<li><p><strong>n</strong> – 要被复制的字节数。</p>
</li>
<li><p>该函数返回一个指向目标存储区 str1 的指针。</p>
</li>
</ul>
<h2 id="memchr"><a href="#memchr" class="headerlink" title="memchr()"></a>memchr()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *memchr(const void *str, int c, size_t n)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>str</strong> – 指向要执行搜索的内存块。</p>
</li>
<li><p><strong>c</strong> – 以 int 形式传递的值，但是函数在每次字节搜索时是使用该值的无符号字符形式。</p>
</li>
<li><p><strong>n</strong> – 要被分析的字节数。</p>
</li>
<li><p>该函数返回一个指向匹配字节的指针，如果在给定的内存区域未出现字符，则返回 NULL。</p>
</li>
</ul>
<h2 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp()"></a>memcmp()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int memcmp(const void *str1, const void *str2, size_t n)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str1</strong> – 指向内存块的指针。</li>
<li><strong>str2</strong> – 指向内存块的指针。</li>
<li><strong>n</strong> – 要被比较的字节数。</li>
</ul>
<p>返回值</p>
<ul>
<li>如果返回值 &lt; 0，则表示 str1 小于 str2。</li>
<li>如果返回值 &gt; 0，则表示 str1 大于 str2。</li>
<li>如果返回值 = 0，则表示 str1 等于 str2。</li>
</ul>
<h2 id="memmove"><a href="#memmove" class="headerlink" title="memmove()"></a>memmove()</h2><ul>
<li>C 库函数 <strong>void *memmove(void *str1, const void *str2, size_t n)</strong> 从 <strong>str2</strong> 复制 <strong>n</strong> 个字符到 <strong>str1</strong>，但是在重叠内存块这方面，memmove() 是比 memcpy() <strong>更安全</strong>的方法。如果目标区域和源区域有重叠的话，memmove() 能够保证源串在被覆盖之前将重叠区域的字节拷贝到目标区域中，复制后源区域的内容会被更改。如果目标区域与源区域<strong>没有重叠</strong>，则和 memcpy() 函数<strong>功能相同</strong>。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *memmove(void *str1, const void *str2, size_t n)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str1</strong> – 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</li>
<li><strong>str2</strong> – 指向要复制的数据源，类型强制转换为 void* 指针。</li>
<li><strong>n</strong> – 要被复制的字节数。</li>
<li>该函数返回一个指向目标存储区 str1 的指针。</li>
</ul>
<h2 id="memset"><a href="#memset" class="headerlink" title="memset()"></a>memset()</h2><ul>
<li>C 库函数 <strong>void *memset(void *str, int c, size_t n)</strong> 复制字符 <strong>c</strong>（一个无符号字符）到参数 <strong>str</strong> 所指向的字符串的前 <strong>n</strong> 个字符。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *memset(void *str, int c, size_t n)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str</strong> – 指向要填充的内存块。</li>
<li><strong>c</strong> – 要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式。</li>
<li><strong>n</strong> – 要被设置为该值的字符数。</li>
<li>该值返回一个指向存储区 str 的指针。</li>
</ul>
<h2 id="strcat"><a href="#strcat" class="headerlink" title="strcat()"></a>strcat()</h2><ul>
<li>C 库函数 <strong>char *strcat(char *dest, const char *src)</strong> 把 <strong>src</strong> 所指向的字符串追加到 <strong>dest</strong> 所指向的字符串的结尾。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char *strcat(char *dest, const char *src)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>dest</strong> – 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串。</p>
</li>
<li><p><strong>src</strong> – 指向要追加的字符串，该字符串不会覆盖目标字符串。</p>
</li>
<li><p>该函数返回一个指向最终的目标字符串 dest 的指针。</p>
</li>
</ul>
<h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h2><ul>
<li>C 库函数 <strong>int strcmp(const char *str1, const char *str2)</strong> 把 <strong>str1</strong> 所指向的字符串和 <strong>str2</strong> 所指向的字符串进行比较。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int strcmp(const char *str1, const char *str2)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str1</strong> – 要进行比较的第一个字符串。</li>
<li><strong>str2</strong> – 要进行比较的第二个字符串。</li>
</ul>
<p>返回值</p>
<ul>
<li>如果返回值小于 0，则表示 str1 小于 str2。</li>
<li>如果返回值大于 0，则表示 str1 大于 str2。</li>
<li>如果返回值等于 0，则表示 str1 等于 str2。</li>
</ul>
<hr>
<ul>
<li>&lt;stdlib.h&gt;总目录 <a href="https://www.runoob.com/cprogramming/c-standard-library-stdlib-h.html">https://www.runoob.com/cprogramming/c-standard-library-stdlib-h.html</a></li>
</ul>
<h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *malloc(size_t size)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>size</strong> – 内存块的大小，以字节为单位。</li>
<li>该函数返回一个指针 ，指向已分配大小的内存。如果请求失败，则返回 NULL。</li>
</ul>
<h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc()"></a>calloc()</h2><p>C 库函数 <strong>void *calloc(size_t nitems, size_t size)</strong> 分配所需的内存空间，并返回一个指向它的指针。<strong>malloc</strong> 和 <strong>calloc</strong> 之间的不同点是，<strong>malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *calloc(size_t nitems, size_t size)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>nitems</strong> – 要被分配的元素个数。</li>
<li><strong>size</strong> – 元素的大小。</li>
</ul>
<h2 id="realloc"><a href="#realloc" class="headerlink" title="realloc()"></a>realloc()</h2><p>C 库函数 <strong>void *realloc(void *ptr, size_t size)</strong> 尝试<u>重新调整之前调用 <strong>malloc</strong> 或 <strong>calloc</strong> 所分配的 <strong>ptr</strong> 所指向的内存块的大小。</u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void *realloc(void *ptr, size_t size)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ptr</strong> – 指针指向一个要重新分配内存的内存块，该内存块之前是通过调用 malloc、calloc 或 realloc 进行分配内存的。如果为空指针，则会分配一个新的内存块，且函数返回一个指向它的指针。</li>
<li><strong>size</strong> – 内存块的新的大小，以字节为单位。如果大小为 0，且 ptr 指向一个已存在的内存块，则 ptr 所指向的内存块会被释放，并返回一个空指针。</li>
<li>该函数返回一个指针 ，指向重新分配大小的内存。如果请求失败，则返回 NULL。</li>
</ul>
<h2 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h2><p>C 库函数 <strong>void free(void *ptr)</strong> 释放之前调用 calloc、malloc 或 realloc 所分配的内存空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void free(void *ptr)</span><br></pre></td></tr></table></figure>

<h2 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h2><p>C 库函数 <strong>int system(const char *command)</strong> 把 <strong>command</strong> 指定的命令名称或程序名称传给要被命令处理器执行的主机环境，并在命令完成后返回。(实际上就是在程序中执行Linux命令行的指令)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int system(const char *command)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>command</strong> – 包含被请求变量名称的 C 字符串。</li>
<li>如果发生错误，则返回值为 -1，否则返回命令的状态。</li>
</ul>
<h2 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h2><p>C 库函数 <strong>int abs(int x)</strong> 返回 <strong>x</strong> 的绝对值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int abs(int x)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>x</strong> – 完整的值。</li>
<li>该函数返回 x 的绝对值。</li>
</ul>
<h2 id="exit"><a href="#exit" class="headerlink" title="exit()"></a>exit()</h2><p>C 库函数 <strong>void exit(int status)</strong> 立即终止调用进程。任何属于该进程的打开的文件描述符都会被关闭，该进程的子进程由进程 1 继承，初始化，且会向父进程发送一个 SIGCHLD 信号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void exit(int status)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>status</strong> – 返回给父进程的状态值。</li>
<li>该函数不返回值。</li>
</ul>
<h2 id="abort"><a href="#abort" class="headerlink" title="abort()"></a>abort()</h2><p>C 库函数 <strong>void abort(void)</strong> <strong>中止程序执行，直接从调用的地方跳出。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void abort(void)</span><br></pre></td></tr></table></figure>

<h2 id="atof"><a href="#atof" class="headerlink" title="atof()"></a>atof()</h2><p>C 库函数 <strong>double atof(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个浮点数（类型为 double 型），<u><strong>根据字面意思，不是根据具体的字节进行转换</strong></u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double atof(const char *str)</span><br></pre></td></tr></table></figure>

<h2 id="atoi"><a href="#atoi" class="headerlink" title="atoi()"></a>atoi()</h2><p>C 库函数 <strong>int atoi(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个整数（类型为 int 型）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int atoi(const char *str)</span><br></pre></td></tr></table></figure>

<h2 id="atol"><a href="#atol" class="headerlink" title="atol()"></a>atol()</h2><p>C 库函数 <strong>long int atol(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个长整数（类型为 long int 型）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long int atol(const char *str)</span><br></pre></td></tr></table></figure>

<h2 id="strtod"><a href="#strtod" class="headerlink" title="strtod()"></a>strtod()</h2><p>C 库函数 *<em>double strtod(const char *str, char *<em>endptr)</em></em> 把参数 <strong>str</strong> 所指向的字符串转换为一个浮点数（类型为 double 型）。如果 <strong>endptr</strong> 不为空，则指向转换中最后一个字符后的字符的指针会存储在 endptr 引用的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double strtod(const char *str, char **endptr)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str</strong> – 要转换为双精度浮点数的字符串。</li>
<li><strong>endptr</strong> – 对类型为 char* 的对象的引用，其值由函数设置为 <strong>str</strong> 中<u>数值后的下一个字符。</u></li>
</ul>
<h2 id="strtol"><a href="#strtol" class="headerlink" title="strtol()"></a>strtol()</h2><p>C 库函数 *<em>long int strtol(const char *str, char *<em>endptr, int base)</em></em> 把参数 <strong>str</strong> 所指向的字符串根据给定的 <strong>base</strong> 转换为一个长整数（类型为 long int 型），base 必须介于 2 和 36（包含）之间，或者是特殊值 0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long int strtol(const char *str, char **endptr, int base)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str</strong> – 要转换为长整数的字符串。</li>
<li><strong>endptr</strong> – 对类型为 char* 的对象的引用，其值由函数设置为 <strong>str</strong> 中数值后的下一个字符。</li>
<li><strong>base</strong> – 基数，必须介于 2 和 36（包含）之间，或者是特殊值 0。</li>
</ul>
<h2 id="strtoul"><a href="#strtoul" class="headerlink" title="strtoul()"></a>strtoul()</h2><p>C 库函数 *<em>unsigned long int strtoul(const char *str, char *<em>endptr, int base)</em></em> 把参数 <strong>str</strong> 所指向的字符串根据给定的 <strong>base</strong> 转换为一个无符号长整数（类型为 unsigned long int 型），base 必须介于 2 和 36（包含）之间，或者是特殊值 0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned long int strtoul(const char *str, char **endptr, int base)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>str</strong> – 要转换为无符号长整数的字符串。</li>
<li><strong>endptr</strong> – 对类型为 char* 的对象的引用，其值由函数设置为 str 中数值后的下一个字符。</li>
<li><strong>base</strong> – 基数，必须介于 2 和 36（包含）之间，或者是特殊值 0。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>DSP28377d开启--fp_mode提高浮点数除法性能</title>
    <url>/2022/02/19/DSP28377d%E5%BC%80%E5%90%AFfp_mode%E6%8F%90%E9%AB%98%E6%B5%AE%E7%82%B9%E6%95%B0%E9%99%A4%E6%B3%95%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<h1 id="DSP28377d开启–fp-mode提高浮点数除法性能"><a href="#DSP28377d开启–fp-mode提高浮点数除法性能" class="headerlink" title="DSP28377d开启–fp_mode提高浮点数除法性能"></a>DSP28377d开启–fp_mode提高浮点数除法性能</h1><p>在程序中执行浮点数除法比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Speed=(float)1000000/(float)count*speedTemp*15;</span><br></pre></td></tr></table></figure>

<p>的时候会看到如下的提示：</p>
<p><img src="/imgs/image-20220219183335144.png" alt="image-20220219183335144"></p>
<ul>
<li><p>此时需要在项目的<code>properties</code>中选择</p>
</li>
<li><p><img src="/imgs/image-20220219183408708.png" alt="image-20220219183408708"></p>
</li>
<li><p>选择<code>optimizations</code>中的<code>--fp_mode</code>为<code>relaxed</code>即可（如图）</p>
</li>
<li><p><img src="/imgs/image-20220219183528275.png" alt="image-20220219183528275"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>DSP28377d与无刷直流电机的接线方法</title>
    <url>/2022/02/16/DSP28377d%E4%B8%8E%E6%97%A0%E5%88%B7%E7%9B%B4%E6%B5%81%E7%94%B5%E6%9C%BA%E7%9A%84%E6%8E%A5%E7%BA%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="DSP28377d与无刷直流电机的接线方法"><a href="#DSP28377d与无刷直流电机的接线方法" class="headerlink" title="DSP28377d与无刷直流电机的接线方法"></a>DSP28377d与无刷直流电机的接线方法</h1><h2 id="霍尔传感器："><a href="#霍尔传感器：" class="headerlink" title="霍尔传感器："></a>霍尔传感器：</h2><ul>
<li>程序中指定的CAP霍尔传感器输入引脚为</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitECap1Gpio(<span class="number">20</span>);</span><br><span class="line">GPIO_SetupPinOptions(<span class="number">20</span>, GPIO_INPUT, GPIO_ASYNC);</span><br><span class="line">InitECap2Gpio(<span class="number">21</span>);</span><br><span class="line">GPIO_SetupPinOptions(<span class="number">21</span>, GPIO_INPUT, GPIO_ASYNC);</span><br><span class="line">InitECap3Gpio(<span class="number">23</span>);</span><br><span class="line">GPIO_SetupPinOptions(<span class="number">23</span>, GPIO_INPUT, GPIO_ASYNC);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>找到芯片的20，21和23脚，位置在</p>
</li>
<li><p><img src="/imgs/image-20220216115100394.png" alt="image-20220216115100394"></p>
</li>
</ul>
<p>对应的是开发板上的外扩引脚</p>
<ul>
<li><p><img src="/imgs/image-20220216115209306.png" alt="image-20220216115209306"></p>
</li>
<li><p>所以电机驱动板上的<strong>中间霍尔传感器输出口的2，3，4pin</strong>分别连接开发板上<strong>J5的25，26，27引脚</strong>，同时利用J5的30和29脚分别是5V和GND给电机控制板提供5V电源，以上的排针倒数6pin中除了CAP4之外，都接到电机驱动板上的对应的引脚上了。</p>
</li>
</ul>
<h2 id="电机驱动-PWM"><a href="#电机驱动-PWM" class="headerlink" title="电机驱动  PWM"></a>电机驱动  PWM</h2><ul>
<li><p>PWM的连接比较简单，主要就是将开发板上的J5的前6个输出脚</p>
</li>
<li><p><img src="/imgs/image-20220216115439328.png" alt="image-20220216115439328"></p>
</li>
<li><p>按照1-6的顺序对应连接到电机驱动板上的长排针PWM1-6</p>
</li>
<li><p><img src="/imgs/image-20220216115526376.png" alt="image-20220216115526376"></p>
</li>
<li><p>如上，再加上供电即可</p>
</li>
<li><p>注意，假如传感器接线存在问题，电机会停在某一个相位不动（有力矩阻碍转动但是自身不转动）而且会产生大量的热，同时电源会发出一个电流声（猜测是电流太大引起的）。</p>
</li>
</ul>
<h2 id="接线图"><a href="#接线图" class="headerlink" title="接线图"></a>接线图</h2><ul>
<li><p><img src="/imgs/image-20220216120140369.png" alt="image-20220216120140369"></p>
</li>
<li><p><img src="/imgs/image-20220216120155122.png" alt="image-20220216120155122"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>C语言和python获取命令行的返回内容</title>
    <url>/2023/03/11/C%E8%AF%AD%E8%A8%80%E8%8E%B7%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E8%BF%94%E5%9B%9E%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h1 id="C语言获取命令行的返回内容"><a href="#C语言获取命令行的返回内容" class="headerlink" title="C语言获取命令行的返回内容"></a>C语言获取命令行的返回内容</h1><ul>
<li><a href="https://www.zhihu.com/question/508000943/answer/2286590668">参考链接</a></li>
<li>示例程序<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>*   szCmd       = <span class="string">&quot;ls -l&quot;</span>;</span><br><span class="line">    FILE*   pResultStr  = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span>    szBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建子进程，执行shell命令 */</span></span><br><span class="line">    pResultStr = popen(szCmd, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == pResultStr)</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;popen faild. (%d, %s)\n&quot;</span>,errno, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取返回结果 */</span></span><br><span class="line">    fread(szBuf, <span class="number">1</span>, <span class="keyword">sizeof</span>(szBuf), pResultStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印命令返回内容 */</span></span><br><span class="line">    <span class="built_in">printf</span>(szBuf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 不要忘记关闭句柄 */</span></span><br><span class="line">    pclose(pResultStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3></li>
<li><img src="/imgs/11a292bb14e47fbefb6880cb53828369d95a5a8094aad026a367c2efd26e0b75.png" alt="picture 1">  </li>
<li>可见，多了一行<code>total 16</code>含义是<h2 id="popen函数"><a href="#popen函数" class="headerlink" title="popen函数"></a>popen函数</h2></li>
<li><code>popen()</code> 函数通过创建一个<strong>管道</strong>，调用 fork 产生一个子进程，执行一个 shell 以运行命令来开启一个进程。</li>
<li>这个进程必须由 <code>pclose()</code> 函数关闭，而不是 <code>fclose()</code> 函数。<code>pclose()</code> 函数关闭标准 I/O 流，等待命令执行结束，然后返回 shell 的终止状态。如果 shell 不能被执行，则 <code>pclose()</code> 返回的终止状态与 shell 已执行 exit 一样。</li>
<li>也就是，popen<strong>创建管道</strong>，<strong>执行shell命令将文件流中的某些数据读出</strong><h3 id="头文件和函数头"><a href="#头文件和函数头" class="headerlink" title="头文件和函数头"></a>头文件和函数头</h3></li>
<li><code>#include &lt;stdio.h&gt;</code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">FILE *<span class="title">popen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *command, <span class="keyword">const</span> <span class="keyword">char</span> *type)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>command： 是一个指向以 NULL 结束的 shell 命令字符串的指针。<strong>命令将被传到 bin/sh 并使用 -c 标志</strong>，<u>shell 将执行这个命令</u>，比如<code>sh -c ls</code></li>
<li>type： <strong>只能是读或者写中的一种</strong>，得到的返回值（标准 I/O 流）也具有和 type 相应的只读或只写类型。如果 type 是 “r” 则文件指针连接到 command 的标准输出；如果 type 是 “w” 则文件指针连接到 command 的标准输入。<h2 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">作者：Reticence</span><br><span class="line">链接：https:<span class="comment">//www.zhihu.com/question/508000943/answer/2285530356</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;ls&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buffer,<span class="number">0</span>,<span class="number">256</span>);</span><br><span class="line">    pipe(pipe_fd);  <span class="comment">// 忽略了错误处理</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> pid = fork(); <span class="comment">// 忽略了错误处理</span></span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);     </span><br><span class="line">        close(pipe_fd[<span class="number">1</span>]);   <span class="comment">// 关闭管道输出</span></span><br><span class="line">        read(pipe_fd[<span class="number">0</span>], buffer, <span class="number">256</span>);  <span class="comment">// ls的输出到buffer了，你可以进行你的处理</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ls = %s&quot;</span>,buffer);</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        close(pipe_fd[<span class="number">0</span>]);               <span class="comment">// 关闭管道读入</span></span><br><span class="line">        dup2(pipe_fd[<span class="number">1</span>], STDOUT_FILENO); <span class="comment">// 关闭标准输出，改成管道输出</span></span><br><span class="line">        execv(<span class="string">&quot;/usr/bin/ls&quot;</span>, argv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="管道开启和关闭"><a href="#管道开启和关闭" class="headerlink" title="管道开启和关闭"></a>管道开启和关闭</h3></li>
<li><a href="https://linux.die.net/man/">linux man手册参考</a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> pipefd[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>其中<code>pipefd[0]</code>是读一侧 <code>pipefd[1]</code>是写入一侧</li>
<li>写入的时候要关闭读一侧，读的时候要关闭写入的一侧<h3 id="dup2用法"><a href="#dup2用法" class="headerlink" title="dup2用法"></a>dup2用法</h3></li>
<li>转移输出定向</li>
<li><a href="https://www.shuzhiduo.com/A/pRdBjbn1dn/">参考链接</a><h3 id="文件描述符和FILE指针互相转换"><a href="#文件描述符和FILE指针互相转换" class="headerlink" title="文件描述符和FILE指针互相转换"></a>文件描述符和FILE指针互相转换</h3></li>
<li><a href="https://blog.csdn.net/zzbeagle/article/details/106586694">参考链接</a><h3 id="跨越进程的dup2（dup2与execv和execlp一起使用的问题）"><a href="#跨越进程的dup2（dup2与execv和execlp一起使用的问题）" class="headerlink" title="跨越进程的dup2（dup2与execv和execlp一起使用的问题）"></a>跨越进程的dup2（dup2与execv和execlp一起使用的问题）</h3></li>
<li>运行上述程序可见，主进程并不能抓取到输出</li>
<li>然后做了以下测试，在子线程中直接讲<code>execv</code>修改为<code>printf</code>函数，结果发现主线程能抓取到<code>printf</code>函数的输出</li>
<li>可以推测在<code>execv</code>创建新的线程之后，之前的<code>dup2</code><strong>并不起到作用了</strong></li>
<li>但是发现使用<code>execlp</code>可以，使用<code>execv</code>不行，格式为<code>execlp(argv[0], argv[0], argv[1], argv[2]);</code><ul>
<li>其中<code>argv</code>分别是<code>echo</code>, <code>输出的字符串</code>和<code>NULL</code></li>
</ul>
</li>
<li>类似地，对<code>execv</code>函数的参数作出修改，<strong>还是没法收到</strong>，暂时不清楚原因</li>
<li><strong>最终版代码</strong><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// char *argv[] = &#123;&quot;echo&quot;, NULL, NULL&#125;;</span></span><br><span class="line">    <span class="keyword">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">char</span> routeBuf[<span class="number">256</span>];</span><br><span class="line">    FILE* pipeWrite;</span><br><span class="line">    getcwd(routeBuf, <span class="number">256</span>);</span><br><span class="line">    <span class="comment">// argv[2] = routeBuf;</span></span><br><span class="line"></span><br><span class="line">    argv[<span class="number">1</span>] = routeBuf;</span><br><span class="line">    pipeWrite = fdopen(pipe_fd[<span class="number">1</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pipe return: %d\n&quot;</span>, pipe(pipe_fd)); <span class="comment">// 忽略了错误处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pid = fork(); <span class="comment">// 忽略了错误处理</span></span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// sleep(1);</span></span><br><span class="line">        wait();</span><br><span class="line">        close(pipe_fd[<span class="number">1</span>]);             <span class="comment">// 关闭管道输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read: %d\n&quot;</span>, read(pipe_fd[<span class="number">0</span>], buffer, <span class="number">256</span>)); <span class="comment">// ls的输出到buffer了，你可以进行你的处理</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ls = \n%s\n&quot;</span>, buffer);</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        close(pipe_fd[<span class="number">0</span>]); <span class="comment">// 关闭管道读入</span></span><br><span class="line">        <span class="comment">// fflush(stdout);</span></span><br><span class="line">        dup2(pipe_fd[<span class="number">1</span>], STDOUT_FILENO); <span class="comment">// 关闭标准输出，改成管道输出</span></span><br><span class="line">        <span class="comment">// fflush(stdout);</span></span><br><span class="line">        <span class="comment">// execv(&quot;/usr/bin/ls&quot;, argv);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// execv(&quot;echo&quot;, argv);</span></span><br><span class="line">        execlp(argv[<span class="number">0</span>], argv[<span class="number">0</span>], argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">// execlp(argv[0], argv[0], argv[1], argv[2]);</span></span><br><span class="line">        <span class="comment">// printf(&quot;test\n&quot;);</span></span><br><span class="line">        fflush(pipeWrite);</span><br><span class="line">        <span class="comment">// close(pipe_fd[1]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>输出：<ul>
<li><img src="/imgs/dc445d41057939f55d22d264ed7ba7caf721b75974b03428371edb4bff5b01da.png" alt="picture 2">  </li>
</ul>
</li>
<li><a href="https://blog.csdn.net/Marsbupt/article/details/126185726">上述代码修改参考链接</a><h2 id="python开启新的子进程并且获取命令行的返回值"><a href="#python开启新的子进程并且获取命令行的返回值" class="headerlink" title="python开启新的子进程并且获取命令行的返回值"></a>python开启新的子进程并且获取命令行的返回值</h2></li>
<li>从python2.4版本开始,可以用<code>subprocess</code>这个模块来产生子进程,并连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值。</li>
<li>比如<code>subprocess.Popen(command, stdout = subprocess.PIPE)</code></li>
<li>去掉后面的手动指定参数，输出结果为<ul>
<li><img src="/imgs/afe58596e700b9a51c15139bc0e4095c9e7269e13ca49280fb145bb99ea51e6e.png" alt="picture 3">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>DSP28377学习（一）</title>
    <url>/2022/01/10/DSP28377%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="DSP28377d学习（一）"><a href="#DSP28377d学习（一）" class="headerlink" title="DSP28377d学习（一）"></a>DSP28377d学习（一）</h1><h2 id="仿真器配置"><a href="#仿真器配置" class="headerlink" title="仿真器配置"></a>仿真器配置</h2><p><strong>此文档仅作为官方手册的补充</strong></p>
<ul>
<li>在开始烧录之前要先配置Target configuration file</li>
<li><img src="/imgs/image-20220110221639291.png" alt="image-20220110221639291"></li>
</ul>
<p>打开后，选择</p>
<ul>
<li><img src="/imgs/image-20220110221716259.png" alt="image-20220110221716259"></li>
</ul>
<p>然后</p>
<ul>
<li><p><img src="/imgs/image-20220110221731391.png" alt="image-20220110221731391"></p>
</li>
<li><p><img src="/imgs/image-20220110221832321.png" alt="image-20220110221832321"></p>
</li>
<li><p>此处一般不需要修改</p>
</li>
</ul>
<h2 id="板子链接"><a href="#板子链接" class="headerlink" title="板子链接"></a>板子链接</h2><ul>
<li>先将仿真器和目标板链接然后再给板子上电</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="/imgs/image-20220110222621315.png" alt="image-20220110222621315"></p>
<ul>
<li>点击下面的选项打开Target configuration面板</li>
</ul>
<p><img src="/imgs/image-20220111164750076.png" alt="image-20220111164750076"></p>
<ul>
<li>找到自己刚才新建的Target configuration，然后选择launch</li>
</ul>
<p><img src="/imgs/image-20220111165533087.png" alt="image-20220111165533087"></p>
<p><img src="/imgs/image-20220111165625183.png" alt="image-20220111165625183"></p>
<p><img src="/imgs/image-20220111165556571.png" alt="image-20220111165556571"></p>
<ul>
<li>在Flash烧写之前，需要手动新建一个predidined symbol，在其中（已经有一个CPU1）新建一个FLASH</li>
<li>右键点击项目（图中红圈），然后选择“properties”</li>
<li><img src="/imgs/image-20220111164926308.png" alt="image-20220111164926308"></li>
</ul>
<p><img src="/imgs/image-20220111165509718.png" alt="image-20220111165509718"></p>
<ul>
<li>debug的时候注意在<strong>链接CPU、下载程序、开始调试结束后执行程序之前再下断点</strong>，<u>不要带着断点进入调试</u>，否则<code>main()</code>函数可能没法运行</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>DSP28377相关知识</title>
    <url>/2022/02/16/DSP28377%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="DSP28377相关知识"><a href="#DSP28377相关知识" class="headerlink" title="DSP28377相关知识"></a>DSP28377相关知识</h1><h2 id="BLDC（PWM）相关"><a href="#BLDC（PWM）相关" class="headerlink" title="BLDC（PWM）相关"></a>BLDC（PWM）相关</h2><ul>
<li>驱动的PWM中135为一组，246为一组</li>
<li></li>
</ul>
<h2 id="串口相关"><a href="#串口相关" class="headerlink" title="串口相关"></a>串口相关</h2><ul>
<li>中断：TXINT和RXINT</li>
</ul>
<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>开启中断的步骤</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> “DSP2833x_Device.h”</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> “DSP2833x_Examples.h”</span></span><br><span class="line"></span><br><span class="line">interrupt <span class="keyword">void</span> cpu_TImer0_isr（<span class="keyword">void</span>）;<span class="comment">//声明中断服务函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main（）</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step1：初始化系统控制、PLL、看门狗、允许外设时钟</span></span><br><span class="line"></span><br><span class="line">    InitSysCtrl（）;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step2：初始化GPIO</span></span><br><span class="line"></span><br><span class="line">    InitGpio（）;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step3：清除所有中断，初始化PIE向量表</span></span><br><span class="line"></span><br><span class="line">    DINT;</span><br><span class="line"></span><br><span class="line">    InitPieCtrl（）; <span class="comment">//初始化PIE控制器</span></span><br><span class="line"></span><br><span class="line">    IER = <span class="number">0x0000</span>; <span class="comment">//禁止CPU中断</span></span><br><span class="line"></span><br><span class="line">    IFR = <span class="number">0x0000</span>; <span class="comment">//清除所有CPU中断标志</span></span><br><span class="line"></span><br><span class="line">    InitPieVectTable（）; <span class="comment">//初始化PIE中断向量表</span></span><br><span class="line"></span><br><span class="line">    EALLOW;</span><br><span class="line"></span><br><span class="line">    PieVectTable.TINT0 = &amp;cpu_TImer0_isr; <span class="comment">//重映射中断向量，指向中断服务程序</span></span><br><span class="line"></span><br><span class="line">    EDIS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step4：初始化外设模块</span></span><br><span class="line"></span><br><span class="line">    InitCpuTImers（）;</span><br><span class="line"></span><br><span class="line">    ConfigCpuTimer（&amp;CpuTimer0，<span class="number">150</span>，<span class="number">1000000</span>）; <span class="comment">//150MHz，周期1秒</span></span><br><span class="line"></span><br><span class="line">    CpuTimer0Regs.TCR.all = <span class="number">0x4001</span>; <span class="comment">//允许定时器中断，且设置TSS为0启动定时器工作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//step5：</span></span><br><span class="line"></span><br><span class="line">    IER |= M_INT1; <span class="comment">//允许CPU的INT1中断，该中断连接至TINT0</span></span><br><span class="line"></span><br><span class="line">    PieCtrlRegs.PIEIER1.bit.INTx7 = <span class="number">1</span>; <span class="comment">//在PIE中断组1中允许TINT0中断</span></span><br><span class="line"></span><br><span class="line">    EINT; <span class="comment">//清除全局屏蔽</span></span><br><span class="line"></span><br><span class="line">    ERTM; <span class="comment">//允许全局实时中断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//step6：循环</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>（<span class="number">1</span>）;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interrupt <span class="keyword">void</span> cpu_timer0_isr（<span class="keyword">void</span>）</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    CpuTimer0.InterruptCount++;</span><br><span class="line"></span><br><span class="line">    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1; <span class="comment">//清除PIE中断组1的应答位，以便CPU再次响应</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>FreeRtos1</title>
    <url>/2021/12/11/FreeRtos1/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="资源连接集合"><a href="#资源连接集合" class="headerlink" title="资源连接集合"></a>资源连接集合</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/97869854">ARM+LINUX嵌入式学习路线 - 知乎 (zhihu.com)</a></p>
</li>
<li><p><a href="http://www.openedv.com/docs/book-videos/zdyzshipin/4free/zdyz-freertos-book.html">http://www.openedv.com/docs/book-videos/zdyzshipin/4free/zdyz-freertos-book.html</a></p>
</li>
</ul>
<h2 id="为什么选择FreeRtos"><a href="#为什么选择FreeRtos" class="headerlink" title="为什么选择FreeRtos?"></a>为什么选择FreeRtos?</h2><ul>
<li><p>RTOS 类系统有很多，比如 uC/OS，资料很多，尤其是中文资料，那为什么要选择 FreeRTOS 呢？</p>
</li>
<li><p>FreeRTOS是免费的，学习RTOS操作系统的话 uC/OS是首选，但要做产品的话，免费的FreeRTOS操作系统就是个不错的选择。</p>
</li>
<li><p>许多半导体厂商产品的 SDK(Software Development Kit—软件开发工具包) 包就使用 FreeRTOS 作为其操作系统，尤其是 WIFI、蓝牙这些带协议栈的芯片或模块。</p>
</li>
<li><p>简单，因为FreeRTOS 的文件数量很少。</p>
</li>
</ul>
<h2 id="FreeRtos-特点"><a href="#FreeRtos-特点" class="headerlink" title="FreeRtos 特点"></a>FreeRtos 特点</h2><ul>
<li>FreeRTOS 的内核支持抢占式，合作式和时间片调度。</li>
<li>提供了一个用于低功耗的 Tickless 模式。</li>
<li>系统的组件在创建时可以选择动态或者静态的 RAM，比如任务、消息队列、信号量、软件定时器等等。</li>
<li>FreeRTOS-MPU 支持 Corex-M 系列中的 MPU 单元，如 STM32F429。</li>
<li>FreeRTOS 系统简单、小巧、易用，通常情况下内核占用 4k-9k 字节的空间。</li>
<li>高可移植性，代码主要 C 语言编写。</li>
<li>高效的软件定时器。</li>
<li>强大的跟踪执行功能。</li>
<li>堆栈溢出检测功能。</li>
<li>任务数量不限。</li>
<li>任务优先级不限。</li>
</ul>
<p><strong>官网：</strong><a href="http://www.freertos.org/">www.freertos.org</a></p>
<h2 id="基于STM32F407和Cubemx（HAL库）的FreeRtos开发"><a href="#基于STM32F407和Cubemx（HAL库）的FreeRtos开发" class="headerlink" title="基于STM32F407和Cubemx（HAL库）的FreeRtos开发"></a>基于STM32F407和Cubemx（HAL库）的FreeRtos开发</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/90608412">FreeRTOS 从入门到精通1–实时操作系统的前世今生 - 知乎 (zhihu.com)</a></p>
</li>
<li><p>为什么选用HAl库？因为ST官方 <strong><u>已经停止</u></strong> 对于标准库的维护</p>
</li>
<li><p>使用STM32CubeIDE的（ <strong>未尝试盗版仿真器能不能使用</strong> ）</p>
</li>
</ul>
<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>]]></content>
  </entry>
  <entry>
    <title>FreeRtos2</title>
    <url>/2021/12/11/FreeRtos2/</url>
    <content><![CDATA[<h2 id="FreeRtos创建注意（使用CubeMX）"><a href="#FreeRtos创建注意（使用CubeMX）" class="headerlink" title="FreeRtos创建注意（使用CubeMX）"></a>FreeRtos创建注意（使用CubeMX）</h2><ul>
<li><p>创建按照前篇知乎上的文章创建即可，注意此时会提示Systick的问题，设置为外部时钟晶振，而且设置为TIM1（或者其他timer可能也可以，没有尝试过）</p>
</li>
<li><p><img src="/imgs/image-20211214001535585.png" alt="image-20211214001535585"></p>
</li>
<li><p>然后另一个可能存在的问题是在<code>freertos.c</code> 文件中定义一些与<code>UART</code>相关的东西的时候会因为没有<code>#include &quot;usart.h&quot;</code>而出错，此时加上引用即可</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HindsightExperienceReplay（HER）</title>
    <url>/2022/10/13/HindsightExperienceReplay%EF%BC%88HER%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Hindsight-Experience-Replay"><a href="#Hindsight-Experience-Replay" class="headerlink" title="Hindsight Experience Replay"></a>Hindsight Experience Replay</h1><ul>
<li>原文<ul>
<li>Hindsight experience replay</li>
<li>Advances in neural information processing systems</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_43145941/article/details/119219436?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-119219436-blog-79498248.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-119219436-blog-79498248.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=2">参考链接</a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2></li>
<li>你得知道从状态S到目标goal的映射关系（以机械臂为例，状态可能是多个关节的角度，目标是三维空间一个点的坐标，如果知道状态，那么也能推算出机械臂末端在空间中的坐标）；</li>
<li>你得建立一个新的reward计算机制，它取决于目标goal和状态S，一般当状态S映射的goal’与goal相近时给予奖励；</li>
<li>你得创建一个记录每个episode transition的列表，它的作用是在每个episode结束后进行事后经验回放，具体回放方法之后讲；</li>
<li>RL算法接受的状态维度相较于原始的维度增加了目标goal的维度，也就是RL接受：<ul>
<li><img src="/imgs/dba2e2146bcea81c1cc62e3cafac2015a03a4b67fb2a29916283b8ea130ea278.png" alt="picture 2">  <h2 id="举例的github"><a href="#举例的github" class="headerlink" title="举例的github"></a>举例的github</h2></li>
</ul>
</li>
<li><a href="https://github.com/ZYunfeii/DRL_algorithm_library/tree/master/DDPG/DDPG_spinningup_HER">HER举例</a></li>
<li>这里episode_cache为存储transition的列表((s1,a1,r1,s1’),(s2,a2,r2,s2’)…)，枚举这个列表的元素。在第二句根据每个transition产生HER_SAMPLE_NUM个新的目标点new_goals，这些<strong>目标点时根据之后的transition的state推算得到的</strong>，当然一种简单的情况就是state。之后对这些new_goals做遍历，对每一个new_goal都重新计算reward，并将transition中s和s’的goal部分替换为new_goal，之后将这个新的transition存储入经验池buffer。这里之所以可以这么做是因为在动作a不变的情况下，改变goal是不会改变从原来的s转移到s’的转移概率的。</li>
<li>先对每个回合中的所有输入做一个reward的评价</li>
<li>然后在整个回合的数据后处理时，循环到i时，从i之后的数据里随机选出一部分作为新的goal，然后利用这些新的goal重新计算i这个数据的reward，然后将其放入到replay buffer中，可能导致replay buffer中包含多条由同一条数据而来但是reward不同的数据条目</li>
<li>可以在每训练一个回合之后更换初始的goal（也就是在筛选之前针对所有对象的goal）达到多目标训练的效果</li>
<li><a href="https://github.com/ZYunfeii/DRL_algorithm_library/blob/master/DDPG/DDPG_spinningup_HER/main.py">示例代码</a></li>
<li><img src="/imgs/000d30cf3c120ce06399c7b098681c9274e60a801893efe32854f09bf18d13d6.png" alt="picture 5">  </li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法（子字符串快速匹配算法）</title>
    <url>/2022/08/26/KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><ul>
<li>求一个字符串是不是另一个字符串子串的问题</li>
<li>暴力方法是O(N*M)的复杂度<h3 id="最长前缀和后缀的匹配长度"><a href="#最长前缀和后缀的匹配长度" class="headerlink" title="最长前缀和后缀的匹配长度"></a>最长前缀和后缀的匹配长度</h3></li>
<li>一个字符位置存储的信息是匹配长度</li>
<li><img src="/imgs/2196bf830f7b5db687473c79422ad7dfdec5d981f834054f9ac75eda56f6f7a0.png" alt="图 10">  <ul>
<li>上图中前缀从最左算起，后缀从最右算起，等于3的时候相等</li>
<li>将这个信息记录在K这个字符的位置</li>
<li>这个长度必须小于整体的长度</li>
</ul>
</li>
<li>以上这个信息需要对str2（也就是<strong>较短的字符串</strong>）求的<ul>
<li><img src="/imgs/fb0d130530c2ce09057006d9d7424b35ea7456661bc3604cb0c91ef4823f5c67.png" alt="图 11">  </li>
<li>第一个是<code>-1</code>是人为定义的<h3 id="加速过程"><a href="#加速过程" class="headerlink" title="加速过程"></a>加速过程</h3></li>
</ul>
</li>
<li><img src="/imgs/a4b9841bb42c9a4e0047bfef0ba00cc98d660c07dc4212c2bd9f2dc4b2e584a5.png" alt="图 12">  <ul>
<li>当长字符串的匹配进行到x位置的时候发现匹配不能继续，假如此时短字符串的匹配进行到了y位置，那么不需要回退x，只需要回退y到<strong>最长前缀的末尾位置（图中画框的位置）</strong>，相当于不需要从头开始匹配，而是从<strong>图上的j位置（下标三角）开始</strong>，只需要通过最长前缀和后缀跳过长字符串和短字符串中<strong>已经匹配过的段</strong>，实际上相当于将短字符串直接<strong>后移到最长前缀的位置</strong>，然后继续匹配即可。</li>
<li> 另一个问题是从i到j位置之间不可能有任何一个位置能够配出短字符串</li>
</ul>
</li>
<li>举例</li>
<li><img src="/imgs/2809ae063ab9181ec086ffc99f622621c7cc923e0381e0a8ae7458c1d25dd66d.png" alt="图 13">  <ul>
<li>团上的行为是先从两个字符串的头位置开始比对两个字符串，然后到第一个字符串的e位置发现不对，然后寻找此时短字符串的w位置的最长前缀位置的下一个位置也就是t，但是t于e仍然不相等，那么就寻找t位置的最长前缀的下一个位置，也就是s与e比较，但是还不相等，那么就<strong>选择s位置的最长前缀的下一个位置</strong>是短字符串的开始位置，也不行，此时将长字符串的比较位置后移一位到e的下一个位置，重新开始比较<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndexOf</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="keyword">null</span> || s2 == <span class="keyword">null</span> || s2.length() &lt; <span class="number">1</span> || s1.length() &lt; s2.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] str1 = s1.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] str2 = s2.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// O(M) m &lt;= n</span></span><br><span class="line">    <span class="keyword">int</span>[] next = getNextArray(str2);</span><br><span class="line">    <span class="comment">// O(N)</span></span><br><span class="line">    <span class="keyword">while</span> (x &lt; str1.length &amp;&amp; y &lt; str2.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str1[x] == str2[y]) &#123;</span><br><span class="line">            x++;</span><br><span class="line">            y++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next[y] == -<span class="number">1</span>) &#123; <span class="comment">// y == 0</span></span><br><span class="line">            x++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y = next[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y == str2.length ? x - y : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNextArray(<span class="keyword">char</span>[] str2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str2.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; -<span class="number">1</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[str2.length];</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>; <span class="comment">// 目前在哪个位置上求next数组的值</span></span><br><span class="line">    <span class="keyword">int</span> cn = <span class="number">0</span>; <span class="comment">// 当前是哪个位置的值再和i-1位置的字符比较</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; next.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str2[i - <span class="number">1</span>] == str2[cn]) &#123; <span class="comment">// 配成功的时候</span></span><br><span class="line">            next[i++] = ++cn; <span class="comment">// cn +1 正好被i+1位置当作前缀字符串长度使用</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &gt; <span class="number">0</span>) &#123; <span class="comment">// 没成功但是还能往前跳</span></span><br><span class="line">            cn = next[cn];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next[i++] = <span class="number">0</span>; <span class="comment">// 已经到头了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>next</code>数组就是判断最长前缀后缀的数组<h3 id="跳出循环的方法：二者有一个越界"><a href="#跳出循环的方法：二者有一个越界" class="headerlink" title="跳出循环的方法：二者有一个越界"></a>跳出循环的方法：二者有一个越界</h3><ul>
<li>长字符串越界：匹配失败</li>
<li>短字符串越界：找到了长字符串中的短字符串<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3></li>
</ul>
</li>
<li>O(N)<h3 id="求解next数组"><a href="#求解next数组" class="headerlink" title="求解next数组"></a>求解next数组</h3></li>
<li><code>i</code>位置的信息怎么求：<ul>
<li>利用<code>i-1</code>位置的信息求取，假如前缀字符串相等长度的最后一个位置和<code>i-1</code>位置的字符相同的话直接把<code>i-1</code>位置的最长前缀信息+1即可</li>
<li>如果不一样？<ul>
<li>获得前面字符串最长前缀的<strong>前缀最后一个位置的最长前缀信息</strong>，假如这个最长前缀的下一个位置与<code>i-1</code>位置的字符相同的话，就将上面获取到的<strong>最长前缀位置的最长前缀的长度+1</strong>，还不一样的话<strong>循环往复向前跳</strong>，找前缀的前缀的前缀长度等等…假如到0位置依然不相等，那么结果就是0</li>
<li><img src="/imgs/cb5617fd12180ae2d31eb9ae5b863a1ec1fcb60556d4e96fe34a91db614c6f81.png" alt="图 1">  </li>
<li>时间复杂度同样是线性的</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode图相关遍历</title>
    <url>/2023/12/05/Leetcode%E5%9B%BE%E7%9B%B8%E5%85%B3%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="图的拓扑排序"><a href="#图的拓扑排序" class="headerlink" title="图的拓扑排序"></a>图的拓扑排序</h2><h3 id="广度优先搜索（Leetcode-207-课程表）"><a href="#广度优先搜索（Leetcode-207-课程表）" class="headerlink" title="广度优先搜索（Leetcode 207.课程表）"></a>广度优先搜索（Leetcode 207.课程表）</h3><ul>
<li>用一个数组记录每个节点的进入边的数量</li>
<li>开始的时候将所有入度为0的点加入队列</li>
<li>依次从队列中弹出点，将从这个点出发指向的所有点的入度-1，然后将跟这个点相关的路径全部删除<ul>
<li>假如此时遇到点的入度是0的话，将这个点加入队列</li>
</ul>
</li>
<li>将队列中弹出的点加入输出序列中</li>
<li>假如最后图上的<strong>所有点都在输出序列中</strong>，说明无环，否则有环<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">vMap</span>(numCourses);</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inCnt</span><span class="params">(numCourses, <span class="number">0</span>)</span></span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;prerequisites.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            vMap[prerequisites[i][<span class="number">1</span>]].<span class="built_in">push_back</span>(prerequisites[i][<span class="number">0</span>]);</span><br><span class="line">            ++inCnt[prerequisites[i][<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;numCourses; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(inCnt[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> temp = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i:vMap[temp])</span><br><span class="line">            &#123;</span><br><span class="line">                --inCnt[i];</span><br><span class="line">                <span class="keyword">if</span>(inCnt[i] == <span class="number">0</span>)q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            vMap[temp] = vector&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">size</span>()&lt;numCourses)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><ul>
<li>遍历所有节点，先标记自己被遍历过了</li>
<li>每个节点递归的遍历<strong>自己所有边</strong>指向的没有被打上遍历过的标签的节点</li>
<li>回溯的时候（也就是之后的节点都遍历结束之后）将自己添加到拓扑顺序的栈中</li>
<li>依次弹出栈中元素，得到顺序<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> vertices;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; adjList;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Graph</span>(<span class="keyword">int</span> V) : <span class="built_in">vertices</span>(V), <span class="built_in">adjList</span>(V) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        adjList[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSortUtil</span><span class="params">(<span class="keyword">int</span> v, vector&lt;<span class="keyword">bool</span>&gt;&amp; visited, stack&lt;<span class="keyword">int</span>&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">        visited[v] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> neighbor : adjList[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                <span class="built_in">topologicalSortUtil</span>(neighbor, visited, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.<span class="built_in">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">visited</span><span class="params">(vertices, <span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertices; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                <span class="built_in">topologicalSortUtil</span>(i, visited, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Topological Sort: &quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (!result.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; result.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            result.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Graph <span class="title">g</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    g.<span class="built_in">addEdge</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    g.<span class="built_in">topologicalSort</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-127-单词接龙"><a href="#Leetcode-127-单词接龙" class="headerlink" title="Leetcode 127. 单词接龙"></a>Leetcode 127. 单词接龙</h2><ul>
<li>此题是讲字母相邻的单词组织成一张图</li>
<li>实际上是求图上两个点的最近距离</li>
<li><a href="https://leetcode.cn/problems/word-ladder/solutions/473600/dan-ci-jie-long-by-leetcode-solution/?envType=study-plan-v2&envId=top-interview-150">题解</a></li>
<li>广度优先搜索法<ul>
<li>每循环一次，找一个没有接触过的位置，将其距离更新为接触过的位置+1，然后也放入队列遍历</li>
<li>注意，只考虑之前没有加入过的点，防止环的影响<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;string, <span class="keyword">int</span>&gt; wordId;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; edge;</span><br><span class="line">    <span class="keyword">int</span> nodeNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addWord</span><span class="params">(string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!wordId.<span class="built_in">count</span>(word)) &#123;</span><br><span class="line">            wordId[word] = nodeNum++;</span><br><span class="line">            edge.<span class="built_in">emplace_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(string&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addWord</span>(word);</span><br><span class="line">        <span class="keyword">int</span> id1 = wordId[word];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>&amp; it : word) &#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = it;</span><br><span class="line">            it = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="built_in">addWord</span>(word);</span><br><span class="line">            <span class="keyword">int</span> id2 = wordId[word];</span><br><span class="line">            edge[id1].<span class="built_in">push_back</span>(id2);</span><br><span class="line">            edge[id2].<span class="built_in">push_back</span>(id1);</span><br><span class="line">            it = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (string&amp; word : wordList) &#123;</span><br><span class="line">            <span class="built_in">addEdge</span>(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">addEdge</span>(beginWord);</span><br><span class="line">        <span class="keyword">if</span> (!wordId.<span class="built_in">count</span>(endWord)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dis</span><span class="params">(nodeNum, INT_MAX)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> beginId = wordId[beginWord], endId = wordId[endWord];</span><br><span class="line">        dis[beginId] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(beginId);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (x == endId) &#123;</span><br><span class="line">                <span class="keyword">return</span> dis[endId] / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>&amp; it : edge[x]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[it] == INT_MAX) &#123;</span><br><span class="line">                    dis[it] = dis[x] + <span class="number">1</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>c</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LRU缓存机制思路</title>
    <url>/2022/01/19/LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="LRU缓存"><a href="#LRU缓存" class="headerlink" title="LRU缓存"></a>LRU缓存</h1><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>请你设计并实现一个满足  LRU (最近最少使用) 缓存的数据结构。</p>
<ul>
<li>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存</li>
<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>
<li>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。</li>
<li>函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。</li>
</ul>
<h2 id="程序思路"><a href="#程序思路" class="headerlink" title="程序思路"></a>程序思路</h2><ul>
<li>使用<strong>双向链表</strong>存储数据，<em>头节点</em>和<em>尾节点</em>另外存储</li>
<li>使用一个<code>unordered_map</code>存储每一个键值对的指针</li>
<li>每一次使用对应的指针，都将其移动到双向链表的头部</li>
<li>容量超出的时候删除链表的末端节点</li>
<li><img src="/imgs/image-12345678.png" alt="image-12345678"></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetson不能用网线连接电脑网络的解决方法</title>
    <url>/2023/09/18/Jetson%E4%B8%8D%E8%83%BD%E7%94%A8%E7%BD%91%E7%BA%BF%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91%E7%BD%91%E7%BB%9C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>有时候使用网线将Jetson插到电脑上之后并不能有效的链接jetson和电脑</li>
<li>此时是因为jetson的网络接口不能上网导致的</li>
<li>需要在网络设置中修改jetson对应的以太网接口的设置</li>
<li><img src="/imgs/f560574cd753800eaebac407879a908f7c87fd151da78f60359658a2a5da0423.png" alt="picture 0">  <ul>
<li>打开自己电脑访问网络的渠道（比如WLAN）</li>
<li>设置属性</li>
<li>打开共享</li>
<li>将其与jetson连接的网络端口共享即可</li>
</ul>
</li>
<li>可能还需要重启jetson的网络配置<code>sudo service network-manager restart</code></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下使用epoll的C语言服务端</title>
    <url>/2022/07/11/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8epoll%E7%9A%84C%E8%AF%AD%E8%A8%80%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="Linux下使用epoll的C语言服务端"><a href="#Linux下使用epoll的C语言服务端" class="headerlink" title="Linux下使用epoll的C语言服务端"></a>Linux下使用epoll的C语言服务端</h1><ul>
<li>该服务器使用了<code>epoll</code>处理多个同时链接的客户端的事件。</li>
<li>流程为开始使用<code>epoll_create</code>创建一个<code>epoll</code>的Fd，然后将以服务器<code>socket</code>为基础的事件使用<code>epoll_ctl</code>将其添加处理。</li>
<li>然后整个程序进入无限循环，调用<code>epoll_wait</code>等待事件，然后获取到事件列表之后，使用for循环逐个处理，此处仅仅处理收取数据的事件，实际上常见的事件为<code>EPOLLIN</code>、<code>EPOLLET</code>、<code>EPOLLOUT</code>，三者的详细介绍在此不详细解释。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;net/if.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVERPORT 8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*linux上支持（Android上也支持）， 此函数不仅能获取IP，还可以获取MAC地址、掩码和广播地址等*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_local_ip_using_ifconf</span><span class="params">(<span class="keyword">char</span> *str_ip)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sock_fd, intrface;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ifreq</span> <span class="title">buf</span>[<span class="title">INET_ADDRSTRLEN</span>];</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ifconf</span> <span class="title">ifc</span>;</span></span><br><span class="line">	<span class="keyword">char</span> *local_ip = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> status = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ((sock_fd = <span class="built_in">socket</span>(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ifc.ifc_len = <span class="built_in"><span class="keyword">sizeof</span></span>(buf);</span><br><span class="line">		ifc.ifc_buf = (<span class="keyword">caddr_t</span>)buf;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">ioctl</span>(sock_fd, SIOCGIFCONF, (<span class="keyword">char</span> *)&amp;ifc))</span><br><span class="line">		&#123;</span><br><span class="line">			intrface = ifc.ifc_len/<span class="built_in"><span class="keyword">sizeof</span></span>(struct ifreq);</span><br><span class="line">			<span class="keyword">while</span> (intrface-- &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (!(<span class="built_in">ioctl</span>(sock_fd, SIOCGIFADDR, (<span class="keyword">char</span> *)&amp;buf[intrface])))</span><br><span class="line">				&#123;</span><br><span class="line">					local_ip = <span class="literal">NULL</span>;</span><br><span class="line">					local_ip = <span class="built_in">inet_ntoa</span>(((struct sockaddr_in*)(&amp;buf[intrface].ifr_addr))-&gt;sin_addr);</span><br><span class="line">					<span class="keyword">if</span>(local_ip)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">strcpy</span>(str_ip, local_ip);</span><br><span class="line">						status = <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;127.0.0.1&quot;</span>, str_ip))</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">close</span>(sock_fd);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clientString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* ipAdd;</span><br><span class="line">    <span class="keyword">int</span> port;</span><br><span class="line">&#125; clientStruct;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SIGINTHandler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">close</span>(sockfd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nServer stopping, already closed socket %d. \n&quot;</span>, sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ip_str[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> addrlen = <span class="built_in"><span class="keyword">sizeof</span></span>(client_addr);</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">char</span> localIPBuf[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">signal</span>(SIGINT, (<span class="keyword">sig_t</span>)SIGINTHandler);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 打开套接字，得到套接字描述符 */</span></span><br><span class="line">    sockfd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; sockfd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 将套接字与指定端口号进行绑定 */</span></span><br><span class="line">    server_addr.sin_family = AF_INET;</span><br><span class="line">    server_addr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line">    server_addr.sin_port = <span class="built_in">htons</span>(SERVERPORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">get_local_ip_using_ifconf</span>(buf);</span><br><span class="line">    <span class="built_in">puts</span>(buf);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">inet_ntop</span>(AF_INET, &amp;(server_addr.sin_addr), localIPBuf, <span class="built_in"><span class="keyword">sizeof</span></span>(localIPBuf));</span><br><span class="line">    <span class="comment">// puts(localIPBuf);</span></span><br><span class="line"></span><br><span class="line">    ret = <span class="built_in">bind</span>(sockfd, (struct sockaddr *)&amp;server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(server_addr));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(sockfd);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 使服务器进入监听状态 */</span></span><br><span class="line">    ret = <span class="built_in">listen</span>(sockfd, <span class="number">50</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line">        <span class="built_in">close</span>(sockfd);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 阻塞等待客户端连接 */</span></span><br><span class="line">    <span class="keyword">int</span> epfd, connfd;</span><br><span class="line">    epfd = <span class="built_in">epoll_create</span>(<span class="number">256</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>, <span class="title">events</span>[10];</span></span><br><span class="line">    ev.data.fd = sockfd;</span><br><span class="line">    ev.events = EPOLLIN|EPOLLET|EPOLLOUT;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epfd, EPOLL_CTL_ADD, sockfd, &amp;ev);</span><br><span class="line">    <span class="keyword">int</span> nOfEvent = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *ipStr;</span><br><span class="line">    <span class="keyword">int</span> clientFd;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">256</span>];</span><br><span class="line">    std::unordered_map&lt;<span class="keyword">int</span>, clientStruct&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        nOfEvent = <span class="built_in">epoll_wait</span>(epfd, events, <span class="number">10</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nOfEvent;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(events[i].data.fd == sockfd)</span><br><span class="line">            &#123;</span><br><span class="line">                clientStruct clientTemp;</span><br><span class="line">                connfd = <span class="built_in">accept</span>(sockfd, (sockaddr* )&amp;client_addr, (<span class="keyword">socklen_t</span>*)&amp;addrlen);</span><br><span class="line">                <span class="keyword">if</span>(connfd&lt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Error: Accept Failure!\n&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                ipStr = <span class="built_in">inet_ntoa</span>(client_addr.sin_addr);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;client: %s\n&quot;</span>, ipStr);</span><br><span class="line">                <span class="comment">//将客户端socket与客户端IP的映射关系存入map</span></span><br><span class="line">                clientTemp.ipAdd = ipStr;</span><br><span class="line">                clientTemp.port = <span class="built_in">ntohs</span>(client_addr.sin_port);</span><br><span class="line">                m.<span class="built_in">insert</span>(std::pair&lt;<span class="keyword">int</span>, clientStruct&gt;(connfd, clientTemp));</span><br><span class="line">                ev.data.fd = connfd;</span><br><span class="line">                ev.events = EPOLLIN|EPOLLET;</span><br><span class="line">                <span class="comment">//修改epoll</span></span><br><span class="line">                <span class="built_in">epoll_ctl</span>(epfd, EPOLL_CTL_ADD, connfd, &amp;ev);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;EPOLLIN!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>((clientFd = events[i].data.fd)&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>((n = <span class="built_in">read</span>(clientFd, line, <span class="number">256</span>))&lt;=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">close</span>(clientFd);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Client Error!\n&quot;</span>);</span><br><span class="line">                    <span class="comment">//从映射关系中抹除之前断开的socket</span></span><br><span class="line">                    m.<span class="built_in">erase</span>(connfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    line[n<span class="number">-1</span>] = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">                    line[n] = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Got message from: %s:&quot;</span>, m.<span class="built_in">count</span>(connfd)&gt;<span class="number">0</span>?m[connfd].ipAdd:<span class="string">&quot;Unkown Client&quot;</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%4d\n&quot;</span>, m.<span class="built_in">count</span>(connfd)&gt;<span class="number">0</span>?m[connfd].port:<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;data length = %d\n&quot;</span>, <span class="built_in">strlen</span>(line));</span><br><span class="line">                    <span class="comment">//回显</span></span><br><span class="line">                    <span class="built_in">write</span>(clientFd, line, <span class="built_in">strlen</span>(line)+<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">memset</span>(line, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(line));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ev.data.fd = clientFd;</span><br><span class="line">                ev.events = EPOLLIN|EPOLLET;</span><br><span class="line">                <span class="comment">// epoll_ctl(epfd, EPOLL_CTL_MOD, clientFd, &amp;ev);</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            else if(events[i].events&amp;EPOLLOUT)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                printf(&quot;Sent!&quot;);</span></span><br><span class="line"><span class="comment">                clientFd = events[i].data.fd;</span></span><br><span class="line"><span class="comment">                // write(clientFd, line, strlen(line));</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                ev.data.fd = clientFd;</span></span><br><span class="line"><span class="comment">                ev.events = EPOLLOUT|EPOLLIN|EPOLLET;</span></span><br><span class="line"><span class="comment">                epoll_ctl(epfd, EPOLL_CTL_MOD, clientFd, &amp;ev);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 关闭套接字 */</span></span><br><span class="line">    <span class="built_in">close</span>(sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>上述服务器提供了一个基于C++<code>unordered_map</code>实现的映射，将每次接收到的事件的<code>fd</code>映射到一个存储了该客户端socket对应的IP地址和端口号的结构体上，服务器将其读出即可获取此客户端的相关信息。映射关系是在该客户端初次连接到服务器的时候创建的，并且会在连接关闭或者出现异常的时候从映射中移除。</li>
<li>下面为客户端<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_IP <span class="meta-string">&quot;0.0.0.0&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> sockFd = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SIGINTHandler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">close</span>(sockFd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nClient stopping, already closed socket %d. \n&quot;</span>, sockFd);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sock_server_addr</span>;</span></span><br><span class="line">    <span class="keyword">char</span> sendBuf[<span class="number">100</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> readBuf[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> send_len;</span><br><span class="line"></span><br><span class="line">    sockFd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sockFd &lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open socket Error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    sock_server_addr.sin_family = AF_INET;</span><br><span class="line">    sock_server_addr.sin_port = <span class="built_in">htons</span>(SERVER_PORT);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">inet_aton</span>(SERVER_IP, &amp;sock_server_addr.sin_addr);</span><br><span class="line">    <span class="built_in">memset</span>(sock_server_addr.sin_zero, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Client started, trying to connect %s:%4d. \n&quot;</span>, SERVER_IP, SERVER_PORT);</span><br><span class="line">    ret = <span class="built_in">connect</span>(sockFd, (struct sockaddr*)&amp;sock_server_addr, <span class="built_in"><span class="keyword">sizeof</span></span>(struct  sockaddr));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Client Connected!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;connect Error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="keyword">char</span> *)&amp;sendBuf);</span><br><span class="line">        <span class="built_in">write</span>(sockFd, sendBuf, <span class="built_in">strlen</span>(sendBuf)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        n = <span class="built_in">read</span>(sockFd, readBuf, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Server Repeat: &quot;</span>);</span><br><span class="line">        <span class="comment">// printf(readBuf);</span></span><br><span class="line">        <span class="keyword">while</span> (readBuf[<span class="number">0</span>]!=<span class="number">0</span>&amp;&amp;n&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// puts(&quot;:&quot;);</span></span><br><span class="line">            <span class="built_in">printf</span>(readBuf);</span><br><span class="line">            n = <span class="built_in">read</span>(sockFd, readBuf, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(sendBuf, <span class="built_in"><span class="keyword">sizeof</span></span>(sendBuf), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">memset</span>(readBuf, <span class="built_in"><span class="keyword">sizeof</span></span>(readBuf), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux下挂载U盘操作</title>
    <url>/2022/01/15/Linux%E4%B8%8B%E6%8C%82%E8%BD%BDU%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Linux下挂载U盘操作"><a href="#Linux下挂载U盘操作" class="headerlink" title="Linux下挂载U盘操作"></a>Linux下挂载U盘操作</h1><p>首先在控制台输入<code>sudo fdisk -l</code></p>
<p>然后找到自己的U盘比如下图</p>
<p><img src="/imgs/image-20220115125056297.png" alt="image-20220115125056297"></p>
<p>看到其名称为<code>/dev/sda1</code>，然后在<code>/dev</code>下新建一个文件夹比如叫USB</p>
<p><code>mkdir /dev/USB</code></p>
<p>然后将USB设备挂载在这个目录下</p>
<p><code>sudo mount /dev/sda1 /dev/USB</code></p>
<p>解除挂载类似，区别仅仅是mount换成unmount</p>
]]></content>
  </entry>
  <entry>
    <title>Linux交叉编译</title>
    <url>/2023/04/05/Linux%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><ul>
<li><a href="https://developer.arm.com/downloads/">官网</a></li>
<li>要看好自己的芯片的架构，比如台式机是x86_64，芯片是aarch64架构的，不要搞错了，否则会出现类似这样的报错（台式机芯片对应的选择不对）<ul>
<li><img src="/imgs/55f7735e7d85794d2782b138b36bbdfa57e838c4cd416bc27f7321bd8b4cddda.png" alt="picture 1">  </li>
</ul>
</li>
<li><strong>aarch64就是arm64</strong></li>
<li><code>arm eabi</code>是32位不带硬件浮点<h2 id="添加到环境变量"><a href="#添加到环境变量" class="headerlink" title="添加到环境变量"></a>添加到环境变量</h2></li>
<li>将工具链的目录下<code>/bin</code>文件夹添加到<code>/etc/profile</code>，然后source一下即可</li>
<li>测试：找一个工具链的文件名直接在控制台输入，如果不显示ot found说明配置的没问题</li>
<li>遇到错误<img src="/imgs/b0d7ea3d1fe2a425a9f68b8cf1e0cab462ffc38ea4261d719efdafaec62f1a9d.png" alt="picture 2">  <ul>
<li>version `GLIBC_2.34’ not found (required by ./test)<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/huazhang_001/article/details/128828999">参考</a></li>
<li>但是新版本的库可能不太好找到</li>
<li>也可以<strong>下载旧版本的工具链</strong>，但是此时假如找不到的话需要到<ul>
<li><img src="/imgs/eaaa49919b6b6eb70d5924d724346e0f8f4c27f5382121663a5117afdfa9d5a7.png" alt="picture 3">  下面那个下寻找，上面大多都是32位arm</li>
<li>比如这个<img src="/imgs/496b01f8904f038310b4ddec55ef6d024b8c46122da135995de67649cc78496b.png" alt="picture 4">  </li>
</ul>
</li>
<li>成功<img src="/imgs/b15cd13ce2fb795faf45e816ff93ee25688022b2512acf57a81c9c878b337cdf.png" alt="picture 5">  </li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux使用环境变量无需路径执行自己的程序</title>
    <url>/2023/04/04/Linux%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%97%A0%E9%9C%80%E8%B7%AF%E5%BE%84%E6%89%A7%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.csdn.net/gfdxx/article/details/127875066">参考</a><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2></li>
<li><a href="https://wap.sciencenet.cn/blog-3425629-1258887.html?mobile=1">参考</a></li>
<li>编辑<code>/etc/profile</code>文件，在其最后一行添加<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:&lt;路径&gt;</span><br></pre></td></tr></table></figure></li>
<li>相当于在环境变量后追加了新的内容</li>
<li>然后使用<code>source /etc/profile</code>即可更新环境变量<h2 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h2></li>
<li>在添加的环境变量目录下创建一个文件（比如test.sh）</li>
<li>然后给test.sh可执行的权限</li>
<li>然后直接在命令行输入<code>test.sh</code> 即可直接执行这个脚本的内容</li>
<li>可以在环境变量中使用a<code>alias</code>给命令起别名，进一步简化命令的使用<ul>
<li><img src="/imgs/30cdf759675eba53ff40ae74fe08b865daaa6ce6a6bc942d28302f6389eb2685.png" alt="picture 1">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode数组题目</title>
    <url>/2023/12/06/Leetcode%E6%95%B0%E7%BB%84%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="LeetCode-153-寻找旋转排序数组中的最小值"><a href="#LeetCode-153-寻找旋转排序数组中的最小值" class="headerlink" title="LeetCode 153. 寻找旋转排序数组中的最小值"></a>LeetCode 153. 寻找旋转排序数组中的最小值</h2><ul>
<li>我们考虑数组中的最后一个元素<code>x</code>：在最小值右侧的元素（不包括最后一个元素本身），它们的值一定都严格小于<code>x</code>；而在最小值左侧的元素，它们的值一定都严格大于<code>x</code>。因此，我们可以根据这一条性质，通过二分查找的方法找出最小值。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> pivot = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[pivot] &lt; nums[high]) &#123;</span><br><span class="line">                high = pivot;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                low = pivot + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode-4-寻找两个正序数组的中位数"><a href="#Leetcode-4-寻找两个正序数组的中位数" class="headerlink" title="Leetcode 4. 寻找两个正序数组的中位数"></a>Leetcode 4. 寻找两个正序数组的中位数</h2></li>
<li>此题较为复杂，建议查看<a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/258842/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/?envType=study-plan-v2&envId=top-100-liked">题解</a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getKthElement</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; nums2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 主要思路：要找到第 k (k&gt;1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较</span></span><br><span class="line"><span class="comment">         * 这里的 &quot;/&quot; 表示整除</span></span><br><span class="line"><span class="comment">         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个</span></span><br><span class="line"><span class="comment">         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个</span></span><br><span class="line"><span class="comment">         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) &lt;= k-2 个</span></span><br><span class="line"><span class="comment">         * 这样 pivot 本身最大也只能是第 k-1 小的元素</span></span><br><span class="line"><span class="comment">         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 &quot;删除&quot;，剩下的作为新的 nums1 数组</span></span><br><span class="line"><span class="comment">         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 &quot;删除&quot;，剩下的作为新的 nums2 数组</span></span><br><span class="line"><span class="comment">         * 由于我们 &quot;删除&quot; 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 边界情况</span></span><br><span class="line">            <span class="keyword">if</span> (index1 == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums2[index2 + k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (index2 == n) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[index1 + k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">min</span>(nums1[index1], nums2[index2]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 正常情况</span></span><br><span class="line">            <span class="keyword">int</span> newIndex1 = <span class="built_in">min</span>(index1 + k / <span class="number">2</span> - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> newIndex2 = <span class="built_in">min</span>(index2 + k / <span class="number">2</span> - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> pivot1 = nums1[newIndex1];</span><br><span class="line">            <span class="keyword">int</span> pivot2 = nums2[newIndex2];</span><br><span class="line">            <span class="keyword">if</span> (pivot1 &lt;= pivot2) &#123;</span><br><span class="line">                k -= newIndex1 - index1 + <span class="number">1</span>;</span><br><span class="line">                index1 = newIndex1 + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                k -= newIndex2 - index2 + <span class="number">1</span>;</span><br><span class="line">                index2 = newIndex2 + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalLength = nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (totalLength % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getKthElement</span>(nums1, nums2, (totalLength + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">getKthElement</span>(nums1, nums2, totalLength / <span class="number">2</span>) + <span class="built_in">getKthElement</span>(nums1, nums2, totalLength / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-136-只出现一次的数字"><a href="#Leetcode-136-只出现一次的数字" class="headerlink" title="Leetcode 136. 只出现一次的数字"></a>Leetcode 136. 只出现一次的数字</h2><ul>
<li>对整个数组元素挨个求异或，最后剩下的一个就是只出现一次的那个</li>
<li>因为出现过两次的会因为自己异或自己而变为0<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum^=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="LeetCode-31-下一个排列"><a href="#LeetCode-31-下一个排列" class="headerlink" title="LeetCode 31. 下一个排列"></a>LeetCode 31. 下一个排列</h2><ul>
<li><a href="https://leetcode.cn/problems/next-permutation/solutions/80560/xia-yi-ge-pai-lie-suan-fa-xiang-jie-si-lu-tui-dao-/">参考</a></li>
<li>从后向前 查找第一个 相邻升序 的元素对 <code>(i,j)</code>，满足 <code>A[i] &lt; A[j]</code>。此时 <code>[j,end)</code> 必然是降序</li>
<li>在 <code>[j,end)</code> 从后向前 查找第一个满足 <code>A[i] &lt; A[k]</code> 的 <code>k</code>。<code>A[i]</code>、<code>A[k]</code> 分别就是上文所说的「小数」、「大数」</li>
<li>将 <code>A[i]</code> 与 <code>A[k]</code> 交换</li>
<li>可以断定这时 <code>[j,end)</code> 必然是降序，逆置 <code>[j,end)</code>，使其升序</li>
<li>如果在步骤 1 找不到符合的相邻元素对，说明当前 <code>[begin,end)</code> 为一个降序顺序，则直接跳到步骤 4</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=nums.<span class="built_in">size</span>(),i=l<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;nums[i]&gt;=nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=l<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//找出nums[i]后面大于nums[i]的最小数的下标</span></span><br><span class="line">            <span class="keyword">while</span>(nums[j]&lt;=nums[i])&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(nums[i],nums[j]);</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>()+i+<span class="number">1</span>,nums.<span class="built_in">end</span>());<span class="comment">//交换完后对nums[i]后面的数字进行从小到大排列</span></span><br><span class="line">            <span class="comment">//因为此时nums.begin()+i+1到nums.end()一定是降序排列,所以只需reverse就是从小到大排列了</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//说明是最大排列,下一个应该是最小排列</span></span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Leetcode-452-用最少数量的箭引爆气球"><a href="#Leetcode-452-用最少数量的箭引爆气球" class="headerlink" title="Leetcode 452. 用最少数量的箭引爆气球"></a>Leetcode 452. 用最少数量的箭引爆气球</h2><ul>
<li>按照区间的<strong>右端点排序</strong>，取右端点的值，直到目前的区间的右端点的值小于下一个区间的左端点的值的时候就说明没有重叠部分了，需要增加新的区间<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMinArrowShots</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>(), [](<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; u, <span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; v) &#123;</span><br><span class="line">            <span class="keyword">return</span> u[<span class="number">1</span>] &lt; v[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> pos = points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; balloon: points) &#123;</span><br><span class="line">            <span class="keyword">if</span> (balloon[<span class="number">0</span>] &gt; pos) &#123;</span><br><span class="line">                pos = balloon[<span class="number">1</span>];</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核启动分析</title>
    <url>/2022/02/27/Linux%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Linux内核启动分析"><a href="#Linux内核启动分析" class="headerlink" title="Linux内核启动分析"></a>Linux内核启动分析</h1><h2 id="start-kernel函数"><a href="#start-kernel函数" class="headerlink" title="start_kernel函数"></a>start_kernel函数</h2><ul>
<li><p>start_kernel 通过调用众多的子函数来完成 Linux 启动之前的一些初始化工作，由于 start_kernel 函数里面调用的子函数太多，而这些子函数又很复杂，因此我们简单的来看一下一 些重要的子函数。</p>
</li>
<li><p>精简后的内容大致如下</p>
<ul>
<li><img src="/imgs/image-20220227110529972.png" alt="image-20220227110529062"></li>
<li><img src="/imgs/image-20220227110555519.png" alt="image-20220227110555519"></li>
<li><img src="/imgs/image-20220227110617809.png" alt="image-20220227110617809"></li>
<li><img src="/imgs/image-20220227110631266.png" alt="image-20220227110631266"></li>
<li><img src="/imgs/image-20220227110653054.png" alt="image-20220227110653054"></li>
</ul>
</li>
</ul>
<h3 id="启动过程中调用的函数分析"><a href="#启动过程中调用的函数分析" class="headerlink" title="启动过程中调用的函数分析"></a>启动过程中调用的函数分析</h3><ul>
<li><p><code>lockdep_init();</code>，死锁检测，初始化两个hash表，尽可能早的执行</p>
</li>
<li><p><code>set_task_stack_end_magic(&amp;init_task);</code>，设置任务栈结束魔术数，用于栈溢出检测</p>
</li>
<li><p><code>smp_setup_processor_id();</code>跟 SMP 有关(多核处理器)，设置处理器 ID。</p>
</li>
<li><p><code>debug_objects_early_init();</code>,做一些和 debug 有关的初始化 </p>
</li>
<li><p><code>boot_init_stack_canary();</code>栈溢出检测初始化</p>
</li>
<li><p><code>cgroup_init_early()</code>， cgroup 初始化，cgroup 用于控制 Linux 系统资源</p>
</li>
<li><p><code>local_irq_disable()</code>关闭当前 CPU 中断</p>
</li>
<li><p><code>boot_cpu_init();</code>跟 CPU 有关的初始化</p>
</li>
<li><p><code>page_address_init(); </code> 页地址相关的初始化</p>
</li>
<li><p><code>pr_notice(&quot;%s&quot;, linux_banner);</code>打印 Linux 版本号、编译时间等信息</p>
</li>
<li><p><code>setup_arch(&amp;command_line)</code>架构相关的初始化，此函数会解析传递进来的ATAGS 或者设备树(DTB)文件。会根据设备树里面的 model 和 compatible 这两个属性值来查找Linux 是否支持这个单板。此函数也会获取设备树 中 chosen 节点下的 bootargs 属性值来得到命令 行参数，也就是 uboot 中的 bootargs 环境变量的值，获取到的命令行参数会保存到command_line 中。</p>
</li>
<li><p><code>mm_init_cpumask(&amp;init_mm);</code>看名字，应该是和内存有关的初始化</p>
</li>
<li><p><code>setup_command_line(command_line); </code>好像是存储命令行参数</p>
</li>
<li><p><code>setup_nr_cpu_ids();</code>如果只是 SMP(多核 CPU)的话，此函数用于获取CPU 核心数量，CPU 数量保存在变量 nr_cpu_ids 中。</p>
</li>
<li><p><code>setup_per_cpu_areas(); </code>在 SMP 系统中有用，设置每个 CPU 的 per-cpu 数据</p>
</li>
<li><p><code>build_all_zonelists(NULL, NULL); </code>建立系统内存页区(zone)链表</p>
</li>
<li><p><code>page_alloc_init(); </code>处理用于热插拔 CPU 的页</p>
</li>
<li><p><code>pr_notice(&quot;Kernel command line: %s\n&quot;, boot_command_line);</code> 打印命令行信息 </p>
</li>
<li><p><code>parse_early_param(); </code> 解析命令行中的 console 参数</p>
</li>
<li><p><code>setup_log_buf(0);</code>设置 log 使用的缓冲区</p>
</li>
<li><p><code>pidhash_init();</code> 构建 PID 哈希表，Linux 中每个进程都有一个 ID,这个 ID 叫做 PID。通过构建哈希表可以快速搜索进程信息结构体。</p>
</li>
<li><p><code>vfs_caches_init_early();</code>预先初始化 vfs(虚拟文件系统)的目录项和索引节点缓存</p>
</li>
<li><p><code>sort_main_extable();</code>定义内核异常列表</p>
</li>
<li><p><code>trap_init(); </code>完成对系统保留中断向量的初始化</p>
</li>
<li><p><code>mm_init();</code>内存管理初始化</p>
</li>
<li><p><code>sched_init();</code>初始化调度器，主要是初始化一些结构体</p>
</li>
<li><p><code>preempt_disable();</code>关闭优先级抢占</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (WARN(!irqs_disabled(), <span class="comment">/* 检查中断是否关闭，如果没有的话就关闭中断 */</span></span><br><span class="line"> <span class="string">&quot;Interrupts were enabled *very* early, fixing it\n&quot;</span>))</span><br><span class="line"> local_irq_disable();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>idr_init_cache(); </code>IDR 初始化，IDR 是 Linux 内核的整数管理机 制，也就是将一个整数 ID 与一个指针关联起来。</li>
<li><code>rcu_init();</code>初始化 RCU，RCU 全称为 Read Copy Update(读-拷贝修改)</li>
<li><code>trace_init();</code>跟踪调试相关初始化</li>
<li><code>radix_tree_init();</code>基数树相关数据结构初始化</li>
<li><code>early_irq_init(); </code>初始中断相关初始化,主要是注册 irq_desc 结构体变量，因为 Linux 内核使用 irq_desc 来描述一个中断。</li>
<li><code>init_IRQ();</code>中断初始化</li>
<li><code>tick_init(); </code> tick 初始化</li>
<li><code>init_timers();</code>初始化定时器</li>
<li><code>hrtimers_init();</code>初始化高精度定时器</li>
<li><code>softirq_init(); </code>软中断初始化</li>
<li><code>time_init();</code>初始化系统时间</li>
<li><code>local_irq_enable(); </code>使能中断</li>
<li><code>kmem_cache_init_late();</code> slab 初始化，slab 是 Linux 内存分配器</li>
<li><code>console_init(); </code>初始化控制台，之前 <u>print 打印的信息都存放 缓冲区中，并没有打印出来。只有调用此函数初始化控制台以后才能在控制台上打印信息</u>。</li>
<li><code>lockdep_info();</code>如果定义了宏 CONFIG_LOCKDEP，那么此函数打印一些信息</li>
<li><code>locking_selftest()</code>锁自测</li>
<li><code>kmemleak_init();</code>kmemleak 初始化，kmemleak 用于检查内存泄漏</li>
<li><code>calibrate_delay(); </code> 测定 BogoMIPS 值，可以通过 BogoMIPS 来判断 CPU 的性能.BogoMIPS 设置越大，说明 CPU 性能越好。</li>
<li><code>pidmap_init();</code> PID 位图初始化</li>
<li><code>anon_vma_init(); </code> 生成 anon_vma slab 缓存</li>
<li><code>cred_init();</code>为对象的每个用于赋予资格(凭证)</li>
<li><code>fork_init(); </code>初始化一些结构体以使用 fork 函数</li>
<li><code>proc_caches_init();</code>给各种资源管理结构分配缓存 </li>
<li><code>buffer_init();</code>初始化缓冲缓存</li>
<li><code>key_init();</code>初始化密钥 </li>
<li><code>security_init(); </code>安全相关初始化 </li>
<li><code>vfs_caches_init(totalram_pages); </code>为 VFS 创建缓存</li>
<li><code>signals_init();</code>初始化信号 </li>
<li><code>page_writeback_init(); </code>页回写初始化</li>
<li><code>proc_root_init(); </code>注册并挂载 proc 文件系统 </li>
<li><code>cpuset_init();</code>初始化 cpuset，cpuset 是将 CPU 和内存资源以逻辑性和层次性集成的一种机制，是 cgroup 使用的子系统之一</li>
<li><code>cgroup_init(); </code>初始化 cgroup</li>
<li><code>taskstats_init_early();</code>进程状态初始化</li>
<li><code>check_bugs();</code>检查写缓冲一致性</li>
</ul>
<h2 id="rest-init-函数"><a href="#rest-init-函数" class="headerlink" title="rest_init 函数"></a>rest_init 函数</h2><ul>
<li><p><img src="/imgs/image-20220227114640698.png" alt="image-20220227114640698"></p>
</li>
<li><p><img src="/imgs/image-20220227114923703.png" alt="image-20220227114923703"></p>
</li>
<li><p>执行内容</p>
<ul>
<li><p>第 387 行，调用函数 rcu_scheduler_starting，启动 RCU 锁调度器 </p>
</li>
<li><p>第 394 行，调用函数 <code>kernel_thread</code> 创建 <code>kernel_init</code> 进程，也就是大名鼎鼎的 <strong>init 内核进程</strong>。 <strong>init 进程的 PID 为 1</strong>。init 进程一开始是内核进程(也就是运行在内核态)，后面 init 进程会在根 文件系统中查找名为“init”这个程序，这个“init”程序处于用户态，通过运行这个“init”程 序，init 进程就会实现从<strong>内核态到用户态</strong>的转变。 </p>
</li>
<li><p>第 396 行，调用函数 <code>kernel_thread</code> 创建 <code>kthreadd </code>内核进程，此<strong>内核进程的 PID 为 2</strong>。<strong>kthreadd 进程负责所有内核进程的调度和管理</strong>。 </p>
</li>
<li><p>第 409 行，最后调用函数 cpu_startup_entry 来进入 idle 进程，cpu_startup_entry 会调用 cpu_idle_loop，cpu_idle_loop 是个 while 循环，也就是 idle 进程代码。idle 进程的 PID 为 0，idle 进程叫做空闲进程，如果学过 FreeRTOS 或者 UCOS 的话应该听说过空闲任务。idle 空闲进程 就和空闲任务一样，当 CPU 没有事情做的时候就在 idle 空闲进程里面“瞎逛游”，反正就是给 CPU 找点事做。当其他进程要工作的时候就会抢占 idle 进程，从而夺取 CPU 使用权。其实大 家应该可以看到 idle 进程并没有使用 kernel_thread 或者 fork 函数来创建，因为它是有主进程演 变而来的。 在 Linux 终端中输入“ps -A”就可以打印出当前系统中的所有进程，其中就能看到 init 进 程和 kthreadd 进程，如图</p>
</li>
<li><p><img src="/imgs/image-20220227120610800.png" alt="image-20220227120610800"></p>
</li>
<li><p>没有显示 PID 为 0 的 idle 进程，那是因为 <strong>idle 进程是内核进程。</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h2><ul>
<li><p>kernel_init 函数就是 init 进程具体做的工作，定义在文件 init/main.c 中，函数内容如下：</p>
</li>
<li><p><img src="/imgs/image-20220227122017680.png" alt="image-20220227122017680"></p>
</li>
<li><p><img src="/imgs/image-20220227122029865.png" alt="image-20220227122029865"></p>
<ul>
<li>第 932 行，<code>kernel_init_freeable</code> 函数用于完成 init 进程的一些其他初始化工作，稍后再来具 体看一下此函数。</li>
<li>第 940 行，ramdisk_execute_command 是一个全局的 char 指针变量，此变量值为“/init”， 也就是根目录下的 init 程序。ramdisk_execute_command 也可以通过 uboot 传递，在 bootargs 中 使用“rdinit=xxx”即可，xxx 为具体的 init 程序名字。 </li>
<li>第 943 行，如果存在“/init”程序的话就通过函数 run_init_process 来运行此程序。 </li>
<li>第 956 行，如果 ramdisk_execute_command 为空的话就看 execute_command 是否为空，反 正不管如何<strong>一定要在根文件系统中找到一个可运行的 init 程序</strong>。execute_command 的值是通过 uboot 传递，在 bootargs 中使用“init=xxxx”就可以了，比如“init=/linuxrc”表示根文件系统中 的 linuxrc 就是要执行的用户空间 init 程序。 </li>
<li>第 963~966 行，如果 ramdisk_execute_command 和 execute_command 都为空，那么就依次 查找“/sbin/init”、“/etc/init”、“/bin/init”和“/bin/sh”，这四个相当于备用 init 程序，如果这四 个也不存在，那么 Linux 启动失败！ </li>
<li>第 969 行，<u>如果以上步骤都没有找到用户空间的 init 程序，那么就提示错误发生！</u></li>
</ul>
</li>
</ul>
<h3 id="kernel-init-freeable-函数"><a href="#kernel-init-freeable-函数" class="headerlink" title="kernel_init_freeable 函数"></a>kernel_init_freeable 函数</h3><ul>
<li>kernel_init 会调用此函数来做一些 init 进程初始化工作。kernel_init_freeable 定义在文件 init/main.c 中</li>
<li>缩减后的函数内容如下</li>
<li><img src="/imgs/image-20220227122233775.png" alt="image-20220227122233775"></li>
<li><img src="/imgs/image-20220227122256401.png" alt="image-20220227122256401"><ul>
<li>第 1002 行，do_basic_setup 函数用于完成 Linux 下<u>设备驱动初始化</u>工作！非常重要。 do_basic_setup 会调用 driver_init 函数完成 Linux 下驱动模型子系统的初始化。</li>
<li> 第 1005 行，打开设备“/dev/console”，在 Linux 中一切皆为文件！因此<strong>“/dev/console”也 是一个文件</strong>，此<strong>文件为控制台设备</strong>。每个文件都有一个文件描述符，<u>此处打开的“/dev/console” 文件描述符为 0，作为标准输入(0)</u></li>
<li>第 1008 和 1009 行，sys_dup 函数将标准输入(0)的文件描述符复制了 2 次，一个作为标准 输出(1)，一个作为标准错误(2)。这样标准输入、输出、错误都是/dev/console 了。console 通过 uboot 的 bootargs 环境变量设置，“console=ttymxc0,115200”表示将/dev/ttymxc0 设置为 console， 也就是 I.MX6U 的串口 1。当然，也可以设置其他的设备为 console，比如虚拟控制台 tty1，设 置 tty1 为 console 就可以在 LCD 屏幕上看到系统的提示信息。</li>
<li> 第 1020 行，调用函数 prepare_namespace 来<strong>挂载根文件系统</strong>。根文件系统也是由命令行参 数指定的，就是 uboot 的 bootargs 环境变量。比如“root=/dev/mmcblk1p2 rootwait rw”就表示根 文件系统在/dev/mmcblk1p2 中，也就是 EMMC 的分区 2 中。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux内核多线程计算</title>
    <url>/2023/03/03/Linux%E5%86%85%E6%A0%B8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h2 id="Linux内核文档"><a href="#Linux内核文档" class="headerlink" title="Linux内核文档"></a>Linux内核文档</h2><ul>
<li><a href="https://www.kernel.org/doc/html/">链接</a><h2 id="内核时间获取"><a href="#内核时间获取" class="headerlink" title="内核时间获取"></a>内核时间获取</h2><h3 id="jiffies和jiffies-64"><a href="#jiffies和jiffies-64" class="headerlink" title="jiffies和jiffies_64"></a><code>jiffies</code>和<code>jiffies_64</code></h3></li>
<li><a href="https://blog.csdn.net/u013253075/article/details/128227877">参考链接</a></li>
<li><strong>实际上计算的是电脑开机到现在总共的时钟中断次数。取决于系统的频率，单位是Hz，可能是100或者额000之类的，可以自己修改</strong>，因此精度不高<ul>
<li>具体位置在<code>linux/param.h</code>-&gt;<code>asm/param.h</code>-&gt;<code>asm-generic/param.h</code>-&gt;<code>uapi/asm-generic/param.h</code>的<code>CONFIG_HZ</code>中，<a href="https://www.ngui.cc/el/1554037.html?action=onClick">HZ参考链接</a> 如图</li>
<li><img src="/imgs/69c2579bd7eccccba51d86a4bde7a4b57c1c82d5b4a3922b976b46f95b94b4b5.png" alt="picture 5">  </li>
<li>这个<code>CONFIG_HZ</code>定义在<img src="/imgs/85b269ccba811b1a6c0ac4bcdc262c3d651e031cc421a941712d1ba4b33b6a3a.png" alt="picture 6">  中，值是250如图</li>
<li><img src="/imgs/38e4d4e149ad63be3a92b4b62fcbc8ea83ef4253e117f34300fc43c1b524439f.png" alt="picture 7">  </li>
</ul>
</li>
<li></li>
<li>使用<code>#include &lt;linux/jiffies.h&gt;</code>中的<code>jiffies</code>变量直接获取，该变量的定义为<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">volatile</span> __cacheline_aligned_in_smp __jiffy_arch_data jiffies;</span><br></pre></td></tr></table></figure></li>
<li>将这个变量转化为时间的形式有很多函数，见<code>jiffies.h</code>中，比如<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">jiffies_to_msecs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> j)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">jiffies_to_usecs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> j)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>其中的参数直接传入<code>jiffies</code>即可(或者<code>jiffies_64</code>和<code>get_jiffies_64()</code>也可以，效果类似)<ul>
<li><strong>但是似乎并不精确</strong></li>
<li><img src="/imgs/df5fa22e87578e8a7327077b7cb182a806edeca5e738b87f5a6d2790e25d6929.png" alt="picture 4">  </li>
</ul>
</li>
</ul>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ul>
<li><img src="/imgs/d7bc9e5d08b1f98d4c7fa931810f85bfc2e636bbe1a593df34b4386f03f51e73.png" alt="picture 1">  <ul>
<li>可见并不是直接等于内核时间，而是与内核时间之间有一个<u>稳定的差值</u>,大概在<strong>300s</strong>左右，暂时不清楚原因<h3 id="使用rdts统计经过的CPU周期"><a href="#使用rdts统计经过的CPU周期" class="headerlink" title="使用rdts统计经过的CPU周期"></a>使用rdts统计经过的CPU周期</h3></li>
</ul>
</li>
<li>使用<code>rdtsc()</code></li>
<li>包含<code>asm/msr.h</code>头文件（需要<strong>正确配置VSCode的应用目录具有</strong><code>/usr/src/linux-headers-&lt;uname -r的输出&gt;/arch/x86/include/</code>，否则将会搜索出错误的头文件</li>
<li><a href="https://www.ngui.cc/el/1554037.html?action=onClick">参考链接1</a> <h3 id="使用ktime实现高精度计时"><a href="#使用ktime实现高精度计时" class="headerlink" title="使用ktime实现高精度计时"></a>使用ktime实现高精度计时</h3></li>
<li>头文件<code># include &lt;linux/timekeeping.h&gt;</code>或者<code>#include &lt;linux/ktime.h&gt;</code></li>
<li>函数<code>ktime_get_ns()</code>等函数族，有不同的精度和单位</li>
<li>使用<code>ktime_get_ns()/1000000</code>得到的微秒级时间是精确的<ul>
<li><img src="/imgs/d68e92133bcd148b3d3418987949a716be8f21ab7f17d74258b9d329d78f989b.png" alt="picture 8">  </li>
</ul>
</li>
<li>使用<code>ktime_get_ns()/1000%1000000</code>，后面的取模是防止溢出<h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4></li>
<li>使用<code>ktime_get_ns()%1000000</code>直接得到纳秒级别的结果<ul>
<li><img src="/imgs/1da93068788461cfc5b2c913ce8f75c8e853cb7b5094db35f453baddb3cb8fe7.png" alt="picture 9">  </li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u014787262/article/details/123888538">参考链接</a></li>
</ul>
<h2 id="使用多个文件时候的编译"><a href="#使用多个文件时候的编译" class="headerlink" title="使用多个文件时候的编译"></a>使用多个文件时候的编译</h2><ul>
<li><a href="https://blog.csdn.net/qq_52411900/article/details/129050107">参考</a></li>
<li>当对应的模块需要多个源文件时，可以添加多个<code>.o</code>文件作为依赖，比如<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">obj-m := kThOut.o</span><br><span class="line"></span><br><span class="line">kThOut-objs := kTh.o task.o</span><br><span class="line"></span><br><span class="line">CURRENT_PATH := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">LINUX_KERNEL := <span class="variable">$(<span class="built_in">shell</span> uname -r)</span></span><br><span class="line">LINUX_KERNEL_PATH := /usr/src/linux-headers-<span class="variable">$(LINUX_KERNEL)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	make -C <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> clean</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>注意代码中<strong>不要有两个模块具有同样的名字</strong>，比如一个依赖项是<code>kTh</code>，即使这个模块包含了主要的函数比如<code>module_init</code>等，也不能这么做，输出模块必须单独取一个名字比如<code>kThOut</code>，否则输出的文件加载到内核后会出现<code>kTh: module license &#39;unspecified&#39; taints kernel.</code>之类的报错</li>
<li>上述代码中需要编译的模块名字是<code>kThOut</code>，因此添加一行<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">&lt;模块名&gt;-objs := &lt;c源文件1&gt;.o &lt;c源文件2&gt;.o ...</span><br></pre></td></tr></table></figure></li>
<li>注意，内核线程的返回类型必须是<code>int</code><h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2></li>
<li>向量长度为100000时</li>
<li><img src="/imgs/0da2e22604527dfdba0c13b07686acc6f31d76704a4a96da15d27ceb374856e2.png" alt="picture 2">  </li>
<li>可能是内核线程创建的代价较大导致的</li>
<li>将结果输出可以发现几乎是按照线程创建的顺序计算的<ul>
<li><img src="/imgs/f2f68e0a98528cf710d07a7726cf82f6168c9b639d6b97921b67fdd9a404234e.png" alt="picture 10">  </li>
<li>可以看到内核线程单个的计算时间比主线程两层循环的时间还长，目前原因<strong>未知</strong></li>
</ul>
</li>
</ul>
<h2 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h2><ul>
<li><a href="https://github.com/frankzjz219/linuxKernelThreads">仓库</a><h2 id="git提交脚本"><a href="#git提交脚本" class="headerlink" title="git提交脚本"></a>git提交脚本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">git add .</span><br><span class="line">git add *</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请输入commit信息：&quot;</span></span><br><span class="line"><span class="built_in">read</span> info</span><br><span class="line"><span class="comment"># 字符串非空判断等</span></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$info</span>&quot;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="comment"># echo &quot;正在commit: $info&quot;</span></span><br><span class="line">    git commit -m <span class="string">&quot;<span class="variable">$info</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;正在push: <span class="variable">$info</span>&quot;</span></span><br><span class="line">    git push origin master</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;使用非法， 未输入commit参数！&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li>
<li>检测字符串是否是空的<code>if [[ -n &quot;$info&quot; ]]</code></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux初步学习（一）</title>
    <url>/2022/01/02/Linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux初步学习（一）"><a href="#Linux初步学习（一）" class="headerlink" title="Linux初步学习（一）"></a>Linux初步学习（一）</h1><p><strong>菜鸟教程入口：</strong><br><a href="https://www.runoob.com/linux/linux-tutorial.html">https://www.runoob.com/linux/linux-tutorial.html</a></p>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p><a href="https://www.runoob.com/linux/linux-shell-variable.html">https://www.runoob.com/linux/linux-shell-variable.html</a></p>
<ul>
<li><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p>
</li>
<li><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p>
</li>
<li><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>
</li>
</ul>
<h3 id="shell脚本的扩展名为-sh"><a href="#shell脚本的扩展名为-sh" class="headerlink" title="shell脚本的扩展名为.sh"></a>shell脚本的扩展名为.sh</h3><ul>
<li>指定shell 解释器</li>
</ul>
<p>​        <code>#!/bin/bash</code></p>
<p>​        <code>#!</code>符号后面指定</p>
<ul>
<li><p>运行脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure></li>
<li><p>注意此处运行的时候<strong>必须写成</strong><code>./</code>文件名的形式，<strong>直接写</strong>的话<strong>Linux会去Path里面</strong>寻找这个文件，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 <code>./test.sh </code>告诉系统说，就在当前目录找。</p>
</li>
<li><p>或者作为解释器参数传给解释器以进行运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第一个shell程序"><a href="#第一个shell程序" class="headerlink" title="第一个shell程序"></a>第一个shell程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure>

<p><code>echo</code>是控制台输出</p>
<p><img src="/imgs/image-20220102115757607.png" alt="image-20220102115757607"></p>
<h3 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h3><ul>
<li><p>变量名不能有<code>$</code></p>
</li>
<li><p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</p>
</li>
<li><p>中间不能有空格，可以使用下划线 **_**。</p>
</li>
<li><p>不能使用标点符号。</p>
</li>
<li><p>不能使用bash里的关键字（可用help命令查看保留关键字）。</p>
</li>
</ul>
<h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>显式<code>=</code>，或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for file in `ls /etc`</span><br><span class="line">或者</span><br><span class="line">for file in $(ls /etc)</span><br></pre></td></tr></table></figure>

<p>以上语句将 /etc 下目录的文件名循环出来。</p>
<h3 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h3><ul>
<li>使用一个定义过的变量，只要在变量名前面加美元符号即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">your_name=&quot;qinjx&quot;</span><br><span class="line">echo $your_name</span><br><span class="line">echo $&#123;your_name&#125;</span><br></pre></td></tr></table></figure>

<p>花括号的作用是提示编译器这是个变量名</p>
<p>比如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for skill in Ada Coffe Action Java; do</span><br><span class="line">    echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>
<ul>
<li><p>加上：<img src="/imgs/image-20220102121030726.png" alt="image-20220102121030726"></p>
</li>
<li><p>不加但是加了空格：</p>
</li>
<li><p><img src="/imgs/image-20220102121227839.png" alt="image-20220102121227839"></p>
</li>
</ul>
<p><strong>花括号加不加都行，不加的时候注意用空格区分开</strong></p>
<h3 id="变量只读"><a href="#变量只读" class="headerlink" title="变量只读"></a>变量只读</h3><ul>
<li>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">myUrl=&quot;https://www.google.com&quot;</span><br><span class="line">readonly myUrl</span><br><span class="line">myUrl=&quot;https://www.runoob.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="变量删除"><a href="#变量删除" class="headerlink" title="变量删除"></a>变量删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure>

<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul>
<li><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li>
<li><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li>
<li><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>单引号</strong></p>
<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li>
<li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">str=&#x27;this is a string&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>双引号</strong></p>
<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&quot;runoob&quot;</span></span><br><span class="line">str=<span class="string">&quot;Hello, I know you are \&quot;<span class="variable">$your_name</span>\&quot;! \n&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$str</span></span><br></pre></td></tr></table></figure>

<p><strong>字符串拼接</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">your_name=&quot;runoob&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用双引号拼接</span></span><br><span class="line">greeting=&quot;hello, &quot;$your_name&quot; !&quot;</span><br><span class="line">greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;</span><br><span class="line">echo $greeting  $greeting_1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用单引号拼接</span></span><br><span class="line">greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;</span><br><span class="line">greeting_3=&#x27;hello, $&#123;your_name&#125; !&#x27;</span><br><span class="line">echo $greeting_2  $greeting_3</span><br></pre></td></tr></table></figure>

<ul>
<li>直接拼接，不需要逗号或者加号等</li>
</ul>
<p><strong>子字符串</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo $&#123;string:1:4&#125; # 输出 unoo</span><br></pre></td></tr></table></figure>

<p><strong>查找字符串</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> io`  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意上面的expr…是反引号，不是单引号</li>
</ul>
<p><strong>字符串长度</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure>

<p><strong>字符串长度的其他方法</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">string=<span class="string">&quot;hello,everyone my name is xiaoming&quot;</span></span><br><span class="line">expr length <span class="string">&quot;<span class="variable">$string</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/imgs/image-20220102142331661.png" alt="image-20220102142331661"></p>
<p>输出6</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>单独定义变量</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure>

<p><strong>读数组内容</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;数组名[下标]&#125;</span></span><br><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>取得数组全部内容</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure>

<p><strong>取得数组长度</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意，可能数组会出现<img src="/imgs/image-20220102141720725.png" alt="image-20220102141720725">这是因为 ubuntu 模式使用的是 dash 模式，如果<strong>不想报错使用 bash 模式</strong></p>
<p>的报错，此时使用命令 <code>bash xxx.sh</code>  或者 将脚本第一行改为 <code>*#!/bin/bash</code>，执行<code>./example.sh</code>也可以</p>
<p>输出数组长度的时候可能<strong>不对</strong>，此时输出的是1</p>
<p><img src="/imgs/image-20220102142013809.png" alt="image-20220102142013809"></p>
<p>此时也是1</p>
<p><img src="/imgs/image-20220102142050921.png" alt="image-20220102142050921"></p>
<p>此代码的输出为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array=(0,1,2,3,4,5,6)</span><br><span class="line">echo $&#123;#array[@]&#125;</span><br><span class="line">echo $array</span><br><span class="line">echo $&#123;array[*]&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/image-20220102142905800.png" alt="image-20220102142905800"></p>
<ul>
<li>可以通过给数组设置<strong>下标范围以外</strong>的单元的内容来增加数组的长度</li>
</ul>
<h4 id="注意，使用指定下标修改数组比如array-name-0-value0会丢弃该下标后面的其他内容"><a href="#注意，使用指定下标修改数组比如array-name-0-value0会丢弃该下标后面的其他内容" class="headerlink" title="注意，使用指定下标修改数组比如array_name[0]=value0会丢弃该下标后面的其他内容"></a>注意，使用指定下标修改数组比如<code>array_name[0]=value0</code>会丢弃该下标后面的其他内容</h4><h3 id="注意，代码不能随意包含空格，比如等号两边，可能会引起错误"><a href="#注意，代码不能随意包含空格，比如等号两边，可能会引起错误" class="headerlink" title="注意，代码不能随意包含空格，比如等号两边，可能会引起错误"></a>注意，代码不能随意包含空格，比如等号两边，可能会引起错误</h3><h4 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h4><p>参考 <a href="https://www.runoob.com/linux/linux-shell-variable.html">https://www.runoob.com/linux/linux-shell-variable.html</a> 第一篇笔记</p>
<h3 id="读取用户输入"><a href="#读取用户输入" class="headerlink" title="读取用户输入"></a>读取用户输入</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> [-options] [variable...]</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read -p &quot;input a val:&quot; a    #获取键盘输入的 a 变量数字</span><br><span class="line">read -p &quot;input b val:&quot; b    #获取键盘输入的 b 变量数字</span><br><span class="line">r=$[a+b]                    #计算a+b的结果 赋值给r  不能有空格</span><br><span class="line">echo &quot;result = $&#123;r&#125;&quot;        #输出显示结果 r</span><br></pre></td></tr></table></figure>

<h3 id="shell注释"><a href="#shell注释" class="headerlink" title="shell注释"></a>shell注释</h3><p>以<code>#</code> 开头的行就是注释，会被解释器忽略。</p>
<ul>
<li>多行注释</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>或者任何符号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;&#x27;</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">&#x27;</span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Linux初步学习（三）</title>
    <url>/2022/01/03/Linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux初步学习（三）"><a href="#Linux初步学习（三）" class="headerlink" title="Linux初步学习（三）"></a>Linux初步学习（三）</h1><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><ul>
<li>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</li>
</ul>
<p><strong>数值</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-eq</td>
<td align="left">等于则为真</td>
</tr>
<tr>
<td align="left">-ne</td>
<td align="left">不等于则为真</td>
</tr>
<tr>
<td align="left">-gt</td>
<td align="left">大于则为真</td>
</tr>
<tr>
<td align="left">-ge</td>
<td align="left">大于等于则为真</td>
</tr>
<tr>
<td align="left">-lt</td>
<td align="left">小于则为真</td>
</tr>
<tr>
<td align="left">-le</td>
<td align="left">小于等于则为真</td>
</tr>
</tbody></table>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数相等！&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个数不相等！&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>



<ul>
<li><code>[]</code>中可以执行算术运算比如加减等</li>
</ul>
<p><strong>字符串</strong></p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">等于则为真</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">不相等则为真</td>
</tr>
<tr>
<td align="left">-z 字符串</td>
<td align="left">字符串的长度为零则为真</td>
</tr>
<tr>
<td align="left">-n 字符串</td>
<td align="left">字符串的长度不为零则为真</td>
</tr>
</tbody></table>
</li>
<li><p>实例</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">num1=<span class="string">&quot;ru1noob&quot;</span></span><br><span class="line">num2=<span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$num1</span> = <span class="variable">$num2</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串相等!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个字符串不相等!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><strong>文件</strong></p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-e 文件名</td>
<td align="left">如果文件存在则为真</td>
</tr>
<tr>
<td align="left">-r 文件名</td>
<td align="left">如果文件存在且可读则为真</td>
</tr>
<tr>
<td align="left">-w 文件名</td>
<td align="left">如果文件存在且可写则为真</td>
</tr>
<tr>
<td align="left">-x 文件名</td>
<td align="left">如果文件存在且可执行则为真</td>
</tr>
<tr>
<td align="left">-s 文件名</td>
<td align="left">如果文件存在且至少有一个字符则为真</td>
</tr>
<tr>
<td align="left">-d 文件名</td>
<td align="left">如果文件存在且为目录则为真</td>
</tr>
<tr>
<td align="left">-f 文件名</td>
<td align="left">如果文件存在且为普通文件则为真</td>
</tr>
<tr>
<td align="left">-c 文件名</td>
<td align="left">如果文件存在且为字符型特殊文件则为真</td>
</tr>
<tr>
<td align="left">-b 文件名</td>
<td align="left">如果文件存在且为块特殊文件则为真</td>
</tr>
</tbody></table>
</li>
<li><p>使用例</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件已存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件不存在!&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>Shell 还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为： <strong>!</strong> 最高， <strong>-a</strong> 次之， <strong>-o</strong> 最低。</p>
<ul>
<li>比如</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e ./notFile -o -e ./bash</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;至少有一个文件存在!&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;两个文件都不存在&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="分支和循环"><a href="#分支和循环" class="headerlink" title="分支和循环"></a>分支和循环</h3><p><strong>if-else</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    command1</span><br><span class="line"><span class="keyword">elif</span> condition2 </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><strong>for循环</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ul>
<li>针对字符串的特殊用法(不加引号)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> This is a string</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ul>
<li>输出</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<p><strong>while 语句</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ul>
<li>while读取键盘信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;按下 &lt;CTRL-D&gt; 退出&#x27;</span><br><span class="line">echo -n &#x27;输入你最喜欢的网站名: &#x27;</span><br><span class="line">while read FILM</span><br><span class="line">do</span><br><span class="line">    echo &quot;是的！$FILM 是一个好网站&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p><strong>无限循环</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (( ; ; ))</span><br></pre></td></tr></table></figure>

<p><strong>until循环</strong></p>
<p>until 循环执行一系列命令直至条件为 true 时停止。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><strong>case和easc</strong></p>
<p>类似于switch case语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<ul>
<li>其他写法</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n &quot;输入 1 到 5 之间的数字:&quot;</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class="line">        ;;</span><br><span class="line">        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<ul>
<li>此处注意多个输入对应一个case的时候，使用<code>|</code>分隔，蒋多个输入列为一种情况</li>
</ul>
<p><strong>break和continue</strong></p>
<p>类似于其他语言，略</p>
]]></content>
  </entry>
  <entry>
    <title>Linux初步学习（四）</title>
    <url>/2022/01/04/Linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux初步学习（四）"><a href="#Linux初步学习（四）" class="headerlink" title="Linux初步学习（四）"></a>Linux初步学习（四）</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li>
<li>2、参数返回，可以显示加：return 返回，如果不加，将以<strong>最后一条命令</strong>运行结果，作为返回值。 return后跟数值n(0-255)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">demoFun</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;这是我的第一个 shell 函数!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数开始执行-----&quot;</span></span><br><span class="line">demoFun</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----函数执行完毕-----&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><ul>
<li>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数等等</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第一个参数为 <span class="variable">$1</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第二个参数为 <span class="variable">$2</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$10</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十个参数为 <span class="variable">$&#123;10&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;第十一个参数为 <span class="variable">$&#123;11&#125;</span> !&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;参数总数有 <span class="variable">$#</span> 个!&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;作为一个字符串输出所有参数 $* !&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>

<ul>
<li>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数处理</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$#</td>
<td align="left">传递到脚本或函数的参数个数</td>
</tr>
<tr>
<td align="left">$*</td>
<td align="left">以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td align="left">$$</td>
<td align="left">脚本运行的当前进程ID号</td>
</tr>
<tr>
<td align="left">$!</td>
<td align="left">后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td align="left">$@</td>
<td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td>
</tr>
<tr>
<td align="left">$-</td>
<td align="left">显示Shell使用的当前选项，与set命令功能相同。</td>
</tr>
<tr>
<td align="left">$?</td>
<td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Linux初步学习（二）</title>
    <url>/2022/01/02/Linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux初步学习（二）"><a href="#Linux初步学习（二）" class="headerlink" title="Linux初步学习（二）"></a>Linux初步学习（二）</h1><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="向shell脚本传参"><a href="#向shell脚本传参" class="headerlink" title="向shell脚本传参"></a>向shell脚本传参</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：<span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：<span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：<span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：<span class="variable">$3</span>&quot;</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数处理</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$#</td>
<td align="left">传递到脚本的参数个数</td>
</tr>
<tr>
<td align="left">$*</td>
<td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td>
</tr>
<tr>
<td align="left">$$</td>
<td align="left">脚本运行的当前进程ID号</td>
</tr>
<tr>
<td align="left">$!</td>
<td align="left">后台运行的最后一个进程的ID号</td>
</tr>
<tr>
<td align="left">$@</td>
<td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td>
</tr>
<tr>
<td align="left">$-</td>
<td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td>
</tr>
<tr>
<td align="left">$?</td>
<td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody></table>
<p><strong>实例</strong></p>
<p><img src="/imgs/image-20220102172744910.png" alt="image-20220102172744910"></p>
<p><em><em>$</em> 与 $@ 区别：</em>*</p>
<ul>
<li>相同点：都是引用所有参数。</li>
<li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li>
</ul>
<p><strong>演示</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$* 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-- \$@ 演示 ---&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><img src="/imgs/image-20220102173644362.png" alt="image-20220102173644362"></p>
<hr>
<h3 id="shell-数组"><a href="#shell-数组" class="headerlink" title="shell 数组"></a>shell 数组</h3><p>获取元素个数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh</span><br><span class="line">数组元素个数为: 4</span><br><span class="line">数组元素个数为: 4</span><br></pre></td></tr></table></figure>

<p>数组长度</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[*]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;数组元素个数为: <span class="variable">$&#123;#my_array[@]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>数组的值可以是变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">A=1</span><br><span class="line">my_array=(<span class="variable">$A</span> B C D)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个元素为: <span class="variable">$&#123;my_array[1]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个元素为: <span class="variable">$&#123;my_array[2]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个元素为: <span class="variable">$&#123;my_array[3]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="shell-运算符"><a href="#shell-运算符" class="headerlink" title="shell 运算符"></a>shell 运算符</h3><p><code>expr</code>：expr是计算表达式的工具，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val = `expr 2 + 2`</span><br></pre></td></tr></table></figure>

<ul>
<li>表达式和运算符之间<strong>要有空格</strong>，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li>
<li>完整的表达式要被反引号 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li>
</ul>
<h3 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;a 不等于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -le <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 小于或等于 b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$a</span> -le <span class="variable">$b</span>: a 大于 b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><strong>关系运算符</strong></p>
<table>
<thead>
<tr>
<th>-eq</th>
<th>检测两个数是否相等，相等返回 true。</th>
<th>[ $a -eq $b ] 返回 false。</th>
</tr>
</thead>
<tbody><tr>
<td>-ne</td>
<td>检测两个数是否不相等，不相等返回 true。</td>
<td>[ $a -ne $b ] 返回 true。</td>
</tr>
<tr>
<td>-gt</td>
<td>检测左边的数是否大于右边的，如果是，则返回 true。</td>
<td>[ $a -gt $b ] 返回 false。</td>
</tr>
<tr>
<td>-lt</td>
<td>检测左边的数是否小于右边的，如果是，则返回 true。</td>
<td>[ $a -lt $b ] 返回 true。</td>
</tr>
<tr>
<td>-ge</td>
<td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td>
<td>[ $a -ge $b ] 返回 false。</td>
</tr>
<tr>
<td>-le</td>
<td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td>
<td>[ $a -le $b ] 返回 true。</td>
</tr>
</tbody></table>
<p><strong>布尔运算符</strong></p>
<table>
<thead>
<tr>
<th>!</th>
<th>非运算，表达式为 true 则返回 false，否则返回 true。</th>
<th>[ ! false ] 返回 true。</th>
</tr>
</thead>
<tbody><tr>
<td>-o</td>
<td>或运算，有一个表达式为 true 则返回 true。</td>
<td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td>
</tr>
<tr>
<td>-a</td>
<td>与运算，两个表达式都为 true 才返回 true。</td>
<td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td>
</tr>
</tbody></table>
<p><strong>逻辑运算符</strong></p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td align="left">逻辑的 AND</td>
<td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td>
</tr>
<tr>
<td align="left">||</td>
<td align="left">逻辑的 OR</td>
<td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td>
</tr>
</tbody></table>
<p><strong>字符串运算符</strong></p>
<table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">=</td>
<td align="left">检测两个字符串是否相等，相等返回 true。</td>
<td align="left">[ $a = $b ] 返回 false。</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">检测两个字符串是否不相等，不相等返回 true。</td>
<td align="left">[ $a != $b ] 返回 true。</td>
</tr>
<tr>
<td align="left">-z</td>
<td align="left">检测字符串长度是否为0，为0返回 true。</td>
<td align="left">[ -z $a ] 返回 false。</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td>
<td align="left">[ -n “$a” ] 返回 true。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">检测字符串是否为空，不为空返回 true。</td>
<td align="left">[ $a ] 返回 true。</td>
</tr>
</tbody></table>
<p>使用例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author:菜鸟教程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line">a=&quot;abc&quot;</span><br><span class="line">b=&quot;efg&quot;</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a = $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a = $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a != $b : a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a != $b: a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -z $a ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;-z $a : 字符串长度为 0&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;-z $a : 字符串长度不为 0&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -n &quot;$a&quot; ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;-n $a : 字符串长度不为 0&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;-n $a : 字符串长度为 0&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a : 字符串不为空&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a : 字符串为空&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>



<p><strong>文件测试运算符</strong></p>
<table>
<thead>
<tr>
<th align="left">操作符</th>
<th align="left">说明</th>
<th align="left">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b file</td>
<td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td>
<td align="left">[ -b $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-c file</td>
<td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td>
<td align="left">[ -c $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-d file</td>
<td align="left">检测文件是否是目录，如果是，则返回 true。</td>
<td align="left">[ -d $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-f file</td>
<td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td>
<td align="left">[ -f $file ] 返回 true。</td>
</tr>
<tr>
<td align="left">-g file</td>
<td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td>
<td align="left">[ -g $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-k file</td>
<td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td>
<td align="left">[ -k $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-p file</td>
<td align="left">检测文件是否是有名管道，如果是，则返回 true。</td>
<td align="left">[ -p $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-u file</td>
<td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td>
<td align="left">[ -u $file ] 返回 false。</td>
</tr>
<tr>
<td align="left">-r file</td>
<td align="left">检测文件是否可读，如果是，则返回 true。</td>
<td align="left">[ -r $file ] 返回 true。</td>
</tr>
<tr>
<td align="left">-w file</td>
<td align="left">检测文件是否可写，如果是，则返回 true。</td>
<td align="left">[ -w $file ] 返回 true。</td>
</tr>
<tr>
<td align="left">-x file</td>
<td align="left">检测文件是否可执行，如果是，则返回 true。</td>
<td align="left">[ -x $file ] 返回 true。</td>
</tr>
<tr>
<td align="left">-s file</td>
<td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td>
<td align="left">[ -s $file ] 返回 true。</td>
</tr>
<tr>
<td align="left">-e file</td>
<td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td>
<td align="left">[ -e $file ] 返回 true。</td>
</tr>
</tbody></table>
<ul>
<li><strong>-S</strong>: 判断某文件是否 socket。</li>
<li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li>
</ul>
<p>使用例</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author:菜鸟教程</span></span><br><span class="line"><span class="comment"># url:www.runoob.com</span></span><br><span class="line"></span><br><span class="line">file=<span class="string">&quot;/var/www/runoob/test.sh&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -r <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可读&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可读&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -w <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可写&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可写&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -x <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件可执行&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不可执行&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为普通文件&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为特殊文件&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件是个目录&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不是个目录&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -s <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件为空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;文件不存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="命令行输入和输出"><a href="#命令行输入和输出" class="headerlink" title="命令行输入和输出"></a>命令行输入和输出</h3><p>echo，显示转义字符使用<code>\</code></p>
<p>read，从标准输入获取一行，并且将其赋给变量</p>
<p>比如<code>read name</code>将一行内容赋值给name</p>
<ul>
<li>echo开启转义字符：<code>-e</code></li>
</ul>
<p>比如</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure>

<p>会在OK后换行</p>
<ul>
<li>不换行</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>结果定向至文件</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span> &gt; myfile</span><br></pre></td></tr></table></figure>

<ul>
<li>原样输出字符串，不考虑变量和转义：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>显示对应的命令执行的结果(反引号)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo `date`</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thu Jul 24 10:08:46 CST 2014</span><br></pre></td></tr></table></figure>

<h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>  format-string  [arguments...]</span><br></pre></td></tr></table></figure>

<ul>
<li>使用例</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4s\n&quot;</span> 姓名 性别 体重kg  </span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭靖 男 66.1234</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 杨过 男 48.6543</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-8s %-4.2f\n&quot;</span> 郭芙 女 47.9876</span><br></pre></td></tr></table></figure>



<ul>
<li><p>输出</p>
</li>
<li><pre><code>姓名     性别   体重kg
郭靖     男      66.12
杨过     男      48.65
郭芙     女      47.99
</code></pre>
</li>
</ul>
<p><strong>%s %c %d %f</strong> 都是格式替代符，<strong>％s</strong> 输出一个字符串，<strong>％d</strong> 整型输出，<strong>％c</strong> 输出一个字符，<strong>％f</strong> 输出实数，以小数形式输出。</p>
<p><strong>%-10s</strong> 指一个宽度为 10 个字符（- 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>
<p><strong>%-4.2f</strong> 指格式化为小数，其中 <strong>.2</strong> 指保留2位小数。</p>
<ul>
<li><p><em>单引号与双引号效果一样</em></p>
</li>
<li><p><em><strong>没有引号</strong>也可以输出</em></p>
</li>
<li><p><em>格式只指定的参数比传入的需要格式化输出的参数少的时候，多出的参数仍然会按照该格式输出，format-string 被重用</em>，类似于printf被重复使用多次直到所有参数都被格式化输出为止</p>
</li>
<li><p>转义序列</p>
</li>
<li></li>
<li><table>
<thead>
<tr>
<th align="left">序列</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\a</td>
<td align="left">警告字符，通常为ASCII的BEL字符</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">后退</td>
</tr>
<tr>
<td align="left">\c</td>
<td align="left">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页（formfeed）</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车（Carriage return）</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">水平制表符</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表符</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">一个字面上的反斜杠字符</td>
</tr>
<tr>
<td align="left">\ddd</td>
<td align="left">表示1到3位数八进制值的字符。仅在格式字符串中有效</td>
</tr>
<tr>
<td align="left">\0ddd</td>
<td align="left">表示1到3位的八进制值字符</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux实时线程和进程调度</title>
    <url>/2023/10/10/Linux%E5%AE%9E%E6%97%B6%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="实时线程"><a href="#实时线程" class="headerlink" title="实时线程"></a>实时线程</h2><ul>
<li>在Linux中，实时线程是一种特殊类型的线程，它们的调度策略和优先级可以被设置为<strong>实时的</strong>。这意味着，<u>相比于普通的线程，实时线程有更高的优先级</u>，而且它们的执行<strong>不会被低优先级的线程打断</strong>。<h3 id="实时线程的调度策略"><a href="#实时线程的调度策略" class="headerlink" title="实时线程的调度策略"></a>实时线程的调度策略</h3></li>
<li><code>SCHED_FIFO</code><strong>先入先出</strong>策略<ul>
<li>线程会一直运行，直到它自己放弃CPU时间，或者有更高优先级的线程需要运行</li>
</ul>
</li>
<li><code>SCHED_RR</code>时间片轮转调度方案<ul>
<li>类似于SCHED_FIFO，但是每个线程会有一个固定的时间片来运行。当一个线程的时间片用完时，它会被放到同优先级线程的队列尾部<h3 id="C语言设置线程优先级的方法"><a href="#C语言设置线程优先级的方法" class="headerlink" title="C语言设置线程优先级的方法"></a>C语言设置线程优先级的方法</h3></li>
</ul>
</li>
<li>使用<code>pthread</code>多线程库<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread_func</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里是线程的代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thread;</span><br><span class="line">    <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化线程属性</span></span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线程为分离状态，这样当线程结束时会自动释放所有资源</span></span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线程的调度策略为实时调度策略SCHED_FIFO</span></span><br><span class="line">    pthread_attr_setschedpolicy(&amp;attr, SCHED_FIFO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线程的优先级为最高</span></span><br><span class="line">    param.sched_priority = sched_get_priority_max(SCHED_FIFO);</span><br><span class="line">    pthread_attr_setschedparam(&amp;attr, &amp;param);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建线程</span></span><br><span class="line">    pthread_create(&amp;thread, &amp;attr, thread_func, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁线程属性对象</span></span><br><span class="line">    pthread_attr_destroy(&amp;attr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>请注意，只有具有适当权限的用户（<strong>通常是root用户</strong>）才能创建实时线程。此外，过度使用实时线程可能会导致系统响应变慢，甚至完全无响应, 也可能导致系统直接崩溃。请谨慎使用。<h3 id="time命令"><a href="#time命令" class="headerlink" title="time命令"></a>time命令</h3></li>
<li>使用<code>time</code>命令运行程序的时候，Ctrl+C可以计算程序在系统空间（sys）总时间（包括多个CPU核心）、用户空间（user）（包括多个CPU核心）总时间以及人类视角（real）运行了多长时间</li>
<li><img src="/imgs/25e8453983943c5738259427ffafb96927d6435b643d6e48c2bf3ee66bc2eff6.png" alt="picture 8">  </li>
</ul>
<h2 id="实时进程"><a href="#实时进程" class="headerlink" title="实时进程"></a>实时进程</h2><ul>
<li>实时进程和实施线程类似，因为Linux在进行CPU调度的时候线程和进程是平等的</li>
<li>调度方式也是有<code>SCHED_FIFO</code>和<code>SCHED_RR</code>两种方式</li>
<li>设置一个进程为实时进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chrt -f -a -p 99 pid</span><br></pre></td></tr></table></figure></li>
<li>其中<code>pid</code>是需要控制的线程的进程id（Linux中每个线程都有单独的进程ID，inux中每个线程都有单独的进程ID。在Linux中，线程其实是通过轻量级进程（LWP）实现的，因此<strong>Linux中每个线程都是一个进程</strong>，都拥有一个PID。换句话说，操作系统原理中的线程，对应的其实是Linux中的进程）</li>
<li><code>-a</code>是进程的所有线程，可以不用这个选项，针对每个线程单独设置</li>
<li>在C程序中设置一个进程的调度方式<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">param</span>;</span></span><br><span class="line">    <span class="keyword">int</span> policy = SCHED_FIFO;  <span class="comment">// 这里可以改为你想要的调度策略</span></span><br><span class="line"></span><br><span class="line">    param.sched_priority = sched_get_priority_max(policy);</span><br><span class="line">    <span class="keyword">if</span> (sched_setscheduler(<span class="number">0</span>, policy, &amp;param) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;sched_setscheduler&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是进程的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在shell脚本中设置进程的调度方式<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chrt -f 99 pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> -f是FIFO调度方式</span></span><br><span class="line">sudo chrt -m</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上面这句命令可以显示所有可用的调度策略和优先级</span></span><br></pre></td></tr></table></figure>
<h2 id="进程和CPU的关系"><a href="#进程和CPU的关系" class="headerlink" title="进程和CPU的关系"></a>进程和CPU的关系</h2></li>
<li>将一个进程<strong>绑定到一个特定的CPU</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">taskset -cp &lt;cpuID&gt; pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">taskset -cp &lt;cpu-list&gt; pid</span><br><span class="line"><span class="meta">#</span><span class="bash">其中cpu-list是数字化的cpu列表，从1开始。多个不连续的cpu可用逗号连接，连续的可用短现连接，比如1,2,5-11等</span></span><br></pre></td></tr></table></figure></li>
<li>pid是需要改变的进程的ID，cpuID是需要绑定的CPU核心id</li>
<li>或者使用掩码的方式设置</li>
<li><img src="/imgs/0cfa0cc9aca9dff9463ac3fba1b77e33b5665391b94f2619d1de822e3bffe170.png" alt="picture 10">  </li>
<li><code>taskset -a -p &lt;掩码&gt; &lt;pid&gt;</code></li>
<li>在C程序中将进程绑定到某个特定的CPU<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">cpu_set_t</span> cpuset;</span><br><span class="line"></span><br><span class="line">    CPU_ZERO(&amp;cpuset); <span class="comment">// 初始化CPU集合，将cpuset置为空</span></span><br><span class="line">    CPU_SET(<span class="number">2</span>, &amp;cpuset); <span class="comment">// 将本进程绑定到CPU2上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置进程的CPU亲和性</span></span><br><span class="line">    <span class="keyword">if</span> (sched_setaffinity(<span class="number">0</span>, <span class="keyword">sizeof</span>(cpuset), &amp;cpuset) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Set CPU affinity failed, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>线程绑定到某个CPU</li>
<li><img src="/imgs/1ce1b4c75e20f9482db83cc3d39e3a3bf047e26402a4a02a4055f9cf245bcda1.png" alt="picture 9">  </li>
<li>Linux中线程可以在<strong>不同CPU核心之间来回移动</strong></li>
<li>中断也可以设置CPU亲和性</li>
<li><img src="/imgs/03d15d76a02662434d9b644221a6ac7595a4fb4eae20f7aeca23f736e252ac41.png" alt="picture 11">  </li>
<li><img src="/imgs/35da23818b21302c1fc698e039136553e68132522f0a0c7028363502f2833ae3.png" alt="picture 12">  <ul>
<li>上述补丁的意义是将软中断负载均衡到每个核心<h3 id="进程群"><a href="#进程群" class="headerlink" title="进程群"></a>进程群</h3></li>
</ul>
</li>
<li><img src="/imgs/f782a4c045a95c3e4365f2f93ad2916a2198af3e6f24b8e88f0b5b8e458381ec.png" alt="picture 13">  </li>
<li>设置进程群的CPU使用比率，先调度进程群，再调度其中的进程</li>
<li>现决定一个进程群内部所有进程能用的所有CPU时间，再考虑分配给谁<h4 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h4></li>
<li>进入<code>/sys/fs/cgroup/cpu/</code>下创建目录dir</li>
<li><img src="/imgs/7898a3b15778e0c7dee719faad1c26e8aaba7dca33cf1640144f0778088d39e6.png" alt="picture 14">  </li>
<li>进入创建的目录查看<code>cpu.shares</code>权重</li>
<li>添加某个进程到进程组<ul>
<li>将进程的pid添加到<code>cgroup.procs</code>文件中</li>
</ul>
</li>
<li><code>cpu.cfs_period_us</code>和<code>cpu.cfs_quota_us</code>是一个进程组中的<code>cfs</code>进程在一个<code>period</code>范围内能运行最多<code>quota</code>微秒</li>
<li>quota可以大于period，因为是多核的，可以设置为period*核心数</li>
</ul>
<h2 id="硬实时"><a href="#硬实时" class="headerlink" title="硬实时"></a>硬实时</h2><ul>
<li>从创建一个任务到他开始被调度，<strong>不会超过一个截止期限</strong></li>
<li>Linux是一个软实时的系统，因此可能会超过这个时间</li>
<li>Linux无法实现硬实时</li>
<li><img src="/imgs/8f26b7f5a54a75857d69e1a46eb2a59e279d3055747f756438e50bb3df84b6c8.png" alt="picture 15">  <ul>
<li>Linux下假如你休眠10ms，因为Linux的调度抖动，可能会导致进程就绪之后无法被调度，因此两次调度会间隔大于10ms，会随着系统负载变大而延迟变大，具有不确定性<h3 id="Linux不可调度区域"><a href="#Linux不可调度区域" class="headerlink" title="Linux不可调度区域"></a>Linux不可调度区域</h3></li>
</ul>
</li>
<li><img src="/imgs/7630501f02899c084a7aa457b2e87602d66bc044ac3df2b080783619a6035bda.png" alt="picture 16">  <ul>
<li>打上硬实时补丁之后可以进一步减小不可调度的范围，将系统变为硬实时的</li>
</ul>
</li>
<li><img src="/imgs/734ab76e71cd209c5093076f5ab83c6b02c7436c08fc6eee5129b3268a8f67a6.png" alt="picture 17">  <ul>
<li>中断，软中断和自旋锁执行时都不能被调度，不能被抢占</li>
<li>一个CPU拿到spin lock的时候，这个核心就不能被调度了</li>
<li>软中断中可以嵌套中断，硬中断不行</li>
<li>如果需要抢占的任务发生在上述三种情况中，则只能在上述三种状态执行结束的瞬间立即抢占</li>
</ul>
</li>
<li><img src="/imgs/35e248271e574e99ab1f8e2014bec3b82ead40d3c781c076a90d9bdbf49383b5.png" alt="picture 18">  <ul>
<li>因为当一个进程占有不可打断的任务的时候，中断无法抢占他导致中断被延迟处理，不满足实时性，延迟的长度是橙色箭头<h3 id="实时补丁"><a href="#实时补丁" class="headerlink" title="实时补丁"></a>实时补丁</h3></li>
</ul>
</li>
<li><img src="/imgs/1bccc755a6bcbbc6dd504edbce907725eec3277907078ce77435e412588352e6.png" alt="picture 19">  </li>
<li>preempt_rt补丁</li>
<li>第四个选项就是完全硬实时补丁的选项<h4 id="自旋锁和互斥锁的区别"><a href="#自旋锁和互斥锁的区别" class="headerlink" title="自旋锁和互斥锁的区别"></a>自旋锁和互斥锁的区别</h4></li>
<li>自旋锁是CPU一个核心拿到锁，开始处理，另一个核心拿不到则原地自旋</li>
<li>互斥锁是一个进程拿到锁开始执行，另一个线程没拿到，则睡眠直到上一个进程释放锁唤醒<h4 id="优先级继承"><a href="#优先级继承" class="headerlink" title="优先级继承"></a>优先级继承</h4></li>
<li>在低优先级的进程持有高优先级的进程试图获取的锁的时候，临时提高这个低优先级进程的优先级到跟高优先级进程一样，使得他能够在调度上获得优势从而赶快执行完，释放锁给高优先级进程使用，防止高优先级进程因为争抢锁等待低优先级进程<h2 id="Linux的进程调度策略"><a href="#Linux的进程调度策略" class="headerlink" title="Linux的进程调度策略"></a>Linux的进程调度策略</h2></li>
<li><a href="https://zhuanlan.zhihu.com/p/541695664">进程调度参考1</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/550569525">进程调度参考2</a><h3 id="进程调度的基础知识"><a href="#进程调度的基础知识" class="headerlink" title="进程调度的基础知识"></a>进程调度的基础知识</h3></li>
<li>进程调度本身所需要的时间很短，基本就是更改一些寄存器等等，但是因为这个原因导致的上下文变化引起的CPU内部高速<strong>缓存的不命中</strong>可能在更大程度上导致程序执行时间受到影响</li>
<li>调度的基本单位是<strong>线程</strong></li>
<li><img src="/imgs/b1de16a877ef1fa3d2f3ef0f582de0ace62efe8b94cfccfcd5bda55e3c395054.png" alt="picture 0">  <ul>
<li>Linux内核的抢占设置</li>
<li>服务器一般讲究的是吞吐量而不是响应速度，但是桌面电脑和手机必须讲究响应速度否则导致卡顿</li>
<li>第一个的话操作系统几乎没有抢占调度</li>
<li>内核不能被抢占</li>
<li>第三个内核也可以被抢占</li>
</ul>
</li>
<li>进程的特性<ul>
<li>CPU消耗型和IO消耗型</li>
<li>IO消耗型任务得到CPU要求的较为<strong>及时</strong>，因为不及时的话会导致IO速度下降，用户体验下降，但是CPU<strong>性能对其影响不大</strong><h3 id="早期调度器设计"><a href="#早期调度器设计" class="headerlink" title="早期调度器设计"></a>早期调度器设计</h3></li>
</ul>
</li>
<li><img src="/imgs/6466a27a813f7ac6570e339fa50e595246888c1b4faf2e413d5b34b3186e0fbb.png" alt="picture 2">  </li>
<li>内核优先级0-139，内核数字越小优先级越高</li>
<li>0-99算是实时线程，99-139是非实时线程，<strong>0-99之间的数字越大优先级越高</strong>，内核实际计算的时候是<u>99-用户设置的优先级</u></li>
<li>调度看的就是从高优先级到低优先级，谁先有进程就绪就调度谁</li>
<li>优先级高的进程可以抢占优先级低的进程</li>
<li><img src="/imgs/1b51495c4a2e463b8be8db7f8ec302a929e37c4c36d7809e3ffd5763fddbb0b5.png" alt="picture 3">  </li>
<li>以上是优先级再0-99期间的进程的调度策略，二者的区别是FIFO同等优先级是<strong>先进先出</strong>，RR是<strong>时间片轮转方式</strong>（同等优先级）</li>
<li><u>所有前面的进程都跑完了，<strong>才会跑100-139的进程</strong></u></li>
<li>普通进程的优先级是<code>nice</code>，也就是-20-19，值越大优先级越低</li>
<li>普通进程优先级高不会形成对低优先级的绝对优势</li>
<li>前面<strong>不会堵着</strong>后面</li>
<li><img src="/imgs/6ef88985eeca2da2eed21858d7725f50a80216dc31949964cbb977c125b8dd3e.png" alt="picture 4">  <ul>
<li><strong>RT的门限</strong>：上面一条设置的是实时进程在一个sched_rt_period中能运行的最多时间是sched_rt_runtime</li>
<li>因此，在一些情况下猛然将一个进程从普通进程转换为实时进程可能导致<strong>进程运行速度下降</strong>，因为实时进程的运行时间比率是有限的，但是<strong>普通进程没有这个限制</strong></li>
<li>但是可能会导致<strong>系统运行明显卡顿</strong>，因为实时进程的优先级太高了，比很多系统进程优先级都高</li>
<li>RT类型的进程应该尽可能的小<h3 id="CFS调度算法（也就是所谓的OTHER调度算法）"><a href="#CFS调度算法（也就是所谓的OTHER调度算法）" class="headerlink" title="CFS调度算法（也就是所谓的OTHER调度算法）"></a>CFS调度算法（也就是所谓的OTHER调度算法）</h3></li>
</ul>
</li>
<li>针对<strong>非实时进程</strong>的调度算法，<strong>实时进程的优先级是大于这些进程的</strong></li>
<li>追求的是每个进程的vruntime接近</li>
<li><strong>线程才有nice，线程是调度单位</strong>，进程资源分配单位（不包括CPU）</li>
<li>默认的线程的nice是0</li>
<li>无法设置进程是IO消耗还是CPU消耗</li>
<li><img src="/imgs/5f2fffda16e9a46bb031d3e073895e3fb251b4ea245f6c751cde068ddcea59c1.png" alt="picture 5">  </li>
<li>CFS能在真实硬件上模拟出一种“公平的、精确的任务多处理CPU”</li>
<li><a href="https://zhuanlan.zhihu.com/p/372441187">参考</a></li>
<li>vruntime += 实际运行时间(time process run) * 1024 / 进程权重(load weight of this process)<ul>
<li><img src="/imgs/60deded430df972428f4b32678ec2a4f32bef2fc89a4e69d60575fc08e19acf9.png" alt="picture 6">  </li>
</ul>
</li>
<li>调度的是<strong>虚拟运行时间最短的进程</strong>（利用红黑树排序）</li>
<li>vruntime并不是无限小的，有一个最小值来限定。假如新进程的vruntime初值为0的话，比老进程的值小很多，那么它在相当长的时间内都会保持抢占CPU的优势，老进程就要饿死了</li>
<li>每个CPU的运行队列cfs_rq都维护一个min_vruntime字段，记录该运行队列中所有进程的vruntime最小值，新进程的初始vruntime值就以它所在运行队列的min_vruntime为基础来设置，与老进程保持在合理的差距范围内</li>
<li>唤醒抢占<ul>
<li>休眠进程在<strong>唤醒时会获得vruntime的补偿</strong>，它在醒来的时候有能力<strong>抢占CPU</strong>是大概率事件，这也是CFS调度算法的本意，即保证交互式进程的响应速度，因为交互式进程等待用户输入会频繁休眠<h3 id="调度API"><a href="#调度API" class="headerlink" title="调度API"></a>调度API</h3></li>
</ul>
</li>
<li><img src="/imgs/a63520a86097fd5338f11cf3a9f79afd7e95ee1fdadd703e7c1126e17c072798.png" alt="picture 7">  </li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开机tty自动登录</title>
    <url>/2023/04/13/Linux%E5%BC%80%E6%9C%BAtty%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li>todo</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件IO（二）</title>
    <url>/2022/01/12/Linux%E6%96%87%E4%BB%B6IO%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux文件IO（二）"><a href="#Linux文件IO（二）" class="headerlink" title="Linux文件IO（二）"></a>Linux文件IO（二）</h1><h2 id="多次打开同一个文件"><a href="#多次打开同一个文件" class="headerlink" title="多次打开同一个文件"></a>多次打开同一个文件</h2><ul>
<li>一个进程内多次 open 打开同一个文件，那么会得到多个不同的文件描述符 fd，同理在关闭文件的 时候也需要调用 close 依次关闭各个文件描述符。</li>
<li>一个进程内多次 open 打开同一个文件，在内存中<strong>并不会存在</strong>多份动态文件。</li>
<li>一个进程内多次 open 打开同一个文件，不同文件描述符所对应的读写位置偏移量是相互独立的。</li>
<li><img src="/imgs/image-20220112193343091.png" alt="image-20220112193343091"></li>
<li>实例</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> buffer[<span class="number">4</span>];</span><br><span class="line">     <span class="keyword">int</span> fd1, fd2;</span><br><span class="line">     <span class="keyword">int</span> ret;</span><br><span class="line">     <span class="comment">/* 创建新文件 test_file 并打开 */</span></span><br><span class="line">     fd1 = open(<span class="string">&quot;./test_file&quot;</span>, O_RDWR | O_CREAT | O_EXCL,</span><br><span class="line">     S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd1) &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 再次打开 test_file 文件 */</span></span><br><span class="line">     fd2 = open(<span class="string">&quot;./test_file&quot;</span>, O_RDWR);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd2) &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         ret = <span class="number">-1</span>;</span><br><span class="line">         <span class="keyword">goto</span> err1;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 通过 fd1 文件描述符写入 4 个字节数据 */</span></span><br><span class="line">     buffer[<span class="number">0</span>] = <span class="number">0x11</span>;</span><br><span class="line">     buffer[<span class="number">1</span>] = <span class="number">0x22</span>;</span><br><span class="line">     buffer[<span class="number">2</span>] = <span class="number">0x33</span>;</span><br><span class="line">     buffer[<span class="number">3</span>] = <span class="number">0x44</span>;</span><br><span class="line">     ret = write(fd1, buffer, <span class="number">4</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 将读写位置偏移量移动到文件头 */</span></span><br><span class="line">     ret = lseek(fd2, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 读取数据 */</span></span><br><span class="line">     <span class="built_in">memset</span>(buffer, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">     ret = read(fd2, buffer, <span class="number">4</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;0x%x 0x%x 0x%x 0x%x\n&quot;</span>, buffer[<span class="number">0</span>], buffer[<span class="number">1</span>],</span><br><span class="line">     buffer[<span class="number">2</span>], buffer[<span class="number">3</span>]);</span><br><span class="line">     ret = <span class="number">0</span>;</span><br><span class="line">err2:</span><br><span class="line">     close(fd2);</span><br><span class="line">err1:</span><br><span class="line">     <span class="comment">/* 关闭文件 */</span></span><br><span class="line">     close(fd1);</span><br><span class="line">     <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<ul>
<li><p>当前目录下<strong>不存在 test_file 文件</strong>，上述代码中，第一次调用 open 函数新建并打开 test_file 文件，第二次 调用 open 函数再次打开它，新建文件时，文件大小为 0；首先通过文件描述符 fd1 写入 4 个字节数据 （0x11/0x22/0x33/0x44），从文件头开始写；然后再通过文件描述符 fd2 读取 4 个字节数据，也是从文件头 开始读取。假如，内存中只有一份动态文件，那么读取得到的数据应该就是 0x11、0x22、0x33、0x44，如 果存在多份动态文件，那么通过 fd2 读取的是与它对应的动态文件中的数据，那就不是 0x11、0x22、0x33、 0x44，而是读取出 0 个字节数据，因为它的文件大小是 0。</p>
</li>
<li><p><img src="/imgs/image-20220112193309416.png" alt="image-20220112193309416"></p>
</li>
<li><p>上图中打印显示读取出来的数据是 0x11/0x22/0x33/0x44，所以由此可知，即使多次打开同一个文件，内 存中也只有一份动态文件。</p>
</li>
</ul>
<h3 id="多次打开同一文件与O-APPEND"><a href="#多次打开同一文件与O-APPEND" class="headerlink" title="多次打开同一文件与O_APPEND"></a>多次打开同一文件与O_APPEND</h3><ul>
<li>假如不使用<code>O_APPEND</code>的话，程序将会以不同的文件标识符为准的偏移量分别写入数据，多个文件标识符同时写一个文件的时候，不会互相更新标识符的位置，因此有可能互相覆盖。</li>
<li>使用<code>O_APPEND</code>标志的时候，会<strong>自动将偏移量移动到文件尾部</strong>，会互相更新，比如一个文件标识符写入的时候会更新另一个文件标识符的写入偏移量。此时多个文件标识符进行读写的时候就不会互相覆盖了</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">char</span> buffer1[<span class="number">4</span>], buffer2[<span class="number">4</span>];</span><br><span class="line">     <span class="keyword">int</span> fd1, fd2;</span><br><span class="line">     <span class="keyword">int</span> ret;</span><br><span class="line">     <span class="keyword">int</span> i;</span><br><span class="line"> <span class="comment">/* 创建新文件 test_file 并打开 */</span></span><br><span class="line">	 fd1 = open(<span class="string">&quot;./test_file&quot;</span>, O_RDWR | O_CREAT | O_EXCL | O_APPEND,</span><br><span class="line">            S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd1) &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">/* 再次打开 test_file 文件 */</span></span><br><span class="line">     fd2 = open(<span class="string">&quot;./test_file&quot;</span>, O_RDWR | O_APPEND);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd2) &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         ret = <span class="number">-1</span>;</span><br><span class="line">         <span class="keyword">goto</span> err1;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">/* buffer 数据初始化 */</span></span><br><span class="line">     buffer1[<span class="number">0</span>] = <span class="number">0x11</span>;</span><br><span class="line">     buffer1[<span class="number">1</span>] = <span class="number">0x22</span>;</span><br><span class="line">     buffer1[<span class="number">2</span>] = <span class="number">0x33</span>;</span><br><span class="line">     buffer1[<span class="number">3</span>] = <span class="number">0x44</span>;</span><br><span class="line">     buffer2[<span class="number">0</span>] = <span class="number">0xAA</span>;</span><br><span class="line">     buffer2[<span class="number">1</span>] = <span class="number">0xBB</span>;</span><br><span class="line">     buffer2[<span class="number">2</span>] = <span class="number">0xCC</span>;</span><br><span class="line">     buffer2[<span class="number">3</span>] = <span class="number">0xDD</span>;</span><br><span class="line">     <span class="comment">/* 循环写入数据 */</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">         ret = write(fd1, buffer1, <span class="keyword">sizeof</span>(buffer1));</span><br><span class="line">         <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">             perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">             <span class="keyword">goto</span> err2;</span><br><span class="line">         &#125;</span><br><span class="line">         ret = write(fd2, buffer2, <span class="keyword">sizeof</span>(buffer2));</span><br><span class="line">         <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">             perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">             <span class="keyword">goto</span> err2;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 将读写位置偏移量移动到文件头 */</span></span><br><span class="line">     ret = lseek(fd1, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err2;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 读取数据 */</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">         ret = read(fd1, buffer1, <span class="keyword">sizeof</span>(buffer1));</span><br><span class="line">         <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">             perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">             <span class="keyword">goto</span> err2;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%x%x%x%x&quot;</span>, buffer1[<span class="number">0</span>], buffer1[<span class="number">1</span>],</span><br><span class="line">         buffer1[<span class="number">2</span>], buffer1[<span class="number">3</span>]);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">     ret = <span class="number">0</span>;</span><br><span class="line">err2:</span><br><span class="line">     close(fd2);</span><br><span class="line">err1:</span><br><span class="line">     <span class="comment">/* 关闭文件 */</span></span><br><span class="line">     close(fd1);</span><br><span class="line">     <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><img src="/imgs/image-20220112202602282.png" alt="image-20220112202602282"></li>
</ul>
<p>可见，每次fd1和fd2写入的内容都是交替出现的，也就是说<strong>一个标识符写入之后会自动更新另一个的偏移量</strong></p>
<h3 id="复制文件描述符"><a href="#复制文件描述符" class="headerlink" title="复制文件描述符"></a>复制文件描述符</h3><ul>
<li>在 Linux 系统中，open 返回得到的文件描述符 fd 可以进行复制，复制成功之后可以得到一个新的文件 描述符，使用新的文件描述符和旧的文件描述符都可以对文件进行 IO 操作，<strong>复制得到的文件描述符和旧的文件描述符拥有相同的权限</strong>，譬如使用旧的文件描述符对文件有读写权限，那么新的文件描述符同样也具 有读写权限；在 Linux 系统下，可以使用 dup 或 dup2 这两个系统调用对文件描述符进行复制，本小节就给 大家介绍这两个函数的用法以及它们之间的区别。 <strong>复制得到的文件描述符与旧的文件描述符都指向了同一个文件表</strong>，假设 fd1 为原文件描述符，fd2 为复 制得到的文件描述符，如下图所示：</li>
<li><img src="/imgs/image-20220112202809873.png" alt="image-20220112202809873"></li>
</ul>
<h4 id="dup-函数"><a href="#dup-函数" class="headerlink" title="dup 函数"></a>dup 函数</h4><ul>
<li>dup 函数用于复制文件描述符</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> oldfd)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>oldfd：需要被复制的文件描述符。</li>
<li>成功时将返回一个新的文件描述符，由操作系统分配，分配置原则遵循文件描述符分配原则； 如果复制失败将返回-1，并且会设置 errno 值。</li>
<li>同一个程序中使用一个描述符和复制得到的描述符进行写内容的时候，会<strong>自动连接起来而不是互相覆盖</strong>，因为两个描述符<strong>使用的是用一个偏移量</strong>。</li>
</ul>
<h4 id="dup2函数"><a href="#dup2函数" class="headerlink" title="dup2函数"></a>dup2函数</h4><ul>
<li>dup 系统调用分配的文件描述符是由系统分配的，遵循文件描述符分配原则，并不能自己指定一个文件 描述符，这是 dup 系统调用的一个缺陷；而 dup2 系统调用修复了这个缺陷，<strong>可以手动指定文件描述符，而 不需要遵循文件描述符分配原则</strong>，当然在实际的编程工作中，需要根据自己的情况来进行选择。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>oldfd：需要被复制的文件描述符。</p>
</li>
<li><p>newfd：指定一个文件描述符（需要指定一个当前进程没有使用到的文件描述符）。</p>
</li>
<li><p>返回值：成功时将返回一个新的文件描述符，也就是手动指定的文件描述符 newfd；如果复制失败将返 回-1，并且会设置 errno 值。</p>
</li>
</ul>
<h3 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h3><ul>
<li>文件共享指的是同一个文件（譬如磁盘上的同一个文件，对应同一个 inode）被 多个独立的读写体同时进行 IO 操作。多个独立的读写体大家可以将其简单地理解为对应于同一个文件的多 个不同的文件描述符，譬如多次打开同一个文件所得到的多个不同的 fd，或使用 dup()（或 dup2）函数复制 得到的多个不同的 fd 等。</li>
<li>同时进行 IO 操作指的是一个读写体操作文件尚未调用 close 关闭的情况下，另一个读写体去操作文件</li>
<li>文件共享的意义有很多，多用于多进程或多线程编程环境中，譬如我们可以通过文件共享的方式来实现 多个线程同时操作同一个大文件，以减少文件读写时间、提升效率。</li>
<li>文件共享的核心是：如何制造出多个不同的文件描述符来指向同一个文件。譬如多次调用 open 函数重复打开同一个文件得到多个不同的文件描述符、使用 dup() 或 dup2()函数对文件描述符进行复制以得到多个不同的文件描述符。</li>
</ul>
<h4 id="同一个进程中多次调用-open-函数打开同一个文件"><a href="#同一个进程中多次调用-open-函数打开同一个文件" class="headerlink" title="同一个进程中多次调用 open 函数打开同一个文件"></a>同一个进程中多次调用 open 函数打开同一个文件</h4><ul>
<li><img src="/imgs/image-20220112205040312.png" alt="image-20220112205040312"></li>
</ul>
<h4 id="不同进程中分别使用-open-函数打开同一个文件"><a href="#不同进程中分别使用-open-函数打开同一个文件" class="headerlink" title="不同进程中分别使用 open 函数打开同一个文件"></a>不同进程中分别使用 open 函数打开同一个文件</h4><ul>
<li><img src="/imgs/image-20220112205112471.png" alt="image-20220112205112471"></li>
</ul>
<h4 id="同一个进程中通过-dup（dup2）函数对文件描述符进行复制"><a href="#同一个进程中通过-dup（dup2）函数对文件描述符进行复制" class="headerlink" title="同一个进程中通过 dup（dup2）函数对文件描述符进行复制"></a>同一个进程中通过 dup（dup2）函数对文件描述符进行复制</h4><ul>
<li><img src="/imgs/image-20220112205156025.png" alt="image-20220112205156025"></li>
</ul>
<h3 id="文件操作中的原子操作和竞争冒险问题"><a href="#文件操作中的原子操作和竞争冒险问题" class="headerlink" title="文件操作中的原子操作和竞争冒险问题"></a>文件操作中的原子操作和竞争冒险问题</h3><ul>
<li><p>假设有两个独立的进程 A 和进程 B 都对同一个文件进行追加写操作（也就是在文件末尾写入数据）， 每一个进程都调用了 open 函数打开了该文件，但未使用 O_APPEND 标志，此时，各数据结构之间的关系 如图 3.8.2 所示。每个进程都有它自己的进程控制块 PCB，有自己的文件表（意味着有自己独立的读写位置 偏移量），但是共享同一个 inode 节点（也就是对应同一个文件）。假定此时进程 A 处于运行状态，B 未处 于等待运行状态，进程 A 调用了 lseek 函数，它将进程 A 的该文件当前位置偏移量设置为 1500 字节处（假 设这里是文件末尾），刚好此时进程 A 的时间片耗尽，然后内核切换到了进程 B，进程 B 执行 lseek 函数， 也将其对该文件的当前位置偏移量设置为 1500 个字节处（文件末尾）。然后进程 B 调用 write 函数，写入 了 100 个字节数据，那么此时在进程 B 中，该文件的当前位置偏移量已经移动到了 1600 字节处。B 进程时 间片耗尽，内核又切换到了进程 A，使进程 A 恢复运行，当进程 A 调用 write 函数时，是从进程 A 的该文 件当前位置偏移量（1500 字节处）开始写入，此时文件 1500 字节处已经不再是文件末尾了，如果还从 1500 字节处写入就会覆盖进程 B 刚才写入到该文件中的数据。</p>
</li>
<li><p><img src="/imgs/image-20220112205422813.png" alt="image-20220112205422813"></p>
</li>
<li><p>以上给大家所描述的这样一种情形就属于竞争状态（也成为竞争冒险），<strong>操作共享资源的两个进程</strong>（<strong>或 线程</strong>），其操作之后的所得到的结果<strong>往往是不可预期的</strong>，因为每个进程（或线程）去操作文件的顺序是不可 预期的，<strong>即这些进程获得 CPU 使用权的先后顺序是不可预期的</strong>，完全由操作系统调配，这就是所谓的竞争 状态。</p>
</li>
</ul>
<h4 id="解决上述问题用到的原子操作"><a href="#解决上述问题用到的原子操作" class="headerlink" title="解决上述问题用到的原子操作"></a>解决上述问题用到的原子操作</h4><ul>
<li><p>所谓原子操作，是有多步操作组成的一个操作，原子操作要么一步也不执行，一旦执行，必须要执行完所有 步骤，不可能只执行所有步骤中的一个子集。</p>
</li>
<li><p>使用<code>O_APPEND</code>实现原子操作</p>
<ul>
<li>当 open 函数的 flags 参数中包含了 O_APPEND 标志，每次执行 write 写入 操作时都会<strong>将文件当前写位置偏移量移动到文件末尾，然后再写入数据</strong>，这里“<strong>移动当前写位置偏移量到文 件末尾、写入数据</strong>”这两个操作步骤就组成了一个原子操作，加入 O_APPEND 标志后，不管怎么写入数据 都会是从文件末尾写，这样就不会导致出现“进程 A 写入的数据覆盖了进程 B 写入的数据”这种情况了。</li>
</ul>
</li>
<li><p>使用<code>pread()</code>和<code>pwrite()</code>进行操作</p>
<ul>
<li>pread()和 pwrite()都是系统调用，与 read()、write()函数的作用一样，用于读取和写入数据。区别在于， pread()和 pwrite()可用于实现原子操作，<strong>调用 pread 函数或 pwrite 函数可传入一个位置偏移量 offset 参数</strong>， 用于指定文件当前读或写的位置偏移量，所以调用 <strong>pread 相当于调用 lseek 后再调用 read</strong>；同理，调用 pwrite 相当于调用 lseek 后再调用 write。所以可知，使用 pread 或 pwrite 函数不需要使用 lseek 来调整当前位置偏 移量，并会将“<strong>移动当前位置偏移量、读或写</strong>”这两步操作组成一个原子操作。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">pread</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count, <span class="keyword">off_t</span> offset)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">pwrite</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count, <span class="keyword">off_t</span> offset)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>fd、buf、count 参数与 read 或 write 函数意义相同。</p>
</li>
<li><p> offset：表示当前需要进行读或写的位置偏移量。 </p>
</li>
<li><p>返回值：返回值与 read、write 函数返回值意义一样。</p>
</li>
<li><p>虽然 pread（或 pwrite）函数相当于 lseek 与 pread（或 pwrite）函数的集合，但还是有下列区别：</p>
<ul>
<li>调用 pread 函数时，<strong>无法中断</strong>其定位和读操作（也就是原子操作）；</li>
<li><strong>不更新</strong>文件表中的当前位置偏移量。</li>
</ul>
</li>
<li><p>**<code>fcntl()</code>和<code>ioctl()</code>**详见原子的《I.MX6U嵌入式Linux C应用编程指南》</p>
</li>
</ul>
<h3 id="截断文件"><a href="#截断文件" class="headerlink" title="截断文件"></a>截断文件</h3><ul>
<li>使用系统调用 truncate()或 ftruncate()可将普通文件截断为指定字节长度</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">truncate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">off_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ftruncate</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这两个函数的区别在于：ftruncate()使用文件描述符 fd 来指定目标文件，而 truncate()则直接使用文件路 径 path 来指定目标文件，其功能一样。</p>
</li>
<li><p>这两个函数都可以对文件进行截断操作，将文件截断为参数 length 指定的字节长度，什么是截断？如 果文件目前的大小大于参数 length 所指定的大小，则多余的数据将被丢失，类似于多余的部分被“砍”掉 了；如果文件目前的<strong>大小小于参数 length 所指定的大小，则将其进行扩展，对扩展部分进行读取将得到空字 节”\0”。</strong></p>
</li>
<li><p>使用 ftruncate()函数进行文件截断操作之前，必须调用 open()函数打开该文件得到文件描述符，并且必 须要具有可写权限，也就是调用 open()打开文件时需要指定 O_WRONLY 或 O_RDWR。</p>
</li>
<li><p>调用这两个函数并不会导致文件读写位置偏移量发生改变，所以截断之后一般需要重新设置文件当前 的读写位置偏移量，以免由于之前所指向的位置已经不存在而发生错误（譬如文件长度变短了，文件当前所 指向的读写位置已不存在）。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux根文件系统</title>
    <url>/2022/02/27/Linux%E6%A0%B9%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="Linux根文件系统"><a href="#Linux根文件系统" class="headerlink" title="Linux根文件系统"></a>Linux根文件系统</h1><h2 id="什么是文件系统"><a href="#什么是文件系统" class="headerlink" title="什么是文件系统"></a>什么是文件系统</h2><ul>
<li><p>根文件系统一般也叫做 rootfs，那么什么叫根文件系统？看到“文件系统”这四个字，很多 人，包括我第一反应就是 FATFS、FAT、EXT4、YAFFS 和 NTFS 等这样的文件系统。在这里， 根文件系统<u>并不是 FATFS 这样的文件系统代码</u>，EXT4 这样的<u>文件系统代码属于 Linux 内核的 一部分</u>。Linux 中的根文件系统更像是<strong>一个文件夹或者叫做目录</strong>(在我看来就是一个文件夹，只 不过是特殊的文件夹)，在这个目录里面<strong>会有很多的子目录。根目录下和子目录中会有很多的文件</strong>，这些文件是 Linux 运行所必须的，比如库、常用的软件和命令、设备文件、配置文件等等。</p>
</li>
<li><p>根文件系统首先是内核启动时所 <strong>mount(挂载)的第一个文件系统</strong>，内核代码映像文件保存在 根文件系统中，而系统引导启动程序会在根文件系统挂载之后从中把一些基本的初始化脚本和 服务等加载到内存中去运行。</p>
</li>
<li><p>嵌入式 Linux 并没有将内 核代码镜像保存在根文件系统中，而是保存到了其他地方。比如 <u>NAND Flash 的指定存储地址、 EMMC 专用分区中</u>。根文件系统是 Linux 内核启动以后挂载(mount)的第一个文件系统，然后从 根文件系统中读取初始化脚本，比如 rcS，inittab 等。根文件系统和 Linux 内核是分开的，单独 的 Linux 内核是没法正常工作的，必须要搭配根文件系统。如果不提供根文件系统，Linux 内核 在启动的时候就会提示内核崩溃(Kernel panic)的提示</p>
</li>
<li><p>根文件系统是其他文件系统的根，没有这个“根”，其他的文件系统或者软件就别想工作。比如我们<strong>常用的 ls、mv、ifconfig 等命令 其实就是一个个小软件</strong>，只是这些<u>软件没有图形界面</u>，而且需要输入命令来运行。这些<strong>小软件就保存在根文件系统中</strong></p>
</li>
<li><p>以 Ubuntu 为例，根文件系统的目录名字为‘/’，没看错就是一个斜杠，所以输入如下命令就可以进入根目录中</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd / //进入根目录</span><br></pre></td></tr></table></figure>

<h3 id="bin"><a href="#bin" class="headerlink" title="/bin"></a>/bin</h3><ul>
<li>bin 文件就是<strong>可执行文件</strong>。所以此目录下存放着系统 需要的可执行文件，一般都是一些命令，比如 ls、mv 等命令。此目录下的命令所有的客户都可 以使用。</li>
</ul>
<h3 id="dev-目录"><a href="#dev-目录" class="headerlink" title="/dev 目录"></a>/dev 目录</h3><ul>
<li>dev 是 device 的缩写，所以此目录下的文件都是和设备有关的，此目录下的文件都是<strong>设备文件</strong>。在 <strong>Linux 下一切皆文件</strong>，即使是<strong>硬件设备，也是以文件的形式存在的</strong>，比如 /dev/ttymxc0(I.MX6ULL 根目录会有此文件)就表示 I.MX6ULL 的串口 0，我们**要想通过串口 0 发送或者接收数据就要操作文件/dev/ttymxc0，通过对文件/dev/ttymxc0 的<u>读写操作</u>来实现串口 0 的<u>数据收发</u>**。</li>
</ul>
<h3 id="etc-目录"><a href="#etc-目录" class="headerlink" title="/etc 目录"></a>/etc 目录</h3><ul>
<li>此目录下存放着<strong>各种配置文件</strong>，大家可以进入 Ubuntu 的 etc 目录看一下，里面的配置文件 非常多！但是在嵌入式 Linux 下此目录会很简洁。</li>
</ul>
<h3 id="lib-目录"><a href="#lib-目录" class="headerlink" title="/lib 目录"></a>/lib 目录</h3><ul>
<li>lib 是 library 的简称，也就是库的意思，因此此目录下<strong>存放着 Linux 所必须的库文件</strong>。这些 库文件是<strong>共享库</strong>，命令和用户编写的应用程序要使用这些库文件。</li>
</ul>
<h3 id="mnt-目录"><a href="#mnt-目录" class="headerlink" title="/mnt 目录"></a>/mnt 目录</h3><ul>
<li>临时挂载目录，一般是空目录，可以在此目录下创建空的子目录，比如/mnt/sd、/mnt/usb， 这样就可以将 SD 卡或者 U 盘挂载到/mnt/sd 或者/mnt/usb 目录中。</li>
</ul>
<h3 id="proc-目录"><a href="#proc-目录" class="headerlink" title="/proc 目录"></a>/proc 目录</h3><ul>
<li>此目录一般是空的，当 Linux 系统启动以后会将此目录作为 proc 文件系统的挂载点，proc 是个<strong>虚拟文件系统</strong>，没有实际的存储设备。proc 里面的文件都是临时存在的，一般用来存储系 统运行信息文件。</li>
</ul>
<h3 id="usr-目录"><a href="#usr-目录" class="headerlink" title="/usr 目录"></a>/usr 目录</h3><ul>
<li>usr 不是 user 的缩写，而是 <u>Unix Software Resource</u> 的缩写，也就是 Unix 操作系统 软件资源目录。这里有个小知识点，那就是 <u>Linux 一般被称为类 Unix 操作系统</u>，苹果的 MacOS 也是类 Unix 操作系统。关于 Linux 和 Unix 操作系统的渊源大家可以直接在网上找 Linux 的发 展历史来看。既然是软件资源目录，因此**/usr 目录下也存放着很多软件**，一般系统安装完成以 后此目录占用的空间最多。</li>
</ul>
<h3 id="var-目录"><a href="#var-目录" class="headerlink" title="/var 目录"></a>/var 目录</h3><ul>
<li>此目录存放一些<u>可以改变的数据</u>。</li>
</ul>
<h3 id="sbin-目录"><a href="#sbin-目录" class="headerlink" title="/sbin 目录"></a>/sbin 目录</h3><ul>
<li>此目录页<u>用户存放一些可执行文件</u>，但是此目录下的文件或者说命令只有管理员才能使用， 主要用户系统管理。</li>
</ul>
<h3 id="sys-目录"><a href="#sys-目录" class="headerlink" title="/sys 目录"></a>/sys 目录</h3><ul>
<li>系统启动以后此目录作为 <strong>sysfs 文件系统的挂载点</strong>，sysfs 是一个类似于 proc 文件系统的特 殊文件系统，<u>sysfs 也是基于 ram 的文件系统，也就是说它也没有实际的存储设备</u>。此目录是系 统设备管理的重要目录，此目录通过一定的组织结构向用户提供详细的内核数据结构信息。</li>
</ul>
<h3 id="opt目录"><a href="#opt目录" class="headerlink" title="/opt目录"></a>/opt目录</h3><ul>
<li>可选的文件、软件存放区，由用户选择将哪些文件或软件放到此目录中。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux进程间通信简介</title>
    <url>/2022/01/21/Linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Linux进程间通信简介"><a href="#Linux进程间通信简介" class="headerlink" title="Linux进程间通信简介"></a>Linux进程间通信简介</h1><h2 id="管道和-FIFO"><a href="#管道和-FIFO" class="headerlink" title="管道和 FIFO"></a>管道和 FIFO</h2><ul>
<li>管道是 UNIX 系统上最古老的 IPC 方法，它在 20 世纪 70 年代早期 UNIX 的第三个版本上就出现了。 把一个进程连接到另一个进程的数据流称为管道，管道被抽象成一个文件，5.1 小节曾提及过管道文件（pipe） 这样一种文件类型。<ul>
<li>普通管道 pipe：通常有两种限制，一是单工，数据只能单向传输；二是只能在父子或者兄弟进程间 使用；</li>
<li>流管道 s_pipe：去除了普通管道的第一种限制，为半双工，可以双向传输；只能在父子或兄弟进程 间使用；</li>
<li>有名管道 name_pipe（FIFO）：去除了普通管道的第二种限制，并且允许在不相关（不是父子或兄 弟关系）的进程间进行通讯。</li>
</ul>
</li>
<li>普通管道可用于具有亲缘关系的进程间通信，并且数据只能单向传输，如果要实现双向传输，则必须要 使用两个管道；而流管道去除了普通管道的第一种限制，可以半双工的方式实现双向传输，但也只能在具有 亲缘关系的进程间通信；而有名管道（FIFO）则同时突破了普通管道的两种限制，即可实现双向传输、又能 在非亲缘关系的进程间通信。</li>
</ul>
<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><ul>
<li>通知接收信号的进程有某种事件发生，所以可 用于进程间通信；除了用于进程间通信之外，进程还可以发送信号给进程本身。</li>
</ul>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><ul>
<li>消息队列是消息的链表，存放在内核中并由消息队列标识符标识，消息队列克服了信号传递信息少、管 道只能承载无格式字节流以及缓冲区大小受限等缺陷。消息队列包括 POSIX 消息队列和 System V 消息队 列。</li>
<li>消息队列是 UNIX 下不同进程之间实现共享资源的一种机制，UNIX 允许不同进程将格式化的数据流以 消息队列形式发送给任意进程，有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读 走队列中的消息。</li>
</ul>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><ul>
<li>信号量是一个计数器，与其它进程间通信方式不大相同，它主要用于控制多个进程间或一个进程内的多 个线程间对共享资源的访问，相当于内存中的标志，进程可以根据它判定是否能够访问某些共享资源，同 时，进程也可以修改该标志，除了用于共享资源的访问控制外，还可用于进程同步。</li>
<li>它常作为一种锁机制，防止某进程在访问资源时其它进程也访问该资源，因此，主要作为进程间以及同 一个进程内不同线程之间的同步手段。Linux 提供了一组精心设计的信号量接口来对信号量进行操作，它们 声明在头文件 sys/sem.h 中。</li>
</ul>
<h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><ul>
<li>共享内存就是映射一段能被其它进程所访问的内存，这段共享内存由一个进程创建，但其它的多个进程 都可以访问，使得多个进程可以访问同一块内存空间。共享内存是最快的 IPC 方式，它是针对其它进程间 通信方式运行效率低而专门设计的，它往往与其它通信机制，譬如结合信号量来使用，以实现进程间的同步 和通信。</li>
</ul>
<h2 id="套接字（Socket）"><a href="#套接字（Socket）" class="headerlink" title="套接字（Socket）"></a>套接字（Socket）</h2><ul>
<li>Socket 是一种 IPC 方法，是基于网络的 IPC 方法，允许位于同一主机（计算机）或使用网络连接起来 的不同主机上的应用程序之间交换数据，说白了就是网络通信，在提高篇章节内容中将会向大家介绍 Linux 系统下的网络编程。<ul>
<li>各个应用程序创建一个 socket。socket 是一个允许通信的“设备”，两个应用程序都需要用到它。</li>
<li>服务器将自己的 socket 绑定到一个众所周知的地址（名称）上使得客户端能够定位到它的位置。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Morris遍历</title>
    <url>/2022/08/29/Morris%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h2 id="Morris遍历细节"><a href="#Morris遍历细节" class="headerlink" title="Morris遍历细节"></a>Morris遍历细节</h2><ul>
<li><img src="/imgs/da93ce774972f0e9d9f5fed4f9038f8fe80708e3395fa90c87058ef38ced2d57.png" alt="图 8">  </li>
<li>传统遍历方法的空间复杂度是O(树的高度)</li>
<li>利用底层叶节点的空指针节省空间</li>
<li>假如不允许修改题目给出的树就没法使用Morris遍历</li>
<li>Morris遍历对于所有有左子树的节点都能到达两次</li>
<li>一个节点指针来到他的右子树之后就不会再次返回这个节点了<ul>
<li>判断第几次到达一个节点？</li>
<li>根据左子树上最右节点的右指针指向谁，假如指向自己，那就是第二次到达<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morris</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur = head;</span><br><span class="line">    Node mostRight = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mostRight = cur.left;</span><br><span class="line">        <span class="keyword">if</span> (mostRight != <span class="keyword">null</span>) &#123;<span class="comment">// z有左孩子否则直接退回大循环</span></span><br><span class="line">            <span class="keyword">while</span> (mostRight.right != <span class="keyword">null</span> &amp;&amp; mostRight.right != cur) &#123; <span class="comment">// 找左树上的最右节点，右孩子不能等于当前节点</span></span><br><span class="line">                mostRight = mostRight.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mostRight.right == <span class="keyword">null</span>) &#123;<span class="comment">// 第一次来到cur</span></span><br><span class="line">                mostRight.right = cur;</span><br><span class="line">                cur = cur.left;<span class="comment">//向左子树发展</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mostRight.right = <span class="keyword">null</span>;<span class="comment">// 第二次来到cur</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.right;<span class="comment">// 向右树移动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>时间复杂度: O(N)<h2 id="Morris遍历改为先序遍历："><a href="#Morris遍历改为先序遍历：" class="headerlink" title="Morris遍历改为先序遍历："></a>Morris遍历改为先序遍历：</h2></li>
<li>如果一个节点<strong>只能到达一次</strong>，直接打印内容</li>
<li>如果可以到达<strong>两次</strong>，第一次打印<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morrisPre</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur = head;</span><br><span class="line">    Node mostRight = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mostRight = cur.left;</span><br><span class="line">        <span class="keyword">if</span> (mostRight != <span class="keyword">null</span>) &#123;<span class="comment">// 有左子树</span></span><br><span class="line">            <span class="keyword">while</span> (mostRight.right != <span class="keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;</span><br><span class="line">                mostRight = mostRight.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mostRight.right == <span class="keyword">null</span>) &#123;<span class="comment">// 第一次来到这个节点</span></span><br><span class="line">                System.out.print(cur.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                mostRight.right = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 第二次来，不打印</span></span><br><span class="line">                mostRight.right = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 没有左子树</span></span><br><span class="line">            System.out.print(cur.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2></li>
<li>只经过一次的节点：直接输出</li>
<li>两次的节点：第二次经过的时候打印<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morrisIn</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur = head;</span><br><span class="line">    Node mostRight = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mostRight = cur.left;</span><br><span class="line">        <span class="keyword">if</span> (mostRight != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (mostRight.right != <span class="keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;</span><br><span class="line">                mostRight = mostRight.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mostRight.right == <span class="keyword">null</span>) &#123;<span class="comment">// 第一次经过会跳过打印</span></span><br><span class="line">                mostRight.right = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mostRight.right = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 跟原本代码唯一的区别就是此处加一个打印</span></span><br><span class="line">        System.out.print(cur.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Morris后序遍历"><a href="#Morris后序遍历" class="headerlink" title="Morris后序遍历"></a>Morris后序遍历</h2></li>
<li>将打印的时机安排在一个能回到自己两次的节点第二次被经过的时候</li>
<li>第二次回到自己的时候<u>逆序打印自己左树的右边界</u></li>
<li>整个过程结束之后<u>逆序打印整棵树的右边界</u><h3 id="逆序遍历如何实现"><a href="#逆序遍历如何实现" class="headerlink" title="逆序遍历如何实现"></a>逆序遍历如何实现</h3></li>
<li>借用单链表逆序遍历的操作</li>
<li>指针逆序之后，打印然后再调整回去<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morrisPos</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node cur = head;</span><br><span class="line">    Node mostRight = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mostRight = cur.left;</span><br><span class="line">        <span class="keyword">if</span> (mostRight != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (mostRight.right != <span class="keyword">null</span> &amp;&amp; mostRight.right != cur) &#123;</span><br><span class="line">                mostRight = mostRight.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mostRight.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mostRight.right = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mostRight.right = <span class="keyword">null</span>;</span><br><span class="line">                printEdge(cur.left);<span class="comment">// 第二次经过的时候逆序打印左树的右边界</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">    printEdge(head);<span class="comment">// 整个结束之后逆序打印整棵树的右边界</span></span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printEdge</span><span class="params">(Node head)</span> </span>&#123;<span class="comment">// 打印然后再逆序回去</span></span><br><span class="line">    Node tail = reverseEdge(head);</span><br><span class="line">    Node cur = tail;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.print(cur.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">    reverseEdge(tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverseEdge</span><span class="params">(Node from)</span> </span>&#123;<span class="comment">// 单链表的逆序操作</span></span><br><span class="line">    Node pre = <span class="keyword">null</span>;</span><br><span class="line">    Node next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (from != <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = from.right;</span><br><span class="line">        from.right = pre;</span><br><span class="line">        pre = from;</span><br><span class="line">        from = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux高级IO</title>
    <url>/2022/01/25/Linux%E9%AB%98%E7%BA%A7IO/</url>
    <content><![CDATA[<h1 id="Linux高级IO"><a href="#Linux高级IO" class="headerlink" title="Linux高级IO"></a>Linux高级IO</h1><h2 id="阻塞与非阻塞IO"><a href="#阻塞与非阻塞IO" class="headerlink" title="阻塞与非阻塞IO"></a>阻塞与非阻塞IO</h2><ul>
<li><p>阻塞其实就是进入了休眠状态，交出了 CPU 控制权。</p>
</li>
<li><p>譬如对于某些文件类型（读管道文件、网 络设备文件和字符设备文件），当对文件进行读操作时，如果数据未准备好、文件当前<strong>无数据可读</strong>，那么读 操作可能会<strong>使调用者阻塞</strong>，直到有数据<strong>可读时才会被唤醒</strong>，这就是阻塞式 I/O 常见的一种表现；如果是非阻 塞式 I/O，即使没有数据可读，也不会被阻塞、而是会立马返回错误！</p>
</li>
<li><p>普通文件的读写操作是不会阻塞的，不管读写多少个字节数据，read()或 write()<strong>一定会在有限的时间内 返回</strong>，所以普通文件一定是以<strong>非阻塞的方式</strong>进行 I/O 操作，这是普通文件本质上决定的；但是对于某些文件 类型，譬如上面所介绍的管道文件、设备文件等，它们既可以使用阻塞式 I/O 操作，也可以使用非阻塞式 I/O 进行操作。</p>
</li>
<li><p>控制台使用<code>sudo od -x /dev/input/mouse0</code>读取鼠标文件信息</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> fd, ret;</span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/input/event3&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 读文件 */</span></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    ret = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>memset</code>函数的作用是<strong>void *memset(void *str, int c, size_t n)</strong> 复制字符 <strong>c</strong>（一个无符号字符）到参数 <strong>str</strong> 所指向的字符串的前 <strong>n</strong> 个字符。上面代码中的作用是初始化为0</p>
</li>
<li><p><img src="/../imgs/image-20220125105645727.png" alt="image-20220125105645727"></p>
</li>
<li><p>但是看到读取的并不是要求的100个字节</p>
</li>
<li><p>假如将<code>open</code>的flag更改为<code>O_RDONLY | O_NONBLOCK</code>，那么调用程序假如没读取到的话就会立即报错，</p>
</li>
<li><p><img src="/../imgs/image-20220125105756074.png" alt="image-20220125105756074"></p>
</li>
<li><p>所以<strong>阻塞式</strong> I/O 的优点在于能够<strong>提升 CPU 的处理效率</strong>，当自身条件不满足时，进入阻塞状态，交出 CPU 资源，将 CPU 资源让给别人使用；而<strong>非阻塞式则是抓紧利用 CPU 资源</strong>，譬如不断地去轮训，这样就会导致 该程序占用了非常高的 CPU 使用率！</p>
</li>
</ul>
<h3 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h3><ul>
<li>键盘是<strong>标准输入设备</strong> stdin，进程会自动从父进程中<strong>继承标准输入</strong>、标准输出以及标准错 误，标准输入设备对应的<strong>文件描述符为 0</strong>，所以在程序当中直接使用即可，不需要再调用 open 打开。</li>
</ul>
<h3 id="并发读取"><a href="#并发读取" class="headerlink" title="并发读取"></a>并发读取</h3><ul>
<li>程序中先读了鼠标，在接着读键盘，所以由此可知，在实际测试当中，需要先动鼠标在按键盘（按 下键盘上的按键、按完之后按下回车），这样才能既成功读取鼠标、又成功读取键盘，程序才能够顺利运行 结束。因为 read 此时是阻塞式读取，先读取了鼠标，没有数据可读将会一直被阻塞，后面的读取键盘将得 不到执行。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOUSE <span class="meta-string">&quot;/dev/input/event3&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> fd, ret;</span><br><span class="line">    <span class="comment">/* 打开鼠标设备文件 */</span></span><br><span class="line">    fd = open(MOUSE, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 读鼠标 */</span></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    ret = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;鼠标: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">    <span class="comment">/* 读键盘 */</span></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    ret = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;键盘: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>利用下面的代码修改键盘文件的读取类型为不堵塞，并且同上将鼠标的打开方式也设置为非堵塞</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">flag = fcntl(<span class="number">0</span>, F_GETFL); <span class="comment">//先获取原来的 flag</span></span><br><span class="line">flag |= O_NONBLOCK; <span class="comment">//将 O_NONBLOCK 标志添加到 flag</span></span><br><span class="line">fcntl(<span class="number">0</span>, F_SETFL, flag); <span class="comment">//重新设置 flag</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用非阻塞 I/O 方式解决了示例代码 13.1.4 出现的问题，但由于程序当中使用轮训方式，故而会 使得该程序的 CPU 占用率特别高，终归还是不太安全，会对整个系统产生很大的副作用，如何解决这样的 问题呢？我们将在下一小节向大家介绍。</li>
</ul>
<h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><ul>
<li>I/O 多路复用（IO multiplexing）它通过一种机制，可以监视多个文件描述符，一旦某个文件描述符（也 就是某个文件）可以执行 I/O 操作时，能够通知应用程序进行相应的读写操作。I/O 多路复用技术是为了解 决：在并发式 I/O 场景中进程或线程阻塞到某个 I/O 系统调用而出现的技术，使进程不阻塞于某个特定的 I/O 系统调用。</li>
</ul>
<h3 id="select-函数"><a href="#select-函数" class="headerlink" title="select()函数"></a>select()函数</h3><ul>
<li>系统调用 select()可用于执行 I/O 多路复用操作，调用 select()会一直阻塞，直到某一个或多个文件描述 符成为就绪态（可以读或写）。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数 readfds、writefds 以及 exceptfds 都是 fd_set 类型指针， 指向一个 fd_set 类型对象，fd_set 数据类型是一个文件描述符的集合体，所以参数 readfds、writefds 以及 exceptfds 都是指向文件描述符集合的指针，这些参数按照如下方式使用：</p>
<ul>
<li>readfds 是用来检测读是否就绪（是否可读）的文件描述符集合；</li>
<li>writefds 是用来检测写是否就绪（是否可写）的文件描述符集合；</li>
<li>exceptfds 是用来检测异常情况是否发生的文件描述符集合。</li>
</ul>
</li>
<li><p>为 Linux 提供了四个宏用于对 fd_set 类型对象进行操作</p>
<ul>
<li>FD_CLR()、FD_ISSET()、FD_SET()、FD_ZERO()</li>
</ul>
</li>
<li><p>如果对 readfds、writefds 以及 exceptfds 中的某些事件不感兴趣，可将其设置为 NULL，这表示对相应条 件不关心。如果这三个参数都设置为 NULL，则可以将 select()当做为一个类似于 sleep()休眠的函数来使用， 通过 select()函数的最后一个参数 timeout 来设置休眠时间。</p>
</li>
<li><p>select()函数的第一个参数 nfds 通常表示最大文件描述符编号值加 1，考虑 readfds、writefds 以及 exceptfds 这三个文件描述符集合，在 3 个描述符集中找出最大描述符编号值，然后加 1，这就是参数 nfds。</p>
</li>
<li><p>select()函数的最后一个参数 timeout 可用于设定 select()阻塞的时间上限，控制 select 的阻塞行为，可将 timeout 参数设置为 NULL，表示 select()将会一直阻塞、直到某一个或多个文件描述符成为就绪态；也可将 其指向一个 struct timeval 结构体对象</p>
<ul>
<li>如果参数 timeout 指向的 struct timeval 结构体对象中的两个成员变量都为 0，那么此时 select()函数不会 阻塞，它只是简单地轮训指定的文件描述符集合，看看其中是否有就绪的文件描述符并立刻返回。否则，参 数 timeout 将为 select()指定一个等待（阻塞）时间的上限值，如果在阻塞期间内，文件描述符集合中的某一 个或多个文件描述符成为就绪态，将会结束阻塞并返回；如果超过了阻塞时间的上限值，select()函数将会返 回！</li>
</ul>
</li>
<li><p>select()函数将阻塞直到有以下事情发生：</p>
<ul>
<li>readfds、writefds 或 exceptfds 指定的文件描述符中至少有一个称为就绪态；</li>
<li>该调用被信号处理函数中断；</li>
<li>参数 timeout 中指定的时间上限已经超时。</li>
</ul>
</li>
<li><p>文件描述集合的操作宏定义</p>
<ul>
<li>FD_ZERO()将参数 set 所指向的集合<strong>初始化为空</strong>；</li>
<li>FD_SET()将文件描述符 fd 添加到参数 set 所指向的集合中；</li>
<li>FD_CLR()将文件描述符 fd 从参数 set 所指向的集合中移除；</li>
<li>如果文件描述符 fd 是参数 set 所指向的集合中的成员，则 FD_ISSET()返回 true，否则返回 false。</li>
</ul>
</li>
<li><p>返回值</p>
<ul>
<li>返回-1 表示有错误发生，并且会设置 errno。</li>
<li>返回 0 表示在任何文件描述符成为就绪态之前 select()调用已经超时，在这种情况下，readfds， writefds 以及 exceptfds 所指向的文件描述符集合都会被清空。</li>
<li> 返回一个正整数表示有一个或多个文件描述符已达到就绪态。返回值表示处于就绪态的文件描述 符的个数，在这种情况下，每个返回的文件描述符集合都需要检查，通过 FD_ISSET()宏进行检查， 以此找出发生的 I/O 事件是什么。如果同一个文件描述符在 readfds，writefds 以及 exceptfds 中同时 被指定，且它对于多个 I/O 事件都处于就绪态的话，那么就<strong>会被统计多次</strong></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOUSE <span class="meta-string">&quot;/dev/input/event3&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> fd, ret = <span class="number">0</span>, flag;</span><br><span class="line">    fd_set rdfds;</span><br><span class="line">    <span class="keyword">int</span> loops = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/* 打开鼠标设备文件 */</span></span><br><span class="line">    fd = open(MOUSE, O_RDONLY | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 将键盘设置为非阻塞方式 */</span></span><br><span class="line">    flag = fcntl(<span class="number">0</span>, F_GETFL); <span class="comment">//先获取原来的 flag</span></span><br><span class="line">    flag |= O_NONBLOCK;       <span class="comment">//将 O_NONBLOCK 标准添加到 flag</span></span><br><span class="line">    fcntl(<span class="number">0</span>, F_SETFL, flag);  <span class="comment">//重新设置 flag</span></span><br><span class="line">    <span class="comment">/* 同时读取键盘和鼠标 */</span></span><br><span class="line">    <span class="keyword">while</span> (loops--)</span><br><span class="line">    &#123;</span><br><span class="line">        FD_ZERO(&amp;rdfds);</span><br><span class="line">        FD_SET(<span class="number">0</span>, &amp;rdfds);  <span class="comment">//添加键盘</span></span><br><span class="line">        FD_SET(fd, &amp;rdfds); <span class="comment">//添加鼠标</span></span><br><span class="line">        ret = select(fd + <span class="number">1</span>, &amp;rdfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;select error&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;select timeout.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 检查键盘是否为就绪态 */</span></span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(<span class="number">0</span>, &amp;rdfds))</span><br><span class="line">        &#123;</span><br><span class="line">            ret = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; ret)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;键盘: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 检查鼠标是否为就绪态 */</span></span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(fd, &amp;rdfds))</span><br><span class="line">        &#123;</span><br><span class="line">            ret = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; ret)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;鼠标: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">out:</span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>程序的工作实际上是先利用鼠标和键盘的文件位置构建一个结构体，然后使用select进行检测，然后检测结果之后对每个文件使用宏定义进行判断是否是这个文件处于就绪状态。</li>
<li>鼠标和键盘都设置为了非阻塞 I/O 方式，其实设置为阻塞 I/O 方式也是可以的，因 为 select()返回时意味着此时数据是可读取的，所以以非阻塞和阻塞两种方式读取数据<strong>均不会发生阻塞</strong>。</li>
</ul>
<h3 id="poll-函数"><a href="#poll-函数" class="headerlink" title="poll()函数"></a>poll()函数</h3><ul>
<li>系统调用 poll()与 select()函数很相似，但函数接口有所不同。在 select()函数中，我们提供三个 fd_set 集 合，在每个集合中添加我们关心的文件描述符；而在 poll()函数中，则需要构造一个 struct pollfd 类型的数 组，每个数组元素指定一个文件描述符以及我们对该文件描述符所关心的条件（数据可读、可写或异常情 况）。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>fds：指向一个 struct pollfd 类型的数组，数组中的每个元素都会指定一个文件描述符以及我们对该文件 描述符所关心的条件，稍后介绍 struct pollfd 结构体类型。</li>
<li>nfds：参数 nfds 指定了 fds 数组中的元素个数，数据类型 nfds_t 实际为无符号整形。</li>
<li>timeout：该参数与 select()函数的 timeout 参数相似，用于决定 poll()函数的阻塞行为，具体用法如下：<ul>
<li>如果 timeout 等于**-1，则 poll()会一直阻塞**（与 select()函数的 timeout 等于 NULL 相同），直到 fds 数组中列出的文件描述符有一个达到就绪态或者捕获到一个信号时返回。</li>
<li>如果 timeout 等于 0，poll()不会阻塞，只是执行一次检查看看哪个文件描述符处于就绪态。</li>
<li>如果 timeout 大于 0，则表示设置 poll()函数阻塞时间的上限值，意味着 poll()函数最多阻塞 timeout 毫秒，直到 fds 数组中列出的文件描述符有一个达到就绪态或者捕获到一个信号为止。</li>
</ul>
</li>
<li><strong>pollfd结构体</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line"> <span class="keyword">int</span> fd; <span class="comment">/* file descriptor */</span></span><br><span class="line"> <span class="keyword">short</span> events; <span class="comment">/* requested events */</span></span><br><span class="line"> <span class="keyword">short</span> revents; <span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>events 和 revents 都是位掩码</p>
<ul>
<li><p>初始化 events 来指 定<strong>需要为文件描述符 fd 做检查的事件</strong></p>
</li>
<li><p>revents 变量由 poll()函数内部进行设置，用于 说明文件描述符 fd 发生了哪些事件（注意，poll()没有更改 events 变量）</p>
</li>
<li><p>如果我们对某个文件描述符上的事件不感兴趣，则可将 events 变量设置为 0；另外，将 fd 变量设置为 文件描述符的负值（取文件描述符 fd 的相反数-fd），将导致对应的 events 变量被 poll()忽略，并且 revents 变量将总是返回 0，这两种方法都可用来关闭对某个文件描述符的检查。</p>
</li>
<li><p><img src="/../imgs/image-20220125133340426.png" alt="image-20220125133340426"></p>
</li>
</ul>
</li>
<li><p>返回值与select类似，略</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOUSE <span class="meta-string">&quot;/dev/input/event3&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> fd, ret = <span class="number">0</span>, flag;</span><br><span class="line">    <span class="keyword">int</span> loops = <span class="number">5</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[2];</span></span><br><span class="line">    <span class="comment">/* 打开鼠标设备文件 */</span></span><br><span class="line">    fd = open(MOUSE, O_RDONLY | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 将键盘设置为非阻塞方式 */</span></span><br><span class="line">    flag = fcntl(<span class="number">0</span>, F_GETFL); <span class="comment">//先获取原来的 flag</span></span><br><span class="line">    flag |= O_NONBLOCK;       <span class="comment">//将 O_NONBLOCK 标准添加到 flag</span></span><br><span class="line">    fcntl(<span class="number">0</span>, F_SETFL, flag);  <span class="comment">//重新设置 flag</span></span><br><span class="line">    <span class="comment">/* 同时读取键盘和鼠标 */</span></span><br><span class="line">    fds[<span class="number">0</span>].fd = <span class="number">0</span>;</span><br><span class="line">    fds[<span class="number">0</span>].events = POLLIN; <span class="comment">//只关心数据可读</span></span><br><span class="line">    fds[<span class="number">0</span>].revents = <span class="number">0</span>;</span><br><span class="line">    fds[<span class="number">1</span>].fd = fd;</span><br><span class="line">    fds[<span class="number">1</span>].events = POLLIN; <span class="comment">//只关心数据可读</span></span><br><span class="line">    fds[<span class="number">1</span>].revents = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (loops--)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = poll(fds, <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;poll error&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;poll timeout.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 检查键盘是否为就绪态 */</span></span><br><span class="line">        <span class="keyword">if</span> (fds[<span class="number">0</span>].revents &amp; POLLIN)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; ret)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;键盘: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 检查鼠标是否为就绪态 */</span></span><br><span class="line">        <span class="keyword">if</span> (fds[<span class="number">1</span>].revents &amp; POLLIN)</span><br><span class="line">        &#123;</span><br><span class="line">            ret = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; ret)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;鼠标: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">out:</span><br><span class="line">    <span class="comment">/* 关闭文件 */</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>PPO调参实录</title>
    <url>/2022/10/13/PPO%E8%B0%83%E5%8F%82%E5%AE%9E%E5%BD%95/</url>
    <content><![CDATA[<h1 id="PPO调参实录"><a href="#PPO调参实录" class="headerlink" title="PPO调参实录"></a>PPO调参实录</h1><h2 id="采用甄别reward的replay-buffer"><a href="#采用甄别reward的replay-buffer" class="headerlink" title="采用甄别reward的replay buffer"></a>采用甄别reward的replay buffer</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span>(<span class="params">self, transition</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(self.buffer)&gt;=self.buffer_capacity:</span><br><span class="line">        tmp = np.random.randint(low=<span class="number">0</span>, high=<span class="built_in">len</span>(self.buffer))</span><br><span class="line">        <span class="keyword">if</span> self.buffer[tmp].r &gt; transition.r:</span><br><span class="line">            <span class="keyword">if</span> np.random.randint(low=<span class="number">0</span>, high=<span class="number">2</span>) == <span class="number">1</span>:  <span class="comment"># 一半的概率 替换的时候会保留reward更高的</span></span><br><span class="line">                self.buffer[tmp] = transition</span><br><span class="line">        self.buffer[tmp] = transition</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.buffer.append(transition)</span><br><span class="line">    self.counter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> self.counter % self.buffer_capacity == <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>结果</p>
<ul>
<li><img src="/imgs/e94f577e49117f5b41cc7faa4f930abd7e60400dbb265f1cc2530435a3534e2f.png" alt="image.png 1">  </li>
</ul>
</li>
<li><p>甄别的比率降到1/3之后</p>
<ul>
<li><img src="/imgs/71d730a255173dfdc717d546f3cb9815b2b53c00e33de147e389c889754c1d03.png" alt="picture 4">  </li>
</ul>
</li>
</ul>
<h2 id="优化（22年11月13日）的网络"><a href="#优化（22年11月13日）的网络" class="headerlink" title="优化（22年11月13日）的网络"></a>优化（22年11月13日）的网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.distributions <span class="keyword">import</span> Normal</span><br><span class="line"><span class="keyword">from</span> torch.utils.data.sampler <span class="keyword">import</span> BatchSampler, SubsetRandomSampler</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">torch.set_num_threads(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Solve the Pendulum-v0 with PPO&#x27;</span>)</span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">&#x27;--gamma&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.9</span>, metavar=<span class="string">&#x27;G&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;discount factor (default: 0.9)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>, metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;random seed (default: 0)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--render&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;render the environment&#x27;</span>)</span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">&#x27;--log-interval&#x27;</span>,</span><br><span class="line">    <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">    default=<span class="number">10</span>,</span><br><span class="line">    metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&#x27;interval between training status logs (default: 10)&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">torch.manual_seed(args.seed)</span><br><span class="line"></span><br><span class="line">TrainingRecord = namedtuple(<span class="string">&#x27;TrainingRecord&#x27;</span>, [<span class="string">&#x27;ep&#x27;</span>, <span class="string">&#x27;reward&#x27;</span>])</span><br><span class="line">Transition = namedtuple(<span class="string">&#x27;Transition&#x27;</span>, [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a_log_p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s_&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ActorNet, self).__init__()</span><br><span class="line">        self.fc = nn.Linear(<span class="number">3</span>, <span class="number">200</span>)</span><br><span class="line">        self.mu_head = nn.Linear(<span class="number">200</span>, <span class="number">1</span>)</span><br><span class="line">        self.sigma_head = nn.Linear(<span class="number">200</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.fc(x))</span><br><span class="line">        mu = <span class="number">2.0</span> * torch.tanh(self.mu_head(x))</span><br><span class="line">        sigma = F.softplus(self.sigma_head(x))</span><br><span class="line">        <span class="keyword">return</span> (mu, sigma)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CriticNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CriticNet, self).__init__()</span><br><span class="line">        self.fc = nn.Linear(<span class="number">3</span>, <span class="number">200</span>)</span><br><span class="line">        self.hidden = nn.Linear(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">        self.v_head = nn.Linear(<span class="number">200</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.fc(x))</span><br><span class="line">        x = F.relu(self.hidden(x))</span><br><span class="line">        state_value = self.v_head(x)</span><br><span class="line">        <span class="keyword">return</span> state_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>():</span></span><br><span class="line">    clip_param = <span class="number">0.1</span></span><br><span class="line">    max_grad_norm = <span class="number">0.5</span></span><br><span class="line">    ppo_epoch = <span class="number">5</span></span><br><span class="line">    buffer_capacity, batch_size = <span class="number">1000</span>, <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.training_step = <span class="number">0</span></span><br><span class="line">        self.anet = ActorNet().<span class="built_in">float</span>()</span><br><span class="line">        self.cnet = CriticNet().<span class="built_in">float</span>()</span><br><span class="line">        self.buffer = []</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.optimizer_a = optim.Adam(self.anet.parameters(), lr=<span class="number">4e-5</span>)</span><br><span class="line">        self.optimizer_c = optim.Adam(self.cnet.parameters(), lr=<span class="number">6e-5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_action</span>(<span class="params">self, state</span>):</span></span><br><span class="line">        state = torch.from_numpy(state).<span class="built_in">float</span>().unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            (mu, sigma) = self.anet(state)</span><br><span class="line">        dist = Normal(mu, sigma)</span><br><span class="line">        action = dist.sample()</span><br><span class="line">        action_log_prob = dist.log_prob(action)</span><br><span class="line">        action = action.clamp(-<span class="number">2.0</span>, <span class="number">2.0</span>)</span><br><span class="line">        <span class="keyword">return</span> action.item(), action_log_prob.item()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">self, state</span>):</span></span><br><span class="line"></span><br><span class="line">        state = torch.from_numpy(state).<span class="built_in">float</span>().unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            state_value = self.cnet(state)</span><br><span class="line">        <span class="keyword">return</span> state_value.item()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_param</span>(<span class="params">self</span>):</span></span><br><span class="line">        torch.save(self.anet.state_dict(), <span class="string">&#x27;param/ppo_anet_params.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.cnet.state_dict(), <span class="string">&#x27;param/ppo_cnet_params.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store</span>(<span class="params">self, transition</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.buffer)&gt;=self.buffer_capacity:</span><br><span class="line">            tmp = np.random.randint(low=<span class="number">0</span>, high=<span class="built_in">len</span>(self.buffer))</span><br><span class="line">            <span class="keyword">if</span> self.buffer[tmp].r &gt; transition.r:</span><br><span class="line">                <span class="keyword">if</span> np.random.randint(low=<span class="number">0</span>, high=<span class="number">3</span>) == <span class="number">1</span>:  <span class="comment"># 一半的概率 替换的时候会保留reward更高的</span></span><br><span class="line">                    self.buffer[tmp] = transition</span><br><span class="line">            self.buffer[tmp] = transition</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.buffer.append(transition)</span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.counter % self.buffer_capacity == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.training_step += <span class="number">1</span></span><br><span class="line">        self.counter = <span class="number">1</span></span><br><span class="line">        s = torch.tensor([t.s <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">        a = torch.tensor([t.a <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        r = torch.tensor([t.r <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        s_ = torch.tensor([t.s_ <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">        old_action_log_probs = torch.tensor(</span><br><span class="line">            [t.a_log_p <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        r = (r - r.mean()) / (r.std() + <span class="number">1e-5</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            target_v = r + args.gamma * self.cnet(s_)</span><br><span class="line"></span><br><span class="line">        adv = (target_v - self.cnet(s)).detach()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.ppo_epoch):</span><br><span class="line">            <span class="comment"># indexArray = []</span></span><br><span class="line">            <span class="comment"># dist = Normal(self.buffer_capacity, self.buffer_capacity / 4)</span></span><br><span class="line">            <span class="comment"># sampleList = []</span></span><br><span class="line">            <span class="comment"># cntArray = [0 for i in range(self.buffer_capacity)]</span></span><br><span class="line">            <span class="comment"># # print(cntArray)</span></span><br><span class="line">            <span class="comment"># dist = Normal(self.batch_size*2/3, self.batch_size)</span></span><br><span class="line">            <span class="comment"># for i in range(self.batch_size):</span></span><br><span class="line">            <span class="comment">#     cnt = 0</span></span><br><span class="line">            <span class="comment">#     samples = []</span></span><br><span class="line">            <span class="comment">#     while cnt &lt; self.batch_size:</span></span><br><span class="line">            <span class="comment">#         # print(dist.sample())</span></span><br><span class="line">            <span class="comment">#         # print(cnt)</span></span><br><span class="line">            <span class="comment">#         tmp = round(float(dist.sample()))</span></span><br><span class="line">            <span class="comment">#         if 0 &lt;= tmp and tmp &lt; self.buffer_capacity:</span></span><br><span class="line">            <span class="comment">#             if not tmp in samples:</span></span><br><span class="line">            <span class="comment">#                 if not cntArray[tmp]&gt;4:</span></span><br><span class="line">            <span class="comment">#                     cnt += 1</span></span><br><span class="line">            <span class="comment">#                     samples.append(tmp)</span></span><br><span class="line">            <span class="comment">#                     cntArray[tmp]+=1</span></span><br><span class="line">            <span class="comment">#     sampleList.append(samples)</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> BatchSampler(</span><br><span class="line">                    SubsetRandomSampler(<span class="built_in">range</span>(self.buffer_capacity)), self.batch_size, <span class="literal">False</span>):</span><br><span class="line">            <span class="comment"># for index in sampleList:</span></span><br><span class="line">                <span class="comment"># print(len(index))</span></span><br><span class="line">                (mu, sigma) = self.anet(s[index])</span><br><span class="line">                <span class="comment"># print(mu)</span></span><br><span class="line">                dist = Normal(mu, sigma)</span><br><span class="line">                action_log_probs = dist.log_prob(a[index])</span><br><span class="line">                ratio = torch.exp(action_log_probs - old_action_log_probs[index])</span><br><span class="line"></span><br><span class="line">                surr1 = ratio * adv[index]</span><br><span class="line">                surr2 = torch.clamp(ratio, <span class="number">1.0</span> - self.clip_param,</span><br><span class="line">                                    <span class="number">1.0</span> + self.clip_param) * adv[index]</span><br><span class="line">                action_loss = -torch.<span class="built_in">min</span>(surr1, surr2).mean()</span><br><span class="line"></span><br><span class="line">                self.optimizer_a.zero_grad()</span><br><span class="line">                action_loss.backward()</span><br><span class="line">                nn.utils.clip_grad_norm_(self.anet.parameters(), self.max_grad_norm)</span><br><span class="line">                self.optimizer_a.step()</span><br><span class="line"></span><br><span class="line">                value_loss = F.smooth_l1_loss(self.cnet(s[index]), target_v[index])</span><br><span class="line">                self.optimizer_c.zero_grad()</span><br><span class="line">                value_loss.backward()</span><br><span class="line">                nn.utils.clip_grad_norm_(self.cnet.parameters(), self.max_grad_norm)</span><br><span class="line">                self.optimizer_c.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># del self.buffer[:]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagVar = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">pendulumGoal = [<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rewardFunc</span>(<span class="params">goal, state, absMax</span>):</span></span><br><span class="line">    tmp = -(np.power(state[<span class="number">0</span>] - goal[<span class="number">0</span>], <span class="number">2</span>) + <span class="number">1</span>*np.power(state[<span class="number">1</span>] - goal[<span class="number">1</span>], <span class="number">2</span>) + <span class="number">0.1</span> * np.power(state[<span class="number">2</span>] - goal[<span class="number">2</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> (tmp + absMax)/absMax</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> flagVar</span><br><span class="line">    <span class="comment"># env = gym.make(&#x27;Pendulum-v1&#x27;, render_mode=&quot;human&quot;)</span></span><br><span class="line">    env = gym.make(<span class="string">&#x27;Pendulum-v1&#x27;</span>)</span><br><span class="line">    <span class="comment"># env.seed(args.seed)</span></span><br><span class="line">    <span class="comment"># env.render()</span></span><br><span class="line">    agent = Agent()</span><br><span class="line"></span><br><span class="line">    training_records = []</span><br><span class="line">    running_reward = -<span class="number">1000</span></span><br><span class="line">    <span class="comment"># state = env.reset()</span></span><br><span class="line">    TRAIN_EPISODE = <span class="number">1000</span></span><br><span class="line">    EPISODE_LENGTH = <span class="number">200</span></span><br><span class="line">    <span class="keyword">for</span> i_ep <span class="keyword">in</span> <span class="built_in">range</span>(TRAIN_EPISODE):</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        state = np.array(env.reset()[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># if i_ep % 100 == 0:</span></span><br><span class="line">        <span class="comment">#     print(&#x27;!&#x27;)</span></span><br><span class="line">        <span class="comment">#     env.render()</span></span><br><span class="line">        <span class="comment"># print(type(state))</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">if</span> i_ep == <span class="number">0</span>:</span><br><span class="line">            firstY = []</span><br><span class="line">        <span class="keyword">if</span> i_ep == TRAIN_EPISODE-<span class="number">1</span>:</span><br><span class="line">            lastX = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(EPISODE_LENGTH)]</span><br><span class="line">            lastY = []</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(EPISODE_LENGTH):</span><br><span class="line">            action, action_log_prob = agent.select_action(state)</span><br><span class="line">            <span class="comment"># if i_ep%100 == 0:</span></span><br><span class="line">                <span class="comment"># print(&#x27;!&#x27;)</span></span><br><span class="line">                <span class="comment"># env.render()</span></span><br><span class="line">            envRet = env.step([action])</span><br><span class="line">            <span class="comment"># print(envRet)</span></span><br><span class="line">            state_, reward, done, _, _ = envRet</span><br><span class="line">            <span class="keyword">if</span> i_ep == TRAIN_EPISODE-<span class="number">1</span>:</span><br><span class="line">                lastY.append(math.acos(state_[<span class="number">0</span>]))</span><br><span class="line">                <span class="comment"># lastY.append(state_[0])</span></span><br><span class="line">            <span class="keyword">elif</span> i_ep == <span class="number">0</span>:</span><br><span class="line">                firstY.append(math.acos(state_[<span class="number">0</span>]))</span><br><span class="line">                <span class="comment"># firstY.append(state_[0])</span></span><br><span class="line">            <span class="comment"># print(state_)</span></span><br><span class="line">            <span class="comment"># if args.render:</span></span><br><span class="line">            <span class="comment">#     env.render()</span></span><br><span class="line">            <span class="keyword">if</span> agent.store(Transition(state, action, action_log_prob, (reward + <span class="number">8</span>) / <span class="number">8</span>, state_)):</span><br><span class="line">                agent.update()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># reward = rewardFunc(pendulumGoal, state_, 8)</span></span><br><span class="line">            <span class="comment"># if agent.store(Transition(state, action, action_log_prob, reward, state_)):</span></span><br><span class="line">            <span class="comment">#     agent.update()</span></span><br><span class="line"></span><br><span class="line">            score += reward</span><br><span class="line">            state = state_</span><br><span class="line"></span><br><span class="line">        running_reward = running_reward * <span class="number">0.85</span> + score * <span class="number">0.1</span></span><br><span class="line">        training_records.append(TrainingRecord(i_ep, running_reward))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i_ep % args.log_interval == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Ep &#123;&#125;\tMoving average score: &#123;:.2f&#125;\t&#x27;</span>.<span class="built_in">format</span>(i_ep, running_reward))</span><br><span class="line">            time_ = time.time()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;time used is &#123;:.5f&#125;&quot;</span>.<span class="built_in">format</span>(time_ - start))</span><br><span class="line">            <span class="comment"># start = time_</span></span><br><span class="line">        <span class="comment"># if running_reward &gt; -200:</span></span><br><span class="line">        <span class="comment">#     print(&quot;Solved! Moving average score is now &#123;&#125;!&quot;.format(running_reward))</span></span><br><span class="line">        <span class="comment">#     env.close()</span></span><br><span class="line">        <span class="comment">#     agent.save_param()</span></span><br><span class="line">        <span class="comment">#     with open(&#x27;log/ppo_training_records.pkl&#x27;, &#x27;wb&#x27;) as f:</span></span><br><span class="line">        <span class="comment">#         pickle.dump(training_records, f)</span></span><br><span class="line">        <span class="comment">#     break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if running_reward &gt; -850 and not flagVar:  # 减小学习率防止波动</span></span><br><span class="line">        <span class="comment">#     flagVar = True</span></span><br><span class="line">        <span class="comment">#     print(&quot;-------------------------------&quot;)</span></span><br><span class="line">        <span class="comment">#     agent.optimizer_a = optim.Adam(agent.anet.parameters(), lr=1e-5)</span></span><br><span class="line">        <span class="comment">#     agent.optimizer_c = optim.Adam(agent.cnet.parameters(), lr=2e-5)</span></span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像时符号-显示为方块的2问题</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    plt.plot([r.ep <span class="keyword">for</span> r <span class="keyword">in</span> training_records], [r.reward <span class="keyword">for</span> r <span class="keyword">in</span> training_records])</span><br><span class="line">    plt.title(<span class="string">&#x27;PPO&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Episode&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Moving averaged episode reward&#x27;</span>)</span><br><span class="line">    <span class="comment"># plt.savefig(&quot;img/ppo.png&quot;)</span></span><br><span class="line">    plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    plt.plot(lastX, firstY, label=<span class="string">&quot;第一次&quot;</span>)</span><br><span class="line">    plt.plot(lastX, lastY, label=<span class="string">&quot;最后一次&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;cos(&quot;</span>+<span class="string">r&#x27;$\theta$&#x27;</span>+<span class="string">&quot;)&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;time&quot;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># example = [i for i in range(100)]</span></span><br><span class="line">    <span class="comment"># print(len([i for i in BatchSampler(SubsetRandomSampler(range(100)), 20, False)]))</span></span><br></pre></td></tr></table></figure>
<ul>
<li>效果<img src="/imgs/d0ba034ff53840a354c441cf51e2eacc8194cbbd0fffe8f9ec9d557d97fe54ee.png" alt="picture 4">  </li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt网络编程</title>
    <url>/2022/01/17/Qt%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Qt网络编程"><a href="#Qt网络编程" class="headerlink" title="Qt网络编程"></a>Qt网络编程</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="获取IP"><a href="#获取IP" class="headerlink" title="获取IP"></a>获取IP</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getLocalHostIP</span>()</span><br><span class="line">&#123;</span><br><span class="line">    QList&lt;QNetworkInterface&gt; list = QNetworkInterface::<span class="built_in">allInterfaces</span>();</span><br><span class="line">    foreach (QNetworkInterface interface, list)</span><br><span class="line">    &#123;</span><br><span class="line">        QList&lt;QNetworkAddressEntry&gt; entryList = interface.<span class="built_in">addressEntries</span>();</span><br><span class="line">        foreach(QNetworkAddressEntry entry ,entryList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.<span class="built_in">ip</span>().<span class="built_in">protocol</span>() == QAbstractSocket::IPv4Protocol)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.<span class="built_in">ip</span>().<span class="built_in">toString</span>() == <span class="string">&quot;127.0.0.1&quot;</span>)<span class="keyword">continue</span>;</span><br><span class="line">                comboBox-&gt;<span class="built_in">addItem</span>(entry.<span class="built_in">ip</span>().<span class="built_in">toString</span>());</span><br><span class="line">                IPlist&lt;&lt;entry.<span class="built_in">ip</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>allInterfaces()</code>获取本地的所有网络接口，比如wlan，本地连接等等，然后使用<code>addressEntries()</code>获取所有IP地址，使用<code>IPv4Protocol</code>筛选所有的IPv4地址，进行连接，同时在</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(entry.<span class="built_in">ip</span>().<span class="built_in">toString</span>() == <span class="string">&quot;127.0.0.1&quot;</span>)<span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>

<p>中筛选去掉本地IP，只留下有意义的（可以从外部连接的）IP地址。</p>
<h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">startListen</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(comboBox-&gt;<span class="built_in">currentIndex</span>() != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;start Listen&quot;</span>&lt;&lt;endl;</span><br><span class="line">        tcpServer-&gt;<span class="built_in">listen</span>(IPlist[comboBox-&gt;<span class="built_in">currentIndex</span>()], spinBox-&gt;<span class="built_in">value</span>());</span><br><span class="line">        btn1-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        btn2-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line">        comboBox-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        spinBox-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">        clientBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;server IP address:&quot;</span>+comboBox-&gt;<span class="built_in">currentText</span>());</span><br><span class="line">        clientBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;Listening port: &quot;</span>+spinBox-&gt;<span class="built_in">text</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监听就是使用<code>tcpServer</code>对象，监听IP和端口，通过函数传入，等待程序链接</p>
<h3 id="停止监听"><a href="#停止监听" class="headerlink" title="停止监听"></a>停止监听</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stopListen</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;stop listen&quot;</span>&lt;&lt;endl;</span><br><span class="line">    tcpServer-&gt;<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">if</span>(tcpSocket-&gt;<span class="built_in">state</span>() == tcpSocket-&gt;ConnectedState)</span><br><span class="line">    &#123;</span><br><span class="line">        tcpSocket-&gt;<span class="built_in">disconnectFromHost</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    btn1-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line">    btn2-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">    clientBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;Stopped Listening: &quot;</span>+spinBox-&gt;<span class="built_in">text</span>());</span><br><span class="line">    comboBox-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line">    spinBox-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，调用<code>tcpServer-&gt;close()</code>之后，已经连接的客户端还可以继续与主机进行通信，此时需要<code>tcpSocket-&gt;disconnectFromHost();</code>来断开当前连接的客户端与服务器的链接，**注意此时调用的tcpSocket对象是用户连接时候从下面的<code>tcpServer-&gt;nextPendingConnection()</code>获得的Socket对象 **。</p>
<h3 id="应对用户链接"><a href="#应对用户链接" class="headerlink" title="应对用户链接"></a>应对用户链接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clientConnection</span>()</span><br><span class="line">&#123;</span><br><span class="line">    tcpSocket = tcpServer-&gt;<span class="built_in">nextPendingConnection</span>();</span><br><span class="line">    QString ip = tcpSocket-&gt;<span class="built_in">peerAddress</span>().<span class="built_in">toString</span>();</span><br><span class="line">    quint16 port = tcpSocket-&gt;<span class="built_in">peerPort</span>();</span><br><span class="line">    clientBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;Client IP: &quot;</span>+ip);</span><br><span class="line">    clientBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;Client port&quot;</span>+QString::<span class="built_in">number</span>(port));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(tcpSocket, <span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">recMessage</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意用户链接的时候，可以通过<code>tcpServer-&gt;nextPendingConnection();</code>获取用户链接的Socket对象，进而获取<code>tcpSocket-&gt;peerAddress().toString();</code>IP和<code>tcpSocket-&gt;peerPort();</code>端口号</p>
<h3 id="收取消息"><a href="#收取消息" class="headerlink" title="收取消息"></a>收取消息</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">recMessage</span>()</span><br><span class="line">&#123;</span><br><span class="line">    QString messages = tcpSocket-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    clientBrowser-&gt;<span class="built_in">append</span>(messages);</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;messages&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sendMessage</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpSocket-&gt;<span class="built_in">state</span>() == tcpSocket-&gt;ConnectedState)</span><br><span class="line">    &#123;</span><br><span class="line">        tcpSocket-&gt;<span class="built_in">write</span>(send-&gt;<span class="built_in">text</span>().<span class="built_in">toUtf8</span>().<span class="built_in">data</span>());</span><br><span class="line">        clientBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;Server:&quot;</span>+send-&gt;<span class="built_in">text</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>此处仅仅强调客户端与服务器的区别</p>
<h3 id="链接服务器"><a href="#链接服务器" class="headerlink" title="链接服务器"></a>链接服务器</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">toConnect</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tcpSocket-&gt;<span class="built_in">state</span>()!=tcpSocket-&gt;ConnectedState)</span><br><span class="line">    &#123;</span><br><span class="line">        QHostAddress hostAdd;</span><br><span class="line">        hostAdd.<span class="built_in">setAddress</span>(ipInput-&gt;<span class="built_in">text</span>());</span><br><span class="line">        textBrowser-&gt;<span class="built_in">append</span>(<span class="string">&quot;Connecting: &quot;</span> + hostAdd.<span class="built_in">toString</span>() + <span class="string">&quot;  ...&quot;</span>);</span><br><span class="line">        tcpSocket-&gt;<span class="built_in">connectToHost</span>(hostAdd, spinBox-&gt;<span class="built_in">value</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意<code>QHostAddress</code>具有从字符串0-255点分格式的IP地址中parse出IP地址的功能（<code>hostAdd.setAddress(ipInput-&gt;text());</code>)</li>
</ul>
<h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">toDisconnect</span>()</span><br><span class="line">&#123;</span><br><span class="line">    tcpSocket-&gt;<span class="built_in">disconnectFromHost</span>();</span><br><span class="line">    tcpSocket-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他与编写服务端类似，在此不再赘述。</p>
]]></content>
  </entry>
  <entry>
    <title>Qt网络请求下载图片并且显示</title>
    <url>/2022/01/18/Qt%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E5%B9%B6%E4%B8%94%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="Qt网络请求下载图片并且显示"><a href="#Qt网络请求下载图片并且显示" class="headerlink" title="Qt网络请求下载图片并且显示"></a>Qt网络请求下载图片并且显示</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ul>
<li>字符串通过<code>QUrl()</code>变成Url对象，然后<code>QNetworkRequest</code>通过<code>setUrl()</code>方法设置URL，然后<code>QNetworkManager</code>通过get方法访问并且返回回复</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QNetworkReply *newReply = netWorkManager-&gt;<span class="built_in">get</span>(networkRequest);</span><br></pre></td></tr></table></figure>

<ul>
<li>回复对象具有<code>downloadProgress(qint64, qint64)</code>，<code>readyRead()</code>，<code>finished()</code>，三个信号，其中<code>downloadProgress(qint64, qint64)</code>用来更新进度条，<code>readyRead()</code>表示此时已经有数据可以读取（可能<strong>还没结束</strong>），<code>finished()</code>表示此时接收<strong>已经结束</strong>可以读到完整的文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QByteArray data = reply-&gt;readAll();</span><br></pre></td></tr></table></figure>

<ul>
<li>上面是读取到回复的全文内容</li>
</ul>
<h2 id="更新进度条"><a href="#更新进度条" class="headerlink" title="更新进度条"></a>更新进度条</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::imageDownloadProgress</span><span class="params">(qint64 bytes, qint64 totalBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> qint8 count = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line">        progressBar-&gt;<span class="built_in">setMaximum</span>(totalBytes);</span><br><span class="line"></span><br><span class="line">    progressBar-&gt;<span class="built_in">setValue</span>(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="下载结束显示图片"><a href="#下载结束显示图片" class="headerlink" title="下载结束显示图片"></a>下载结束显示图片</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::replyFinished</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//QNetworkReply *reply = (QNetworkReply *)sender();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//reply-&gt;deleteLater();</span></span><br><span class="line"></span><br><span class="line">    QNetworkReply *reply = (QNetworkReply *)<span class="built_in">sender</span>();</span><br><span class="line"></span><br><span class="line">    QByteArray data = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    reply-&gt;<span class="built_in">deleteLater</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(data.<span class="built_in">isEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;data is null, please try it again!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QPixmap pixmap;</span><br><span class="line">    pixmap.<span class="built_in">loadFromData</span>(data);</span><br><span class="line"></span><br><span class="line">    label[<span class="number">0</span>]-&gt;<span class="built_in">setPixmap</span>(pixmap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="开始下载"><a href="#开始下载" class="headerlink" title="开始下载"></a>开始下载</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainWindow::startDownload</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QUrl <span class="title">newUrl</span><span class="params">(QUrl(lineEdit-&gt;text()))</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!newUrl.<span class="built_in">isValid</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;error&quot;</span>, <span class="string">&quot;invalid url&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QNetworkRequest networkRequest;</span><br><span class="line"></span><br><span class="line">    networkRequest.<span class="built_in">setUrl</span>(newUrl);</span><br><span class="line"></span><br><span class="line">    QNetworkReply *newReply = netWorkManager-&gt;<span class="built_in">get</span>(networkRequest);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(newReply, <span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">replyFinished</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(newReply, <span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">readyReadData</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(newReply, <span class="built_in">SIGNAL</span>(<span class="built_in">downloadProgress</span>(qint64, qint64)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">imageDownloadProgress</span>(qint64, qint64)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>STM32F4点亮ili9341驱动的屏幕（HAL库）2</title>
    <url>/2021/12/16/STM32F4%E7%82%B9%E4%BA%AEili9341%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%B1%8F%E5%B9%95%EF%BC%88HAL%E5%BA%93%EF%BC%892/</url>
    <content><![CDATA[<h1 id="STM32F4点亮ili9341驱动的屏幕（HAL库）2"><a href="#STM32F4点亮ili9341驱动的屏幕（HAL库）2" class="headerlink" title="STM32F4点亮ili9341驱动的屏幕（HAL库）2"></a>STM32F4点亮ili9341驱动的屏幕（HAL库）2</h1><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><ul>
<li><a href="https://github.com/ardnew/ILI9341-STM32-HAL">https://github.com/ardnew/ILI9341-STM32-HAL</a></li>
</ul>
<h2 id="Cube配置"><a href="#Cube配置" class="headerlink" title="Cube配置"></a>Cube配置</h2><p>按照readme中的配置，注意以下问题</p>
<ul>
<li>SPI设置（打开中断）：</li>
<li><img src="/imgs/image-20211216141849088.png" alt="image-20211216141849088"></li>
<li>DMA：</li>
<li><img src="/imgs/image-20211216141832051.png" alt="image-20211216141832051"></li>
<li>生成项目</li>
<li><img src="/imgs/image-20211218120959770.png" alt="image-20211218120959770"></li>
</ul>
<h3 id="编译注意事项"><a href="#编译注意事项" class="headerlink" title="编译注意事项"></a>编译注意事项</h3><ul>
<li><p>注意在Flash中将库的目录添加到C/C++目录下</p>
</li>
<li><p><img src="/imgs/image-20211216142551872.png" alt="image-20211216142551872"></p>
</li>
<li><p><img src="/imgs/image-20211216142622319.png" alt="image-20211216142622319"></p>
</li>
<li><p>在<code>ili9341.h</code>文件添加<code>#pragma anon_unions</code>允许union类型</p>
</li>
<li><p>在keil编译配置管理的c/c++选项卡中Misc control中填写<code>--gnu</code></p>
</li>
<li><p><img src="/imgs/image-20211216141659806.png" alt="image-20211216141659806"></p>
</li>
<li><p>可能会出现未定义<code>MX_SPI1_Init();</code>的问题，在<code>main.c</code>文件中手动添加<code>dma.h</code>的include</p>
</li>
<li><p>lcd初始化示例（执行这个函数即可），返回一个<code>ili9341_t *</code>对象</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_lcd = ili9341_new(</span><br><span class="line">  &amp;hspi1,</span><br><span class="line">  GPIOC, GPIO_PIN_6,</span><br><span class="line">  GPIOC,    GPIO_PIN_7,</span><br><span class="line">  GPIOC,    GPIO_PIN_8,</span><br><span class="line">  isoLandscape,</span><br><span class="line">  GPIOD,  GPIO_PIN_15,</span><br><span class="line">  GPIOD, GPIO_PIN_15,</span><br><span class="line">  itsNONE,</span><br><span class="line">  itnNONE);</span><br></pre></td></tr></table></figure>

<ul>
<li>注意，不使用触摸功能的时候后面几个输入填写任意不用的引脚即可，最后两个写<code>***NONE</code>，有枚举类型的定义</li>
<li><strong>不需要</strong>手动执行<code>init</code>之类的函数，之前那个<code>_new</code>中已经包括了</li>
</ul>
<h3 id="速度比上一个还是快一些"><a href="#速度比上一个还是快一些" class="headerlink" title="速度比上一个还是快一些"></a>速度比上一个还是快一些</h3>]]></content>
  </entry>
  <entry>
    <title>STM32实现W25Q16芯片的擦除、读和写</title>
    <url>/2022/01/08/STM32%E5%AE%9E%E7%8E%B0W25Q16%E8%8A%AF%E7%89%87%E7%9A%84%E6%93%A6%E9%99%A4%E3%80%81%E8%AF%BB%E5%92%8C%E5%86%99/</url>
    <content><![CDATA[<h1 id="STM32实现W25Q16芯片的擦除、读和写"><a href="#STM32实现W25Q16芯片的擦除、读和写" class="headerlink" title="STM32实现W25Q16芯片的擦除、读和写"></a>STM32实现W25Q16芯片的擦除、读和写</h1><h2 id="封装等待函数（通过读取状态寄存器）"><a href="#封装等待函数（通过读取状态寄存器）" class="headerlink" title="封装等待函数（通过读取状态寄存器）"></a>封装等待函数（通过读取状态寄存器）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delayBusy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> D05 = <span class="number">0x05</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> result;</span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D05, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Receive(&amp;hspi1, &amp;result, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">while</span>((result&amp;<span class="number">0x01</span>) == <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// HAL_SPI_Transmit(&amp;hspi1, &amp;D05, 1, 1000);</span></span><br><span class="line">    HAL_SPI_Receive(&amp;hspi1, &amp;result, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，手册上说明此处的状态寄存器可以连续读取，也就是在指令开始的时候发送一次<code>0x05</code>即可，之后<strong>循环读取</strong>，通过将片选信号<strong>CS置为高电平停止</strong></p>
<h2 id="擦除函数"><a href="#擦除函数" class="headerlink" title="擦除函数"></a>擦除函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EraseChip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> D60 = <span class="number">0x60</span>;</span><br><span class="line">  writeEnable();</span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D60, <span class="number">1</span> ,<span class="number">1000</span>);</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">  delayBusy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，将芯片内容擦除之前需要<strong>先发送一个使能写</strong>的命令，在下面的函数中会封装这个功能</p>
<p>然后在函数的最后增加等待芯片空闲的函数，该芯片的擦除时间大概1-2s，不同容量的芯片可能时间不同。</p>
<ul>
<li>擦除前的读取数据（第二行）：</li>
<li><img src="/imgs/image-20220108130401292.png" alt="image-20220108130401292"></li>
<li>擦除后的读取数据</li>
<li><img src="/imgs/image-20220108130417022.png" alt="image-20220108130417022"></li>
<li>可见擦除成功</li>
</ul>
<h2 id="写使能函数"><a href="#写使能函数" class="headerlink" title="写使能函数"></a>写使能函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeEnable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> D06 = <span class="number">0x06</span>;</span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D06, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>禁止写</strong>函数与写使能函数类似，将命令替换为0x04即可</p>
<h2 id="读取函数"><a href="#读取函数" class="headerlink" title="读取函数"></a>读取函数</h2><p><img src="/imgs/image-20220108125308657.png" alt="image-20220108125308657"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readChip</span><span class="params">(<span class="keyword">uint32_t</span> addr, <span class="keyword">int32_t</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> D03 = <span class="number">0x03</span>;</span><br><span class="line">  <span class="keyword">int32_t</span> count = length<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> Haddr;</span><br><span class="line">  <span class="keyword">uint8_t</span> Maddr;</span><br><span class="line">  <span class="keyword">uint8_t</span> Laddr;</span><br><span class="line">  Haddr = addr/<span class="number">256</span>/<span class="number">256</span>;</span><br><span class="line">  Maddr = (addr/<span class="number">256</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">  Laddr = addr&amp;<span class="number">0xff</span>;</span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D03, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;Haddr, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;Maddr, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;Laddr, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">for</span>(count = length<span class="number">-1</span>; count&gt;=<span class="number">0</span>;count--)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_SPI_Receive(&amp;hspi1, recBuff+count, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中的<code>recBuff</code>是一个大小与length相同的byte数组</p>
<p>注意，与上面类似的是，此处在发送一次读指令之后，芯片会从指定的地址开始自动向前串行发送往后的数据直到CS被置为高电平终止指令，严格的讲从发送的地址开始，可以<strong>只发送一次读取指令便读取到芯片的末尾存储空间</strong>。</p>
<h2 id="写数据函数"><a href="#写数据函数" class="headerlink" title="写数据函数"></a>写数据函数</h2><p><img src="/imgs/image-20220108133158219.png" alt="image-20220108133158219"></p>
<p>写函数的执行逻辑是：</p>
<ul>
<li>发送一个写使能信号</li>
<li>CS置为低电平</li>
<li>发送0x02</li>
<li>发送24位地址</li>
<li>连续发送写入的数据（1-256个，一次最多不超过256个，否则超出的会从头部开始覆盖）</li>
<li>CS置为高电平</li>
<li>等待芯片写完</li>
<li>发送禁止写命令</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeChip</span><span class="params">(<span class="keyword">uint32_t</span> addr, <span class="keyword">uint16_t</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> D02 = <span class="number">0x02</span>;</span><br><span class="line">  <span class="keyword">int32_t</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> Haddr;</span><br><span class="line">  <span class="keyword">uint8_t</span> Maddr;</span><br><span class="line">  <span class="keyword">uint8_t</span> Laddr;</span><br><span class="line">  Haddr = addr/<span class="number">256</span>/<span class="number">256</span>;</span><br><span class="line">  Maddr = (addr/<span class="number">256</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">  Laddr = addr&amp;<span class="number">0xff</span>;</span><br><span class="line">  writeEnable();</span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D02, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;Haddr, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;Maddr, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;Laddr, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">for</span>(count = <span class="number">0</span>; count&lt;length;count++)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_SPI_Transmit(&amp;hspi1, writeBuff+count, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">  delayBusy();</span><br><span class="line">  writeDisable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>writeBuff</code>是一个长度为<code>length</code>的字节数组</p>
<p>注意：</p>
<ul>
<li>假如一次写256个字节的话，地址的最后8位务必是0，假如不是的话会导致超出的部分从头部开始覆盖</li>
<li>写入的字节数不能超出从地址位置开始剩余的字节量（比如地址后8位是0的话，剩余的字节就是256）</li>
<li>注意在写完最后一个数据之后，比如将片选信号CS置为高电平，此时芯片会开始写入数据，写入的时候查询BUSY寄存器会得到1，所以使用等待函数等待</li>
</ul>
<p>执行效果</p>
<ul>
<li> 发送buff定义为<code>uint8_t writeBuff[] = &#123;1,2,3,4,5,6,7,8&#125;;</code><strong>注意数组初始化不要漏写</strong><code>[]</code></li>
<li>发送函数和读取函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">writeChip(<span class="number">0x01</span>,<span class="number">8</span>);</span><br><span class="line">readChip(<span class="number">0x01</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
<li><img src="/imgs/image-20220108133835422.png" alt="image-20220108133835422"></li>
<li>可见已经成功写入</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>STM32点亮ILI9341驱动的屏幕（HAL库）</title>
    <url>/2021/12/15/STM32%E7%82%B9%E4%BA%AEili9341%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%B1%8F%E5%B9%95%EF%BC%88HAL%E5%BA%93%E7%AC%AC%E4%B8%80%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="STM32F407点亮ILI9341驱动的屏幕"><a href="#STM32F407点亮ILI9341驱动的屏幕" class="headerlink" title="STM32F407点亮ILI9341驱动的屏幕"></a>STM32F407点亮ILI9341驱动的屏幕</h1><h2 id="驱动网址"><a href="#驱动网址" class="headerlink" title="驱动网址"></a>驱动网址</h2><p>（国内镜像）</p>
<p><a href="https://hub.fastgit.org/afiskon/stm32-ili9341">https://hub.fastgit.org/afiskon/stm32-ili9341</a></p>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><ul>
<li>屏幕的供电是3.3V</li>
<li>SCL是时钟，接SCK</li>
<li>SDA是输入信号，接MOSI</li>
<li>其他接对应的输出引脚即可</li>
</ul>
<h2 id="Cube配置"><a href="#Cube配置" class="headerlink" title="Cube配置"></a>Cube配置</h2><ul>
<li>SPI设置（不需要设置为全双工 ，只需要设置为<strong>纯发送</strong>即可）</li>
</ul>
<p><img src="/imgs/image-20211215215305442.png" alt="image-20211215215305442"></p>
<ul>
<li>但是STM32F4使用HAL库配置的时候的结果与github上的驱动效果略有不同，也就是波特率位42.0MBits/s</li>
<li><img src="/imgs/image-20211215201627479.png" alt="image-20211215201627479"></li>
</ul>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>先把ili9341文件夹（在src文件夹中）复制到项目文件夹下</p>
<p><img src="/imgs/image-20211215202205389.png" alt="image-20211215202205389"></p>
<p>然后在此处将其添加到paths</p>
<p><img src="/imgs/image-20211215202351571.png" alt="image-20211215202351571"></p>
<p>然后通过add existing files to group… 添加ili9341目录下的文件</p>
<ul>
<li><p>然后修改ili9341的头文件</p>
</li>
<li><p><img src="/imgs/image-20211215215407292.png" alt="image-20211215215407292"></p>
</li>
<li><p>还有</p>
</li>
<li><p><img src="/imgs/image-20211215215423986.png" alt="image-20211215215423986"></p>
</li>
<li><p>然后在主程序中include相关的头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ili9341.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;fonts.h&quot;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="粗略写程序如下"><a href="#粗略写程序如下" class="headerlink" title="粗略写程序如下"></a>粗略写程序如下</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* MCU Configuration--------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">  HAL_Init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the system clock */</span></span><br><span class="line">  SystemClock_Config();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END SysInit */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Initialize all configured peripherals */</span></span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_SPI1_Init();</span><br><span class="line">  MX_USART1_UART_Init();</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">  ILI9341_Init();</span><br><span class="line">  <span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">    ILI9341_FillScreen(ILI9341_BLUE);</span><br><span class="line">    ILI9341_WriteString(<span class="number">0</span>,<span class="number">10</span>,<span class="string">&quot;Hello World!&quot;</span>, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);</span><br><span class="line">    HAL_Delay(<span class="number">500</span>);</span><br><span class="line">    ILI9341_FillScreen(ILI9341_GREEN);</span><br><span class="line">    ILI9341_WriteString(<span class="number">0</span>,<span class="number">10</span>,<span class="string">&quot;Hello World!&quot;</span>, Font_7x10, ILI9341_WHITE, ILI9341_BLACK);</span><br><span class="line">    HAL_Delay(<span class="number">500</span>);</span><br><span class="line">    HAL_UART_Transmit(&amp;huart1,textSend,<span class="number">5</span>,<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="但是这个驱动的效果不是特别好，刷新比较慢，会有明显的刷新过程"><a href="#但是这个驱动的效果不是特别好，刷新比较慢，会有明显的刷新过程" class="headerlink" title="但是这个驱动的效果不是特别好，刷新比较慢，会有明显的刷新过程"></a>但是这个驱动的效果不是特别好，刷新比较慢，会有明显的刷新过程</h3><p><img src="/imgs/1639576655398.gif" alt="image-20211215220004575"></p>
]]></content>
  </entry>
  <entry>
    <title>TD3网络</title>
    <url>/2021/12/08/TD3%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="TD3网络"><a href="#TD3网络" class="headerlink" title="TD3网络"></a>TD3网络</h1><ul>
<li><p>TD3是<strong>Twin Delayed</strong> Deep Deterministic policy gradient algorithm的简称，<strong>双延迟</strong>深度确定性策略梯度</p>
<p>传统的DDPG：</p>
<p><img src="/imgs/image-20211208213332139.png" alt="image-20211208213332139"></p>
</li>
</ul>
<p>关注上图中，我们通过Critic网络估算动作的A值。一个Critic的评估可能会较高。所以我们加一个。</p>
<p><img src="/imgs/image-20211208213403185.png" alt="image-20211208213403185"></p>
<p>这就相当于我们把途中的Critic的框框，一个变为两个。</p>
<p>在目标网络中，我们估算出来的Q值会用min()函数求出较少值。以这个值作为更新的目标。</p>
<p>这个目标会更新两个网络 Critic网络_1 和 Critic网络_2。</p>
<p>你可以理解为这两个网络是完全独立，他们只是都用同一个目标进行更新。</p>
<p>剩余的就和DDPG一样了。过一段时间，把学习好的网络赋值给目标网络。</p>
<p>我们再仔细分别看Critic部分和Actor部分的学习。</p>
<h2 id="Critic部分的学习"><a href="#Critic部分的学习" class="headerlink" title="Critic部分的学习"></a>Critic部分的学习</h2><p>只有我们在计算Critic的更新目标时，我们才用target network。其中就包括了一个Policy network，用于计算A’；两个Q network ,用于计算两个Q值：Q1(A’) 和Q2(A’)。</p>
<p>Q1(A’) 和Q2(A’) 取最小值 min(Q1,Q2) 将代替DDPG的 Q(a’) 计算更新目标，也就是说： target = min(Q1,Q2) * gamma + r</p>
<p>target 将会是 Q_network_1 和 Q_network_2 两个网络的更新目标。</p>
<p>这里可能会有同学问，既然更新目标是一样的，那么为什么还需要两个网络呢?</p>
<p>虽然更新目标一样，两个网络会越来越趋近与和实际q值相同。但由于网络参数的初始值不一样，会导致计算出来的值有所不同。所以我们可以有空间选择较小的值去估算q值，避免q值被高估。</p>
<h2 id="Actor部分的学习"><a href="#Actor部分的学习" class="headerlink" title="Actor部分的学习"></a>Actor部分的学习</h2><p>我们在DDPG中说过，DDPG网络图像上就可以想象成一张布，覆盖在qtable上。当我们输入某个状态的时候，相当于这块布上的一个截面，我们我们能够看到在这个状态下的一条曲线。</p>
<p>而actor的任务，就是用梯度上升的方法，寻着这条线的最高点。</p>
<p>对于actor来说，其实并不在乎Q值是否会被高估，他的任务只是不断做梯度上升，寻找这条最大的Q值。随着更新的进行Q1和Q2两个网络，将会变得越来越像。所以用Q1还是Q2，还是两者都用，对于actor的问题不大。</p>
<h2 id="Delayed-延迟"><a href="#Delayed-延迟" class="headerlink" title="Delayed - 延迟"></a>Delayed - 延迟</h2><p>这里说的Dalayed ，是actor更新的delay。也就是说相对于critic可以更新多次后，actor再进行更新。</p>
<p>为什么要这样做呢？</p>
<p>还是回到我们qnet拟合出来的那块”布”上。</p>
<p>qnet在学习过程中，我们的q值是不断变化的，也就是说这块布是不断变形的。所以要寻着最高点的任务有时候就挺难为为的actor了。</p>
<p>可以想象，本来是最高点的，当actor好不容易去到最高点；q值更新了，这并不是最高点。这时候actor只能转头再继续寻找新的最高点。更坏的情况可能是actor被困在次高点，没有找到正确的最高点。</p>
<p>所以我们可以把Critic的更新频率，调的比Actor要高一点。让critic更加确定，actor再行动。</p>
<h2 id="target-policy-smoothing-regularization"><a href="#target-policy-smoothing-regularization" class="headerlink" title="target policy smoothing regularization"></a>target policy smoothing regularization</h2><p>TD3中，价值函数的更新目标每次都在action上加一个小扰动，这个操作就是target policy smoothing regularization</p>
<p>为什么要这样呢？</p>
<p>我们可以再次回到我们关于“布”的想象。</p>
<p>在DDPG中，计算target的时候，我们输入时s_和a_，获得q，也就是这块布上的一点A。通过估算target估算另外一点s，a，也就是布上的另外一点B的Q值。<br><img src="/imgs/image-20211208213605697.png" alt="image-20211208213605697"></p>
<p>在TD3中，计算target时候，输入s_到actor输出a后，给a加上噪音，让a在一定范围内随机。这又什么好处呢。</p>
<p>好处就是，当更新多次的时候，就相当于用A点附近的一小部分范围（准确来说是在s_这条线上的一定范围）的去估算B，这样可以让B点的估计更准确，更健壮。</p>
<p><img src="/imgs/image-20211208213632464.png" alt="image-20211208213632464"></p>
<ul>
<li>这注意区分三个地方：</li>
</ul>
<p>​    在跑游戏的时候，我们同样加上了了noise。这个时候的noise是为了更充分地开发整个游戏空间。<br>​    计算target的时候，actor加上noise，是为了预估更准确，网络更有健壮性。<br>​    更新actor的时候，我们不需要加上noise，这里是希望actor能够寻着最大值。加上noise并没有任何意义。</p>
<h2 id="下面附上源代码"><a href="#下面附上源代码" class="headerlink" title="下面附上源代码"></a>下面附上源代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;迁移到了GPU上进行训练&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Actor</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_size, hidden_size, output_size</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Actor, self).__init__()</span><br><span class="line">        self.linear1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        self.linear2 = nn.Linear(hidden_size, hidden_size)</span><br><span class="line">        self.linear3 = nn.Linear(hidden_size, hidden_size)</span><br><span class="line">        self.linear4 = nn.Linear(hidden_size, output_size)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        x = F.relu(self.linear1(s))</span><br><span class="line">        x = F.relu(self.linear2(x))</span><br><span class="line">        x = F.relu(self.linear3(x))</span><br><span class="line">        x = torch.tanh(self.linear4(x))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Critic</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_size, hidden_size, output_size</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.linear1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        self.linear2 = nn.Linear(hidden_size, hidden_size)</span><br><span class="line">        self.linear3 = nn.Linear(hidden_size, hidden_size)</span><br><span class="line">        self.linear4 = nn.Linear(hidden_size, output_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, s, a</span>):</span></span><br><span class="line">        x = torch.cat([s, a], <span class="number">1</span>)</span><br><span class="line">        x = F.relu(self.linear1(x))</span><br><span class="line">        x = F.relu(self.linear2(x))</span><br><span class="line">        x = F.relu(self.linear3(x))</span><br><span class="line">        x = self.linear4(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(self, key, value)</span><br><span class="line"></span><br><span class="line">        s_dim = self.env.observation_space.shape[<span class="number">0</span>]</span><br><span class="line">        a_dim = self.env.action_space.shape[<span class="number">0</span>]</span><br><span class="line">        fileList = os.listdir(<span class="string">&#x27;nets/&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;actor.pkl&quot;</span> <span class="keyword">in</span> fileList :</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Trained nets found!&quot;</span>)</span><br><span class="line"></span><br><span class="line">            self.actor = torch.load(<span class="string">&#x27;nets/actor.pkl&#x27;</span>)</span><br><span class="line">            self.actor_target = torch.load(<span class="string">&#x27;nets/actor_target.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            self.critic1 = torch.load(<span class="string">&#x27;nets/critic1.pkl&#x27;</span>)</span><br><span class="line">            self.critic_target1 = torch.load(<span class="string">&#x27;nets/critic_target1.pkl&#x27;</span>)</span><br><span class="line">            self.critic2 = torch.load(<span class="string">&#x27;nets/critic2.pkl&#x27;</span>)</span><br><span class="line">            self.critic_target2 = torch.load(<span class="string">&#x27;nets/critic_target2.pkl&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Trained nets not found!&quot;</span>)</span><br><span class="line"></span><br><span class="line">            self.actor = Actor(s_dim, <span class="number">256</span>, a_dim).cuda()</span><br><span class="line">            self.actor_target = Actor(s_dim, <span class="number">256</span>, a_dim).cuda()</span><br><span class="line"></span><br><span class="line">            self.critic1 = Critic(s_dim + a_dim, <span class="number">256</span>, <span class="number">1</span>).cuda()   <span class="comment"># 此处修改了critic的输出维度恒为1</span></span><br><span class="line">            self.critic_target1 = Critic(s_dim + a_dim, <span class="number">256</span>, <span class="number">1</span>).cuda()  <span class="comment"># 此处修改了critic的输出维度恒为1</span></span><br><span class="line">            self.critic2 = Critic(s_dim + a_dim, <span class="number">256</span>, <span class="number">1</span>).cuda()  <span class="comment"># 此处修改了critic的输出维度恒为1</span></span><br><span class="line">            self.critic_target2 = Critic(s_dim + a_dim, <span class="number">256</span>, <span class="number">1</span>).cuda()  <span class="comment"># 此处修改了critic的输出维度恒为1</span></span><br><span class="line">            <span class="comment"># 假如没找到存在的网络的话，初始化target网络</span></span><br><span class="line">            self.actor_target.load_state_dict(self.actor.state_dict())</span><br><span class="line"></span><br><span class="line">            self.critic_target1.load_state_dict(self.critic1.state_dict())</span><br><span class="line">            self.critic_target2.load_state_dict(self.critic2.state_dict())</span><br><span class="line"></span><br><span class="line">        self.actor_optim = optim.Adam(self.actor.parameters(), lr=self.actor_lr)</span><br><span class="line">        self.critic_optim1 = optim.Adam(self.critic1.parameters(), lr=self.critic_lr)</span><br><span class="line">        self.critic_optim2 = optim.Adam(self.critic2.parameters(), lr=self.critic_lr)</span><br><span class="line">        self.buffer = []</span><br><span class="line">        self.updateCnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">act</span>(<span class="params">self, s0</span>):</span></span><br><span class="line">        s0 = torch.tensor(s0, dtype=torch.<span class="built_in">float</span>).cuda().unsqueeze(<span class="number">0</span>).cuda()</span><br><span class="line">        a0 = self.actor(s0).squeeze(<span class="number">0</span>).detach().cpu().numpy()</span><br><span class="line">        <span class="keyword">return</span> a0</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, *transition</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.buffer) == self.capacity:</span><br><span class="line">            self.buffer.pop(<span class="number">0</span>)</span><br><span class="line">        self.buffer.append(transition)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.buffer) &lt; self.batch_size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        samples = random.sample(self.buffer, self.batch_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        s0, a0, r1, s1 = <span class="built_in">zip</span>(*samples)</span><br><span class="line"></span><br><span class="line">        s0 = torch.tensor(s0, dtype=torch.<span class="built_in">float</span>).cuda()</span><br><span class="line">        a0 = torch.tensor(a0, dtype=torch.<span class="built_in">float</span>).cuda()</span><br><span class="line">        r1 = torch.tensor(r1, dtype=torch.<span class="built_in">float</span>).view(self.batch_size, -<span class="number">1</span>).cuda()</span><br><span class="line">        s1 = torch.tensor(s1, dtype=torch.<span class="built_in">float</span>).cuda()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">critic_learn</span>():</span></span><br><span class="line">            a1 = self.actor_target(s1).detach()</span><br><span class="line">            y_true = r1 + self.gamma * torch.<span class="built_in">min</span>(self.critic_target1(s1, a1), self.critic_target1(s1, a1)).detach()</span><br><span class="line">            <span class="comment"># 更新网咯1</span></span><br><span class="line">            y_pred1 = self.critic1(s0, a0)</span><br><span class="line">            loss_fn = nn.MSELoss()</span><br><span class="line">            loss = loss_fn(y_pred1, y_true)</span><br><span class="line">            self.critic_optim1.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            self.critic_optim1.step()</span><br><span class="line">            <span class="comment"># 更新网络2</span></span><br><span class="line">            y_pred2 = self.critic2(s0, a0)</span><br><span class="line">            loss_fn = nn.MSELoss()</span><br><span class="line">            loss = loss_fn(y_pred2, y_true)</span><br><span class="line">            self.critic_optim2.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            self.critic_optim2.step()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">actor_learn</span>():</span></span><br><span class="line">            <span class="comment"># 此处update actor网络同样从两个critic网络中选择一个较小的</span></span><br><span class="line">            loss = -torch.mean(torch.<span class="built_in">min</span>(self.critic1(s0, self.actor(s0)), self.critic2(s0, self.actor(s0))))</span><br><span class="line">            self.actor_optim.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            self.actor_optim.step()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">soft_update</span>(<span class="params">net_target, net, tau</span>):</span></span><br><span class="line">            <span class="keyword">for</span> target_param, param <span class="keyword">in</span> <span class="built_in">zip</span>(net_target.parameters(), net.parameters()):</span><br><span class="line">                target_param.data.copy_(target_param.data * (<span class="number">1.0</span> - tau) + param.data * tau)</span><br><span class="line"></span><br><span class="line">        critic_learn()</span><br><span class="line">        soft_update(self.critic_target1, self.critic1, self.tau)</span><br><span class="line">        soft_update(self.critic_target2, self.critic2, self.tau)</span><br><span class="line">        self.updateCnt += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 到达更新频率的时候才更新actor</span></span><br><span class="line">        <span class="keyword">if</span>((self.updateCnt % self.update_interval) == <span class="number">0</span>):</span><br><span class="line">            actor_learn()</span><br><span class="line">            soft_update(self.actor_target, self.actor, self.tau)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        torch.save(self.actor, <span class="string">&#x27;nets/actor.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.actor_target, <span class="string">&#x27;nets/actor_target.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.critic1, <span class="string">&#x27;nets/critic1.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.critic_target1, <span class="string">&#x27;nets/critic_target1.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.critic2, <span class="string">&#x27;nets/critic2.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.critic_target2, <span class="string">&#x27;nets/critic_target2.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;Pendulum-v1&#x27;</span>)</span><br><span class="line">env.reset()</span><br><span class="line">env.render()</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>: env,</span><br><span class="line">    <span class="string">&#x27;gamma&#x27;</span>: <span class="number">0.99</span>,</span><br><span class="line">    <span class="string">&#x27;actor_lr&#x27;</span>: <span class="number">0.001</span>,</span><br><span class="line">    <span class="string">&#x27;critic_lr&#x27;</span>: <span class="number">0.0013</span>,</span><br><span class="line">    <span class="string">&#x27;tau&#x27;</span>: <span class="number">0.02</span>,</span><br><span class="line">    <span class="string">&#x27;capacity&#x27;</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="string">&#x27;batch_size&#x27;</span>: <span class="number">32</span>,</span><br><span class="line">    <span class="string">&#x27;update_interval&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line">EPOCH_NUM = <span class="number">200</span></span><br><span class="line">agent = Agent(**params)</span><br><span class="line">FLAG = <span class="literal">False</span></span><br><span class="line">rewardList = []</span><br><span class="line"><span class="comment"># INTCOEFF = 0.001</span></span><br><span class="line">integral = <span class="number">0</span></span><br><span class="line"><span class="comment"># INTCOEFF = 0.0</span></span><br><span class="line"><span class="keyword">for</span> episode <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH_NUM):</span><br><span class="line">    s0 = env.reset()</span><br><span class="line">    episode_reward = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(episode%<span class="number">20</span> == <span class="number">0</span>):</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    integral = <span class="number">0</span></span><br><span class="line">    INTCOEFF = (episode/EPOCH_NUM)**<span class="number">2</span>*<span class="number">0.005</span></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        <span class="keyword">if</span>(flag):</span><br><span class="line">            env.render()</span><br><span class="line">        a0 = agent.act(s0)</span><br><span class="line">        s1, r1, done, _ = env.step(a0)</span><br><span class="line">        integral += r1*INTCOEFF</span><br><span class="line">        agent.put(s0, a0, r1+integral, s1)</span><br><span class="line"></span><br><span class="line">        episode_reward += r1</span><br><span class="line">        s0 = s1</span><br><span class="line"></span><br><span class="line">        agent.learn()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(episode, <span class="string">&#x27;: &#x27;</span>, episode_reward)</span><br><span class="line">    rewardList.append(episode_reward)</span><br><span class="line">pltX = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH_NUM)]</span><br><span class="line">plt.plot(pltX, rewardList)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># agent.save()</span></span><br></pre></td></tr></table></figure>

<p>详见<a href="https://gitee.com/frankzhang0219/ddpg_try">DDPG_Try: DDPG尝试集 (gitee.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>SolidWorks打不开UG导出的x_t文件解决方法</title>
    <url>/2021/12/21/SolidWorks%E6%89%93%E4%B8%8D%E5%BC%80UG%E5%AF%BC%E5%87%BA%E7%9A%84x-t%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="SolidWorks打不开UG导出的x-t-Parasolid-文件解决方法"><a href="#SolidWorks打不开UG导出的x-t-Parasolid-文件解决方法" class="headerlink" title="SolidWorks打不开UG导出的x_t(Parasolid)文件解决方法"></a>SolidWorks打不开UG导出的x_t(Parasolid)文件解决方法</h1><ul>
<li><p>更改设置</p>
</li>
<li><p><img src="/imgs/image-20211221163511577.png" alt="image-20211221163511577"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu下开发Linux内核模块</title>
    <url>/2022/09/17/Ubuntu%E4%B8%8B%E5%BC%80%E5%8F%91Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://blog.csdn.net/weixin_43455712/article/details/117468579">参考链接</a></p>
<h2 id="Ubuntu下开发Linux内核模块"><a href="#Ubuntu下开发Linux内核模块" class="headerlink" title="Ubuntu下开发Linux内核模块"></a>Ubuntu下开发Linux内核模块</h2></li>
<li><p>Linux内核源码头文件位置<code>/usr/src/linux-headers-$(LINUX_KERNEL)</code></p>
</li>
<li><p>其中的LINUX_KERNEL是Linux内核版本号，使用<code>uname -r</code>获得</p>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">obj-m := test.o</span><br><span class="line">CURRENT_PATH := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">LINUX_KERNEL := <span class="variable">$(<span class="built_in">shell</span> uname -r)</span></span><br><span class="line">LINUX_KERNEL_PATH := /usr/src/linux-headers-<span class="variable">$(LINUX_KERNEL)</span></span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	make -C <span class="variable">$(LINUX_KERNEL_PATH)</span> M=<span class="variable">$(CURRENT_PATH)</span> clean</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="更新包含文件的目录"><a href="#更新包含文件的目录" class="headerlink" title="更新包含文件的目录"></a>更新包含文件的目录</h2></li>
<li><p>在<u>远程端</u>安装C/C++等全套插件（<strong>不安装的话没有相应的选项</strong>）</p>
</li>
<li><p>按<code>Ctrl+Shift+P</code>打开命令</p>
</li>
<li><p>输入<code>C/C++</code></p>
</li>
<li><p><img src="/imgs/3fadb8e8eb03dd521095a75961d71a0eaf8e0b8e404d5036369e33bffed6555b.png" alt="图 5">  </p>
</li>
<li><p>然后在输入框里粘贴地址<code>/usr/src/linux-headers-&lt;uname -r的输出&gt;/include/**</code>和<code>/usr/src/linux-headers-&lt;uname -r的输出&gt;/arch/x86/include/</code></p>
</li>
<li><p><img src="/imgs/b578e50a48b4244960928d63e81d416ad4ebdb44bc237a25b504132ce59fc89f.png" alt="picture 4">  </p>
<ul>
<li>重启设置之后<code>**</code>可能会消失</li>
</ul>
</li>
<li><p>然后即可找到printk等函数的定义</p>
<ul>
<li><img src="/imgs/4eb3b08f44d7d9de7683b995f0a039fbb891857b050e26c607cce3733dc5db20.png" alt="图 7">  </li>
</ul>
</li>
</ul>
<h3 id="但是还是有报错"><a href="#但是还是有报错" class="headerlink" title="但是还是有报错"></a>但是还是有报错</h3><ul>
<li><img src="/imgs/c559b03e240382fdaea8cfeda7b97012bf360206024705575ce9fa6f259d614f.png" alt="picture 1">  </li>
</ul>
<h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	printk(KERN_ALERT <span class="string">&quot; Hello World enter\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	printk(KERN_ALERT<span class="string">&quot; Hello World exit\n &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"> </span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Song Baohua&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;A simple Hello World Module&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="编译结果"><a href="#编译结果" class="headerlink" title="编译结果"></a>编译结果</h2><ul>
<li><img src="/imgs/bcffe914e1cdc23926f55b30fbf48854fe6645be5a7c614c63d7c5d294562232.png" alt="图 3">  </li>
<li><code>insmod</code>安装模块，<code>rmmod</code>移除模块<ul>
<li><code>insmod</code>需要<code>sudo</code></li>
<li>安装的是<code>.ko</code>文件</li>
<li><img src="/imgs/d49222db17a55746e5d61c89182a737c6275304412c38ff3d9587f685f379c00.png" alt="picture 2">  </li>
</ul>
</li>
<li>使用<code>dmesg</code>查看<strong>系统输出</strong></li>
<li><img src="/imgs/6433a69aa1954041ecf4f563d8d6362a7365db8eaa4b83c234917c50fb663ba2.png" alt="图 4">  </li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu配置VNC远程桌面连接Windows电脑</title>
    <url>/2022/03/03/Ubuntu%E9%85%8D%E7%BD%AEVNC%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5Windows%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h1 id="Ubuntu配置VNC远程桌面连接Windows电脑"><a href="#Ubuntu配置VNC远程桌面连接Windows电脑" class="headerlink" title="Ubuntu配置VNC远程桌面连接Windows电脑"></a>Ubuntu配置VNC远程桌面连接Windows电脑</h1><ul>
<li>参考指南<ul>
<li><a href="https://zhuanlan.zhihu.com/p/295422718">https://zhuanlan.zhihu.com/p/295422718</a></li>
</ul>
</li>
<li>考虑安装<code>xrdp</code>，通过<code>sudo apt-get install xrdp</code>安装</li>
<li>安装好之后再安装<code>deconf-editor</code>，也就是<code>sudo apt-get install dconf-editor</code>安装</li>
<li>在<code>deconf-editor</code>中关闭<strong>org-gnome-desktop-remote-access</strong>下面的<code>requlre-encryption</code>即可</li>
<li>安装好之后配置vnc服务的开机自启动</li>
<li>参考这篇博客</li>
<li><a href="https://blog.csdn.net/qq_40723748/article/details/120013808">https://blog.csdn.net/qq_40723748/article/details/120013808</a></li>
<li>主要就是要在<code>/etc/systemd/user</code>目录下创建一个systemd服务文件, 命名为<code>user-defined.service</code></li>
<li>这个文件具有固定的格式，如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">After=network.service</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/&lt;username&gt;/&lt;usershell&gt;.sh</span><br><span class="line">ExecStop=echo &quot;anbox-session-manager is running&quot;</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>

<ul>
<li>其中将<code>username</code>和<code>usershell</code>替换为自己的用户名和新建的脚本</li>
<li>自己新建的脚本的第一行一定要注意带有<code>#!/bin/bash</code></li>
<li>这个脚本启动过程中出错的话是不会报错的，比较难debug</li>
<li>然后使用<code>sudo chmod</code>赋予自己新建的.sh文件和<code>user-defined.service</code>权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod 744 ~/test.sh</span><br><span class="line">sudo chmod 664 /etc/systemd/user/user-defined.service</span><br></pre></td></tr></table></figure>

<ul>
<li>然后调用<strong>以下两行</strong>刷新系统服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">systemctl --user enable user-defined.service</span><br></pre></td></tr></table></figure>

<ul>
<li>如果<strong>上述方法不行</strong>的话采用这篇博客的内容<a href="https://blog.csdn.net/weixin_42390300/article/details/126104299">博客</a></li>
<li>将service文件创建到<code>/etc/systemd/system/user-defined.service</code></li>
<li>然后开启服务直接<code>sudo systemctl enable user-defined.service</code>即可，避免报错</li>
<li>该服务<strong>不可以</strong>简单的用系统的Service跟随Network启动，因为此时<strong>桌面还没有启动</strong>，会导致VNC找不到用户界面而启动失败<h3 id="使用-etc-init-lt-文件名-gt-conf"><a href="#使用-etc-init-lt-文件名-gt-conf" class="headerlink" title="使用/etc/init/&lt;文件名&gt;.conf"></a>使用/etc/init/&lt;文件名&gt;.conf</h3></li>
<li><a href="https://blog.csdn.net/weixin_33204522/article/details/116703967">参考</a></li>
</ul>
<p>然后使用windows自带的远程桌面连接，在系统<strong>没有登陆</strong>的前提下进行远程桌面，<strong>否则会黑屏</strong></p>
<ul>
<li><p><img src="/imgs/image-20220303180321664.png" alt="image-20220303180321664"></p>
</li>
<li><p>此处保持设置不变，输入linux的用户名和密码</p>
</li>
<li><p>注意，假如卡顿的话可以修改设置为</p>
</li>
<li><p>点击最下的显示选项，点击体验，<strong>修改为LAN，会变流畅一些</strong></p>
</li>
<li><p><img src="/imgs/image-20220303180359964.png" alt="image-20220303180359964"></p>
</li>
<li><p>sudo reboot之后远程主机不需要登陆直接链接即可</p>
</li>
<li><p><img src="/imgs/image-20220303181038496.png" alt="image-20220303181038496"></p>
</li>
<li><p><img src="/imgs/image-20220303181046174.png" alt="image-20220303181046174"></p>
</li>
</ul>
<h2 id="如果Ubuntu没有自带VNC远程桌面"><a href="#如果Ubuntu没有自带VNC远程桌面" class="headerlink" title="如果Ubuntu没有自带VNC远程桌面"></a>如果Ubuntu没有自带VNC远程桌面</h2><h3 id="Ubuntu端"><a href="#Ubuntu端" class="headerlink" title="Ubuntu端"></a>Ubuntu端</h3><ul>
<li><a href="https://blog.csdn.net/xujgcn/article/details/121165902">参考</a></li>
<li>安装x11vnc <code>sudo apt-get install x11vnc</code></li>
<li>然后设置密码 <code>x11vnc -storepasswd</code></li>
<li>将其保存到<code>~/.vnc/passwd</code>之后即可</li>
<li>给予文件<code>~/.vnc/passwd</code>全部权限（777）即可不需要sudo也可以使用x11vnc的密码<ul>
<li><code>x11vnc -forever -shared -rfbauth ~/.vnc/passwd -rfbport 5901</code></li>
<li>上述语句中指定了端口为5901，也可以自己修改为合适的端口<h3 id="Windows端"><a href="#Windows端" class="headerlink" title="Windows端"></a>Windows端</h3></li>
</ul>
</li>
<li>VNCViewer官网下载软件 <a href="https://www.realvnc.com/en/connect/download/viewer/">此处</a></li>
<li>找到对应的端口链接即可</li>
<li>解决部分Windows防火墙导致的904问题<a href="https://www.anyviewer.cn/how-to/remote-desktop-0x904-2111.html">参考</a></li>
<li><img src="/imgs/29dbdd6c6fe84707161c4726db07c85b47f0f911e89a569fec13147e7b1144c2.png" alt="picture 1"> <h2 id="sudo不需要密码"><a href="#sudo不需要密码" class="headerlink" title="sudo不需要密码"></a>sudo不需要密码</h2></li>
<li><a href="https://zhidao.baidu.com/question/1312297028274411899.html">参考</a><h2 id="Linux执行一次性任务和循环任务"><a href="#Linux执行一次性任务和循环任务" class="headerlink" title="Linux执行一次性任务和循环任务"></a>Linux执行一次性任务和循环任务</h2></li>
<li>一次性任务参考<code>at</code></li>
<li>循环任务使用<code>cron</code></li>
<li><a href="https://blog.csdn.net/weixin_43696529/article/details/120239947">参考</a></li>
<li><a href="https://haodiyw.com/i/124398.html">cron参考</a></li>
<li><a href="https://haodiyw.com/i/124398.html">at参考</a></li>
<li>查看Linux的任务(service)：<ul>
<li><code>systemctl -l</code><h3 id="实现Linux开机延时启动"><a href="#实现Linux开机延时启动" class="headerlink" title="实现Linux开机延时启动"></a>实现Linux开机延时启动</h3></li>
</ul>
</li>
<li>at非交互式添加任务<a href="https://www.likecs.com/show-306999776.html">参考</a></li>
<li><code>echo &quot;需要执行的shell命令&quot; | at 时间</code></li>
<li>一个可能的思路：<ul>
<li>在<code>user-defined.service</code>中执行一个shell脚本（注意第一行必须是<code>#!/bin/bash</code>） ，这个脚本执行一个非交互式向at添加命令的语句（带有一定的延迟），但是这种方法可能并不成功，因为at的时间有一些问题</li>
<li>之所以不直接把这句话放在service里执行是<strong>可能会影响<code>echo</code>的解析</strong>导致不能正确执行</li>
<li>总之不建议在service里直接执行脚本</li>
</ul>
</li>
<li><strong>但是x11vnc似乎并不支持开机自带启动，否则会导致权限问题（即使密码文件已经给了777权限</strong><ul>
<li><a href="https://jiuaidu.com/jianzhan/1008052/">可能的解决方案</a></li>
</ul>
</li>
<li><a href="https://zhidao.baidu.com/question/1312297028274411899.html">修改参考</a></li>
<li>验证是否启动的方法<ul>
<li><code>sudo netstat -an | grep &lt;端口号&gt;</code></li>
<li><code>ps -aux|grep vnc</code><h2 id="Linux的target"><a href="#Linux的target" class="headerlink" title="Linux的target"></a>Linux的target</h2></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_33939843/article/details/92236953">参考</a></li>
<li>查看依赖关系<code>systemctl list-dependencies multi-user.target</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>U_Boot入门</title>
    <url>/2022/02/25/U-Boot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="U-Boot入门"><a href="#U-Boot入门" class="headerlink" title="U_Boot入门"></a>U_Boot入门</h1><h2 id="U-Boot简介"><a href="#U-Boot简介" class="headerlink" title="U_Boot简介"></a>U_Boot简介</h2><ul>
<li>Linux 系统要启动就必须需要一个 bootloader 程序，也就说芯片上电以后先运行一段 bootloader程序。这段bootloader程序会先初始化DDR等外设，然后将Linux内核从flash(NAND， NOR FLASH，SD，MMC 等)拷贝到 DDR 中，最后启动 Linux 内核。当然了，bootloader 的实 际工作要复杂的多，但是它最主要的工作就是启动 Linux 内核，bootloader 和 Linux 内核的关系 就跟 PC 上的 BIOS 和 Windows 的关系一样，bootloader 就相当于 BIOS。所以我们要先搞定 bootloader，很庆幸，有很多现成的 bootloader 软件可以使用，比如 U-Boot、vivi、RedBoot 等 等，其中以 U-Boot 使用最为广泛，为了方便书写，本书会将 U-Boot 写为 uboot。</li>
<li>uboot 的全称是 Universal Boot Loader，uboot 是一个遵循 GPL 协议的<strong>开源软件</strong>，uboot <strong>是一 个裸机代码，可以看作是一个裸机综合例程</strong>。现在的 uboot 已经支持液晶屏、网络、USB 等高 级功能。</li>
<li>uboot 官网为 <a href="http://www.denx.de/wiki/U-Boot/">http://www.denx.de/wiki/U-Boot/</a></li>
</ul>
<h2 id="UBoot顶层makefile"><a href="#UBoot顶层makefile" class="headerlink" title="UBoot顶层makefile"></a>UBoot顶层makefile</h2><ul>
<li><p>编译需要的shell脚本</p>
<ul>
<li><img src="/imgs/image-20220225210752704.png" alt="image-20220225210752704"></li>
<li>第 1 行是 shell 脚本要求的，必须是“#!/bin/bash”或者“#!/bin/sh”</li>
<li>第 2 行使用了 make 命令，用于<u>清理工程</u>，也就是每次在编译 uboot 之前都清理一下工程。 这里的 make 命令带有三个参数，第一个是 ARCH，也就是指定架构，这里肯定是 arm；第二个 参数 CROSS_COMPILE 用于指定编译器，只需要<u>指明编译器前缀</u>就行了，比如 arm-linux-gnueabihf-gcc 编译器的前缀就是“arm-linux-gnueabihf-”；最后一个参数 distclean 就是清除工程。</li>
<li>第 3 行也使用了 make 命令，用于配置 uboot。同样有三个参数，不同的是，最后一个参数是 mx6ull_14x14_ddr512_emmc_defconfig。<strong>前面说了 uboot 是 bootloader 的一种，可以用来引导 Linux，但是 uboot 除了引导 Linux 以外还可以引导其它的系统</strong>，<u>而且 uboot 还支持其它的架构 和外设，比如 USB、网络、SD 卡等。这些都是可以配置的，需要什么功能就使能什么功能</u>。所 以在编译 uboot 之前，一定要根据自己的需求配置 uboot。mx6ull_14x14_ddr512_emmc_defconfig 就是正点原子针对 I.MX6U-ALPHA 的 EMMC 核心板编写的配置文件，这个配置文件在 uboot 源码的 configs 目录中。在 uboot 中，通过“make xxx_defconfig”来配置 uboot，xxx_defconfig 就是不同板子的配置文件，这些配置文件都在 uboot/configs 目录中</li>
<li>第 4 行有 4 个参数，用于编译 uboot，通过第 3 行配置好 uboot 以后就可以直接“make”编 译 uboot 了。其中 V=1 用于设置编译过程的信息输出级别；-j 用于设置主机使用多少线程编译 uboot，最好设置成我们虚拟机所设置的核心数，如果在 VMware 里面给虚拟就分配了 4 个核， 那么使用-j4 是最合适的，这样 4 个核都会一起编译</li>
</ul>
</li>
<li><p>查看UBoot之前需要先进行一次编译</p>
</li>
<li><p>编译后的文件结构</p>
</li>
<li><p><img src="/imgs/image-20220225210424844.png" alt="image-20220225210424844"></p>
</li>
<li><p><img src="/imgs/image-20220225210443748.png" alt="image-20220225210443748"></p>
</li>
<li><p>makefile文件是可以嵌套的</p>
</li>
<li><p>也就是顶层 Makefile 可以<strong>调用子目录 中的 Makefile 文件</strong>。Makefile 嵌套在大项目中很常见，一般大项目里面所有的源代码都不会放 到同一个目录中，各个功能模块的源代码都是分开的，各自存放在各自的目录中。每个功能模 块目录下都有一个 Makefile，这个 Makefile 只处理本模块的编译链接工作，这样所有的编译链接工作就不用全部放到一个 Makefile 中，可以使得 Makefile 变得简洁明了。</p>
</li>
</ul>
<h2 id="Makefile分析"><a href="#Makefile分析" class="headerlink" title="Makefile分析"></a>Makefile分析</h2><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><ul>
<li><p><img src="/imgs/image-20220225232512333.png" alt="image-20220225232512333"></p>
</li>
<li><p>顶层 Makefile 一开始是版本号，内容如下(为了方便分析，顶层 Makefile 代码段前段行号 采用 Makefile 中的行号，因为 uboot 会更新</p>
</li>
</ul>
<h3 id="MAKEFLAGS变量"><a href="#MAKEFLAGS变量" class="headerlink" title="MAKEFLAGS变量"></a>MAKEFLAGS变量</h3><ul>
<li>make 是支持递归调用的，也就是在 Makefile 中使用“make”命令来执行其他的 Makefile 文件，一般都是子目录中的 Makefile 文件。假如在当前目录下存在一个“subdir”子目录，这个 子目录中又有其对应的 Makefile 文件，那么这个工程在编译的时候其主目录中的 Makefile 就可 以调用子目录中的 Makefile，以此来完成所有子目录的编译。主目录的 Makefile 可以使用如下 代码来编译这个子目录：</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="variable">$(MAKE)</span> -C subdir</span><br></pre></td></tr></table></figure>

<ul>
<li>$(MAKE)就是调用“make”命令，-C 指定子目录。有时候我们需要向子 make 传递变量， 这个时候使用“export”来导出要传递给子 make 的变量即可，如果不希望哪个变量传递给子 make 的话就使用“unexport”来声明不导出:</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> VARIABLE …… //导出变量给子 make 。</span><br><span class="line"><span class="keyword">unexport</span> VARIABLE…… //不导出变量给子 make。</span><br></pre></td></tr></table></figure>

<ul>
<li>有两个特殊的变量：“SHELL”和“MAKEFLAGS”，这两个变量除非使用“unexport”声明， 否则的话在整个make的执行过程中，它们的值始终自动的传递给子make。在uboot的主Makefile 中有如下代码：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAKEFLAGS += -rR --include-dir=$(CURDIR)</span><br></pre></td></tr></table></figure>

<ul>
<li>上述代码使用“+=”来给变量 MAKEFLAGS 追加了一些值，“-rR”表示禁止使用内置的隐 含规则和变量定义，“–include-dir”指明搜索路径，”$(CURDIR)”表示当前目录。</li>
</ul>
<h3 id="命令输出"><a href="#命令输出" class="headerlink" title="命令输出"></a>命令输出</h3><ul>
<li><p>uboot 默认编译是不会在终端中显示完整的命令，都是短命令</p>
</li>
<li><p><img src="/imgs/image-20220225235732726.png" alt="image-20220225235732726"></p>
</li>
<li><p>上述代码中先使用 ifeq 来判断”$(origin V)”和”command line”是否相等。这里用到了 Makefile 中的函数 origin，origin 和其他的函数不一样，它不操作变量的值，origin 用于告诉你变量是哪 来的</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(origin &lt;variable&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>variable 是变量名，origin 函数的返回值就是变量来源，因此$(origin V)就是变量 V 的来源。 如果变量 V 是在命令行定义的那么它的来源就是”command line”，这样”$(origin V)”和”command  line”就相等了。当这两个相等的时候变量 KBUILD_VERBOSE 就等于 V 的值，比如在命令行中 输入“ V=1 “ 的 话 那 么 KBUILD_VERBOSE=1 。如果没有在命令行输入 V 的 话 KBUILD_VERBOSE=0</p>
</li>
<li><p>第 80 行判断 KBUILD_VERBOSE 是否为 1，如果 KBUILD_VERBOSE 为 1 的话变量 quiet</p>
</li>
<li><p>和 Q 都为空，如果 KBUILD_VERBOSE=0 的话变量 quiet 为“quiet_“，变量 Q 为“@”</p>
<ul>
<li><p>V=1 的话</p>
</li>
<li><p><img src="/imgs/image-20220226000158806.png" alt="image-20220226000158806"></p>
</li>
<li><p>V=0 或者命令行不定义 V 的话</p>
</li>
<li><p><img src="/imgs/image-20220226000426810.png" alt="image-20220226000426810"></p>
</li>
</ul>
</li>
<li><p>Makefile 中会用到变量 quiet 和 Q 来控制编译的时候是否在终端输出完整的命令，在顶层 Makefile 中有很多如下所示的命令</p>
<ul>
<li><code>$(Q)$(MAKE) $(build)=tools</code></li>
</ul>
</li>
<li><p>如果 V=0 的话上述命令展开就是“@ make $(build)=tools”，make 在执行的时候默认会在终 端输出命令，但是在命令前面加上“@”就不会在终端输出命令了。当 V=1 的时候 Q 就为空， 上述命令就是“make $(build)=tools”，因此在 make 执行的过程，命令会被完整的输出在终端上</p>
</li>
<li><p>有些命令会有两个版本</p>
<ul>
<li><img src="/imgs/image-20220226000920939.png" alt="image-20220226000920939"></li>
</ul>
</li>
<li><p>sym 命令分为“quiet_cmd_sym”和“cmd_sym”两个版本，这两个命令的功能都是一样的， 区别在于 make 执行的时候输出的命令不同。quiet_cmd_xxx 命令输出信息少，也就是短命令， 而 cmd_xxx 命令输出信息多，也就是完整的命令。</p>
<ul>
<li>如果变量 quiet 为空的话，整个命令都会输出。</li>
<li> 如果变量 quiet 为“quiet_”的话，仅输出短版本。 _</li>
<li>_如果变量 quiet 为“silent_”的话，整个命令都不会输出。</li>
</ul>
</li>
</ul>
<h3 id="静默输出"><a href="#静默输出" class="headerlink" title="静默输出"></a>静默输出</h3><ul>
<li><p>上一小节讲了，设置 V=0 或者在命令行中不定义 V 的话，编译 uboot 的时候终端中显示的 短命令，但是还是会有命令输出，有时候我们在编译 uboot 的时候不需要输出命令，这个时候 就可以使用 uboot 的静默输出功能。编译的时候使用“make -s”即可实现静默输出</p>
<ul>
<li><img src="/imgs/image-20220226002019735.png" alt="image-20220226002019735"></li>
<li><img src="/imgs/image-20220226002036927.png" alt="image-20220226002036927"></li>
</ul>
</li>
<li><p>判断当前正在使用的编译器版本号是否为 4.x，判断$(filter 4.%,$(MAKE_VERSION)) 和“ ”(空)是否相等，如果不相等的话就成立，执行里面的语句。也就是说 $(filter  4.%,$(MAKE_VERSION))不为空的话条件就成立，这里用到了 Makefile 中的 filter 函数，这是 个过滤函数，函数格式如下</p>
<ul>
<li><img src="/imgs/image-20220226002617614.png" alt="image-20220226002617614"></li>
<li>filter 函数表示以 pattern 模式过滤 text 字符串中的单词，仅保留符合模式 pattern 的单词， 可以有多个模式。函数返回值就是符合 pattern 的字符串。因此$(filter 4.%,$(MAKE_VERSION)) 的含义就是在字符串“MAKE_VERSION”中找出符合“4.%”的字符(%为通配符)， MAKE_VERSION 是make工具的版本号，ubuntu16.04里面默认自带的make工具版本号为4.1， 大家可以输入“make -v”查看。因此$(filter 4.%,$(MAKE_VERSION))不为空，条件成立</li>
</ul>
</li>
<li><p>，如果$(filter %s ,$(firstword x$(MAKEFLAGS)))不为空的话条件 成立，变量 quiet 等于“silent_”。这里也用到了函数 filter，在$(firstword x$(MAKEFLAGS)))中 过滤出符合“%s”的单词。到了函数 firstword，函数 firstword 是获取首单词，函数格式如下</p>
<ul>
<li><p><code>$(firstword &lt;text&gt;)</code></p>
</li>
<li><p>firstword 函数用于取出 text 字符串中的第一个单词，函数的返回值就是获取到的单词。当 使用“make -s”编译的时候，“-s”会作为 MAKEFLAGS 变量的一部分传递给 Makefile。</p>
</li>
<li><p>添加如下内容</p>
<ul>
<li><img src="/imgs/image-20220226105110225.png" alt="image-20220226105110225"></li>
</ul>
</li>
<li><p>可见增加<code>-s</code>之后，firstword变成了</p>
<ul>
<li><img src="/imgs/image-20220226110058265.png" alt="image-20220226110058265"></li>
<li>可见也不是直接<code>-s</code>，但是filter的返回值肯定不为空</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="设置编译结果的输出目录"><a href="#设置编译结果的输出目录" class="headerlink" title="设置编译结果的输出目录"></a>设置编译结果的输出目录</h3><ul>
<li><p>uboot 可以将编译出来的目标文件输出到单独的目录中，在 make 的时候使用“O”来指定 输出目录，比如“make O=out”就是设置目标文件输出到 out 目录中。这么做是为了将源文件 和编译产生的文件分开，当然也可以不指定 O 参数，不指定的话源文件和编译产生的文件都在 同一个目录内，一般我们不指定 O 参数。</p>
</li>
<li><p><img src="/imgs/image-20220226110625560.png" alt="image-20220226110625560"></p>
</li>
<li><p><img src="/imgs/image-20220226110641751.png" alt="image-20220226110641751"></p>
</li>
<li><p>第 124 行判断“O”是否来自于命令行，如果来自命令行的话条件成立，KBUILD_OUTPUT 就为$(O)，因此变量 KBUILD_OUTPUT 就是输出目录。 </p>
</li>
<li><p>第 135 行判断 KBUILD_OUTPUT 是否为空。 </p>
</li>
<li><p>第 139 行调用 mkdir 命令，创建 KBUILD_OUTPUT 目录，并且将创建成功以后的绝对路 径赋值给 KBUILD_OUTPUT。至此，通过 O 指定的输出目录就存在了。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Unity学习笔记</title>
    <url>/2022/12/21/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Unity学习笔记"><a href="#Unity学习笔记" class="headerlink" title="Unity学习笔记"></a>Unity学习笔记</h1><p><u><strong>先安装hub再安装Unity！！！</strong></u></p>
<h2 id="环境变量配置（建议用VS一步到位，VSCode配置环境太麻烦）"><a href="#环境变量配置（建议用VS一步到位，VSCode配置环境太麻烦）" class="headerlink" title="环境变量配置（建议用VS一步到位，VSCode配置环境太麻烦）"></a>环境变量配置（建议用VS一步到位，VSCode配置环境太麻烦）</h2><ul>
<li>右键文件管理器-&gt;属性-&gt;<img src="/imgs/7a45dd2b4ae080fe76c4387e1d39b34498f2d3b18611f42a1274bc17a4d2e25c.png" alt="picture 5">  </li>
<li>然后环境变量，添加<img src="/imgs/047fbdff8062f0b8d0fe2806b51cccd884cadc4c8be1c8fb6cddd968ea217925.png" alt="picture 6">  看这俩有没有，然后试一下命令行输入<code>dotnet --info</code></li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul>
<li><p><a href="https://www.bilibili.com/video/BV16W411D7sC?p=14&vd_source=2ad101445b39a9dac0437fdcd408895e">入门教程</a></p>
</li>
<li><p><a href="https://docs.unity3d.com/2022.1/Documentation/ScriptReference/">官方文档</a></p>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2></li>
<li><p>用将对象拖拽到这个位置<img src="/imgs/fd77db333d98e6cb810a31c94a1629c8359b6da349617469610875b303c9798a.png" alt="picture 4"><br>的方式给<code>public</code>对象赋值，包括<code>GameObject</code>和<code>RigidBody</code>，这两个得<u>分开赋值</u></p>
</li>
<li><p><code>RigidBody</code>的<code>AddForce</code>不能开启<img src="/imgs/fdedeaddbfac4dea740aae258bcd25e49c578e1b4a6cc61b9238483bb50d35d8.png" alt="picture 2">  </p>
</li>
<li><p>刚体的<a href="https://blog.csdn.net/LOVE_Me__/article/details/125851048">教程</a></p>
</li>
<li><p>is Kinematic的<a href="https://blog.csdn.net/iiiiiiimp/article/details/126822387">教程</a></p>
<ul>
<li>isKinematic<strong>不会对碰撞和力做出反应</strong>，不受物理系统影响，但依然<strong>会对其他刚体产生物理影响</strong>（比如可以<strong>阻挡</strong>其他刚体）。</li>
<li>isKinematic只能<u>在脚本中修改物体的Transform属性来移动</u>。</li>
<li>用在经常需要移动等变化物理状态的碰撞体上。一个刚体碰撞体，可以随时开启或关闭Is Kinematic选项，不会像静态碰撞体的enabled开启或关闭那样引起物理系统的问题。</li>
</ul>
</li>
<li><p>给一个物理系统的刚体添加一个瞬时的速度的方法</p>
<ul>
<li><code>wbRd.AddForce(new Vector3(x, y, z) * 1.0f, ForceMode.Impulse);</code></li>
<li>或者ForceMode设置为<code>VelocityChange</code>，可以直接改变速度，类似于碰撞的效果</li>
</ul>
</li>
<li><p>获取时间用<code>Time</code>类，unity有支持</p>
</li>
<li><p>复位一个场景用<code>SceneManager.LoadScene(index);</code>，index是这个scene在最终的序列里拍第几个，从0开始</p>
</li>
<li><p>一个<code>Vector3.normalized</code>给出同方向的一个单位向量</p>
</li>
<li><p><code>transform.LookAt(transform)</code>是让当前对象的z轴指向目标对象（z轴是相机的拍照方向）</p>
</li>
<li><p>不规则物体生成碰撞体：<img src="/imgs/d2d0ca79325ddcc42b7949239c75d296bb0b0b5bdd12eb91330d0a4f2f44c5e6.png" alt="picture 3">  </p>
</li>
<li><p>数学计算用<code>Mathf</code>对象下面的操作函数，其中的三角函数是角度制（0-360°）的</p>
</li>
<li><p>鼠标位置用<code>Input.mousePosition</code>得到一个Vector2</p>
</li>
<li><p>键盘用<code>Input.GetKeyDown(KeyCode.按键名)</code>或者其他，可以查手册，KeyCode包含的内容也查手册</p>
</li>
<li><p><code>Transform.translate()</code>函数可以指定运动的坐标系是自身的还是世界的</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare安装安卓虚拟机</title>
    <url>/2023/01/19/VMWare%E5%AE%89%E8%A3%85%E5%AE%89%E5%8D%93%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="VMWare安装安卓虚拟机"><a href="#VMWare安装安卓虚拟机" class="headerlink" title="VMWare安装安卓虚拟机"></a>VMWare安装安卓虚拟机</h1><ul>
<li><a href="https://blog.csdn.net/qq_41930631/article/details/125922411">参考链接</a></li>
<li><a href="https://osdn.net/projects/android-x86/releases/66512">Android-x86下载地址</a></li>
<li><a href="https://www.android-x86.org/">Android x86网站</a></li>
<li>下载的文件：<strong>cm-x86-14.1-r5.iso</strong> 对应的版本：<img src="/imgs/9c996e27832f31e785c3ff0f754b076708d8c3a03bd70ffd5a84aac637f54ab3.png" alt="picture 11">  </li>
<li>下载的文件:** android-x86_64-9.0-r2-k49.iso**对应的版本<img src="/imgs/3b670a9ec837461bbf26ce397d220bbf0338408339c34afa45bbdffeb1ea8d74.png" alt="picture 12">  </li>
</ul>
<h2 id="部分步骤截图"><a href="#部分步骤截图" class="headerlink" title="部分步骤截图"></a>部分步骤截图</h2><ul>
<li>可能无法检测操作系统，此时只需要手动选择FreeBSD如图即可<ul>
<li><img src="/imgs/dc56bcd5c5212c990e728b364b4501628587d7633b07f18a735cbd3904ca18c7.png" alt="picture 1">  </li>
<li><img src="/imgs/820c7f377a64d81192f6d0f5d95bfd021fcfe23c53be10bf59e53e0533e9a95a.png" alt="picture 2">  </li>
</ul>
</li>
<li>下一步磁盘记得勾选这个<ul>
<li><img src="/imgs/dacecac03215b7a999b022bc6394b7590497df64d979e756401fded87a56d749.png" alt="picture 3">  </li>
</ul>
</li>
<li>此时记得打开设置关闭CD驱动器等<ul>
<li><img src="/imgs/810585dce08781495adb429f9dd926f58bbfec8f4359a18f3c253a3c16fd4b35.png" alt="picture 4">  </li>
</ul>
</li>
<li>然后正常重启即可</li>
<li>有时开机的时候回卡在黑屏界面，屏幕上角有光标但是卡住不动</li>
<li>此时重启到debug模式<ul>
<li><img src="/imgs/fc7bd905a97f9a932f1e545c4563f47540638ea4464aaa8520504f0da36b1452.png" alt="picture 5">  </li>
<li>在命令行输入<code>vi /mnt/grub/menu.lst</code></li>
<li>红线位置添加<img src="/imgs/64d3b05b4778357e2e701b7390061551a6a73383ce93ea2f4ef578eb843edf64.png" alt="picture 6">  </li>
<li>添加完成之后再次利用VMWare手动重启即可打开图形界面<ul>
<li><img src="/imgs/3841d33e89117672f772a6b0967f918a34e131b7c92b5f18ae9bf98d923cd436.png" alt="picture 7">  </li>
</ul>
</li>
<li>编辑虚拟网络<ul>
<li><img src="/imgs/da29b0f7a771e985201634fe3f05c8bc951f84f263a8ce49546beb0fa60b5983.png" alt="picture 8">  </li>
</ul>
</li>
<li>更改虚拟机网络使得虚拟机可以访问互联网<ul>
<li><img src="/imgs/5e5ab8ac742eec624c9639a85c96b6074b3907a6bd5266e170909180d38f49c4.png" alt="picture 9">  </li>
</ul>
</li>
<li>此时会出现<img src="/imgs/efe0e0d718b98bc6debf0144694743d6f5cb27ed4ef4bacb1aca891f69bd5e45.png" alt="picture 10">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare扩容Ubuntu系统硬盘容量之后无法开机的解决</title>
    <url>/2023/08/29/VMWare%E6%89%A9%E5%AE%B9Ubuntu%E7%B3%BB%E7%BB%9F%E7%A1%AC%E7%9B%98%E5%AE%B9%E9%87%8F%E4%B9%8B%E5%90%8E%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E7%9A%84%E6%88%AA%E8%B7%9D/</url>
    <content><![CDATA[<ul>
<li>启动系统的时候在启动之前按F2进入VMWare的BIOS配置界面</li>
<li>移动启动顺序，将CD-ROM移动到第一位</li>
<li><img src="/imgs/1205e783fc644a3b1f1eebf36ad636ae69cdc72ff4cda95e5cd88f1889f5a184.png" alt="picture 0">  </li>
<li>提示安装Ubuntu的时候取消安装，进入live系统</li>
<li>找到<code>gparted</code></li>
<li><img src="/imgs/22ec42ce149d277f4cd73706fc87218a5b21e774dde489316be44ad90927762b.png" alt="picture 1">  </li>
<li><img src="/imgs/f7b120ebe049d2cc58d00112ec70a7b5461955d43c6fdb0872377364b8f57daa.png" alt="picture 2">  </li>
<li>给已经存在的空间扩容</li>
<li><img src="/imgs/efdb163f5b6f5ecba70ebc1b08783e2b1e5080ba81219b9d5bcbf7277f406e91.png" alt="picture 3">  </li>
<li>apply<ul>
<li><img src="/imgs/d02898d5c7ea5be1277130271789a7683df4532a76a426a77dcbcf597f204736.png" alt="picture 4">  </li>
</ul>
</li>
<li>执行完成之后关机</li>
<li>重启，将启动顺序<strong>改回之前的</strong></li>
<li><img src="/imgs/d13fa9c4fd21610a94534ed3f1c6adc3c3833b36ad6c06fa4d095fc48270e1d9.png" alt="picture 5">  </li>
<li>系统正常启动</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>freeRTOS中断和信号量以及任务管理</title>
    <url>/2021/12/20/freeRTOS%E4%B8%AD%E6%96%AD/</url>
    <content><![CDATA[<h1 id="freeRTOS中断和信号量"><a href="#freeRTOS中断和信号量" class="headerlink" title="freeRTOS中断和信号量"></a>freeRTOS中断和信号量</h1><p>使用freeRTOS中断与使用正常的中断区别不大（不使用FreeRTOS自带的API），直接使用系统给的中断函数即可</p>
<ul>
<li><p>手动启动这两个</p>
</li>
<li><p><img src="/imgs/image-20211220221301553.png" alt="image-20211220221301553"></p>
</li>
<li><p>注意，使用EXTI的时候（外部中断），需要自己<strong>手动定义</strong>中断处理函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="keyword">uint16_t</span> GPIO_Pin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>系统没有给出这个函数的定义，可以自己在任意文件中定义</p>
</li>
<li><p>设置的优先级比系统（RTOS）<strong>高</strong>的话，中断处理函数就<strong>不会被系统打断执行</strong>。</p>
</li>
<li><p>注意，在中断函数中调用FreeRTOS的API的时候，需要采用Fron_ISR的API。FreeRTOS对于一些系统API函数提供两种版本，一种是供<strong>任务调用</strong>的，一种是供<strong>中断调用的（Interrupt Safe API）</strong>。由中断调用的API函数后缀上会有“FromISR”。</p>
</li>
</ul>
<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><ul>
<li><p>简单而言就是一个进程通过一个信号变量指示另一个线程是阻塞还是运行，详见<a href="https://zhuanlan.zhihu.com/p/139469342">https://zhuanlan.zhihu.com/p/139469342</a></p>
</li>
<li><p>有两种调用方式，一种是使用CMSIS_OS中的<code>osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count);</code>、<code>int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec);</code>和<code>osStatus osSemaphoreRelease (osSemaphoreId semaphore_id);</code>函数</p>
</li>
<li><p>或者是手动<code>#include &quot;semphr.h&quot;</code>，然后使用知乎网页上的<code>SemaphoreHandle_t xSemaphoreCreateBinary( void )</code>、<code>BaseType_t xSemaphoreTake( SemaphoreHandle_t xSemaphore, TickType_t xTicksToWait )</code>、<code>BaseType_t xSemaphoreGive( SemaphoreHandle_t xSemaphore );</code>以及中断函数中的<code>BaseType_t xSemaphoreGiveFromISR( SemaphoreHandle_t xSemaphore, BaseType_t *pxHigherPriorityTaskWoken )</code></p>
</li>
<li><p>注意，<code>xSemaphoreGiveFromISR</code>函数的第二个参数是可选的，不需要的时候可以给NULL，具体作用详见<a href="https://blog.csdn.net/weixin_45045399/article/details/103238514">https://blog.csdn.net/weixin_45045399/article/details/103238514</a></p>
</li>
<li><p><strong>xTicksToWait</strong> 如果信号量不可用的话任务处于阻塞状态的<strong>最长时间</strong>，设置为 portMAX_DELAY的话任务会<strong>一直处于阻塞状态</strong>直到信号量可用，设置为0的话如果信号量不可用的话会<strong>直接返回</strong></p>
</li>
<li><p>假如准备在对应的中断中调用系统的API的话，注意<strong>勾选这个选项</strong>并且<strong>调整相应的中断优先级</strong>，<strong>否则会卡死</strong></p>
</li>
<li><p><img src="/imgs/image-20211220234334003.png" alt="image-20211220234334003"></p>
</li>
<li><p>经过测试，虽然<code>osSemaphoreId</code>与FreeRTOS原生的API要求的<code>SemaphoreHandle_t</code>不同，但是两种API<strong>都可以运行</strong>，直接替换即可。</p>
</li>
</ul>
<h2 id="优先级倒置"><a href="#优先级倒置" class="headerlink" title="优先级倒置"></a>优先级倒置</h2><p>参考知乎文章<a href="https://zhuanlan.zhihu.com/p/139469342">https://zhuanlan.zhihu.com/p/139469342</a></p>
<h2 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h2><p>同上</p>
<h2 id="关键区"><a href="#关键区" class="headerlink" title="关键区"></a>关键区</h2><p>同上</p>
]]></content>
  </entry>
  <entry>
    <title>WSL2上使用matplotlib结合VSCode远程不显示输出的解决方法</title>
    <url>/2022/06/27/WSL2%E4%B8%8A%E4%BD%BF%E7%94%A8matplotlib%E7%BB%93%E5%90%88VSCode%E8%BF%9C%E7%A8%8B%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%BE%93%E5%87%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="WSL2上使用matplotlib结合VSCode远程不显示输出的解决方法"><a href="#WSL2上使用matplotlib结合VSCode远程不显示输出的解决方法" class="headerlink" title="WSL2上使用matplotlib结合VSCode远程不显示输出的解决方法"></a>WSL2上使用matplotlib结合VSCode远程不显示输出的解决方法</h1><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><h3 id="问题一般分为两种"><a href="#问题一般分为两种" class="headerlink" title="问题一般分为两种"></a>问题一般分为两种</h3><ul>
<li>没有报错但是使用<code>plt.show()</code>之后<strong>没有任何输出</strong></li>
<li>使用<code>matplotlib.use(&#39;Tkagg&#39;)</code>之后出现报错<code>Cannot load backend &#39;TkAgg&#39; which requires the &#39;tk&#39; interactive framework, as &#39;headless&#39; is currently running</code>，或者是<code>_tkinter.TclError: couldn&#39;t connect to display &quot;:0.0&quot;</code><ul>
<li><img src="/imgs/image-20220627132430453.png" alt="image-20220627132430453"></li>
</ul>
</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>开始Import的时候改变顺序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.use(<span class="string">&#x27;Tkagg&#x27;</span>) <span class="comment">#这一句修改使用的后端输出设备</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后在windows上安装<code>VcXsrv</code>服务器并且启动，具体下载地址为 <a href="https://sourceforge.net/projects/vcxsrv/">sourceForge</a></p>
</li>
<li><p>安装过程中一路选择默认设置</p>
</li>
<li><p>然后通过桌面图标启动VcXsrv</p>
</li>
<li><p><img src="/imgs/3c06ab6204e183d7f8fcbf6507ef0822_r.jpg" alt="preview"></p>
</li>
<li><p><img src="/imgs/43f9d404f8d8db71b566a9d97439229d_r.jpg" alt="preview"></p>
</li>
<li><p><img src="/imgs/d0f6d5aaaa26b78d6af77e2a7094fff7_r.jpg" alt="preview"></p>
</li>
<li><p><img src="/imgs/v908aa4dd6a4dec03549efd26f418ca49_r.jpg" alt="preview"></p>
</li>
<li><p>然后正常情况会弹出Windows防火墙提示，允许访问即可</p>
</li>
<li><p>然后修改WSL端的环境</p>
</li>
<li><p>首先需要查看Windows系统和WSL2通信使用的<strong>虚拟网卡地址</strong></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># nameserver后面的地址就是Windows系统虚拟网卡的地址,记一下</span></span><br><span class="line"><span class="comment"># 需要取消下面两行内容的注释,禁用自动重新生成配置文件,否则重启后这个地址会变</span></span><br><span class="line">[network]</span><br><span class="line">generateResolvConf = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>然后修改<code>.bashrc</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line"><span class="comment"># 在文件最后追加下面内容,地址使用上面查看到的</span></span><br><span class="line"><span class="built_in">export</span> DISPLAY=&lt;nameServer IP地址&gt;:0</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc </span><br></pre></td></tr></table></figure>

<p>详细可以参考配置<a href="https://zhuanlan.zhihu.com/p/150555651">VcXsrv</a></p>
<ul>
<li>最终效果</li>
<li><img src="/imgs/image-20220627133421950.png" alt="image-20220627133421950"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>FreeRtos内存分配</title>
    <url>/2021/12/14/freeRtos%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<h1 id="内存分配的种类"><a href="#内存分配的种类" class="headerlink" title="内存分配的种类"></a>内存分配的种类</h1><p>本文转载自<a href="https://zhuanlan.zhihu.com/p/115276865">https://zhuanlan.zhihu.com/p/115276865</a></p>
<h2 id="堆栈的关系"><a href="#堆栈的关系" class="headerlink" title="堆栈的关系"></a>堆栈的关系</h2><p><img src="/imgs/image-20211214224037834.png" alt="image-20211214224037834"></p>
<p>​    如上图的示例程序所示，全局变量和常量属于静态区（Static)，由编译器事先分配好，生命周期贯穿整个程序；函数的参数值，局部变量的值属于栈（Stack），由编译器自动分配和释放；程序员用malloc函数动态请求分配的内存空间属于堆（Heap）。<em>值得注意的是，如果在动态分配的内存用完之后忘记使用free函数释放内存，则会导致内存泄漏，并且当堆和栈无止境的增长到互相覆盖对方区域时则会出现很多无法预料的问题。程序可能运行运行着就跑飞了。</em></p>
<h2 id="FreeRtos-任务空间构成"><a href="#FreeRtos-任务空间构成" class="headerlink" title="FreeRtos 任务空间构成"></a>FreeRtos 任务空间构成</h2><p><img src="/imgs/image-20211214230245382.png" alt="image-20211214230245382"></p>
<p>如上图所示，当调用FreeRTOS的创建任务API函数<code>xTaskCreate()</code>时，FreeRTOS会在堆中开辟出一块空间，用于存放<strong>任务的控制信息TCB块</strong>和<strong>栈区Stack</strong>用于储存任务相关的变量。图中创建的两个任务Task1和Task2都有各自独立的内存空间，互相独立。如果想在静态区建立任务的话可以调用<code>xTaskCreateStatic()</code>函数。</p>
<ul>
<li>注意，程序运行过程中<strong>动态创建的线程</strong>的内存位置在堆中，堆中分配的空间包括程序自身的TCB块和自身的<strong>栈</strong>，也就是程序的<strong>Stack</strong></li>
</ul>
<h3 id="TCB块的大小"><a href="#TCB块的大小" class="headerlink" title="TCB块的大小"></a>TCB块的大小</h3><p>​    <em>TCB块的大小取决于<strong>FreeRTOSConfig.h</strong>头文件中的设置</em></p>
<ul>
<li><p>在最小的设置下TCB块的大小是96字节</p>
</li>
<li><p>如果<strong>configUSE_TASK_NOTIFICATIONS</strong>是1的话再增加8个字节</p>
</li>
<li><p>如果<strong>configUSE_TRACE_FACILITY</strong>是1的话再增加8个字节</p>
</li>
<li><p>如果<strong>configUSE_MUTEXES</strong>是1的话再增加8个字节</p>
</li>
</ul>
<p>上一章节中的任务TCB块因为这三个选项都为1，所以大小为96+8+8+8=120字节。</p>
<p>总结下来 <strong>任务占用字节数 = TCB_size + (4 x Task stack size)</strong></p>
<h2 id="TCB块的大小-1"><a href="#TCB块的大小-1" class="headerlink" title="TCB块的大小"></a>TCB块的大小</h2><p><em>TCB块的大小取决于<strong>FreeRTOSConfig.h</strong>头文件中的设置</em></p>
<ul>
<li>在最小的设置下TCB块的大小是96字节</li>
<li>如果<strong>configUSE_TASK_NOTIFICATIONS</strong>是1的话再增加8个字节</li>
<li>如果<strong>configUSE_TRACE_FACILITY</strong>是1的话再增加8个字节</li>
<li>如果<strong>configUSE_MUTEXES</strong>是1的话再增加8个字节</li>
</ul>
<p>上一章节中的任务TCB块因为这三个选项都为1，所以大小为96+8+8+8=120字节。</p>
<p>总结下来 <strong>任务占用字节数 = TCB_size + (4 x Task stack size)</strong></p>
<h2 id="MSP和PSP栈指针"><a href="#MSP和PSP栈指针" class="headerlink" title="MSP和PSP栈指针"></a><strong>MSP和PSP栈指针</strong></h2><p>在FreeRTOS中维护着两个栈的指针，分别是MSP主堆栈指针(Main stack pointer)和PSP进程堆栈指针(Process stack pointer)。</p>
<p>两个栈指针的区别是</p>
<h3 id="MSP指针"><a href="#MSP指针" class="headerlink" title="MSP指针"></a>MSP指针</h3><ul>
<li>用于操作内核以及处理异常和中断</li>
<li>由编译器分配</li>
</ul>
<h3 id="PSP指针"><a href="#PSP指针" class="headerlink" title="PSP指针"></a>PSP指针</h3><ul>
<li><p>用于每个任务的独立的栈指针</p>
</li>
<li><p>在任务调度上下文切换(context switch)中，PSP会初始化为相对应的任务的栈指针，如下图所示</p>
<p><img src="/imgs/image-20211214230729141-16394963018092.png" alt="image-20211214230729141"></p>
<p><strong><u>通常MSP指针用于系统内核和中断服务函数，PSP指针用于用户的任务。</u></strong></p>
</li>
</ul>
<h2 id="Heap-1"><a href="#Heap-1" class="headerlink" title="Heap_1"></a>Heap_1</h2><p>本方案适用于小型的嵌入式系统，并且这个系统<strong>只能在调度器启动之前创建任务和其它内核对象</strong>。内存只需要在程序启动调度器前采用first fit算法对内存进行动态分配，<strong>之后任务的内存分配在程序的运行周期中保持不变并且无法被释放</strong>。heap_1.c实现了一个基础版本的pvPortMalloc函数，并没有实现vPortFree这个函数。如果系统运行后<strong>不用删除任务或者内核对象</strong>就可以采用这个方案。<strong>一些不需要动态分配内存的安全相关的系统</strong>也可以采用这个方案，因为这个方案是可确定性的（deterministic）所以<strong>不会导致内存碎片化</strong>。这个方案中堆由一个数组实现，数组的大小由<strong>FreeRTOSConfig.h</strong>文件中configTOTAL_HEAP_SIZE定义</p>
<p><img src="/imgs/image-20211214223607533.png" alt="image-20211214223607533"></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>内存分配示例如下，A表示没有任何任务创建时的内存；B表示一个任务（<strong>每个任务有自己的TCB块和栈区</strong>）被创建时的内存分配情况；C表示三个任务被创建时的分配情况。</li>
<li><img src="/imgs/image-20211214223641571.png" alt="image-20211214223641571"></li>
</ul>
<h2 id="Heap-2"><a href="#Heap-2" class="headerlink" title="Heap_2"></a>Heap_2</h2><p>这个方案用于保持FreeRTOS的向下兼容性，<strong>并不推荐使用</strong>。内存管理也由一个数组实现，大小由FreeRTOSConfig.h文件中configTOTAL_HEAP_SIZE定义。它通过一套 <strong>优化算法</strong> （best fit algorithm）对内存进行分配，并允许释放内存。Heap_4是Heap_2的功能强化版本。</p>
<p>best fit 算法确保pvPortMalloc函数分配大小最接近所需要字节的内存空间。它会对大的内存块进行分割，但无法合并相连的内存块。Heap_2适用于<strong>重复添加和删除相同任务的系统</strong>，但这种系统应该十分少见。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li>内存分配示例如下，A表示有三个任务被创建时的内存分配情况；B表示有一个任务被删除时的分配情况，此时有两个小的内存块空闲出来；C表示另一个相同任务被创建时的分配情况，因为这个对TCB块和栈区大小的要求和之前被删除任务的大小一样，best fit 算法便把之前被释放的内存块分配给它。</li>
<li><img src="/imgs/image-20211214223823014.png" alt="image-20211214223823014"></li>
</ul>
<h2 id="Heap-3"><a href="#Heap-3" class="headerlink" title="Heap_3"></a>Heap_3</h2><p>本方案使用标准库里的malloc和free函数，所以堆的大小由链接器配置决定，不受configTOTAL_HEAP_SIZE大小影响。因为这个方案使用的场景不多，所以在这里不作详细介绍。</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p><img src="/imgs/image-20211214232509178.png" alt="image-20211214232509178"></p>
<p>可以看到Heap_3使用<strong>标准库</strong>里的malloc和free函数对任务进行内存分配和释放</p>
<h2 id="Heap-5"><a href="#Heap-5" class="headerlink" title="Heap_5"></a>Heap_5</h2><p>这个方案使用类似于Heap_4的内存分配技术，但不同于Heap_4只用一个连续的数组表示堆，Heap_5可以用不同的数组空间对内存进行分配。在本方案要使用vPortDefineHeapRegions这个函数对不同的数组进行申明。</p>
<h3 id="Heap-5-示例"><a href="#Heap-5-示例" class="headerlink" title="Heap_5 示例"></a>Heap_5 示例</h3><p>下面这张图定义了三个不同内存空间用于模拟堆。程序如下，首先定义了每个区域的开始地址START_ADDRESS和空间大小SIZE，然后用一个结构体xHeapRegions指向了这些区域，最后使用<code>vPortDefineHeapRegions</code>函数申明堆的空间。</p>
<p><img src="/imgs/image-20211214234455862.png" alt="image-20211214234455862"></p>
<p><img src="/imgs/image-20211214234514596.png" alt="image-20211214234514596"></p>
<ul>
<li>上图为声明空间的举例</li>
</ul>
<h2 id="内存管理相关函数"><a href="#内存管理相关函数" class="headerlink" title="内存管理相关函数"></a>内存管理相关函数</h2><ul>
<li><p><code>size_t xPortGetFreeHeapSize( void );</code></p>
</li>
<li><p>这个函数会返回当前堆中的空闲空间，可以用来优化堆空间大小。比如在系统运行起来后调用xPortGetFreeHeapSize如果返回了3000，就可以把堆大小configTOTAL_HEAP_SIZE设置为3000。</p>
</li>
<li><p><code>size_t xPortGetMinimumEverFreeHeapSize( void );</code></p>
</li>
<li><p>这个函数会返回在系统运行过程中堆空间的最小空闲空间，如果最小空闲空间很小的话可以考虑提高堆大小configTOTAL_HEAP_SIZE的值。</p>
</li>
<li><p><code>void vApplicationMallocFailedHook( void );</code></p>
</li>
<li><p>这是一个回调函数，需要用户自己实现。如果配置文件中configUSE_MALLOC_FAILED_HOOK 设置为1的话，当堆分配内存失败时会调用此函数。用户可以在此函数中进行错误处理。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>gitClone时挂了梯子仍然报443错误的问题和pip无法使用的问题</title>
    <url>/2023/07/01/gitClone%E6%97%B6%E6%8C%82%E4%BA%86%E6%A2%AF%E5%AD%90%E4%BB%8D%E7%84%B6%E6%8A%A5443%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><ul>
<li>报错<ul>
<li>git clone时虽然已经挂了clash全局，但是仍然访问github 443端口超时</li>
</ul>
</li>
<li>解决<ul>
<li>使用命令<code>git config --global http.proxy &quot;localhost:&lt;clash端口号&gt;&quot;</code></li>
<li><img src="/imgs/66c3ecbedbc2b13e4c8394192f4e4f74cd7e2924069e7c01fc4a22a687ec043b.png" alt="picture 1">  </li>
</ul>
</li>
</ul>
<h2 id="git-clone时permission-denied的问题"><a href="#git-clone时permission-denied的问题" class="headerlink" title="git clone时permission denied的问题"></a>git clone时permission denied的问题</h2><ul>
<li>可能原因很多，一个是本地的<code>ssh</code>密钥已经无法使用，需要本地生成之后在github上重新添加一个<code>ssh</code>密钥</li>
<li>另一个是需要clone入的文件夹没有写入权限，此时需要使用管理员权限打开控制台即可<h2 id="pip代理配置"><a href="#pip代理配置" class="headerlink" title="pip代理配置"></a>pip代理配置</h2></li>
<li><code>pip config set global.HTTPS_PROXY https://127.0.0.1:&lt;端口号&gt;</code></li>
<li><code>pip config set global.HTTP_PROXY https://127.0.0.1:&lt;端口号&gt;</code></li>
<li>如果遇到<code>WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, RemoteDisconnected(&#39;Remote end closed connection without response&#39;))&#39;</code>之类的错误，一般是因为代理配置有问题导致的，重新设置正确的端口号即可</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode字符串题目详解</title>
    <url>/2023/12/19/leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="Leetcode-299-猜数字游戏"><a href="#Leetcode-299-猜数字游戏" class="headerlink" title="Leetcode 299. 猜数字游戏"></a>Leetcode 299. 猜数字游戏</h2><ul>
<li>遍历两个字符串，假如相同的话就加一个公牛，假如不同的话就对各自的char做数量统计（0, 1, 2, …, 9）各有多少个</li>
<li>最终母牛的结果是每个类型的char中谜底和猜测中较小的一个<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getHint</span><span class="params">(string secret, string guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bulls = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cntS</span><span class="params">(<span class="number">10</span>)</span>, <span class="title">cntG</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; secret.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (secret[i] == guess[i]) &#123;</span><br><span class="line">                ++bulls;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++cntS[secret[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">                ++cntG[guess[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            cows += <span class="built_in">min</span>(cntS[i], cntG[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">to_string</span>(bulls) + <span class="string">&quot;A&quot;</span> + <span class="built_in">to_string</span>(cows) + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-316-去除重复字母"><a href="#Leetcode-316-去除重复字母" class="headerlink" title="Leetcode 316. 去除重复字母"></a>Leetcode 316. 去除重复字母</h2><ul>
<li>对已经入栈的字符而言，只要后面还出现而且字典顺序大于当前字符的一律弹出，将标记重新设置为0</li>
<li>然后加入当前字符，并且设置已经过标记为1</li>
<li>意义就是将较大而且后面还出现的字符的出现尽量推迟靠后<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicateLetters</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">26</span>)</span>, <span class="title">num</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s) &#123;</span><br><span class="line">            num[ch - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string stk;</span><br><span class="line">        <span class="comment">// 对已经入栈的字符而言，只要后面还出现而且字典顺序大于当前字符的一律弹出，将标记重新设置为0</span></span><br><span class="line">        <span class="comment">// 然后加入当前字符，并且设置已经过标记为1</span></span><br><span class="line">        <span class="comment">// 意义就是将较大而且后面还出现的字符的出现尽量推迟靠后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[ch - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">back</span>() &gt; ch) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (num[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        vis[stk.<span class="built_in">back</span>() - <span class="string">&#x27;a&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">                        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[ch - <span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">                stk.<span class="built_in">push_back</span>(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            num[ch - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2021/12/13/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="git-常见命令"><a href="#git-常见命令" class="headerlink" title="git 常见命令"></a>git 常见命令</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>
<p>一次添加目录下所有文件（ <strong>包括gitignore</strong> 的文件）：</p>
<p><code>git add . -f</code></p>
<p>一次添加目录下的所有文件（ <strong>不包括gitignore</strong> 的文件）：</p>
<p><code> git add .</code></p>
<p>一次<code>commit</code> 所有东西</p>
<p><code> git commit -a -m &lt;信息&gt;</code></p>
<p>一次添加目录下的所有东西：</p>
<p><code>git add 文件夹名/*</code></p>
<p>上传出问题的时候（上传 <strong>被拒绝</strong> 的时候）的解决方法：</p>
<p><code>git push -u origin master -f</code></p>
<p>这个会 <strong>丢弃</strong> 所有远程仓库领先于本地仓库的部分， <strong>强行</strong> 将本地仓库的内容推送到远端 </p>
<p>或下面这个，但是这个可能会 <strong>覆盖一些本地的文件</strong> （主要是多人开发的情况下可能会出现）</p>
<p><code>git pull origin master --allow-unrelated-histories</code></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode树相关题解</title>
    <url>/2023/11/14/leetcode%E6%A0%91%E7%9B%B8%E5%85%B3%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="leetcode-95-不同的二叉搜索树"><a href="#leetcode-95-不同的二叉搜索树" class="headerlink" title="leetcode 95. 不同的二叉搜索树"></a>leetcode 95. 不同的二叉搜索树</h2><ul>
<li>使用分治递归的方式求解<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="literal">nullptr</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;TreeNode*&gt; allTrees;</span><br><span class="line">        <span class="comment">// 枚举可行根节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="comment">// 获得所有可行的左子树集合</span></span><br><span class="line">            vector&lt;TreeNode*&gt; leftTrees = <span class="built_in">generateTrees</span>(start, i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获得所有可行的右子树集合</span></span><br><span class="line">            vector&lt;TreeNode*&gt; rightTrees = <span class="built_in">generateTrees</span>(i + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从左子树集合中选出一棵左子树，从右子树集合中选出一棵右子树，拼接到根节点上</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; left : leftTrees) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; right : rightTrees) &#123;</span><br><span class="line">                    TreeNode* currTree = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(i);</span><br><span class="line">                    currTree-&gt;left = left;</span><br><span class="line">                    currTree-&gt;right = right;</span><br><span class="line">                    allTrees.<span class="built_in">emplace_back</span>(currTree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allTrees;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">generateTrees</span>(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-331-验证二叉树的前序序列化"><a href="#leetcode-331-验证二叉树的前序序列化" class="headerlink" title="leetcode 331.验证二叉树的前序序列化"></a>leetcode 331.验证二叉树的前序序列化</h2></li>
<li>此题采用使用栈模拟递归的方式实现验证，初始时刻先把一个根节点push到栈中，每次先在字符串里寻找结尾或者是逗号，假如找到了说明当前元素结束了，那么回看上一个位置的当前元素（因为现在不是在字符串结尾就是在逗号上），假如是<code>#</code>就说明上一个位置没有元素，那么直接弹出栈中的一个元素（认为是NULL节点），假如不是说明上一个位置是个节点，那么栈中弹出该元素的同时压入两个元素（该元素的左右孩子）<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidSerialization</span><span class="params">(string preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(preorder.<span class="built_in">size</span>()&gt;<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index&lt;preorder.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(index&lt;preorder.<span class="built_in">size</span>()&amp;&amp;preorder[index]!=<span class="string">&#x27;,&#x27;</span>)index++;</span><br><span class="line">            <span class="keyword">char</span> temp = preorder[index<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(temp!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(q.<span class="built_in">size</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">                    q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(q.<span class="built_in">size</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2></li>
<li>使用递归方式，左侧的左孩子和右侧的右孩子，与左侧的右孩子和右侧的左孩子是否相等，实现递归<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)<span class="keyword">return</span> <span class="built_in">comp</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(TreeNode* left, TreeNode* right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&amp;&amp;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(left-&gt;val != right-&gt;val)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left||right)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!left &amp;&amp; !right)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">comp</span>(left-&gt;left, right-&gt;right)&amp;&amp;<span class="built_in">comp</span>(left-&gt;right, right-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-114-二叉树展开为链表"><a href="#leetcode-114-二叉树展开为链表" class="headerlink" title="leetcode 114.二叉树展开为链表"></a>leetcode 114.二叉树展开为链表</h2></li>
<li>将左子树插入到右子树的地方</li>
<li>将原来的右子树接到左子树的最右边节点</li>
<li>考虑新的右子树的根节点，一直重复上边的过程，直到新的右子树为 null</li>
<li>实际上就是在遍历的过程中先遍历自己，然后左子树，与前序相同，然后左子树<strong>完全结束</strong>之后才到右子树<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root||(root-&gt;left == <span class="literal">NULL</span> &amp;&amp; root-&gt;right == <span class="literal">NULL</span>))<span class="keyword">return</span>;</span><br><span class="line">        TreeNode* temp = root;</span><br><span class="line">        <span class="keyword">while</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* tRight = temp-&gt;right;</span><br><span class="line">            </span><br><span class="line">            TreeNode* tempL = temp-&gt;left;</span><br><span class="line">            <span class="keyword">if</span>(tempL)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(tempL-&gt;right)</span><br><span class="line">                &#123;</span><br><span class="line">                    tempL = tempL-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                tempL-&gt;right = temp-&gt;right;</span><br><span class="line">                temp-&gt;right = temp-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;&#125;</span><br><span class="line">            temp-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">            temp = temp-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode非数据结构类型题目题解</title>
    <url>/2023/11/18/leetcode%E9%9D%9E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="leetcode-318-最大单词长度乘积"><a href="#leetcode-318-最大单词长度乘积" class="headerlink" title="leetcode 318. 最大单词长度乘积"></a>leetcode 318. 最大单词长度乘积</h2><ul>
<li>此题主要是将26个字母映射为26个位，用位运算的形式寻找是否存在重复字母<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">flags</span><span class="params">(words.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;words.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j = words[i].<span class="built_in">begin</span>(); j!=words[i].<span class="built_in">end</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                flags[i] |= <span class="number">1</span>&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(*j-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;words.<span class="built_in">size</span>()<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;words.<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((flags[i]&amp;flags[j]) == <span class="number">0</span>)</span><br><span class="line">                maxVal = <span class="built_in">max</span>(maxVal, <span class="built_in"><span class="keyword">int</span></span>(words[i].<span class="built_in">size</span>()*words[j].<span class="built_in">size</span>()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="leetcode-11-接最多水的容器"><a href="#leetcode-11-接最多水的容器" class="headerlink" title="leetcode 11.接最多水的容器"></a>leetcode 11.接最多水的容器</h2><ul>
<li>双指针法，左边一个右边一个，先左边在最左边，右边在最右边</li>
<li>然后两个指针靠近，选择下一个高度较高的往里挪</li>
<li>每一步的时候都计算承载量，取每一步的最大值<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = height.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> tempVal = <span class="built_in">min</span>(height[left], height[right])*(right-left);</span><br><span class="line">        <span class="keyword">while</span>(left!=right)</span><br><span class="line">        &#123;</span><br><span class="line">            tempVal = <span class="built_in">min</span>(height[left], height[right])*(right-left);</span><br><span class="line">            maxVal = maxVal&gt;tempVal?maxVal: tempVal;</span><br><span class="line">            <span class="keyword">if</span>(height[left]&lt;=height[right])left++;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="leetcode-42-接雨水"><a href="#leetcode-42-接雨水" class="headerlink" title="leetcode 42.接雨水"></a>leetcode 42.接雨水</h2><ul>
<li>先用数组表示出每个位置左边最高的墙和右边最高的墙，然后每个位置从两个墙选一个最小值与自己的差值（小于0的话取0）加到总和里即可<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leftMax = <span class="number">0</span>, templ = <span class="number">0</span>, rightMax = <span class="number">0</span>, tempr = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">leftMap</span><span class="params">(height.size(), <span class="number">0</span>)</span>, <span class="title">rightMap</span><span class="params">(height.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;height.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            leftMax = <span class="built_in">max</span>(leftMax, height[i]);</span><br><span class="line">            rightMax = <span class="built_in">max</span>(rightMax, height[height.<span class="built_in">size</span>()-i<span class="number">-1</span>]);</span><br><span class="line">            leftMap[i] = leftMax;</span><br><span class="line">            rightMap[height.<span class="built_in">size</span>()<span class="number">-1</span>-i] = rightMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sumW = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;height.<span class="built_in">size</span>()<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sumW+=<span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(leftMap[i<span class="number">-1</span>], rightMap[i+<span class="number">1</span>]) - height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumW;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-560-和为k的子数组"><a href="#Leetcode-560-和为k的子数组" class="headerlink" title="Leetcode 560.和为k的子数组"></a>Leetcode 560.和为k的子数组</h2><ul>
<li>循环一次，每次寻找每个位置的前缀和</li>
<li>然后寻找字典中是否存在<code>pre-k</code></li>
<li>假如存在的话，意味着从<code>pre-k</code>的结束位置开始，到当前的位置结束的一段数组的和是k<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        mp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x:nums) &#123;</span><br><span class="line">            pre += x; <span class="comment">// 这一步是前缀和</span></span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">find</span>(pre - k) != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                count += mp[pre - k]; <span class="comment">// 可行的计数加上这个计数</span></span><br><span class="line">            &#125;</span><br><span class="line">            mp[pre]++; <span class="comment">// 添加上当前计算的前缀和到字典</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="leetcode-239-滑动窗口最大值"><a href="#leetcode-239-滑动窗口最大值" class="headerlink" title="leetcode 239.滑动窗口最大值"></a>leetcode 239.滑动窗口最大值</h2><ul>
<li>由于我们需要求出的是滑动窗口的最大值，一开始先把一个长度为k的滑动窗口的每个值加入队列</li>
<li>在答案数组里加入优先级队列的头部元素</li>
<li>然后开始移动滑动窗口，先把下一个元素加入队列，然后开始从队列弹出内容</li>
<li>假如此时队列的头部是窗口的第一个index之前的位置（也就是<code>&lt;=i-k</code>）</li>
<li>将其弹出直到遇到当前窗口的头部（<code>i-k+1</code>）在优先级队列的头部，那么此时这个元素一定是窗口中的最大值（不管还有没有滑动窗口值卡九年的元素，此时这个元素都是剩余的所有元素（包括窗口中的所有元素）中的最大值</li>
<li>把此时优先级队列的头部元素加入答案数组（这是此时滑动窗口的最大元素）<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            q.<span class="built_in">emplace</span>(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans = &#123;q.<span class="built_in">top</span>().first&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">            q.<span class="built_in">emplace</span>(nums[i], i);</span><br><span class="line">            <span class="keyword">while</span> (q.<span class="built_in">top</span>().second &lt;= i - k) &#123;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>().first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="leetcode-48-旋转图像"><a href="#leetcode-48-旋转图像" class="headerlink" title="leetcode 48. 旋转图像"></a>leetcode 48. 旋转图像</h2><ul>
<li>使用临时变量储存，将矩阵旋转中的四个位置变量依次交换<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (n + <span class="number">1</span>) / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                <span class="comment">// 存一个变量然后旋转</span></span><br><span class="line">                matrix[i][j] = matrix[n - j - <span class="number">1</span>][i];</span><br><span class="line">                matrix[n - j - <span class="number">1</span>][i] = matrix[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>];</span><br><span class="line">                matrix[n - i - <span class="number">1</span>][n - j - <span class="number">1</span>] = matrix[j][n - i - <span class="number">1</span>];</span><br><span class="line">                matrix[j][n - i - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>linux进程（二）</title>
    <url>/2022/01/21/linux%E8%BF%9B%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux进程（二）"><a href="#Linux进程（二）" class="headerlink" title="Linux进程（二）"></a>Linux进程（二）</h1><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><ul>
<li>Linux 系统下进程通常存在 6 种不同的状态，分为：就绪态、运行态、僵尸态、可中断睡眠状态（浅度 睡眠）、不可中断睡眠状态（深度睡眠）以及暂停态。<ul>
<li>就绪态（Ready）：指该进程<strong>满足被 CPU 调度的所有条件但此时并没有被调度执行</strong>，只要得到 CPU 就能够直接运行；意味着该进程已经准备好被 CPU 执行，当一个进程的时间片到达，操作系统调 度程序会从就绪态链表中调度一个进程；</li>
<li>运行态：指该进程当前正在被 CPU 调度运行，处于就绪态的进程得到 CPU 调度就会进入运行态；</li>
<li>僵尸态：僵尸态进程其实指的就是僵尸进程，指该进程已经结束、但其父进程还未给它“收尸”；</li>
<li>可中断睡眠状态：可中断睡眠也称为浅度睡眠，表示睡的不够“死”，还可以被唤醒，一般来说可 以通过信号来唤醒；</li>
<li>不可中断睡眠状态：不可中断睡眠称为深度睡眠，深度睡眠无法被信号唤醒，只能等待相应的条件 成立才能结束睡眠状态。把浅度睡眠和深度睡眠统称为等待态（或者叫阻塞态），表示进程处于一 种等待状态，等待某种条件成立之后便会进入到就绪态；所以，处于等待态的进程是无法参与进程 系统调度的。</li>
<li>暂停态：暂停并不是进程的终止，表示进程暂停运行，一般可通过信号将进程暂停，譬如 SIGSTOP 信号；处于暂停态的进程是可以恢复进入到就绪态的，譬如收到 SIGCONT 信号。</li>
</ul>
</li>
</ul>
<p><img src="/../imgs/image-20220121212212609.png" alt="image-20220121212212609"></p>
<h3 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h3><ul>
<li><p>每个进程除了有一个进程 ID、父进程 ID 之外，还有一个进程组 ID，用于标识该进程属于哪一个进程 组，进程组是一个或多个进程的集合，这些进程并不是孤立的，它们彼此之间或者存在父子、兄弟关系，或 者在功能上有联系。</p>
</li>
<li><p>Linux 系统设计进程组实质上是为了方便对进程进行管理。假设为了完成一个任务，需要并发运行 100 个进程，但当处于某种场景时需要终止这 100 个进程，若没有进程组就需要一个一个去终止，这样非常麻烦 且容易出现一些问题；有了进程组的概念之后，就可以将这 100 个进程设置为一个进程组，这些进程共享一 个进程组 ID，这样一来，终止这 100 个进程只需要终止该进程组即可。</p>
</li>
<li><p>进程组的特性</p>
<ul>
<li>每个进程必定属于某一个进程组、且只能属于一个进程组；</li>
<li>每一个进程组有一个组长进程，组长进程的 ID 就等于进程组 ID；</li>
<li>在组长进程的 ID 前面加上一个负号即是操作进程组；</li>
<li>组长进程不能再创建新的进程组；</li>
<li>只要进程组中还存在一个进程，则该进程组就存在，这与其组长进程是否终止无关；</li>
<li>一个进程组可以包含一个或多个进程，进程组的生命周期从被创建开始，到其内所有进程终止或离 开该进程组；</li>
<li>默认情况下，新创建的进程会继承父进程的进程组 ID。</li>
</ul>
</li>
<li><p>通过系统调用 getpgrp()或 getpgid()可以获取进程对应的进程组 ID</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpgid</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span>;<span class="comment">//对应的线程的进程组ID</span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpgrp</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用系统调用 setpgid()或 setpgrp()可以加入一个现有的进程组或创建一个新的进程组</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpgid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> pgid)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpgrp</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>setpgid()函数将参数 pid 指定的进程的进程组 ID 设置为参数 gpid。如果这两个参数相等（pid==gpid）， 则由 pid 指定的进程变成为进程组的组长进程，创建了一个新的进程；如果参数 pid <strong>等于 0，则使用调用者 的进程 ID</strong>；另外，<strong>如果参数 gpid 等于 0，则创建一个新的进程组，由参数 pid 指定的进程作为进程组组长 进程</strong>。</li>
<li>setpgrp()函数等价于 setpgid(0, 0)。</li>
<li>一个进程只能为<strong>它自己或它的子进程设置进程组 ID</strong>，在它的子进程<strong>调用 exec 函数后，它就不能更改该 子进程的进程组 ID 了</strong>。</li>
</ul>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><ul>
<li><p>会话是一个或多个进程组的集合</p>
</li>
<li><p><img src="/../imgs/image-20220121213639860.png" alt="image-20220121213639860"></p>
</li>
<li><p>一个会话可包含一个或多个进程组，但只能有一个前台进程组，其它的是后台进程组；每个会话都有一 个会话首领（leader），即创建会话的进程。</p>
</li>
<li><p>一个会话可以有控制终端、也可没有控制终端，在有控制终端的情况下也只能连接一个控制终端，这通常是登录到其上的终端设备（在终端登录情况下）或伪终端设备 （譬如通过 SSH 协议网络登录），一个会话中的进程组可被分为一个前台进程组以及一个或多个后台进程 组。</p>
</li>
<li><p>会话的首领进程连接一个终端之后，该终端就成为会话的控制终端，与控制终端建立连接的会话首领进 程被称为控制进程；产生在终端上的输入和信号将发送给会话的前台进程组中的所有进程，譬如 Ctrl + C（产 生 SIGINT 信号）、Ctrl + Z（产生 SIGTSTP 信号）、Ctrl + \（产生 SIGQUIT 信号）等等</p>
</li>
<li><p>一个进程组由组长进程的 ID 标识，而对于会话来说，<strong>会话的首领进程的进程组 ID 将作为该会话的标 识</strong>，也就是会话 ID（sid），在默认情况下，新创建的进程会继承父进程的会话 ID。通过系统调用 <code>getsid()</code>可 以获取进程的会话 ID</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getsid</span><span class="params">(<span class="keyword">pid_t</span> pid)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用系统调用 setsid()可以创建一个会话，其函数原型如下所示</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">setsid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果调用者进程<strong>不是进程组的组长进程</strong>，调用 setsid()<strong>将创建一个新的会话</strong>，<strong>调用者进程是新会话的首 领进程</strong>，同样也是一个新的进程组的组长进程，调用 setsid()创建的会话将没有控制终端。</li>
</ul>
<h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><ul>
<li><p>守护进程（Daemon）也称为精灵进程，是运行在后台的一种特殊进程，它独立于控制终端并且周期性 地执行某种任务或等待处理某些事情的发生</p>
</li>
<li><p><strong>长期运行。</strong>守护进程是一种生存期很长的一种进程，它们一般在系统启动时开始运行，除非强行终 止，否则直到系统关机都会保持运行。与守护进程相比，普通进程都是在用户登录或运行程序时创 建，在运行结束或用户注销时终止，但守护进程不受用户登录注销的影响，它们将会一直运行着、 直到系统关机。</p>
</li>
<li><p><strong>与控制终端脱离</strong>。在 Linux 中，系统与用户交互的界面称为终端，<strong>每一个从终端开始运行的进程都 会依附于这个终端</strong>，这是上一小节给大家介绍的控制终端，也就是会话的控制终端。当<strong>控制终端被 关闭的时候，该会话就会退出</strong>，由<strong>控制终端运行的所有进程都会被终止</strong>，这使得普通进程都是和运 行该进程的终端相绑定的；但守护进程能突破这种限制，它脱离终端并且在后台运行，脱离终端的 目的是为了避免进程在运行的过程中的信息在终端显示并且进程也不会被任何终端所产生的信息 所打断。</p>
</li>
<li><p>守护进程 Daemon，通常简称为 d，一般进程名后面带有 d 就表示它是一个守护进程。</p>
</li>
</ul>
<p><strong>创建守护进程的步骤</strong></p>
<ul>
<li>创建子进程、终止父进程<ul>
<li>父进程调用 fork()创建子进程，然后父进程使用 exit()退出，这样做实现了下面几点。第一，如果该守护 进程是作为一条简单地 shell 命令启动，那么父进程终止会让 shell 认为这条命令已经执行完毕。第二，虽然 子进程继承了父进程的进程组ID，但它有自己独立的进程ID，这保证了子进程不是一个进程组的组长进程， 这是下面将要调用 setsid 函数的先决条件！</li>
</ul>
</li>
<li>子进程调用 setsid 创建会话<ul>
<li>这步是关键，在子进程中调用上一小节给大家介绍的 setsid()函数创建新的会话，由于之前子进程并不 是进程组的组长进程，所以调用 setsid()会使得子进程创建一个新的会话，子进程成为新会话的首领进程， 同样也创建了新的进程组、子进程成为组长进程，此时创建的会话将没有控制终端。所以这里调用 setsid 有 三个作用：让子进程摆脱原会话的控制、让子进程摆脱原进程组的控制和让子进程摆脱原控制终端的控制。 在调用 fork 函数时，子进程继承了父进程的会话、进程组、控制终端等，虽然父进程退出了，但原先 的会话期、进程组、控制终端等并没有改变，因此，那还不是真正意义上使两者独立开来。<strong>setsid 函数能够 使子进程完全独立出来，从而脱离所有其他进程的控制</strong>。</li>
</ul>
</li>
<li>将工作目录更改为根目录<ul>
<li>子进程是继承了父进程的当前工作目录，由于在进程运行中，当前目录所在的文件系统是不能卸载的， 这对以后使用会造成很多的麻烦。因此通常的做法是让“/”作为守护进程的当前目录，当然也可以指定其 它目录来作为守护进程的工作目录。</li>
</ul>
</li>
<li>重设文件权限掩码 umask<ul>
<li>文件权限掩码 umask 用于对新建文件的权限位进行屏蔽，在 5.5.5 小节中有介绍。由于使用 fork 函数新 建的子进程继承了父进程的文件权限掩码，这就给子进程使用文件带来了诸多的麻烦。因此，把文件权限掩 码设置为 0，确保子进程有最大操作权限、这样可以大大增强该守护进程的灵活性。设置文件权限掩码的函 数是 umask，通常的使用方法为 umask(0)。</li>
</ul>
</li>
<li>关闭不再需要的文件描述符<ul>
<li>子进程继承了父进程的所有文件描述符，这些被打开的文件可能永远不会被守护进程（此时守护进程指 的就是子进程，父进程退出、子进程成为守护进程）读或写，但它们一样消耗系统资源，可能导致所在的文 件系统无法卸载，所以必须关闭这些文件，这使得守护进程不再持有从其父进程继承过来的任何文件描述 符。</li>
</ul>
</li>
<li>将文件描述符号为 0、1、2 定位到/dev/null<ul>
<li>将守护进程的标准输入、标准输出以及标准错误重定向到/dev/null，这使得守护进程的输出无处显示、 也无处从交互式用户那里接收输入。</li>
</ul>
</li>
<li>其它：忽略 SIGCHLD 信号</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">/* 创建子进程 */</span></span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; pid)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> &lt; pid) <span class="comment">//父进</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);      <span class="comment">//直接退出</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *子进程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">/* 1.创建新的会话、脱离控制终端 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; setsid())</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;setsid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 2.设置当前工作目录为根目录 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; chdir(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;chdir error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 3.重设文件权限掩码 umask */</span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* 4.关闭所有文件描述符 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sysconf(_SC_OPEN_MAX); i++)</span><br><span class="line">        close(i);</span><br><span class="line">    <span class="comment">/* 5.将文件描述符号为 0、1、2 定位到/dev/null */</span></span><br><span class="line">    open(<span class="string">&quot;/dev/null&quot;</span>, O_RDWR);</span><br><span class="line">    dup(<span class="number">0</span>);</span><br><span class="line">    dup(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* 6.忽略 SIGCHLD 信号 */</span></span><br><span class="line">    signal(SIGCHLD, SIG_IGN);</span><br><span class="line">    <span class="comment">/* 正式进入到守护进程 */</span></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;守护进程运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/image-20220121223837693.png" alt="image-20220121223837693"></p>
<ul>
<li><p>可见没有输出，因为输出已经重定向到<code>dev/null</code>了</p>
</li>
<li><p>在<code>ps -ajx</code>中看到这个进程</p>
</li>
<li><p><img src="/../imgs/image-20220121224001123.png" alt="image-20220121224001123"></p>
</li>
<li><p>这个进程可以用<code>kill pid</code>停止</p>
</li>
</ul>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul>
<li>对于有些程序设计来说，程序只能被执行一次，只要该程序没有结束，就无法 再次运行，我们把这种情况称为单例模式运行，多次同时运行并没有意义、甚至还会带来错误！。</li>
</ul>
<p><strong>方法：</strong></p>
<ul>
<li>通过一个特定的文件存在与否进行判断（进程开始的时候新建一个文件，结束的时候删除）</li>
<li>文件锁<ul>
<li>当程序启动之后，首先打开该文件，调用 open 时一般使用 <code>O_WRONLY | O_CREAT </code>标志，当文件不存在则创建该文件，然后尝试去获取文件锁，若是成功，则将程序 的进程号（PID）写入到该文件中，写入后不要关闭文件或解锁（释放文件锁），保证进程一直持有该文件 锁；若是程序获取锁失败，代表程序已经被运行、则退出本次启动。</li>
<li>通过系统调用 <code>flock()</code>、<code>fcntl()</code>或库函数 <code>lockf()</code>均可实现对文件进行上锁，本小节我们以系统调用flock()为例，系统调用 <code>flock() </code>产生的是咨询锁（建议性锁）、并不能产生强制性锁</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCK_FILE <span class="meta-string">&quot;./testApp.pid&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="comment">/* 打开 lock 文件，如果文件不存在则创建 */</span></span><br><span class="line">    fd = open(LOCK_FILE, O_WRONLY | O_CREAT, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 以非阻塞方式获取文件锁 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == flock(fd, LOCK_EX | LOCK_NB))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">&quot;不能重复执行该程序!\n&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;程序运行中...&quot;</span>);</span><br><span class="line">    ftruncate(fd, <span class="number">0</span>); <span class="comment">//将文件长度截断为 0</span></span><br><span class="line">    <span class="built_in">sprintf</span>(str, <span class="string">&quot;%d\n&quot;</span>, getpid());</span><br><span class="line">    write(fd, str, <span class="built_in">strlen</span>(str)); <span class="comment">//写入 pid</span></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/image-20220121225414970.png" alt="image-20220121225414970"></p>
<ul>
<li>首先打开一个特定的文件，这里只是举例，以当前目录下的 testApp.pid 文件作为特定文件， 以 O_WRONLY | O_CREAT 方式打开，如果文件不存在则创建该文件；打开文件之后<strong>使用 flock 尝试获取文 件锁</strong>，调用 flock()时指定了<strong>互斥锁标志 LOCK_NB</strong>，意味着<strong>同时只能有一个进程拥有该锁</strong>，如果获取锁失败， 表示该程序已经启动了，无需再次执行，然后退出；如果获取锁成功，将进程的 PID 写入到该文件中，<strong>当程 序退出时，会自动解锁、关闭文件</strong>。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>manacher算法</title>
    <url>/2022/08/28/manacher%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul>
<li>字符串的最长回文字串的问题（必须是连续的串）<h2 id="获得长度为奇数和偶数的字符串"><a href="#获得长度为奇数和偶数的字符串" class="headerlink" title="获得长度为奇数和偶数的字符串"></a>获得长度为奇数和偶数的字符串</h2></li>
<li>奇数的话直接取每个字符向两边找扩展即可</li>
<li>针对偶数可以在每两个字符之间<strong>加入一个虚拟的字符</strong>，向左右两边扩展得到偶数长度的回文字符串</li>
<li><img src="/imgs/87935e4d8a92e959ccda8401cf31306762c0fe8418854a1eef92f8d09ee30dba.png" alt="图 2">  </li>
<li>将处理得到的字符串的长度直接/2就可以得到实际的回文串的长度</li>
<li>虚拟的字符可以是任意字符，即使是原串之中出现过的字符也可以</li>
<li>时间复杂度是<code>O(N^2)</code><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2></li>
<li>时间复杂度是<code>O(N)</code></li>
<li>概念<ul>
<li>回文直径和半径</li>
<li><img src="/imgs/18ab4a39c4e691caf0301e6d309f1ff2c97f2fb100da73a20f5b55752ccd9afe.png" alt="图 3">  </li>
<li>回文直径7半径4</li>
<li>生成一个<code>回文半径数组</code></li>
<li>之前扩展的所有位置中所到达过的回文最右边界，初始值是-1</li>
<li>取得最远边界的时候的中心点的位置，与上一条同时更新</li>
</ul>
</li>
<li>方法：<ul>
<li>假如此时index没在最右回文右边界之内，直接向两边暴力计算即可</li>
<li>假如在最右边界之内：<ul>
<li>中心点一定在index的左侧</li>
<li><img src="/imgs/694a11a5b4ed6114a4bfcf85d8d329c4db097e451e269ac5dec433e70d29ecab.png" alt="图 4">  </li>
<li>C是此时的最右回文串的中心位置，L是左边界，R是右边界</li>
<li>i’是i关于C的对称点，根据i’的回文状况分类：<ul>
<li>假如i’的回文在L和R范围内（用回文半径数组得到）<ul>
<li>i位置和i’位置的回文半径相同</li>
</ul>
</li>
<li>假如i’的区域有一部分已经到L和R的外侧了<ul>
<li><img src="/imgs/8e9b9549693606dccff649bf276d88d81e1451e3599734737c1a69b5dcd84765.png" alt="图 5">  </li>
<li>此时i的答案是<strong>i到R的长度</strong></li>
</ul>
</li>
<li>假如i’的左边界正好在L上<ul>
<li><img src="/imgs/1e139074cc661226468bd6ddeddfc033b6f3ef39f085d9807868ff5839718773.png" alt="图 6">  </li>
<li>首先i’自身的回文半径<strong>一定是回文</strong>，从R外的第一个字符开始继续验证即可</li>
</ul>
</li>
</ul>
</li>
<li><img src="/imgs/d89728ae0ac3bc388471df7088a5aeafcae7c8c3bab4533dd11e7dce4d1e2e7d.png" alt="图 7">  <h2 id="manacher代码"><a href="#manacher代码" class="headerlink" title="manacher代码"></a>manacher代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">manacher</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &quot;12132&quot; -&gt; &quot;#1#2#1#3#2#&quot;</span></span><br><span class="line">    <span class="keyword">char</span>[] str = manacherString(s);</span><br><span class="line">    <span class="comment">// 回文半径的大小</span></span><br><span class="line">    <span class="keyword">int</span>[] pArr = <span class="keyword">new</span> <span class="keyword">int</span>[str.length];</span><br><span class="line">    <span class="keyword">int</span> C = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 讲述中：R代表最右的扩成功的位置</span></span><br><span class="line">    <span class="comment">// coding：最右的扩成功位置的，再下一个位置</span></span><br><span class="line">    <span class="keyword">int</span> R = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123; <span class="comment">// 0 1 2</span></span><br><span class="line">        <span class="comment">// R第一个违规的位置，i&gt;= R</span></span><br><span class="line">        <span class="comment">// i位置扩出来的答案，i位置扩的区域，至少是多大。</span></span><br><span class="line">        pArr[i] = R &gt; i ? Math.min(pArr[<span class="number">2</span> * C - i], R - i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i + pArr[i] &lt; str.length &amp;&amp; i - pArr[i] &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i + pArr[i]] == str[i - pArr[i]])</span><br><span class="line">                pArr[i]++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i + pArr[i] &gt; R) &#123;</span><br><span class="line">            R = i + pArr[i];</span><br><span class="line">            C = i;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, pArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span>[] manacherString(String str) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] charArr = str.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[str.length() * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != res.length; i++) &#123;</span><br><span class="line">        res[i] = (i &amp; <span class="number">1</span>) == <span class="number">0</span> ? <span class="string">&#x27;#&#x27;</span> : charArr[index++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] str = manacherString(s);</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> L = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> R = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; str.length &amp;&amp; str[L] == str[R]) &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        max = Math.max(max, R - L - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro添加快捷键</title>
    <url>/2022/01/20/manjaro%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="manjaro添加快捷键"><a href="#manjaro添加快捷键" class="headerlink" title="manjaro添加快捷键"></a>manjaro添加快捷键</h1><ul>
<li><a href="https://blog.csdn.net/xingshen100/article/details/85014978">https://blog.csdn.net/xingshen100/article/details/85014978</a></li>
</ul>
<ul>
<li><p>系统设置</p>
</li>
<li><p><img src="/../imgs/image-20220120105459575.png" alt="image-20220120105459575"></p>
</li>
<li><p><img src="/../imgs/image-20220120105605636.png" alt="image-20220120105605636"></p>
</li>
</ul>
<p>点击edit-new-global shortcut-command/URL新建，设置trigger和action即可</p>
<p><img src="/../imgs/image-20220120105715782.png" alt="image-20220120105715782"></p>
<p><img src="/../imgs/image-20220120105729191.png" alt="image-20220120105729191"></p>
]]></content>
  </entry>
  <entry>
    <title>matlab中parfor一些踩坑和用法</title>
    <url>/2023/06/02/matlab%E4%B8%ADparfor%E4%B8%80%E4%BA%9B%E8%B8%A9%E5%9D%91%E5%92%8C%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="parfor中使用分支和循环语句的一些问题"><a href="#parfor中使用分支和循环语句的一些问题" class="headerlink" title="parfor中使用分支和循环语句的一些问题"></a>parfor中使用分支和循环语句的一些问题</h2><ul>
<li><a href="https://blog.csdn.net/JasonJiangCHN/article/details/121231872">参考链接</a></li>
<li>使用<code>if</code>语句和循环控制语句比如<code>continue</code>和<code>break</code>可能会有问题</li>
</ul>
<h2 id="如何控制进程的数量"><a href="#如何控制进程的数量" class="headerlink" title="如何控制进程的数量"></a>如何控制进程的数量</h2><ul>
<li><code>Cluster</code>会默认指定一个最大的并行计算的上限，一般是CPU的物理核心数<ul>
<li><img src="/imgs/52502f2d1d5f76d0b2e344fe7001726ea849d242ff9f8f6c7f603a01d2a6bddb.png" alt="picture 1">  </li>
<li>点击第三个更换</li>
<li><img src="/imgs/55be49cf5408c2404c3aed84d1ffa0d75cabb0798e902a7941f3c9f44efdee3a.png" alt="picture 3">  </li>
<li>点击此处可以修改默认值为自己需要的数值比如CPU的逻辑处理器的数量，可能是物理核心的2倍</li>
</ul>
</li>
<li>然后使用如下代码设置线程的数量<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">CoreNum=<span class="number">16</span>; <span class="comment">%设定机器CPU核心数量</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isempty</span>(gcp(<span class="string">&#x27;nocreate&#x27;</span>)) <span class="comment">%如果并行未开启</span></span><br><span class="line">    parpool(CoreNum);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li>终止的时候使用<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">delete(gcp)</span><br></pre></td></tr></table></figure></li>
<li>循环套循环的时候最好是内层循环是<code>parfor</code></li>
</ul>
]]></content>
      <tags>
        <tag>多线程</tag>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>manjaro停止应用程序</title>
    <url>/2022/01/21/manjaro%E5%81%9C%E6%AD%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="manjaro停止应用程序"><a href="#manjaro停止应用程序" class="headerlink" title="manjaro停止应用程序"></a>manjaro停止应用程序</h1><ul>
<li><p>在命令行输入<code>xkill</code></p>
</li>
<li><p>然后鼠标光标变化，点击想关闭的窗口即可</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>python多线程以及线程同步</title>
    <url>/2022/06/28/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="python多线程以及线程同步"><a href="#python多线程以及线程同步" class="headerlink" title="python多线程以及线程同步"></a>python多线程以及线程同步</h1><h2 id="多线程基础知识"><a href="#多线程基础知识" class="headerlink" title="多线程基础知识"></a>多线程基础知识</h2><ul>
<li>python创建多线程主要依靠threading库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure>

<ul>
<li>线程的创建使用<code>Thread()</code>函数，提供的参数为线程的函数指针和函数的参数（必须为可迭代的对象）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=task, args=(<span class="number">3</span>,)) <span class="comment"># 注意此处不能使用args=(3)，否则会因为传入的参数不可迭代导致错误，必须加逗号</span></span><br></pre></td></tr></table></figure>

<ul>
<li>线程的开始使用<code>start()</code>，使用<code>join()</code>回收线程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多线程</span></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回收线程</span></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">t3.join()</span><br></pre></td></tr></table></figure>

<h2 id="多线程时间测试"><a href="#多线程时间测试" class="headerlink" title="多线程时间测试"></a>多线程时间测试</h2><ul>
<li>线程执行任务为控制台输出的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line">t2=threading.Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line">t3=threading.Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回收线程</span></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">t3.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多线程用时:%.8f\n&quot;</span>%(time.time()-start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单线程</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    task(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;单线程用时:%.8f\n&quot;</span>%(end-start))</span><br></pre></td></tr></table></figure>

<ul>
<li><p><img src="/imgs/image-20220628093137346.png" alt="image-20220628093137346"></p>
<ul>
<li>可见，多线程用时还更多一些</li>
</ul>
</li>
<li><p>多线程执行不涉及IO的操作（比如加法）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">num</span>):</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line">t2=threading.Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line">t3=threading.Thread(target=task, args=(<span class="number">3</span>,))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回收线程</span></span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">t3.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多线程用时:%.8f\n&quot;</span>%(time.time()-start))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单线程</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    task(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;单线程用时:%.8f\n&quot;</span>%(end-start))</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果为<ul>
<li><img src="/imgs/image-20220628093356210.png" alt="image-20220628093356210"></li>
<li>可见，单线程比多线程的优势更明显了</li>
</ul>
</li>
</ul>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul>
<li><p>你会发现多线程比单线程花费的时间还要更多，这是因为GIL的原因。</p>
<p>GIL的全称是Global Interpreter Lock（全局解释器锁），Python最初的设计理念在于，<u>为了解决多线程之间数据完整性和状态同步的问题，设计为在任意时刻只能由一个线程在解释器中运行</u>。因此Python中的多线程是<strong>表面上的多线程</strong>（同一时刻只有一个线程），不是真正的多线程。</p>
<p>但是如果是因为GIL的原因，就说多线程无用是不对的，对于IO密集的程序，多线程是要比单线程快的。</p>
</li>
<li><p><a href="https://baijiahao.baidu.com/s?id=1715829331938364561&wfr=spider&for=pc">参考链接</a></p>
</li>
</ul>
<h2 id="python线程同步"><a href="#python线程同步" class="headerlink" title="python线程同步"></a>python线程同步</h2><ul>
<li>python线程同步具有一些与C类似的机制，比如各种锁和获取、释放锁等等</li>
<li><a href="https://baijiahao.baidu.com/s?id=1714105650396326932&wfr=spider&for=pc">参考链接</a></li>
</ul>
<h3 id="同步锁Lock"><a href="#同步锁Lock" class="headerlink" title="同步锁Lock"></a>同步锁Lock</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lock = threading.Lock()</span><br><span class="line">lock.acquire()</span><br><span class="line">lock.release()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用于保护临界区</p>
</li>
<li><p>由于<code>threading.Lock()</code>对象中实现了<strong>enter__()与__exit</strong>()方法，故我们可以使用<strong>with语句</strong>进行上下文管理形式的加锁解锁操作</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="comment"># 自动加锁</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10_000_000</span>):</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 自动解锁</span></span><br></pre></td></tr></table></figure>

<h3 id="RLock-递归锁"><a href="#RLock-递归锁" class="headerlink" title="RLock() 递归锁"></a>RLock() 递归锁</h3><ul>
<li><p>递归锁是同步锁的一个升级版本，在同步锁的基础上可以做到连续重复使用多次acquire()后再重复使用多次release()的操作，但是一定要注意加锁次数和解锁次数必须一致，否则也将引发死锁现象。</p>
</li>
<li><p>其他部分类似，不再详细赘述</p>
</li>
</ul>
<h3 id="Condition-条件锁"><a href="#Condition-条件锁" class="headerlink" title="Condition() 条件锁"></a>Condition() 条件锁</h3><ul>
<li><p>条件锁是在递归锁的基础上增加了能够暂停线程运行的功能。并且我们可以使用wait()与notify()来控制线程执行的个数。</p>
<p>注意：条件锁可以自由设定一次放行几个线程。</p>
</li>
<li><p><img src="/imgs/838ba61ea8d3fd1fc946d753909e6e1694ca5f61.jpeg" alt="img"></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">currentRunThreadNumber = <span class="number">0</span></span><br><span class="line">maxSubThreadNumber = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> currentRunThreadNumber</span><br><span class="line">    thName = threading.currentThread().name</span><br><span class="line"></span><br><span class="line">    condLock.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start and wait run thread : %s&quot;</span> % thName)</span><br><span class="line"></span><br><span class="line">    condLock.wait()  <span class="comment"># 暂停线程运行、等待唤醒</span></span><br><span class="line">    currentRunThreadNumber += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;carry on run thread : %s&quot;</span> % thName)</span><br><span class="line"></span><br><span class="line">    condLock.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    condLock = threading.Condition()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> currentRunThreadNumber &lt; maxSubThreadNumber:</span><br><span class="line">        notifyNumber = <span class="built_in">int</span>(</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Please enter the number of threads that need to be notified to run：&quot;</span>))</span><br><span class="line"></span><br><span class="line">        condLock.acquire()</span><br><span class="line">        condLock.notify(notifyNumber)  <span class="comment"># 放行</span></span><br><span class="line">        condLock.release()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main thread run end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先启动10个子线程，然后这些子线程会全部变为等待状态</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-1</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-2</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-3</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-4</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-5</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-6</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-7</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-8</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-9</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量发送通知，放行特定数量的子线程继续运行</span></span><br><span class="line"><span class="comment"># Please enter the number of threads that need to be notified to run：5  # 放行5个</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-4</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-3</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-1</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-2</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the number of threads that need to be notified to run：5  # 放行5个</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-8</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-10</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-6</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-9</span></span><br><span class="line"><span class="comment"># carry on run thread : Thread-7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the number of threads that need to be notified to run：1</span></span><br><span class="line"><span class="comment"># main thread run end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意，上面的代码中的线程在使用<code>acquire()</code>获取锁之后，进入了休眠状态（也就是<code>wait()</code>），然后等待锁的<code>notify()</code>函数<strong>唤醒相应数量的正在休眠的进程</strong></li>
</ul>
<h3 id="Event-事件锁"><a href="#Event-事件锁" class="headerlink" title="Event() 事件锁"></a>Event() 事件锁</h3><ul>
<li><p>事件锁是基于条件锁来做的，它与条件锁的区别在于一次只能放行全部，不能放行任意个数量的子线程继续运行。</p>
<p>我们可以将事件锁看为红绿灯，当红灯时所有子线程都暂停运行，并进入“等待”状态，当绿灯时所有子线程都恢复“运行”。</p>
</li>
<li><p><img src="/imgs/b3fb43166d224f4ae902e4228a27db5b9922d146.jpeg" alt="img"></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">maxSubThreadNumber = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    thName = threading.currentThread().name    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start and wait run thread : %s&quot;</span> % thName)    </span><br><span class="line">    eventLock.wait()  <span class="comment"># 暂停运行，等待绿灯    </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;green light, %s carry on run&quot;</span> % thName)    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;red light, %s stop run&quot;</span> % thName)    </span><br><span class="line">    eventLock.wait()  <span class="comment"># 暂停运行，等待绿灯    </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;green light, %s carry on run&quot;</span> % thName)    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sub thread %s run end&quot;</span> % thName)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    </span><br><span class="line">    eventLock = threading.Event()    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):        </span><br><span class="line">        subThreadIns = threading.Thread(target=task)        </span><br><span class="line">        subThreadIns.start()    </span><br><span class="line">        eventLock.<span class="built_in">set</span>()  <span class="comment"># 设置为绿灯    </span></span><br><span class="line">        eventLock.clear()  <span class="comment"># 设置为红灯    </span></span><br><span class="line">        eventLock.<span class="built_in">set</span>()  <span class="comment"># 设置为绿灯</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-1</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-2</span></span><br><span class="line"><span class="comment"># start and wait run thread : Thread-3</span></span><br><span class="line"><span class="comment"># green light, Thread-1 carry on run</span></span><br><span class="line"><span class="comment"># red light, Thread-1 stop run</span></span><br><span class="line"><span class="comment"># green light, Thread-1 carry on run</span></span><br><span class="line"><span class="comment"># sub thread Thread-1 run end</span></span><br><span class="line"><span class="comment"># green light, Thread-3 carry on run</span></span><br><span class="line"><span class="comment"># red light, Thread-3 stop run</span></span><br><span class="line"><span class="comment"># green light, Thread-3 carry on run</span></span><br><span class="line"><span class="comment"># sub thread Thread-3 run end</span></span><br><span class="line"><span class="comment"># green light, Thread-2 carry on run</span></span><br><span class="line"><span class="comment"># red light, Thread-2 stop run</span></span><br><span class="line"><span class="comment"># green light, Thread-2 carry on run</span></span><br><span class="line"><span class="comment"># sub thread Thread-2 run end</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>不能使用<code>with</code>语句进行调用</strong></li>
</ul>
<h3 id="Semaphore-信号量锁"><a href="#Semaphore-信号量锁" class="headerlink" title="Semaphore() 信号量锁"></a>Semaphore() 信号量锁</h3><ul>
<li><p>信号量锁也是根据条件锁来做的，它与条件锁和事件锁的区别如下：</p>
<ul>
<li>条件锁：一次可以放行任意个处于“等待”状态的线程</li>
<li>事件锁：一次可以放行全部的处于“等待”状态的线程</li>
<li>信号量锁：通过规定，成批的放行<strong>特定个处于“上锁”状态的线程</strong></li>
</ul>
</li>
<li><p><img src="/imgs/0b55b319ebc4b74555e89af84b2c551e8b82153c.jpeg" alt="img"></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">maxSubThreadNumber = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    thName = threading.currentThread().name</span><br><span class="line">    semaLock.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run sub thread %s&quot;</span> % thName)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    semaLock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 每次只能放行2个</span></span><br><span class="line">    semaLock = threading.Semaphore(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run sub thread Thread-1</span></span><br><span class="line"><span class="comment"># run sub thread Thread-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run sub thread Thread-3</span></span><br><span class="line"><span class="comment"># run sub thread Thread-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run sub thread Thread-6</span></span><br><span class="line"><span class="comment"># run sub thread Thread-5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意调用<code>Semaphore()</code>初始化的时候传递参数<strong>指定同时能够放行的线程数量</strong></li>
<li>也可以使用<code>with</code>语句</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">maxSubThreadNumber = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    thName = threading.currentThread().name</span><br><span class="line">    <span class="keyword">with</span> semaLock:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;run sub thread %s&quot;</span> % thName)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    semaLock = threading.Semaphore(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxSubThreadNumber):</span><br><span class="line">        subThreadIns = threading.Thread(target=task)</span><br><span class="line">        subThreadIns.start()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python多进程（multiprocessing）相关</title>
    <url>/2023/09/08/python%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%88multiprocessing%EF%BC%89%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="多进程库及其API"><a href="#多进程库及其API" class="headerlink" title="多进程库及其API"></a>多进程库及其API</h2><ul>
<li><p><code>import multiprocessing</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建进程</span></span><br><span class="line">Process(主函数)</span><br><span class="line"><span class="comment"># 注意调用的时候使用</span></span><br><span class="line">multiprocessing.Process(target=worker)</span><br><span class="line"><span class="comment"># 启动进程</span></span><br><span class="line">process.start()</span><br><span class="line"><span class="comment"># 回收进程（阻塞）</span></span><br><span class="line">process.join()</span><br></pre></td></tr></table></figure></li>
<li><p>注意，在实验过程中多进程和单进程方式执行程序，消耗的<strong>总时间几乎没有区别</strong>，同时从任务管理器上可以看出，python并没有创建真正意义上的多个进程</p>
</li>
<li><p>推测仍然是利用并发而不是并行实现的</p>
<ul>
<li><img src="/imgs/58058282893e7ce2dba1cce50925a9e47e2f3ddbe7fe445f2c8210495a73a7a2.png" alt="picture 0">  </li>
<li>CPU端也没有明显看到多CPU并行计算的痕迹</li>
<li><img src="/imgs/89cf0ea913325b7877a2f0a23f514ea338c80cde44172bed57fd2bd3b136ebe6.png" alt="picture 1">  </li>
</ul>
</li>
<li><p><img src="/imgs/fc7876c3bf2ac9f48119643bdc5a5fd8c85c061968826211f9c15602684d7924.png" alt="picture 3">  </p>
<ul>
<li>main线程计时出现问题可<h2 id="相关的计时函数"><a href="#相关的计时函数" class="headerlink" title="相关的计时函数"></a>相关的计时函数</h2></li>
</ul>
</li>
<li><p><code>time.thread_time</code>和<code>time.process_time</code>都是Python中<code>time</code>模块中的函数。<code>thread_time</code>函数返回当前线程的系统和用户CPU时间之和（<strong>以秒为单位</strong>）。它<strong>不包括睡眠期间经过的时间</strong>，因此它是线程特定的。而<code>process_time</code>函数返回当前进程的<strong>系统和用户CPU时间之和</strong>（以秒为单位）。这两个函数都可以用来测量代码执行的性能，但它们所测量的对象不同：一个是线程，另一个是进程</p>
</li>
<li><p><code>time.perf_counter</code>是Python中<code>time</code>模块中的一个函数，它返回一个性能计数器的值（以秒为单位）。这个计数器具有<strong>最高可用的分辨率</strong>，用于测量<strong>短时间</strong>内的时间。它包括睡眠期间经过的时间，并且是系统范围内的。返回值的参考点是未定义的，因此只有连续调用之间的结果差异是有效的。您可以使用这个函数来测量代码执行的性能。</p>
</li>
<li><p><code>time.time()</code>是Python中time模块的一个函数，它返回当前时间的时间戳（以1970年1月1日00:00:00为起点的秒数）。这个时间戳表示从1970年1月1日00:00:00（UTC）到当前时间经过的秒数，通常不包括闰秒</p>
<h2 id="进程间通信（套接字）"><a href="#进程间通信（套接字）" class="headerlink" title="进程间通信（套接字）"></a>进程间通信（套接字）</h2></li>
<li><p>因为单纯的使用python并无法实现真正的多进程并行计算，因此需要使用多个程序分开运行，之间通过<code>socket</code>套接字通信</p>
<h3 id="python中启动另一个（真正意义上的）进程"><a href="#python中启动另一个（真正意义上的）进程" class="headerlink" title="python中启动另一个（真正意义上的）进程"></a>python中启动另一个（真正意义上的）进程</h3></li>
<li><p>使用<code>subprocess</code>库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;./localClient.py&#x27;</span>], close_fds=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>其中<code> close_fds=True</code>的作用是防止子进程继承父进程的文件描述符导致出现不可预知的问题（比如<code>socket</code>无法链接等）</p>
</li>
<li><p>windows下无法使用<code>os</code>库的<code>os.fork()</code>创建子进程</p>
<h3 id="进程与子进程之间通过套接字通信"><a href="#进程与子进程之间通过套接字通信" class="headerlink" title="进程与子进程之间通过套接字通信"></a>进程与子进程之间通过套接字通信</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># localServer.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startClient</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;proc Start&quot;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;./localClient.py&#x27;</span>], close_fds=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># print(result.stdout.decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    server = socket.socket()</span><br><span class="line">    host = socket.gethostname()</span><br><span class="line">    port = <span class="number">11111</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;server on &quot;</span>, host)</span><br><span class="line">    server.bind((host, port))</span><br><span class="line">    <span class="comment"># 在这个端口等待链接</span></span><br><span class="line">    server.listen(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Waiting... &quot;</span>)</span><br><span class="line"></span><br><span class="line">    proc = multiprocessing.Process(target=startClient)</span><br><span class="line">    proc.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># while True:</span></span><br><span class="line">    client, addr = server.accept()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    b = <span class="built_in">bytes</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    client.send(b)</span><br><span class="line">    rec = client.recv(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;server time stamp: %f&quot;</span> % time.time())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Server rec: &quot;</span>, rec.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    proc.join()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># localClient.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;client running&quot;</span>)</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">11111</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Trying to connect...on &quot;</span>, host)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">client.connect((host, port))</span><br><span class="line"><span class="built_in">print</span>(client.recv(<span class="number">5</span>).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">b = <span class="built_in">bytes</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">client.send(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;client time stamp: %f&quot;</span>%time.time())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="真正的多进程测试"><a href="#真正的多进程测试" class="headerlink" title="真正的多进程测试"></a>真正的多进程测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcFunc</span>(<span class="params">cnt, <span class="built_in">id</span></span>):</span></span><br><span class="line">    subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;./calcProc.py&#x27;</span>, <span class="built_in">str</span>(cnt), <span class="built_in">str</span>(<span class="built_in">id</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cnt = <span class="built_in">round</span>(<span class="number">5e8</span>)</span><br><span class="line">    proLen = <span class="number">10</span></span><br><span class="line">    proArr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(proLen):</span><br><span class="line">        proArr.append(Process(target=calcFunc, args = (cnt, i)))</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(proLen):</span><br><span class="line">        proArr[i].start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(proLen):</span><br><span class="line">        proArr[i].join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Time of main thread: %f&quot;</span>%(end-start))</span><br></pre></td></tr></table></figure></li>
<li><p>测试过程</p>
<ul>
<li><img src="/imgs/fb16e5a78a62a4a4f2ea442bbddf1f873c1449d7fa3969fe9499857e41e67b18.png" alt="picture 4">  <ul>
<li>可见是真的创建了很多进程</li>
</ul>
</li>
<li><img src="/imgs/45f7997c503bcd39b982f96e591bc0d66748f9cede6f9463182d08667b0f9370.png" alt="picture 8">  <ul>
<li>以上是使用<code>time.time()</code>计时的结果, 可见<strong>主进程使用的时间跟任何一个计算进程相当</strong></li>
</ul>
</li>
<li><img src="/imgs/67dc74cbd86ca322124bee27912b90f8ccc74cca7fbbd193049a584d1b72f0ec.png" alt="picture 6">  <ul>
<li>以上使用<code>time.process_time()</code>的计时结果，可见计时<u>出现了一些问题</u></li>
</ul>
</li>
<li>在主进程中的顺序执行结果为<ul>
<li><img src="/imgs/5b306eaad041c7ddf3e6193bb48ddbfe56a4ef6f43a8d6af3ac63ff8858d4607.png" alt="picture 7">  </li>
<li>可见执行的时间很长，但是其中<strong>单个进程的执行时间较短</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="多个父进程与子进程通过套接字通信"><a href="#多个父进程与子进程通过套接字通信" class="headerlink" title="多个父进程与子进程通过套接字通信"></a>多个父进程与子进程通过套接字通信</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主进程</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startClient</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;proc Start&quot;</span>)</span><br><span class="line">    subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;./localClient.py&#x27;</span>], close_fds=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># print(result.stdout.decode(&quot;utf-8&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    server = socket.socket()</span><br><span class="line">    host = socket.gethostname()</span><br><span class="line">    port = <span class="number">11111</span></span><br><span class="line">    procLen = <span class="number">10</span></span><br><span class="line">    procArr = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;server on &quot;</span>, host)</span><br><span class="line">    server.bind((host, port))</span><br><span class="line">    <span class="comment"># 在这个端口等待链接</span></span><br><span class="line">    server.listen(procLen)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Waiting... &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(procLen):</span><br><span class="line">        proc = multiprocessing.Process(target=startClient)</span><br><span class="line">        proc.start()</span><br><span class="line">        procArr.append(proc)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(procLen):</span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        b = <span class="built_in">bytes</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        client.send(b)</span><br><span class="line">        rec = client.recv(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;server time stamp: %f&quot;</span> % time.time())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Server rec: &quot;</span>, rec.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(procLen):</span><br><span class="line">        procArr[i].join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子进程</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;client running&quot;</span>)</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">11111</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Trying to connect...on &quot;</span>, host)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">client.connect((host, port))</span><br><span class="line"><span class="built_in">print</span>(client.recv(<span class="number">5</span>).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">b = <span class="built_in">bytes</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">client.send(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nclient time stamp: %f&quot;</span>%time.time())</span><br></pre></td></tr></table></figure>
<ul>
<li>运行效果</li>
<li><img src="/imgs/b6f49217c7a7f4205dcaf34519acc94f71e81346c898385a413c7bdcc396e288.png" alt="picture 9">  </li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>python进行Socket简单开发</title>
    <url>/2023/05/07/python%E8%BF%9B%E8%A1%8CSocket%E7%AE%80%E5%8D%95%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.csdn.net/m0_46958731/article/details/112670803">参考链接</a><h2 id="python的byte类型"><a href="#python的byte类型" class="headerlink" title="python的byte类型"></a>python的byte类型</h2></li>
<li><a href="https://blog.csdn.net/weixin_39927059/article/details/110557393">参考链接</a></li>
<li>byte类型是字节类型， 一般是不能直接打印的，与字符串不同，字符串编码得到字节类型，字节类型解码得到字符串<h3 id="打印字节"><a href="#打印字节" class="headerlink" title="打印字节"></a>打印字节</h3></li>
<li>使用<code>bytes.hex()</code>将其转为十六进制字符串<ul>
<li><img src="/imgs/5df60568cb9c2bcd4c57329a07c30473fa3acb23b7a1022832318ff19fea6596.png" alt="picture 1">  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">server = socket.socket(family=socket.AF_INET,<span class="built_in">type</span>=socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">4444</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;listening for one client&#x27;</span>)</span><br><span class="line">server.listen(<span class="number">1</span>)</span><br><span class="line">conn,ip_addr = server.accept()</span><br><span class="line">res = conn.recv(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ip_addr)</span><br><span class="line"><span class="built_in">print</span>(res.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch入门笔记</title>
    <url>/2021/12/08/pytorch%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="pytorch入门笔记及资源集合"><a href="#pytorch入门笔记及资源集合" class="headerlink" title="pytorch入门笔记及资源集合"></a>pytorch入门笔记及资源集合</h1><h2 id="教程手册"><a href="#教程手册" class="headerlink" title="教程手册"></a>教程手册</h2><p>莫烦 <a href="https://mofanpy.com/tutorials/machine-learning/reinforcement-learning/">https://mofanpy.com/tutorials/machine-learning/reinforcement-learning/</a></p>
<p>pytorch中文手册</p>
<p><a href="https://handbook.pytorch.wiki/">https://handbook.pytorch.wiki/</a></p>
<h2 id="转移到GPU上训练"><a href="#转移到GPU上训练" class="headerlink" title="转移到GPU上训练"></a>转移到GPU上训练</h2><ul>
<li><a href="https://blog.csdn.net/weixin_41012765/article/details/128089337">参考</a></li>
<li><a href="https://blog.csdn.net/weixin_45354497/article/details/130346967">参考2</a></li>
<li>主要操作是判断系统是否支持GPU训练并且指定设备<code>device</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>) <span class="comment"># 设置使用GPU计算</span></span><br></pre></td></tr></table></figure></li>
<li>对创建的模型执行<code>module.to(device)</code></li>
<li>对创建的<code>torch.tensor()</code>也执行<code>.to(device)</code></li>
<li>注意，CPU上的参数只能和CPU上的参数互相运算，GPU上的参数只能和GPU上的参数互相计算，不能混杂，<u>混杂的时候需要都迁移到GPU上计算或者都迁移到CPU上计算</u></li>
<li>假如网络已经迁移到了GPU上，那么网络的输入参数也需要是GPU上的Tensor，输出也是GPU的</li>
</ul>
<h2 id="detach函数"><a href="#detach函数" class="headerlink" title="detach函数"></a>detach函数</h2><p><a href="https://blog.csdn.net/qq_31244453/article/details/112473947">https://blog.csdn.net/qq_31244453/article/details/112473947</a></p>
<p>返回一个新的tensor，从当前计算图中分离下来。但是仍指向原变量的存放位置，不同之处只是requirse_grad为false.得到的这个tensir永远不需要计算器梯度，不具有grad.</p>
<h2 id="某博主的DDPG"><a href="#某博主的DDPG" class="headerlink" title="某博主的DDPG"></a>某博主的DDPG</h2><p><a href="https://blog.csdn.net/blanokvaffy/article/details/86232658">https://blog.csdn.net/blanokvaffy/article/details/86232658</a></p>
<h2 id="网络保存与加载"><a href="#网络保存与加载" class="headerlink" title="网络保存与加载"></a>网络保存与加载</h2><p><a href="https://blog.csdn.net/weixin_41680653/article/details/93768559">https://blog.csdn.net/weixin_41680653/article/details/93768559</a></p>
<h2 id="torch-mean"><a href="#torch-mean" class="headerlink" title="torch.mean()"></a>torch.mean()</h2><p> mean()函数的参数：dim=0,按行求平均值，返回的形状是（1，列数）；dim=1,按列求平均值，返回的形状是（行数，1）,默认不设置dim的时候，返回的是所有元素的平均值。</p>
<h2 id="torch的zero-grad-函数"><a href="#torch的zero-grad-函数" class="headerlink" title="torch的zero_grad()函数"></a>torch的zero_grad()函数</h2><p>调用backward()函数之前都要将梯度清零，因为如果梯度不清零，pytorch中会将上次计算的梯度和本次计算的梯度累加</p>
<h2 id="torch-tensor的view函数"><a href="#torch-tensor的view函数" class="headerlink" title="torch tensor的view函数"></a>torch tensor的view函数</h2><p>view(*args) → Tensor<br>返回一个有相同数据但大小不同的tensor。 返回的tensor必须有与原tensor相同的数据和相同数目的元素，但可以有不同的大小。</p>
<p>参数是-1的时候这个维度的长度从其他维度<strong>推算</strong></p>
<h2 id="torch-tensor的-sequeeze和unsqueeze"><a href="#torch-tensor的-sequeeze和unsqueeze" class="headerlink" title="torch tensor的 sequeeze和unsqueeze"></a>torch tensor的 sequeeze和unsqueeze</h2><p>squeeze()：</p>
<p><code>squeeze(arg)</code>表示第arg维的维度值为1，则去掉该维度。否则tensor不变。（即若<code>tensor.shape()[arg] = 1</code>，则去掉该维度）</p>
<p>unsqueeze()：</p>
<p><code>unsqueeze(arg)</code>与<code>squeeze(arg)</code>作用相反，表示在第arg维增加一个维度值为1的维度。</p>
<h2 id="matplotlib画图的时候出现横坐标标签重叠的问题"><a href="#matplotlib画图的时候出现横坐标标签重叠的问题" class="headerlink" title="matplotlib画图的时候出现横坐标标签重叠的问题"></a>matplotlib画图的时候出现横坐标标签重叠的问题</h2><ul>
<li><p>比如<img src="/imgs/50c9faa8d6b6a76f26b9902c7a998ab59938bdfaf1117a6f3f81dc5b4a14700f.png" alt="picture 1">  </p>
</li>
<li><p>只需要在代码中加入<code>plt.tight_layout()</code>即可（在<code>plt.show()</code>之前）</p>
</li>
<li><p><img src="/imgs/cf4cc41c2b34494854a1c3662a1e16238ec21a10dd3d151b245477088b950a57.png" alt="picture 2">  </p>
<h2 id="matplotlib添加希腊字母的latex方法"><a href="#matplotlib添加希腊字母的latex方法" class="headerlink" title="matplotlib添加希腊字母的latex方法"></a>matplotlib添加希腊字母的latex方法</h2></li>
<li><p><code>plt.ylabel(&quot;cos(&quot;+r&#39;$\theta$&#39;+&quot;)&quot;)</code>，希腊字母用<code>r&#39;$\希腊字母$&#39;</code>即可</p>
</li>
<li><p>效果：<img src="/imgs/c0577006ba23e2df4a37e467756a55f016f0b2143078650c0daed7e891dba90f.png" alt="picture 3">  </p>
</li>
</ul>
<h2 id="将gym的输出保存为gif动画"><a href="#将gym的输出保存为gif动画" class="headerlink" title="将gym的输出保存为gif动画"></a>将gym的输出保存为gif动画</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveAsGIF</span>(<span class="params">frames</span>):</span></span><br><span class="line">    patch = plt.imshow(frames[<span class="number">0</span>])</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">animate</span>(<span class="params">i</span>):</span></span><br><span class="line">        patch.set_data(frames[i])</span><br><span class="line"></span><br><span class="line">    anim = animation.FuncAnimation(plt.gcf(), animate, frames=<span class="built_in">len</span>(frames), interval=<span class="number">5</span>)</span><br><span class="line">    anim.save(<span class="string">&quot;./CartPole_v1_result.gif&quot;</span>, writer=<span class="string">&quot;pillow&quot;</span>, fps=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>此外，还需要在创建gym环境的时候进行一些操作（<strong>此处新版的gym和旧版的不太相同</strong>）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env = gym.make(<span class="string">&#x27;Pendulum-v1&#x27;</span>, render_mode=<span class="string">&quot;rgb_array&quot;</span>)</span><br><span class="line">frames = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    frames.append(env.render())</span><br></pre></td></tr></table></figure></li>
<li>然后再将<code>frames</code>当作参数传入前面的函数<code>saveAsGIF()</code>中</li>
<li><img src="/imgs/4b4706ade3cd854f191da16b2a009e2f3be50d13fc63410581fece37afe1d1f5.gif" alt="picture 5">  <h2 id="python中的"><a href="#python中的" class="headerlink" title="python中的@"></a>python中的<code>@</code></h2></li>
<li><a href="https://www.cnblogs.com/daniumiqi/p/12162192.html">参考链接</a><h2 id="python中的None"><a href="#python中的None" class="headerlink" title="python中的None"></a>python中的<code>None</code></h2></li>
<li><a href="https://m.php.cn/article/419082.html">参考链接</a><ul>
<li>就是空对象，无类型<h2 id="各种激活函数"><a href="#各种激活函数" class="headerlink" title="各种激活函数"></a>各种激活函数</h2></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/m0_53675977/article/details/128262957">激活函数</a></li>
<li>其他的激活函数（比如<code>Leaky ReLU</code>）<ul>
<li><img src="/imgs/4c60e86b0de8c2dbf449552f23d0b4e870f769bf39de1271825167ced38fc4e5.png" alt="picture 1">  <h2 id="梯度消失问题"><a href="#梯度消失问题" class="headerlink" title="梯度消失问题"></a>梯度消失问题</h2></li>
</ul>
</li>
<li><a href="https://www.jianshu.com/p/3f35e555d5ba">参考链接1</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/268007336">参考链接2</a></li>
<li>简而言之就是比如使用<code>sigmoid</code>函数作为激活函数，因为<code>sigmoid</code>函数的梯度小于1，导致随着反向传播的层数加深，往前的层因为连乘的<code>sigmoid</code>函数导数次数过多，使得<strong>梯度越来越小</strong>，实际上<u>起不到任何的训练效果</u>，网络实际有效的<strong>只有靠后的几层</strong>。</li>
<li>也有其他方法来解决梯度消失的问题，比如ResNET等等<h2 id="Jetson开发板上找不到libomp-so文件的解决办法"><a href="#Jetson开发板上找不到libomp-so文件的解决办法" class="headerlink" title="Jetson开发板上找不到libomp.so文件的解决办法"></a>Jetson开发板上找不到<code>libomp.so</code>文件的解决办法</h2></li>
<li>在Jetson开发板上安装<code>pytorch</code>之后，<code>import pytorch</code>的时候报错找不到<code>libomp.so</code>文件<ul>
<li><img src="/imgs/e317ba90bc5aa315f81b9f9c7f8348c74ca3f4eef31244c81dfbbe3a3d90738f.png" alt="picture 2">  </li>
</ul>
</li>
<li>但是同样的代码在命令行手动使用<code>python3 &lt;文件名&gt;</code>就<strong>可以执行</strong></li>
<li>此时可以通过安装<code>sudo apt-get install libomp5 libomp-dev</code>解决，<a href="https://zhuanlan.zhihu.com/p/632057827">参考</a><h2 id="python实现命令行进度条"><a href="#python实现命令行进度条" class="headerlink" title="python实现命令行进度条"></a>python实现命令行进度条</h2></li>
<li><a href="https://zhuanlan.zhihu.com/p/390722326">参考</a><h2 id="python从图片生成gif"><a href="#python从图片生成gif" class="headerlink" title="python从图片生成gif"></a>python从图片生成gif</h2></li>
<li><a href="https://zhuanlan.zhihu.com/p/634922656">参考</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>python随记</title>
    <url>/2022/12/24/python%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><ul>
<li>基本框架<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像时符号-显示为方块的2问题</span></span><br><span class="line">plt.plot(xs, yx, label=<span class="string">&quot;x随迭代次数的变化&quot;</span>)</span><br><span class="line">plt.plot(xs, yy, label=<span class="string">&quot;y随迭代次数的变化&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">&quot;迭代次数&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;x以及f(x)的数值&quot;</span>)</span><br><span class="line">plt.title(<span class="string">r&quot;$x_0$ = 1&quot;</span>)</span><br><span class="line">plt.show()  </span><br></pre></td></tr></table></figure></li>
<li>使用latex语法：<code>r&quot;$&lt;latex语法&gt;$&quot;</code><h2 id="pycharm配置项目的python解释器"><a href="#pycharm配置项目的python解释器" class="headerlink" title="pycharm配置项目的python解释器"></a>pycharm配置项目的python解释器</h2></li>
<li>设置下面找到项目然后更改解释器<ul>
<li><img src="/imgs/73243950c62d71fd56e29802053af5f4ce772fb1ac73bfc9098e862fdd88ee36.png" alt="picture 1">  </li>
</ul>
</li>
<li><strong>注意单独更改此处没有用</strong><ul>
<li><img src="/imgs/ae6810ecdb55ecf83bab089970463402519d5ed979d75e1d7005bed717d6c11d.png" alt="picture 2">  </li>
</ul>
</li>
<li>python得到当前路径<ul>
<li><code>os.getcwd().replace(&#39;\\&#39;,&#39;/&#39;)</code>此处将<code>/</code>替换为了<code>\\</code>，实际上是单斜线<h3 id="数组切片"><a href="#数组切片" class="headerlink" title="数组切片"></a>数组切片</h3></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_42782150/article/details/127014616">参考链接</a></li>
<li>注意<code>数组[begin:end]</code>切到的是begin到<strong>end-1</strong>的内容<h3 id="重启程序"><a href="#重启程序" class="headerlink" title="重启程序"></a>重启程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前解释器路径</span></span><br><span class="line">p = sys.executable</span><br><span class="line"><span class="comment"># 启动新程序(解释器路径, 当前程序)</span></span><br><span class="line">os.execl(p, p, *sys.argv)</span><br><span class="line"><span class="comment"># 关闭当前程序</span></span><br><span class="line">sys.exit()</span><br></pre></td></tr></table></figure>
<h3 id="pycharm内存不足"><a href="#pycharm内存不足" class="headerlink" title="pycharm内存不足"></a>pycharm内存不足</h3></li>
<li><a href="https://www.ycpai.cn/python/dwqRcLg8.html">教程</a></li>
<li><img src="/imgs/66393c1b6f785f70b6cfa70b8b83a6f8705de4000772b5425184113d7106cb15.png" alt="picture 3">  </li>
</ul>
<h3 id="import-numpy的时候出错"><a href="#import-numpy的时候出错" class="headerlink" title="import numpy的时候出错"></a>import numpy的时候出错</h3><ul>
<li>有时候在一些<strong>非x86</strong>的设备上使用numpy会报错 <code>Illegal instruction (core dumped)</code></li>
<li><img src="/imgs/e8f026142d2e9e89d431c908409bd83cd625957400511b4df2b0ee781c22d5da.png" alt="picture 3">  </li>
<li>此时需要设置环境变量<code>~/.bashrc</code>追加一句<code>export OPENBLAS_CORETYPE=ARMV8</code>然后<code>source ~/.bashrc</code></li>
<li>此时不再报错<ul>
<li><img src="/imgs/78f122d9e620fc70c253acd0eb657b711ecd8026371a6ef3c360dd744739cc03.png" alt="picture 4">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>windows搭建FTP服务器（带透穿）</title>
    <url>/2023/02/21/windows%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%B8%A6%E9%80%8F%E7%A9%BF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="windows搭建FTP服务器（带透穿）"><a href="#windows搭建FTP服务器（带透穿）" class="headerlink" title="windows搭建FTP服务器（带透穿）"></a>windows搭建FTP服务器（带透穿）</h1><ul>
<li><a href="https://blog.csdn.net/qq_33322515/article/details/127729960">权限参考</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1722628091716283305&wfr=spider&for=pc">配置参考</a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2></li>
<li><img src="/imgs/8422aa1eaabd424b0cbd8832747cf6f1e6d96566039caa7494c42513f9a9ca71.png" alt="picture 1">  </li>
<li>打开相应的系统功能</li>
<li>然后直接搜索<code>IIS</code><ul>
<li><img src="/imgs/2bb46b8c2c32ef946cbb2cfd5b47cf3e264da35e55b9d786b4185ab2dd5cadb9.png" alt="picture 2">  </li>
</ul>
</li>
<li>打开之后添加<code>FTP站点</code><ul>
<li><img src="/imgs/e0f9234024eaa4f4637ebcb61197b05dbc00edcb4028d9ad5a2088033e898cb1.png" alt="picture 3">  </li>
</ul>
</li>
<li>添加站点名称等<img src="/imgs/5bd5d79fbd0d7b89f81f84030009cf3d487229ba25e28124f0a4fe1d10695faa.png" alt="picture 4">  </li>
<li>此处SSH选择<strong>无</strong><ul>
<li><img src="/imgs/8b63ca4d13c659fe8e978d984444c6f918451ae5528ef4b7c5ba18fbc2a6d35f.png" alt="picture 5">  </li>
</ul>
</li>
<li>然后将内部服务器ip地址的<code>21</code>号端口映射到路由器的21号端口<h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2></li>
<li>找到被共享的目录的属性然后按照图上操作<ul>
<li><img src="/imgs/026ac8d5f121d4c691455f43aaae26a59bd11b972de38eba807762ec7dc2e00e.png" alt="picture 7">  </li>
</ul>
</li>
<li>点击“高级”然后查找<ul>
<li><img src="/imgs/5d0a1a1e705f971e4552db3d892fec341e33c55fc1218aeb48418714b8773c04.png" alt="picture 8">  </li>
<li>找到<u>NETWORK SERVICE</u>将其添加</li>
</ul>
</li>
<li>编辑权限即可</li>
<li><u>然后需要将路由器的21号端口映射到内网计算机的21号端口（21号端口是FTP服务）即可</u></li>
</ul>
<h2 id="更换端口"><a href="#更换端口" class="headerlink" title="更换端口"></a>更换端口</h2><ul>
<li>假如更换成端口20</li>
<li><img src="/imgs/6175ecc7e218f707a01c76e9364f6b87aa2e6495204f7ce492c1dbbe22e71c98.png" alt="picture 20">  </li>
<li>只要手动指定端口，仍然可以登录<ul>
<li><img src="/imgs/35493bde59b1c2b0d86ac2e112d0a63f6234fcf7a153ba4589ceacb577fa1831.png" alt="picture 21">  </li>
</ul>
</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>遇到如图问题<ul>
<li><img src="/imgs/a7db6a6502a2b20d0552fa5b51bf73d0956e4f24bc9461fe34a976e6edbb9fdb.png" alt="picture 9">  </li>
</ul>
</li>
<li>需要关闭服务器端的防火墙<ul>
<li><img src="/imgs/1ddf07c79b607c919c78e8f75b89d8067188975b68751c6f969e53749d0330aa.png" alt="picture 10">  </li>
</ul>
</li>
<li>进入计算机的管理页面查看用户<ul>
<li><img src="/imgs/a60846292a10ba3e430e8045cdd57764d3599e8741ed700d6e16ee6e05d1df2f.png" alt="picture 11">  </li>
<li><img src="/imgs/cea90bd8b5399c7a411483636cb0762ab06390f33483c4cdcd1a6b4c1d8c88aa.png" alt="picture 12">  </li>
</ul>
</li>
<li>编辑授权规则<ul>
<li><img src="/imgs/b61c39095e7b4ed99438a402db16a0504804375100f307643cb63c29919402e5.png" alt="image.png 1">  </li>
<li>在<strong>添加允许规则</strong>位置添加用户<img src="/imgs/6472bd7353ef5a1238d98a66a8c2ec5049028c35b2e2bc78336dce9fd06f7a8e.png" alt="picture 16">  </li>
</ul>
</li>
<li>或者直接在<strong>创建</strong>的时候选择访问的权限（<strong>不要选择所有用户</strong>）<ul>
<li><img src="/imgs/92bd5ae0658551637458a0a39682f191d4f0205f5606ec063e6518134fe16466.png" alt="picture 17">  </li>
</ul>
</li>
<li>最后大功告成<img src="/imgs/2178e69e87d40791d497a3dd974928cc56f6af4c5fcf49f3b2b7f25d35d9e203.png" alt="picture 18">  </li>
</ul>
]]></content>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch训练的模型导出数据或者部署到C++平台</title>
    <url>/2022/06/28/pytorch%E8%AE%AD%E7%BB%83%E7%9A%84%E6%A8%A1%E5%9E%8B%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%88%96%E8%80%85%E9%83%A8%E7%BD%B2%E5%88%B0C-%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="pytorch训练的模型导出网格数据或者部署到C-平台"><a href="#pytorch训练的模型导出网格数据或者部署到C-平台" class="headerlink" title="pytorch训练的模型导出网格数据或者部署到C++平台"></a>pytorch训练的模型导出网格数据或者部署到C++平台</h1><h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><ul>
<li>导出为<code>.csv</code>文件</li>
<li>参考<a href="https://blog.csdn.net/weixin_42464527/article/details/123688909">教程</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义和实例化网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>,<span class="number">30</span>,kernel_size=<span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">4320</span>,<span class="number">100</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)),<span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">4320</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> F.log_softmax(x,dim=<span class="number">1</span>)</span><br><span class="line">network = Net()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存.csv格式的参数</span></span><br><span class="line"><span class="keyword">for</span> name,param <span class="keyword">in</span> network.named_parameters():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;name:<span class="subst">&#123;name&#125;</span>\t\t\t,shape:<span class="subst">&#123;param.shape&#125;</span>&quot;</span>)</span><br><span class="line">    data = pd.DataFrame(param.detach().numpy().reshape(<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">    filename = <span class="string">f&quot;<span class="subst">&#123;name&#125;</span>.csv&quot;</span></span><br><span class="line">    data.to_csv(<span class="string">f&quot;./<span class="subst">&#123;filename&#125;</span>&quot;</span>, index=<span class="literal">False</span>, header=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用Libtorch直接导出C-模型"><a href="#使用Libtorch直接导出C-模型" class="headerlink" title="使用Libtorch直接导出C++模型"></a>使用Libtorch直接导出C++模型</h2><ul>
<li><p>参考 csdn<a href="https://blog.csdn.net/weixin_43917589/article/details/124509964">文章</a></p>
</li>
<li><p>参考 <a href="https://zhuanlan.zhihu.com/p/263626686?ivk_sa=1024320u">知乎文章</a> 和 <a href="https://zhuanlan.zhihu.com/p/146453159">文章</a></p>
</li>
<li><p>部署 <a href="https://blog.csdn.net/qq_40198848/article/details/112872844?spm=1001.2014.3001.5506">yoloV5</a></p>
</li>
<li><p><a href="https://pytorch.org/tutorials/advanced/cpp_export.html">官方教程</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>x86平台上向量化编程及实验</title>
    <url>/2023/08/01/x86%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%90%91%E9%87%8F%E5%8C%96%E7%BC%96%E7%A8%8B%E5%8F%8A%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="向量化编程"><a href="#向量化编程" class="headerlink" title="向量化编程"></a>向量化编程</h2><ul>
<li>使用向量化即“批量操作”，批量操作在物理生活中也很常见，在计算机中最常见的执行模型就是SIMD（Single Instruction Multiple Data），即对批量的数据同时进行同样的操作以提高效率。</li>
<li><a href="https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html">Intel向量化操作手册</a></li>
<li><a href="https://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX">Intel向量化编程示例</a><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;immintrin.h&gt;</span>  <span class="comment">// Header for AVX intrinsics</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">dot_productVec</span><span class="params">(<span class="keyword">float</span>* a, <span class="keyword">float</span>* b, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    __m256 sum = _mm256_setzero_ps();</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i += <span class="number">8</span>) &#123;</span><br><span class="line">        __m256 vecA = _mm256_loadu_ps(&amp;a[i]);</span><br><span class="line">        __m256 vecB = _mm256_loadu_ps(&amp;b[i]);</span><br><span class="line">        __m256 mul = _mm256_mul_ps(vecA, vecB);</span><br><span class="line">        sum = _mm256_add_ps(sum, mul);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sum the packed floats</span></span><br><span class="line">    <span class="keyword">float</span> result[<span class="number">8</span>];</span><br><span class="line">    _mm256_storeu_ps(result, sum);</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>] + result[<span class="number">1</span>] + result[<span class="number">2</span>] + result[<span class="number">3</span>] + result[<span class="number">4</span>] + result[<span class="number">5</span>] + result[<span class="number">6</span>] + result[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">dot_productLoop</span><span class="params">(<span class="keyword">float</span>* a, <span class="keyword">float</span>* b, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;length;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        i+=a[j]*b[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to get the current time in nanoseconds</span></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">get_time_ns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">ts</span>;</span></span><br><span class="line">    clock_gettime(CLOCK_MONOTONIC, &amp;ts);</span><br><span class="line">    <span class="keyword">return</span> ts.tv_sec * <span class="number">1000000000LL</span> + ts.tv_nsec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runTrial</span><span class="params">(<span class="keyword">int</span> length, <span class="keyword">int64_t</span>* tVec, <span class="keyword">int64_t</span>* tLoop)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;*tVec = <span class="number">0</span>;*tLoop = <span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span>* a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>)*length);</span><br><span class="line">    <span class="keyword">float</span>* b = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">float</span>)*length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int length = sizeof(a) / sizeof(float);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = (<span class="keyword">float</span>)i/<span class="number">10</span>;</span><br><span class="line">        b[i] = (<span class="keyword">float</span>)(length-i)/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int64_t</span> tVec1, tVec2, tLoop1, tLoop2 = <span class="number">0</span>;</span><br><span class="line">    tVec1 = get_time_ns();</span><br><span class="line">    <span class="keyword">float</span> result = dot_productVec(a, b, length);</span><br><span class="line">    tVec2 = get_time_ns();</span><br><span class="line">    tLoop1 = get_time_ns();</span><br><span class="line">    <span class="keyword">float</span> result2 = dot_productLoop(a, b, length);</span><br><span class="line">    tLoop2 = get_time_ns();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">    *tVec = tVec2 - tVec1;</span><br><span class="line">    *tLoop = tLoop2 - tLoop1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxCnt = <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">int64_t</span> tVecs[maxCnt];</span><br><span class="line">    <span class="keyword">int64_t</span> tLoops[maxCnt];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxCnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        runTrial(i, &amp;tVecs[i], &amp;tLoops[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;length %d completed!\nVec: %ld, Loop: %ld\n&quot;</span>, i, tVecs[i], tLoops[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FILE* file;</span><br><span class="line">    file = fopen(<span class="string">&quot;data.csv&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;tVec,tLoop\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxCnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;%ld, %ld\n&quot;</span>, tVecs[i], tLoops[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fprintf(file, &quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// for(int i = 0;i&lt;maxCnt; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     fprintf(file, &quot;%ld, &quot;, tLoops[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fprintf(file, &quot;\n&quot;);</span></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编译指令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc  -o dot_product vecCalc.c -O0 -mavx -lrt</span><br></pre></td></tr></table></figure>
<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2></li>
<li><img src="/imgs/0125a1119e3dc0117d438656545280dde59aa811769c00b583775a4e0a1be4e9.png" alt="picture 0">  </li>
<li>上图是向量化计算和纯循环计算的时间比较，可见有一些毛刺，尚且不清楚原因</li>
<li>下图是循环计算的时间/向量化计算的时间之商<h2 id="结果拟合"><a href="#结果拟合" class="headerlink" title="结果拟合"></a>结果拟合</h2></li>
<li>向量化计算的斜率为<strong>0.9288296964491878</strong>，y轴的截距为172.55817372525428</li>
<li>循环计算的斜率为<strong>5.851229649697184</strong>， y轴截距为236.63629058187928</li>
<li>可见循环计算的斜率几乎是向量化计算的<strong>6.30</strong>倍</li>
<li><img src="/imgs/24a5b8225c2975e6c9cbd7e00bce4d2abb49a2ad131b9549db8aaaa7e31b5cc4.png" alt="picture 1">  </li>
</ul>
]]></content>
      <tags>
        <tag>c</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2的Python以及增加远程用交互界面</title>
    <url>/2022/06/22/wsl2%E7%9A%84Python%E4%BB%A5%E5%8F%8A%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%94%A8%E4%BA%A4%E4%BA%92%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="wsl2的Python以及增加远程用交互界面"><a href="#wsl2的Python以及增加远程用交互界面" class="headerlink" title="wsl2的Python以及增加远程用交互界面"></a>wsl2的Python以及增加远程用交互界面</h1><h2 id="wsl2的pip相关问题以及安装问题"><a href="#wsl2的pip相关问题以及安装问题" class="headerlink" title="wsl2的pip相关问题以及安装问题"></a>wsl2的pip相关问题以及安装问题</h2><ul>
<li>wsl2（Ubuntu20.04）有时候会出现一些软件包安装不上的问题，或者是安装某些包的时候出现<code>Python.h</code>无法编译，建议安装<code>python3-dev</code>等情况，此时并不需要安装上面提示安装的内容，而是系统自身的python出现了问题。此时只需要通过以下的命令<strong>彻底卸载Python</strong>然后再重新安装python3和pip即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudop apt-get remove python3-pip</span><br><span class="line">sudo apt-get remove python3.8 #或者其他版本</span><br><span class="line">sudo apt-get purge python3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>直到在命令行输入<code>python3</code>不再自动进入python互动命令行模式即可</p>
</li>
<li><p>此外，假如安装的时候持续出现安装问题，比如依赖包不能解决的问题，可能是软件源的问题。此时建议使用清华源，也就是</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<h2 id="WSL的Ubuntu20-04配置远程桌面"><a href="#WSL的Ubuntu20-04配置远程桌面" class="headerlink" title="WSL的Ubuntu20.04配置远程桌面"></a>WSL的Ubuntu20.04配置远程桌面</h2><p>在完成上述的<strong>换源</strong>等步骤之后，开始为Ubuntu20.04配置远程桌面。参考这篇<a href="https://blog.csdn.net/qq_43878324/article/details/113616883?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-113616883-null-119135374.pc_relevant_downloadblacklistv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-113616883-null-119135374.pc_relevant_downloadblacklistv1&utm_relevant_index=2">WSL2 Ubuntu图形界面安装与远程桌面</a>和<a href="https://www.iamkyun.com/2020/07/25/WSL2-Ubuntu-GUI/">在Windows 10 WSL2中使用图形界面（GUI）</a></p>
<ul>
<li>安装桌面环境</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install ubuntu-desktop</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#KDE</span></span><br><span class="line">sudo apt install kubuntu-desktop</span><br><span class="line"></span><br><span class="line"><span class="comment">#Xfce</span></span><br><span class="line">sudo apt install xubuntu-desktop</span><br></pre></td></tr></table></figure>

<ul>
<li>安装xrdp</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt purge xrdp</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install -y xrdp</span><br></pre></td></tr></table></figure>

<ul>
<li>（<strong>非必须</strong>）更改<code>XRDP</code>的一些配置：增加bpp(bits per pixel)，让远程连接质量更好</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/max_bpp=32/#max_bpp=32\nmax_bpp=128/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/xserverbpp=24/#xserverbpp=24\nxserverbpp=128/g&#x27;</span> /etc/xrdp/xrdp.ini</span><br><span class="line"><span class="built_in">echo</span> xfce4-session &gt; ~/.xsession</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来更改<code>XRDP</code>的启动脚本，让它同时启动<code>Xfce</code></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>把文件的最后几行改成这样：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test -x /etc/X11/Xsession &amp;&amp; exec /etc/X11/Xsession</span></span><br><span class="line"><span class="comment"># exec /bin/sh /etc/X11/Xsession</span></span><br><span class="line"><span class="comment"># xfce</span></span><br><span class="line">startxfce4</span><br></pre></td></tr></table></figure>

<ul>
<li>启动<code>xrdp</code></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp start</span><br></pre></td></tr></table></figure>

<ul>
<li>默认端口为<code>3389</code></li>
<li>在wsl上安装<code>net-tools</code>，然后使用<code>ifconfig</code>命令查看wsl 的IP地址，然后使用Windows远程桌面链接即可</li>
<li><img src="/imgs/12D00CBEE77BABCD02C2EF57A3947A30.jpg" alt="img"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>yolo学习</title>
    <url>/2023/02/15/yolo%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="yolo"><a href="#yolo" class="headerlink" title="yolo"></a>yolo</h1><ul>
<li><a href="https://www.bilibili.com/video/BV1XW4y1a7f4?p=3&vd_source=2ad101445b39a9dac0437fdcd408895e">链接</a><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2></li>
<li><code>recall</code>的意思是图中有多个物体的情况下，检测出来几个，<u>是不是都检测到了</u>，与单个物体的检测精度一定程度上是矛盾的</li>
<li>如何计算map值？<ul>
<li><img src="/imgs/f2ac77ad1f300ceeb12d960b2d783ca6bc27890c09260406411abc07927a178b.png" alt="picture 1">  </li>
<li><img src="/imgs/9adbe17541f64fa45e32075ad0aa51fd3e53c90f00db60a2599c10b2629a1491.png" alt="picture 2">  </li>
<li>TP是真阳，FP是假阳，FN是假阴，TN是真阴</li>
<li>precision是准确性，就是真阳性和假阳性中的真阳性比例</li>
<li>recall是召回率，就是真阳性和假阴性中的真阳性比重，就是所有目标中到底有多大比例是正确的找到了的</li>
<li><code>map</code>值就是以精度和召回率为横纵坐标，取precision最大值之后画的图<strong>与坐标轴围成的面积</strong><ul>
<li><img src="/imgs/bc31a50f5578d4b0e6d1c048e55eb3e31d5d8256e70e681430d3058296539b29.png" alt="picture 3">  </li>
</ul>
</li>
<li>各种框(anchor box等)的<a href="https://blog.csdn.net/qq_46110834/article/details/111410923">介绍</a></li>
<li>此处的anchor框是在最终13*13的特征图中的初始框的位置和大小，需要先调整成正确的框，然后按照比例换算回原来的图片中的框<img src="/imgs/5860584e70659abda7452430f8bfb458380ebeb6ef851acd370703521c4b23d6.png" alt="picture 4">  <h3 id="YOLO-V3-针对不同大小的物体的改进"><a href="#YOLO-V3-针对不同大小的物体的改进" class="headerlink" title="YOLO V3 针对不同大小的物体的改进"></a>YOLO V3 针对不同大小的物体的改进</h3></li>
</ul>
</li>
<li><img src="/imgs/debc8519b0b11604ca6f2c8c73fe70bd006f1bf3e9f1d02f5b4cd11e27e10404.png" alt="picture 5">  <ul>
<li>利用不同感受野的卷积分别预测不同大小的目标物体</li>
<li>三种不同大小的特征图分别对应三种不同的框，做到九种不同的形状</li>
</ul>
</li>
<li>此处的26<em>26的图的特征是13</em>13的图进行插值得到26*26然后融合得到的<ul>
<li><img src="/imgs/bb79ec3d85f4cb0a586a7a45946fd1187b65f5bab92ac42b99115f39db516291.png" alt="picture 6">  </li>
</ul>
</li>
<li>残差链接：<ul>
<li><img src="/imgs/ebd8e8003e5fd991bc9d397dd0f66141f5e0f8fd6b239f4f19397245a98afdc2.png" alt="picture 7">  </li>
<li>实际上就是对于中间的两层， 假如加上这两层的效果变好了，那么会使得这两层具有正常的参数。但是假如加上这两层效果反而变差了，那么这两层的参数会逐渐趋向于0，使得这两层失去价值，<u>最终结果不可能比原来差</u></li>
<li>yolo V3不需要池化层，通过stride增加为2将其特征图缩小</li>
</ul>
</li>
<li>网络的输出类型<ul>
<li><img src="/imgs/87257f87e3f2fa0e00cb7659e214c09fefa9bc66966991ff14f6e5d1ec57ece9.png" alt="picture 8">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的三种遍历的非递归实现</title>
    <url>/2022/07/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="二叉树的三种遍历的非递归实现"><a href="#二叉树的三种遍历的非递归实现" class="headerlink" title="二叉树的三种遍历的非递归实现"></a>二叉树的三种遍历的非递归实现</h1><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><ul>
<li>主要思路是先将根节点入栈，然后每次循环从栈顶取出元素输出，同时将该元素的<strong>右节点</strong>和<strong>左节点</strong>压入栈中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        stack&lt;TreeNode*&gt; s;</span><br><span class="line">        s.<span class="built_in">push</span>(root);</span><br><span class="line">        TreeNode* temp;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            temp = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            ret.<span class="built_in">push_back</span>(temp-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;right)s.<span class="built_in">push</span>(temp-&gt;right);</span><br><span class="line">            <span class="keyword">if</span>(temp-&gt;left)s.<span class="built_in">push</span>(temp-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2></li>
<li>主要思路是新建一个结构体，结构体包括二叉树的节点指针信息和是否被访问过的标记信息，标记默认是<code>false</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">nodeStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TreeNode* p; </span><br><span class="line">    <span class="keyword">bool</span> flg; </span><br><span class="line">    <span class="built_in">nodeStruct</span>(TreeNode* ptr):<span class="built_in">p</span>(ptr),<span class="built_in">flg</span>(<span class="literal">false</span>)&#123;&#125;    </span><br><span class="line">    <span class="built_in">nodeStruct</span>(TreeNode* ptr, <span class="keyword">bool</span> flag):<span class="built_in">p</span>(ptr),<span class="built_in">flg</span>(flag)&#123;&#125;   </span><br><span class="line">&#125; nodeS;</span><br></pre></td></tr></table></figure></li>
<li>每次从栈顶取出一个元素，如果该元素的标记提示被访问过，那么直接将元素输出</li>
<li>如果该元素没有被访问过，那么现将该元素的访问标记置为<code>true</code>，然后将该元素的右子节点压入栈中，然后将节点自己压入栈中，最后将左子节点压入栈中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">nodeStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TreeNode* p; </span><br><span class="line">    <span class="keyword">bool</span> flg; </span><br><span class="line">    <span class="built_in">nodeStruct</span>(TreeNode* ptr):<span class="built_in">p</span>(ptr),<span class="built_in">flg</span>(<span class="literal">false</span>)&#123;&#125;    </span><br><span class="line">    <span class="built_in">nodeStruct</span>(TreeNode* ptr, <span class="keyword">bool</span> flag):<span class="built_in">p</span>(ptr),<span class="built_in">flg</span>(flag)&#123;&#125;   </span><br><span class="line">&#125; nodeS;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        stack&lt;nodeS&gt; s;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(root));</span><br><span class="line">        <span class="function">nodeS <span class="title">temp</span><span class="params">(<span class="literal">NULL</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            temp = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(!temp.flg)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(temp.p-&gt;right)s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(temp.p-&gt;right));</span><br><span class="line">                temp = <span class="built_in">nodeS</span>(temp.p, <span class="literal">true</span>);</span><br><span class="line">                s.<span class="built_in">push</span>(temp);</span><br><span class="line">                <span class="keyword">if</span>(temp.p-&gt;left)s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(temp.p-&gt;left));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(temp.p-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>##后序遍历</p>
<ul>
<li>结构体方法同上，跟之前的主要区别是针对没有访问过的节点需要<strong>先将自己</strong>压入栈中，然后再将<strong>右节点</strong>和<strong>左节点</strong>压入栈中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class"><span class="title">stackUnit</span>&#123;</span></span><br><span class="line">    TreeNode* p;</span><br><span class="line">    <span class="keyword">bool</span> flg;</span><br><span class="line">    <span class="built_in">stackUnit</span>(TreeNode* ptr, <span class="keyword">bool</span> flag):<span class="built_in">p</span>(ptr), <span class="built_in">flg</span>(flag)&#123;&#125;</span><br><span class="line">&#125; nodeS;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">        stack&lt;nodeS&gt; s;</span><br><span class="line">        s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(root, <span class="literal">false</span>));</span><br><span class="line">        <span class="function">nodeS <span class="title">temp</span><span class="params">(<span class="literal">NULL</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            temp = s.<span class="built_in">top</span>();</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(temp.flg)</span><br><span class="line">            &#123;</span><br><span class="line">                v.<span class="built_in">push_back</span>(temp.p-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(temp.p, <span class="literal">true</span>));</span><br><span class="line">                <span class="keyword">if</span>(temp.p-&gt;right)s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(temp.p-&gt;right,<span class="literal">false</span>));</span><br><span class="line">                <span class="keyword">if</span>(temp.p-&gt;left)s.<span class="built_in">push</span>(<span class="built_in">nodeS</span>(temp.p-&gt;left,<span class="literal">false</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>算法</tag>
        <tag>leetode</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算相关</title>
    <url>/2022/08/29/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="用位运算实现两个数字比较大小"><a href="#用位运算实现两个数字比较大小" class="headerlink" title="用位运算实现两个数字比较大小"></a>用位运算实现两个数字比较大小</h2><ul>
<li><img src="/imgs/5b30396bc4c925c4a2d0f65d7a86de89dcccc7806b6e29840618d0ae7245663a.png" alt="图 10">  </li>
<li><img src="/imgs/184cb7228de5e0b605f23c4c637483504d7df504112e2c8a94421530324886d9.png" alt="图 11">  </li>
<li><img src="/imgs/668bdcd3d4fdc36cbd51026abda0e132eb56f7f9be6c169cf611375060bcf97d.png" alt="图 12">  </li>
<li>具体操作为获得a, b和a与b的差值的符号，然后<u>利用difSab和sameSab这两个互斥（一个为1的时候另一个必然是0）的变量实现if和else的功能</u></li>
<li>利用<strong>加号左右两侧互斥</strong>的变量实现if else 的功能<h2 id="取出数字最右侧位置的1"><a href="#取出数字最右侧位置的1" class="headerlink" title="取出数字最右侧位置的1"></a>取出数字最右侧位置的1</h2><code>num &amp; (~num + 1)</code><h2 id="位运算加法实现"><a href="#位运算加法实现" class="headerlink" title="位运算加法实现"></a>位运算加法实现</h2></li>
<li><img src="/imgs/4adcee55f38c883584f3880459a9d6ccf2f0bc8d8715703b710e65b4d6dec76a.png" alt="图 2">  </li>
<li>a和b异或，得到<strong>无进位加法</strong>结果</li>
<li>a和b与的结果左移一位，得到<strong>进位的位置</strong>，二者相加</li>
<li>然后再把进位和无进位加法的结果求异或、与，左移一位，然后相加，重复上述步骤，<u>直到没有进位</u>为止<h2 id="位运算减法实现"><a href="#位运算减法实现" class="headerlink" title="位运算减法实现"></a>位运算减法实现</h2></li>
<li>加一个数的相反数</li>
<li>相反数等于一个数字取反再+1<h2 id="位运算乘法"><a href="#位运算乘法" class="headerlink" title="位运算乘法"></a>位运算乘法</h2></li>
<li>假如一个数字二进制第k位是1，那么就将原始数字向左移k位，从k=0开始直到最大位，累加即可</li>
<li><img src="/imgs/e5d721b23b0fd385e34a20224ccd1789cf6dd094b6a6c611fdb679d46dd72bed.png" alt="图 1">  <h2 id="位运算除法"><a href="#位运算除法" class="headerlink" title="位运算除法"></a>位运算除法</h2></li>
<li>a/b</li>
<li>b<u>尽可能左移，但是不能超过a</u>，假设移动了k1位，得到b’</li>
<li>那么除法的第k位一定是1</li>
<li>计算此时a-b’</li>
<li>然后再次将b左移，但是不超过上次a-b’的结果，移动了k2位</li>
<li>除法结果的第k2位也是1</li>
<li>循环往复</li>
<li><strong>实际操作是a右移k位，判断是否比b大</strong>，原因是<u>b左移可能溢出熬制不安全，符号位改变等等</u></li>
<li><img src="/imgs/6ca3c8346b488611c993632c5fe8dfc65440940d700324d0b8ef35bb275b6b69.png" alt="图 3">  </li>
<li>最后假如有余数的话丢弃（就是b不移位也不能减）</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CubeIDE配置JLink和项目</title>
    <url>/2021/12/20/%E4%BD%BF%E7%94%A8CubeIDE%E9%85%8D%E7%BD%AEJLink%E5%92%8C%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="使用CubeIDE配置JLink和项目"><a href="#使用CubeIDE配置JLink和项目" class="headerlink" title="使用CubeIDE配置JLink和项目"></a>使用CubeIDE配置JLink和项目</h1><h2 id="配置Cube"><a href="#配置Cube" class="headerlink" title="配置Cube"></a>配置Cube</h2><ul>
<li><p><img src="/imgs/image-20211220210102796.png" alt="image-20211220210102796"></p>
</li>
<li><p>新建项目，然后在Cube中配置相关的内容</p>
</li>
<li><p>选择填写相关的信息，名称等</p>
</li>
<li><p><img src="/imgs/image-20211220210224776.png" alt="image-20211220210224776"></p>
</li>
<li><p>此处放大窗口</p>
</li>
<li><p><img src="/imgs/image-20211220211956239.png" alt="image-20211220211956239"></p>
</li>
<li><p>设置好之后，右键创建代码</p>
</li>
<li><p><img src="/imgs/image-20211220212713729.png" alt="image-20211220212713729"></p>
</li>
<li><p>假如此时不能点击<code>generate code</code>的话，右键选择<code>build project</code>然后在提示创建代码的时候选择ok，或者是点击cancel然后再次右键，可以看到<code>generate code</code>可以使用了</p>
</li>
</ul>
<h2 id="配置J-Link"><a href="#配置J-Link" class="headerlink" title="配置J-Link"></a>配置J-Link</h2><ul>
<li><p><img src="/imgs/image-20211220210941718.png" alt="image-20211220210941718"></p>
</li>
<li><p>然后点击这里</p>
</li>
<li><p><img src="/imgs/image-20211220213008029.png" alt="image-20211220213008029"></p>
</li>
<li><p>然后选择</p>
</li>
<li><p><img src="/imgs/image-20211220213904526.png" alt="image-20211220213904526"></p>
</li>
<li><p>此处选择</p>
</li>
<li><p><img src="/imgs/image-20211220215318321.png" alt="image-20211220215318321"></p>
</li>
<li><p>否则会说program file does not exist的错误</p>
</li>
<li><p>注意include 文件的时候需要包括上一级目录到系统的include路径下才行，比如</p>
</li>
<li><p><img src="/imgs/image-20211220215431799.png" alt="image-20211220215431799"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>一致性哈希</title>
    <url>/2022/08/26/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/</url>
    <content><![CDATA[<h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><ul>
<li><p>哈希函数的输入数据一般是<strong>巨量</strong>的，输出数据的的范围往往是<strong>有限</strong>的</p>
</li>
<li><p>哈希函数的输出存在<strong>均匀性</strong>，也就是无论输入是什么，输入是否接近，输出均匀分布在整个输出域之中。</p>
<h2 id="哈希表处理冲突位置（映射）的方法"><a href="#哈希表处理冲突位置（映射）的方法" class="headerlink" title="哈希表处理冲突位置（映射）的方法"></a>哈希表处理冲突位置（映射）的方法</h2></li>
<li><p>链接法：</p>
<ul>
<li>对于经过哈希函数得到<strong>同一个index</strong>的数据，利用链表（或者类似的形式）将其串联起来，寻找的时候先进行哈希得到index，然后再该index对应的位置逐个遍历链表得到要找的对象</li>
</ul>
</li>
<li><p><em><strong>其他方法</strong></em>参考链接 <a href="https://blog.csdn.net/qq_26567507/article/details/80167351">参考</a></p>
<h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2></li>
<li><p>用在给服务器分配数据问题减少迁移数据的工作量</p>
</li>
<li><p>一般情况下将输入数据的<code>key</code>值进行哈希，哈希得到的结果对服务器的数量取模，按照取得的结果分配到不同的服务器上，但是此时假如增加或者减少了服务器，就会因为取模的数字变化导致整个系统的哈希取模的数字都需要重新计算和分配，进而整体前迁移，工作量很大</p>
</li>
<li><p>引入一致性哈希得目的是减少上文描述得<em>前移工作量</em></p>
</li>
<li><p><img src="/imgs/a906dd8694b2b5033a83f841abd7919f93a7e4dfb74e15f6a7af6663c9ba82d3.png" alt="图 1">  </p>
</li>
<li><p>将三个机器的特征名称进行哈希，哈希过后将三个机器放在一个由哈希结果范围组成的环上（最大值和最小值头尾相接）。此时得到一个数据，同样将数据进行哈希，哈希得到的结果在环上找距离最近（此处的算法可以更换）的服务器存储该数据，假如数据的哈希值比所有服务器的哈希值都大的话就找哈希值最小的服务器，因为大小首尾相接。</p>
<h3 id="增加机器"><a href="#增加机器" class="headerlink" title="增加机器"></a>增加机器</h3></li>
<li><p><img src="/imgs/c482331ba4e5bc111d2b96bf43bf9e04837530b69657f089fed48fda2b8626e3.png" alt="图 2">  </p>
</li>
<li><p>假如此时需要增加M4，那么只需要将M3和M4之间的数据迁移到M4即可，不需要将所有数据进行重新计算迁移。</p>
</li>
<li><p>潜在问题：</p>
<ul>
<li>一开始的时候因为机器的地址是哈希得到的，未必均衡</li>
<li>增加机器之后可能导致局部机器比较密集，同样负载不均衡</li>
</ul>
</li>
<li><p>解决上述问题的方法：<strong>虚拟节点技术</strong></p>
<ul>
<li><p><img src="/imgs/8e91c4642b1ac4809f2c2adda961253bb18c6d7baaf8e888115f4cc5a4fde64c.png" alt="图 3">  </p>
</li>
<li><p>给每个服务器分配多个用于哈希的序列，每个服务器在环上具有<strong>多个</strong>对应的序列哈希得到的节点位置，<strong>相对均匀</strong>，同时也比较方便虚拟节点之间的数据迁移</p>
</li>
<li><p>不同的机器可以根据机器性能和状态的不同分配<strong>不同数量</strong>的虚拟节点，实现对于负载比例的不同分配。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cython加速python程序计算</title>
    <url>/2023/10/18/%E4%BD%BF%E7%94%A8Cython%E5%8A%A0%E9%80%9Fpython%E7%A8%8B%E5%BA%8F%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul>
<li><a href="https://cython.readthedocs.io/en/latest/">cython</a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2></li>
<li><a href="https://www.cnblogs.com/traditional/p/13285339.html">参考（详细）</a></li>
<li>定义一个<code>.pyx</code>文件<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># try111.pyx</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello_to_c</span>(<span class="params">m</span>):</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="comment"># print(t2-t1)</span></span><br><span class="line">    <span class="keyword">return</span> t2-t1</span><br></pre></td></tr></table></figure></li>
<li>创建<code>setup.py</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup.py</span></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;Hello world app&#x27;</span>,</span><br><span class="line">    ext_modules=cythonize(<span class="string">&quot;try111.pyx&quot;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>使用cython<strong>编译</strong>文件为一个<code>.so</code>模块</li>
<li><code>python3 setup.py build_ext --inplace</code></li>
<li>直接调用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> try111 <span class="keyword">import</span> say_hello_to_c</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello_to_py</span>(<span class="params">m</span>):</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="comment"># print(t2-t1)</span></span><br><span class="line">    <span class="keyword">return</span> t2-t1</span><br><span class="line"></span><br><span class="line">t1s = []</span><br><span class="line">t2s = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">100</span>)):</span><br><span class="line">    t1s.append(say_hello_to_c(<span class="number">10000000</span>))</span><br><span class="line">    t2s.append(say_hello_to_py(<span class="number">10000000</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(t1s, label=<span class="string">&quot;cython&quot;</span>)</span><br><span class="line">plt.plot(t2s, label=<span class="string">&quot;python&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.ylabel(<span class="string">&quot;time elapsed: s&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;count of try&quot;</span>)</span><br><span class="line">avg1 = <span class="built_in">sum</span>(t1s)/<span class="built_in">len</span>(t1s)</span><br><span class="line">avg2 = <span class="built_in">sum</span>(t2s)/<span class="built_in">len</span>(t2s)</span><br><span class="line">plt.title(<span class="string">&quot;Cython average time: %03f, pythonaverage time: %03f&quot;</span>% (avg1, avg2))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
<li><img src="/imgs/ac34bc5371e0a7c44304670157611ef0717929dd11f3237001517566579a2bf6.png" alt="picture 0">  <ul>
<li>可见cython有一定的速度优势<h3 id="编译单个文件"><a href="#编译单个文件" class="headerlink" title="编译单个文件"></a>编译单个文件</h3></li>
</ul>
</li>
<li>使用<code>cythonize</code>直接编译</li>
<li>使用方法<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -X NAME=VALUE,..., --directive NAME=VALUE,...</span><br><span class="line">                        <span class="built_in">set</span> a compiler directive</span><br><span class="line">  -E NAME=VALUE,..., --compile-time-env NAME=VALUE,...</span><br><span class="line">                        <span class="built_in">set</span> a compile time environment variable</span><br><span class="line">  -s NAME=VALUE, --option NAME=VALUE</span><br><span class="line">                        <span class="built_in">set</span> a cythonize option</span><br><span class="line">  -2                    use Python 2 syntax mode by default</span><br><span class="line">  -3                    use Python 3 syntax mode by default</span><br><span class="line">  --3str                use Python 3 syntax mode by default</span><br><span class="line">  -+, --cplus           Compile as C++ rather than C</span><br><span class="line">  -a, --annotate        Produce a colorized HTML version of the <span class="built_in">source</span>.</span><br><span class="line">  --annotate-fullc      Produce a colorized HTML version of the <span class="built_in">source</span> <span class="built_in">which</span> includes entire generated C/C++-code.</span><br><span class="line">  -x PATTERN, --exclude PATTERN</span><br><span class="line">                        exclude certain file patterns from the compilation</span><br><span class="line">  -b, --build           build extension modules using distutils/setuptools</span><br><span class="line">  -i, --inplace         build extension modules <span class="keyword">in</span> place using distutils/setuptools (implies -b)</span><br><span class="line">  -j N, --parallel N    run builds <span class="keyword">in</span> N parallel <span class="built_in">jobs</span> (default: 18)</span><br><span class="line">  -f, --force           force recompilation</span><br><span class="line">  -q, --quiet           be less verbose during compilation</span><br><span class="line">  --lenient             increase Python compatibility by ignoring some compile time errors</span><br><span class="line">  -k, --keep-going      compile as much as possible, ignore compilation failures</span><br><span class="line">  --no-docstrings       strip docstrings</span><br><span class="line">  -M, --depfile         produce depfiles <span class="keyword">for</span> the sources</span><br></pre></td></tr></table></figure></li>
<li>编译C++文件的时候需要加上<code>--cplus</code></li>
<li>比如<code>cythonize -i &lt;pyx文件名&gt; -j &lt;并行的线程数量&gt;</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tryCpp.pyx</span></span><br><span class="line"><span class="comment"># distutils: language = c++</span></span><br><span class="line"><span class="keyword">from</span> libcpp.vector cimport vector</span><br><span class="line"><span class="keyword">from</span> libcpp.<span class="built_in">map</span> cimport <span class="built_in">map</span></span><br><span class="line"><span class="keyword">from</span> libcpp.string cimport string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vectorCalc</span>(<span class="params"><span class="built_in">int</span> num</span>):</span></span><br><span class="line">    cdef <span class="built_in">int</span> cnt, i, j</span><br><span class="line">    cdef vector[<span class="built_in">int</span>] p</span><br><span class="line">    cdef <span class="built_in">map</span></span><br><span class="line"></span><br><span class="line">    p.reserve(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num*<span class="number">5</span>):</span><br><span class="line">        p.push_back(i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(num*<span class="number">5</span>):</span><br><span class="line">        p.pop_back()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">useMap</span>(<span class="params"><span class="built_in">int</span> cnt</span>):</span></span><br><span class="line">    cdef <span class="built_in">int</span> i, j</span><br><span class="line">    cdef <span class="built_in">map</span>[<span class="built_in">int</span>, string] testMap</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">        testMap[i] = &lt;string&gt;(<span class="string">b&quot;This is %d&quot;</span> % i)</span><br><span class="line">    <span class="keyword">return</span> testMap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是另一种方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">useMap</span>(<span class="params"><span class="built_in">int</span> cnt</span>):</span></span><br><span class="line">    cdef <span class="built_in">int</span> i, j</span><br><span class="line">    cdef <span class="built_in">map</span>[<span class="built_in">int</span>, string] testMap</span><br><span class="line">    cdef pair[<span class="built_in">int</span>, string] p</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">        <span class="comment"># testMap[i] = &lt;string&gt;(b&quot;This is %d&quot; % i)</span></span><br><span class="line">        p = (i, &lt;string&gt;(<span class="string">b&quot;This is %d&quot;</span> % i))</span><br><span class="line">        testMap.insert(p)</span><br><span class="line">    <span class="keyword">return</span> testMap</span><br></pre></td></tr></table></figure></li>
<li><code># distutils: language = c++</code>的意思是告诉cython这个文件需要做成Cpp文件</li>
<li>从上述代码可以看出，可以在cython中使用cpp标准库中的文件<h3 id="在cython中使用C-中编写的类"><a href="#在cython中使用C-中编写的类" class="headerlink" title="在cython中使用C++中编写的类"></a>在cython中使用C++中编写的类</h3></li>
<li><a href="https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html#standard-library">教程</a></li>
<li>编写头文件和Cpp文件<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tryCLass.h</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> TRYCLASS</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TRYCLASS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> try111</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">tryClass</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">tryClass</span>(<span class="keyword">int</span> m, <span class="keyword">int</span> n);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="built_in">tryClass</span>();</span><br><span class="line"></span><br><span class="line">        ~<span class="built_in">tryClass</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//tryCLass.cpp</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;tryClass.h&quot;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">try111::tryClass::<span class="built_in">tryClass</span>(<span class="keyword">int</span> m, <span class="keyword">int</span> n):<span class="built_in">i</span>(m),<span class="built_in">j</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;try Class created, i:&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;j:&quot;</span>&lt;&lt;j&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try111::tryClass::<span class="built_in">tryClass</span>():<span class="built_in">i</span>(<span class="number">1</span>),<span class="built_in">j</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;try Class created&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try111::tryClass::~<span class="built_in">tryClass</span>()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;try Class destroyed, i:&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;j:&quot;</span>&lt;&lt;j&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在<code>.pxd</code>文件中声明这个文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tryClass.pxd</span></span><br><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;tryClass.cpp&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;tryClass.h&quot;</span> namespace <span class="string">&quot;try111&quot;</span>:</span><br><span class="line">    cdef cppclass tryClass:</span><br><span class="line">        tryClass(<span class="built_in">int</span> i, <span class="built_in">int</span> j) <span class="keyword">except</span> +</span><br><span class="line">        tryClass() <span class="keyword">except</span> +</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在<code>.pyx</code>文件中引用这个文件中的类</li>
<li><code>.pyx</code>的第一行要添加<code># distutils: language = c++</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tryImp.pyx</span></span><br><span class="line"><span class="comment"># distutils: language = c++</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tryCLass cimport tryClass</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tryObj</span>():</span></span><br><span class="line">    heapObj = new tryClass(<span class="number">99</span>, <span class="number">98</span>)</span><br><span class="line">    cdef tryClass ttt = tryClass(<span class="number">97</span>, <span class="number">96</span>)</span><br><span class="line">    <span class="keyword">del</span> heapObj</span><br></pre></td></tr></table></figure></li>
<li>编译<code>cythonize -i -f tryImp.pyx -j8</code></li>
<li>在python文件中调用<code>.pyx</code>文件中的函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> tryImp <span class="keyword">import</span> *</span><br><span class="line">tryObj()</span><br></pre></td></tr></table></figure>
<h3 id="cython中使用C-开发的函数"><a href="#cython中使用C-开发的函数" class="headerlink" title="cython中使用C++开发的函数"></a>cython中使用C++开发的函数</h3></li>
<li>类似的，直接在cpp文件中定义一个函数<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// func.cpp</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;func:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout&lt;&lt;i&lt;&lt;std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用<code>.pxd</code>文件包装<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># impFunc.pxd</span></span><br><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;func.cpp&quot;</span>:</span><br><span class="line">    void func(<span class="built_in">int</span> cnt)</span><br></pre></td></tr></table></figure></li>
<li>在<code>.pyx</code>中调用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#useFunc.pyx</span></span><br><span class="line"><span class="comment"># distutils: language = c++</span></span><br><span class="line"><span class="keyword">from</span> impFunc cimport func</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">useFunc</span>(<span class="params"><span class="built_in">int</span> i</span>):</span></span><br><span class="line">    func(i)</span><br></pre></td></tr></table></figure></li>
<li>编译<code>cythonize -i -f useFunc.pyx -j8</code></li>
<li>在python文件中使用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> useFunc <span class="keyword">import</span> useFunc</span><br><span class="line">useFunc(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li>
<li>执行结果<ul>
<li><img src="/imgs/43fc6fe5a770a3ea885661862de05d62e6f47d9ebdc2d39e9c439434390c1b57.png" alt="picture 8">  <h3 id="cython中使用C-运算符重载和泛型"><a href="#cython中使用C-运算符重载和泛型" class="headerlink" title="cython中使用C++运算符重载和泛型"></a>cython中使用C++运算符重载和泛型</h3></li>
</ul>
</li>
<li><a href="https://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html#overloading-operators">参考</a></li>
<li>使用重载运算符和类模板<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// opReload.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> OPERSTOR_RELOAD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPERATOR_RELOAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> OPRELOAD</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">opReload</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T inner;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">opReload</span>();</span><br><span class="line">    <span class="built_in">opReload</span>(<span class="keyword">const</span> T&amp; arg);</span><br><span class="line">    <span class="built_in">opReload</span>(<span class="keyword">const</span> opReload&lt;T&gt;&amp; o);</span><br><span class="line">    opReload <span class="keyword">operator</span>+(<span class="keyword">const</span> opReload&lt;T&gt;&amp; o1);</span><br><span class="line">    opReload <span class="keyword">operator</span>-(<span class="keyword">const</span> opReload&lt;T&gt;&amp; o1);</span><br><span class="line">    <span class="function">T <span class="title">getInner</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">opReload</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T opReload&lt;T&gt;::<span class="built_in">getInner</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">opReload&lt;T&gt;::<span class="built_in">opReload</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">opReload&lt;T&gt; ::<span class="built_in">opReload</span>(<span class="keyword">const</span> opReload&lt;T&gt;&amp; arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;inner = arg.inner;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;copying...&quot;</span>&lt;&lt;arg.inner&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">opReload&lt;T&gt;::<span class="built_in">opReload</span>(<span class="keyword">const</span> T&amp; arg)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;op created: &quot;</span>&lt;&lt;arg&lt;&lt;std::endl;</span><br><span class="line">    inner = arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">opReload&lt;T&gt;::~<span class="built_in">opReload</span>()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;op destroyed: &quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inner&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">opReload&lt;T&gt; opReload&lt;T&gt;:: <span class="keyword">operator</span>+(<span class="keyword">const</span> opReload&lt;T&gt;&amp; o1)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Adding...&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inner+o1.inner&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> opReload&lt;T&gt;(<span class="keyword">this</span>-&gt;inner+o1.inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">opReload&lt;T&gt; opReload&lt;T&gt;:: <span class="keyword">operator</span>-(<span class="keyword">const</span> opReload&lt;T&gt;&amp; o1)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Minusing...&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;inner-o1.inner&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> opReload&lt;T&gt;(<span class="keyword">this</span>-&gt;inner-o1.inner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># opReload.pxd</span></span><br><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;opReload.h&quot;</span> namespace <span class="string">&quot;OPRELOAD&quot;</span>:</span><br><span class="line">    cdef cppclass opReload[T]:</span><br><span class="line">        opReload() <span class="keyword">except</span> +</span><br><span class="line">        opReload(const T&amp; arg) <span class="keyword">except</span> +</span><br><span class="line">        opReload(const opReload[T]&amp; o) <span class="keyword">except</span> +</span><br><span class="line">        opReload[T] operator+(opReload[T]&amp;)</span><br><span class="line">        opReload[T] operator-(opReload[T]&amp;)</span><br><span class="line">        T getInner()</span><br></pre></td></tr></table></figure></li>
<li>上面引入的时候需要传入模板类的参数<code>opReload[T]&amp;</code></li>
<li>可以使用复制构造函数，使用方法是<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">oo = opReload[double](op1)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># distutils: language = c++</span></span><br><span class="line"><span class="keyword">from</span> opReload cimport opReload</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">useClass</span>():</span></span><br><span class="line">    cdef double o1 = <span class="number">1.5</span></span><br><span class="line">    cdef double o2 = <span class="number">2.5</span></span><br><span class="line">    cdef opReload[double] op1 = opReload[double](o1)</span><br><span class="line">    cdef opReload[double] op2 = opReload[double](o2)</span><br><span class="line"></span><br><span class="line">    cdef opReload[double] o, o_, oo</span><br><span class="line">    oo = opReload[double](op1)</span><br><span class="line">    o = op1+op2</span><br><span class="line">    o_ = op1-op2</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> o.getInner(), o_.getInner()</span><br></pre></td></tr></table></figure></li>
<li>调用输出（main中只调用了pyx中的函数）<ul>
<li><img src="/imgs/cfc20733ae8050783fd590438597bd445ca0cf54b12195fedfab5c37094b1d38.png" alt="picture 9"></li>
</ul>
</li>
<li>创建栈上的对象的时候，对象必须至少有一个无参数的构造函数，否则无法创建  <h3 id="在栈上和堆上分配变量"><a href="#在栈上和堆上分配变量" class="headerlink" title="在栈上和堆上分配变量"></a>在栈上和堆上分配变量</h3></li>
<li>从<code>libc.stdlib</code>引入<code>malloc</code>和<code>free</code></li>
<li>分配堆上对象<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cdef vector[char]* v = new vector[char](<span class="number">10</span>)</span><br><span class="line">cdef char* strOnHeap = &lt;char*&gt;malloc(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
<li>注意此处分配的动态<code>vector</code>对象需要使用<code>v[0]</code>·解引用（类似于<code>*v</code>）才能使用，否则会出错类似于<code>terminate called after throwing an instance of &#39;std::bad_alloc&#39;</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># distutils: language = c++</span></span><br><span class="line"><span class="keyword">from</span> libc.stdlib cimport malloc, free</span><br><span class="line"><span class="keyword">from</span> libcpp.vector cimport vector</span><br><span class="line"><span class="keyword">from</span> libc.stdio cimport printf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocAndFree</span>():</span></span><br><span class="line">    cdef char* strOnHeap = &lt;char*&gt;malloc(<span class="number">10</span>)</span><br><span class="line">    printf(<span class="string">&quot;Alloced\n&quot;</span>)</span><br><span class="line">    cdef vector[char]* v = new vector[char](<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    cdef <span class="built_in">int</span> m</span><br><span class="line">    cdef char* strLit = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strLit)):</span><br><span class="line">        strOnHeap[m] = strLit[m]</span><br><span class="line">    </span><br><span class="line">    cdef <span class="built_in">int</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        v[<span class="number">0</span>][i] = &lt;char&gt;(<span class="built_in">int</span>(<span class="string">&#x27;0&#x27;</span>.encode(<span class="string">&quot;ascii&quot;</span>))+i)</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">&quot;%s\n&quot;</span>, strOnHeap)</span><br><span class="line">    <span class="comment"># printf(&quot;Alloced\n&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        printf(<span class="string">&quot;%d&quot;</span>, v[<span class="number">0</span>][i])</span><br><span class="line">    printf(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> v</span><br><span class="line">    free(strOnHeap)</span><br></pre></td></tr></table></figure></li>
<li>释放<code>malloc</code>内存空间直接<code>free</code>即可</li>
<li>释放申请的动态变量使用<code>del</code><h3 id="使用编译好的C-C-动态库-so（Linux下）"><a href="#使用编译好的C-C-动态库-so（Linux下）" class="headerlink" title="使用编译好的C/C++动态库.so（Linux下）"></a>使用编译好的C/C++动态库.so（Linux下）</h3></li>
<li><a href="https://www.cnblogs.com/traditional/p/13285339.html">参考</a></li>
<li>c 源文件<code>calc.c</code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calcFunc</span><span class="params">(<span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;i&lt;max;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;=i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>; j&lt;max; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>c头文件<code>calc.h</code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> CALC</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> CALC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calcFunc</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li>.pyx文件（注意导入的C库函数不可以被直接引用，需要在.pyx中包装一次）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># useCalc.pyx</span></span><br><span class="line">cdef extern <span class="keyword">from</span> <span class="string">&quot;calc.h&quot;</span>:</span><br><span class="line">    void calcFunc(<span class="built_in">int</span> i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">useFunc</span>(<span class="params"><span class="built_in">int</span> i</span>):</span></span><br><span class="line">    calcFunc(i)</span><br></pre></td></tr></table></figure></li>
<li><code>gcc</code>生成动态链接库</li>
<li><code>gcc -shared -o lib&lt;输出文件&gt;.so 源文件.c -fPIC</code><ul>
<li><code>-fPIC</code>是生成位置无关代码的意思</li>
<li>注意必须遵守命名规范</li>
</ul>
</li>
<li>给出头<code>.h</code>文件方便调用</li>
<li>但是直接使用命令行工具cythonize编译将会无法找到符号，报错<code>undefined symbol: calcFunc</code></li>
<li>需要创建<code>setup.py</code>指导编译和链接<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">ext_modules = [</span><br><span class="line">    Extension(</span><br><span class="line">        <span class="string">&quot;useCalc&quot;</span>,  <span class="comment"># the module name exposed to python</span></span><br><span class="line">        [<span class="string">&quot;useCalc.pyx&quot;</span>],  <span class="comment"># the Cython source file</span></span><br><span class="line">        libraries=[<span class="string">&quot;calc&quot;</span>],  <span class="comment"># the name of library to link with</span></span><br><span class="line">        library_dirs=[<span class="string">&quot;/home/frank/study/cython/use_So&quot;</span>],  <span class="comment"># the path to your library</span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;useCalc&quot;</span>,</span><br><span class="line">    ext_modules=cythonize(ext_modules, language_level=<span class="number">3</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>执行<code>python3 setup.py build_ext --inplace</code></li>
<li>仍然报错<code>libcalc.so: cannot open shared object file: No such file or directory</code></li>
<li>使用<code>ldd</code>命令查看cython编译出的<code>.so</code>文件，看到<ul>
<li><img src="/imgs/d49db8317b38865063fc451d1863fc4426509294bd3f89984a4591f8f690a0d5.png" alt="picture 10">  </li>
<li>此时可见<code>libcalc.so</code>是<code>not found</code></li>
<li>将库文件的目录添加到<code>/etc/ld.so.conf</code>，使用<code>vim</code>编辑</li>
<li><img src="/imgs/955c917f8662d9fdf93eb5714341b9c311b042672da5728094796072165e66c7.png" alt="picture 12">  <ul>
<li>自己添加的目录前面不加<code>include</code></li>
</ul>
</li>
</ul>
</li>
<li><code>sudo /sbin/ldconfig</code>使添加生效<h4 id="另：使用C语言如何调用动态链接库"><a href="#另：使用C语言如何调用动态链接库" class="headerlink" title="另：使用C语言如何调用动态链接库"></a>另：使用C语言如何调用动态链接库</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    calcFunc(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>引入头文件直接使用</li>
<li>编译的时候需要添加搜索路径<code>-L</code>和添加自身库<code>-l</code></li>
<li><code>gcc -o main main.c -L. -lmylib</code><ul>
<li><code>-L.</code>的意思是在当前目录下查找</li>
</ul>
</li>
<li>同样需要在<code>/etc/ld.so.conf</code>中添加并且执行<code>sudo /sbin/ldconfig</code>生效</li>
</ul>
<h3 id="提高代码执行速度"><a href="#提高代码执行速度" class="headerlink" title="提高代码执行速度"></a>提高代码执行速度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello_to_c</span>(<span class="params"><span class="built_in">int</span> m</span>):</span></span><br><span class="line">    cdef double t1 = time.time()</span><br><span class="line">    cdef long <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    cdef <span class="built_in">int</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">sum</span>+=i</span><br><span class="line">    cdef double t2 = time.time()</span><br><span class="line">    <span class="comment"># print(t2-t1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>, t2-t1</span><br></pre></td></tr></table></figure>

<ul>
<li><p><img src="/imgs/0ab7640f35d15174084b37c7a0e1d12bd0fccebc55582a8730827d6591fc5c2b.png" alt="picture 4">  </p>
</li>
<li><p>可以看出<strong>增加了类型声明</strong>，会使得函数性能有很大的提高</p>
</li>
<li><p>给<code>sum</code>添加了<code>volatile</code>关键字<code>cdef volatile long sum = 0</code>，没有很大的变化</p>
</li>
<li><p>如果将变量变为全局变量，则</p>
</li>
<li><p><img src="/imgs/a2232f7f204bdc754b369d58bf58dd2d21fea4d41bdb77d2d4724cabf41d2c4d.png" alt="picture 5">  </p>
</li>
<li><p>还是并无明显区别，判断不是编译器优化导致的不同，快了124.46倍</p>
</li>
<li><p>更换需要外部空间的计算，也是C程序快非常多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arraySum</span>(<span class="params"><span class="built_in">int</span> m</span>):</span></span><br><span class="line">    cdef <span class="built_in">int</span> a[<span class="number">1000000</span>]</span><br><span class="line">    cdef long <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    cdef <span class="built_in">int</span> i = <span class="number">0</span></span><br><span class="line">    cdef <span class="built_in">int</span> j = <span class="number">0</span></span><br><span class="line">    cdef double t1 = time.time()</span><br><span class="line">    cdef double t2</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        a[i] = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">sum</span>+=a[j]</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>, t2-t1</span><br></pre></td></tr></table></figure></li>
<li><p>比较时间</p>
</li>
<li><p><img src="/imgs/8dc7e5fda4cb21da9aa39b6e66c5b7aff6156b77b92d45d8dbaf5dc9db8788d8.png" alt="picture 6">  </p>
<ul>
<li>无论是在程序内部还是外部测量，可见二者时间没有明显的差异，都比python程序快非常多，基本上快了50倍左右</li>
</ul>
</li>
</ul>
<h2 id="其他加速python程序的方法"><a href="#其他加速python程序的方法" class="headerlink" title="其他加速python程序的方法"></a>其他加速python程序的方法</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/347185566">参考知乎</a><h3 id="可以给函数加缓存lru-cache"><a href="#可以给函数加缓存lru-cache" class="headerlink" title="可以给函数加缓存lru_cache"></a>可以给函数加缓存<code>lru_cache</code></h3></li>
<li>函数前加一个<code>@lru_cache()</code></li>
<li><img src="/imgs/e0b2da1abf14f2206680f772c1ad31cdffb7323c5b4c60f087a2b9d919e7ba5c.png" alt="picture 7">  </li>
</ul>
<h3 id="pypy解释器"><a href="#pypy解释器" class="headerlink" title="pypy解释器"></a>pypy解释器</h3><ul>
<li><code>pypy3 &lt;代码路径&gt;</code></li>
<li>速度可以提高多倍</li>
</ul>
<h3 id="使用numba作为python的解释器"><a href="#使用numba作为python的解释器" class="headerlink" title="使用numba作为python的解释器"></a>使用numba作为python的解释器</h3><ul>
<li>如果代码中有很多numpy数组或者循环，使用numba会提高效率</li>
<li>使用装饰器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numba <span class="keyword">import</span> jit</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">100</span>).reshape(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@jit(<span class="params">nopython=<span class="literal">True</span></span>) </span><span class="comment"># Set &quot;nopython&quot; mode for best performance, equivalent to @njit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go_fast</span>(<span class="params">a</span>):</span> <span class="comment"># Function is compiled to machine code when called the first time</span></span><br><span class="line">    trace = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a.shape[<span class="number">0</span>]):   <span class="comment"># Numba likes loops</span></span><br><span class="line">        trace += np.tanh(a[i, i]) <span class="comment"># Numba likes NumPy functions</span></span><br><span class="line">    <span class="keyword">return</span> a + trace              <span class="comment"># Numba likes NumPy broadcasting</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(go_fast(x))</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/152343123">参考2</a></li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>cython</tag>
      </tags>
  </entry>
  <entry>
    <title>使用FreeRTOS和ILI9341点亮LCD屏幕</title>
    <url>/2021/12/17/%E4%BD%BF%E7%94%A8FreeRTOS%E5%92%8CILI9341%E7%82%B9%E4%BA%AELCD%E5%B1%8F%E5%B9%95/</url>
    <content><![CDATA[<h1 id="使用FreeRTOS和上一篇中提到的ili9341芯片驱动点亮屏幕"><a href="#使用FreeRTOS和上一篇中提到的ili9341芯片驱动点亮屏幕" class="headerlink" title="使用FreeRTOS和上一篇中提到的ili9341芯片驱动点亮屏幕"></a>使用FreeRTOS和上一篇中提到的ili9341芯片驱动点亮屏幕</h1><h2 id="CubeMX配置"><a href="#CubeMX配置" class="headerlink" title="CubeMX配置"></a>CubeMX配置</h2><ul>
<li><p>SPI：</p>
</li>
<li><p><img src="/imgs/image-20211217213656004.png" alt="image-20211217213656004"></p>
</li>
<li><p>DMA：</p>
</li>
<li><p><img src="/imgs/image-20211217213717712.png" alt="image-20211217213717712"></p>
</li>
<li><p>NVIC（重要）：</p>
</li>
<li><p><img src="/imgs/image-20211217213754825.png" alt="image-20211217213754825"></p>
</li>
<li><p>注意此处SPI、TIM1和DMA<strong>不要使用FreeRTOS 的中断函数</strong>，将对勾去掉，同时将中断优先级<strong>改为一个比FreeRTOS小的数字</strong>，比如2。假如使用了FreeRTOS的中断的话在Cube中无法修改这个数字为更小的值</p>
</li>
<li><p>FreeRTOS:</p>
</li>
<li><p><img src="/imgs/image-20211217213921708.png" alt="image-20211217213921708"></p>
</li>
<li><p>注意此处使用的是<strong>v1</strong>，尚未测试v2是否可以，其他内容（比如每个线程的堆栈空间之类的没有修改，默认应该是128字节）</p>
</li>
</ul>
<h2 id="程序配置"><a href="#程序配置" class="headerlink" title="程序配置"></a>程序配置</h2><p><strong>主程序</strong>中include如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ili9341.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ili9341_font.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ili9341_gfx.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>同时添加</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ili9341_t</span> *_lcd;</span><br><span class="line"><span class="keyword">ili9341_text_attr_t</span> fontSend1;</span><br><span class="line"><span class="keyword">ili9341_text_attr_t</span> fontSend2;</span><br><span class="line"><span class="function"><span class="keyword">ili9341_t</span> *<span class="title">screenReturn</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _lcd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>freeRTOS</strong>的C文件中添加上面的Include，此外还有</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">ili9341_text_attr_t</span> fontSend1;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">ili9341_text_attr_t</span> fontSend2;</span><br></pre></td></tr></table></figure>

<p>freeRTOS的<strong>线程</strong>定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE END Header_startScreenFill */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startScreenFill</span><span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> * argument)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN startScreenFill */</span></span><br><span class="line">  <span class="comment">/* Infinite loop */</span></span><br><span class="line">  <span class="keyword">for</span>(;;)</span><br><span class="line">  &#123;</span><br><span class="line">    ili9341_fill_screen(screenReturn(),ILI9341_BLUE);</span><br><span class="line">    osDelay(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* USER CODE END startScreenFill */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意不同的线程要区分优先级，如图</li>
<li><img src="/imgs/image-20211217220230058.png" alt="image-20211217220230058"></li>
</ul>
<h2 id="文中没有提到的按照上一篇博客的操作"><a href="#文中没有提到的按照上一篇博客的操作" class="headerlink" title="文中没有提到的按照上一篇博客的操作"></a>文中没有提到的按照上一篇博客的操作</h2><h2 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h2><p><img src="/imgs/20211217220332.gif" alt="20211217220332"></p>
]]></content>
  </entry>
  <entry>
    <title>使用STM32读取Winbond_W25Q16_Flash芯片的ID和序列号</title>
    <url>/2022/01/08/%E4%BD%BF%E7%94%A8STM32%E8%AF%BB%E5%8F%96Winbond-W25Q16-Flash%E8%8A%AF%E7%89%87%E7%9A%84ID%E5%92%8C%E5%BA%8F%E5%88%97%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="使用STM32读取Winbond-W25Q16-Flash芯片的ID和序列号"><a href="#使用STM32读取Winbond-W25Q16-Flash芯片的ID和序列号" class="headerlink" title="使用STM32读取Winbond_W25Q16_Flash芯片的ID和序列号"></a>使用STM32读取Winbond_W25Q16_Flash芯片的ID和序列号</h1><h2 id="Cube配置"><a href="#Cube配置" class="headerlink" title="Cube配置"></a>Cube配置</h2><p>配置为<strong>全双工主设备</strong></p>
<p><img src="/imgs/image-20220108111641258.png" alt="image-20220108111641258"></p>
<p><img src="/imgs/image-20220108111113092.png" alt="image-20220108111113092"></p>
<p>使用的是SPI1（根据开发板的接线），<strong>Prescaler配置多少都可以，不关键，2和256都行</strong></p>
<p><img src="/imgs/image-20220108111433160.png" alt="image-20220108111433160"></p>
<p>DMA也<strong>可以开</strong>，不影响</p>
<p><strong>配置CS引脚</strong>，原理图接线为</p>
<p><img src="/imgs/image-20220108111515938.png" alt="image-20220108111515938"></p>
<p>图中的F_CS是片选引脚，注意低电平有效</p>
<h2 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h2><p>封装一个片选函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnCS</span><span class="params">(<span class="keyword">uint8_t</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取chipID的函数根据手册编写"><a href="#读取chipID的函数根据手册编写" class="headerlink" title="读取chipID的函数根据手册编写"></a><strong>读取chipID</strong>的函数根据手册编写</h3><p><img src="/imgs/image-20220108111759707.png" alt="image-20220108111759707"></p>
<p>可见是先把CS置为低电平，然后SPI发送0x90，然后发送3byte的0x00地址，然后接收即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadChipID</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">uint8_t</span> D00 = <span class="number">0x00</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> DFF = <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> D90 = <span class="number">0x90</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> D06 = <span class="number">0x06</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> D60 = <span class="number">0x60</span>;</span><br><span class="line">  </span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D90, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D00, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D00, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D00, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_TransmitReceive(&amp;hspi1,&amp;DFF, recBuff, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_TransmitReceive(&amp;hspi1, &amp;DFF, recBuff+<span class="number">1</span>, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后将接收到的字符串格式化</span></span><br><span class="line"><span class="built_in">sprintf</span>(stringToSend, <span class="string">&quot;0x%2x%2x%2x%2x%2x%2x%2x%2x&quot;</span>,recBuff[<span class="number">7</span>],recBuff[<span class="number">6</span>],recBuff[<span class="number">5</span>],recBuff[<span class="number">4</span>],recBuff[<span class="number">3</span>],recBuff[<span class="number">2</span>],recBuff[<span class="number">1</span>],recBuff[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>注意此处因为函数的接收参数是接受数据存放位置的<strong>指针</strong>，所以必须使用<code>recBuff + X</code>的形式（<code>recBuff</code>是一个<code>uint8_t</code>数组）而不能用<code>recBuff[X]</code>的形式。</p>
<p>结果如图</p>
<p><img src="/imgs/image-20220108112619532.png" alt="image-20220108112619532"></p>
<h3 id="同样根据手册编写读取芯片唯一序列号的程序"><a href="#同样根据手册编写读取芯片唯一序列号的程序" class="headerlink" title="同样根据手册编写读取芯片唯一序列号的程序"></a>同样根据手册编写读取芯片<strong>唯一序列号</strong>的程序</h3><p><img src="/imgs/image-20220108112138116.png" alt="image-20220108112138116"></p>
<p>也是先把CS置为低电平，然后发送指令，然后等待三个数据传输周期（可以向芯片发送0xFF模拟等待延时），然后接收，注意此时必须手动等待，而<strong>不能直接使用HAL库的SPI接收函数的接收超时等待</strong>功能，因为会接收到错误的结果（比如<strong>全是0xFF</strong>）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadUniqueID</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> D4B = <span class="number">0x4B</span>;</span><br><span class="line">  <span class="keyword">int8_t</span> count = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">uint8_t</span> DFF = <span class="number">0xFF</span>;</span><br><span class="line">  EnCS(<span class="number">0</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;D4B, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;DFF, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;DFF, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;DFF, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  HAL_SPI_Transmit(&amp;hspi1, &amp;DFF, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">for</span>(count=<span class="number">7</span>;count&gt;=<span class="number">0</span>;count--)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_SPI_Receive(&amp;hspi1, recBuff+count, <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  EnCS(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后将接收到的字符串格式化</span></span><br><span class="line"><span class="built_in">sprintf</span>(stringToSend, <span class="string">&quot;0x%2x%2x%2x%2x%2x%2x%2x%2x&quot;</span>,recBuff[<span class="number">7</span>],recBuff[<span class="number">6</span>],recBuff[<span class="number">5</span>],recBuff[<span class="number">4</span>],recBuff[<span class="number">3</span>],recBuff[<span class="number">2</span>],recBuff[<span class="number">1</span>],recBuff[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/image-20220108112807141.png" alt="image-20220108112807141"></p>
<p>假如去掉四行<code>HAL_SPI_Transmit(&amp;hspi1, &amp;DFF, 1, 1000);</code>，接收到的序列号将会变成</p>
<p><img src="/imgs/image-20220108112925406.png" alt="image-20220108112925406"></p>
<p>注意到开头出现了很多ff，因为芯片在此时的4个数据周期中是没有响应的，对应接收到<strong>4byte的ff</strong>，也就是图上的8个ff</p>
]]></content>
  </entry>
  <entry>
    <title>使用VSCode结合hexo撰写博客</title>
    <url>/2022/07/02/%E4%BD%BF%E7%94%A8VSCode%E7%BB%93%E5%90%88hexo%E6%92%B0%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="使用VSCode结合hexo撰写博客"><a href="#使用VSCode结合hexo撰写博客" class="headerlink" title="使用VSCode结合hexo撰写博客"></a>使用VSCode结合hexo撰写博客</h1><ul>
<li><p>VSCode安装<code>Markdown All in One</code>插件<br><img src="/imgs/3bb6348ccf8c066c5afdaeac0eb63f22098a3e1457877205f190013df629f4d8.png" alt="图 5">  </p>
</li>
<li><p>安装<code>Markdown Image</code>插件<br><img src="/imgs/96279228f003610f7191bc2809341b9d48cdc6f2a90cb29725106a506728dfe4.png" alt="图 6">  </p>
</li>
<li><p>安装之后配置该插件的设置部分</p>
</li>
<li><p><img src="/imgs/5460b26cc260f397280cd6ef4c3b623cfc94f70a624dd431f87b9031c2f567e3.png" alt="图 7">  </p>
</li>
<li><p>然后注意将图片目录配置为之前自己指定的<code>hexo</code>图片目录</p>
</li>
<li><p><img src="/imgs/57871a0f3ce7e49bfe93d872ac2302e3ddd9f94be85fb68280597d1b6eb648ba.png" alt="图 8">  </p>
</li>
<li><p>然后在使用的时候使用VSCode<code>打开文件夹</code>打开hexo的<code>source</code>文件夹，然后即可自动加载图片进行预览</p>
</li>
<li><p><img src="/imgs/11b45fa602b1f75a3e282386ac4b7fe3293cb7546191c22265243eba5ca12b06.png" alt="图 9">  </p>
</li>
<li><p>使用VSCode<strong>打开文件夹</strong>之后就<strong>不需要</strong>手动配置<code>Makrdown all in one</code>的根目录</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>使用VSCode连接VMware虚拟机Ubuntu</title>
    <url>/2022/09/17/%E4%BD%BF%E7%94%A8VSCode%E8%BF%9E%E6%8E%A5VMware%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu/</url>
    <content><![CDATA[<ul>
<li><a href="https://blog.csdn.net/strive0_0/article/details/124967746">参考链接</a></li>
<li>VMware虚拟机网络配置设置为<strong>桥接模式</strong>，然后使用ifconfig查看<code>IP地址</code></li>
<li><img src="/imgs/8a503e879b39b180e4fb95bda8a014a0f8444c29cc4eb4653ef0d86dfdca9cd1.png" alt="图 2">  </li>
</ul>
<h2 id="Ubuntu端安装SSH"><a href="#Ubuntu端安装SSH" class="headerlink" title="Ubuntu端安装SSH"></a>Ubuntu端安装SSH</h2><ul>
<li><code>sudo apt-get install openssh-server</code></li>
<li>检查是否安装好<ul>
<li><code>ssh -V</code></li>
</ul>
</li>
<li>查看服务是否启动<ul>
<li><code>sudo ps -e |grep ssh</code></li>
</ul>
</li>
<li>启动SSH<ul>
<li><code>sudo service ssh start</code></li>
</ul>
</li>
<li>修改配置文件</li>
<li>SSH服务的配置文件在/etc/ssh/sshd_config下，我们<code>sudo vim /etc/ssh/sshd_config</code>进行修改：<ul>
<li>修改一：把配置文件中的”PermitRootLogin without-password“前面加一个”#“号,把它注释掉（也可以直接增加这一句）</li>
<li>修改二：增加一句”PermitRootLogin yes”</li>
</ul>
</li>
<li>保存，退出，重启ssh <code>/etc/init.d/ssh restart</code><h2 id="VSCode端配置"><a href="#VSCode端配置" class="headerlink" title="VSCode端配置"></a>VSCode端配置</h2></li>
<li>安装<code>remote-ssh</code>插件</li>
<li>新建ssh链接，在命令框中输入<code>ssh 用户名@IP地址 -A</code></li>
<li>然后保存配置开始链接</li>
<li><img src="/imgs/31d0f7334ef200549eb81def8586ddaa1782230ba5b521a788ecc3a628f5bf32.png" alt="图 1">  <h2 id="卡死在创建SSH链接的时候的解决方法"><a href="#卡死在创建SSH链接的时候的解决方法" class="headerlink" title="卡死在创建SSH链接的时候的解决方法"></a>卡死在创建SSH链接的时候的解决方法</h2></li>
<li><img src="/imgs/40583bbf36963874eb80477c2349df6fc91fe7b8926a95de0b3be06103ae96ee.png" alt="picture 1">  </li>
<li>打开Vscode端的<code>SSH</code>插件设置</li>
<li>找到这一项 勾上对勾<ul>
<li><img src="/imgs/5f8624e28c4e47571f5d970e8ea4e3d43061d6dfc22e57ab0426a9221c46f130.png" alt="picture 2">  </li>
</ul>
</li>
<li>此外注意<strong>不要让ubuntu自动锁屏</strong>，否则可能导致连接断开</li>
<li>在此处<strong>创建新的控制台</strong><img src="/imgs/5bd56d67d175ef3acc137deca15dfa260e2bbf02963c7bb89335b55362e9b7c5.png" alt="picture 3">  <ul>
<li>因为安装SSH的控制台一般无法继续用作其他用途</li>
</ul>
</li>
<li>另外，可以考虑使用<code>rm -r ~/.vscode-server</code>命令删除原先下载的<code>vscode-server</code>（在dpkg搜不到）</li>
</ul>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>使用echo向文件写入数据</title>
    <url>/2022/01/15/%E4%BD%BF%E7%94%A8echo%E5%90%91%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="使用echo向文件写入数据"><a href="#使用echo向文件写入数据" class="headerlink" title="使用echo向文件写入数据"></a>使用echo向文件写入数据</h1><ul>
<li>主要是使用echo的<strong>输出重定向</strong>功能，也就是<code>&gt;</code>和<code>&gt;&gt;</code></li>
<li>覆盖文件内容用<code>&gt;</code>，也就是<ul>
<li><code>echo &quot;Raspberry&quot; &gt; test.txt</code></li>
</ul>
</li>
<li>追加文件内容用<code>&gt;&gt;</code><ul>
<li><code>echo &quot;string&quot; &gt;&gt; &lt;filename&gt;</code></li>
<li>就是将string追加到filename文件的末尾</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>使用freeRTOS的队列和定时器</title>
    <url>/2021/12/18/%E4%BD%BF%E7%94%A8freeRTOS%E7%9A%84%E9%98%9F%E5%88%97%E5%92%8C%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="使用freeRTOS的队列和定时器"><a href="#使用freeRTOS的队列和定时器" class="headerlink" title="使用freeRTOS的队列和定时器"></a>使用freeRTOS的队列和定时器</h1><h2 id="Cube"><a href="#Cube" class="headerlink" title="Cube"></a>Cube</h2><ul>
<li>注意必须用<code>CMSIS_V2</code>系统才可以设置定时器</li>
</ul>
<p><img src="/imgs/image-20211218130310454.png" alt="image-20211218130310454"></p>
<p><img src="/imgs/image-20211218130352028.png" alt="image-20211218130352028"></p>
<p>然后在<code>freeRTOS.c</code>中的<strong>初始化函数</strong><code>MX_FREERTOS_Init</code>中添加启动定时器的语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MX_FREERTOS_Init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN RTOS_MUTEX */</span></span><br><span class="line">  <span class="comment">/* add mutexes, ... */</span></span><br><span class="line">  <span class="comment">/* USER CODE END RTOS_MUTEX */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN RTOS_SEMAPHORES */</span></span><br><span class="line">  <span class="comment">/* add semaphores, ... */</span></span><br><span class="line">  <span class="comment">/* USER CODE END RTOS_SEMAPHORES */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Create the timer(s) */</span></span><br><span class="line">  <span class="comment">/* creation of myTimer01 */</span></span><br><span class="line">  myTimer01Handle = osTimerNew(refreshScreen, osTimerPeriodic, <span class="literal">NULL</span>, &amp;myTimer01_attributes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* creation of myTimer02 */</span></span><br><span class="line">  myTimer02Handle = osTimerNew(drawString, osTimerPeriodic, <span class="literal">NULL</span>, &amp;myTimer02_attributes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN RTOS_TIMERS */</span></span><br><span class="line">  osTimerStart(myTimer01Handle, <span class="number">500</span>);</span><br><span class="line">  osTimerStart(myTimer02Handle, <span class="number">500</span>);</span><br><span class="line">  <span class="comment">/* start timers, add new ones, ... */</span></span><br><span class="line">  <span class="comment">/* USER CODE END RTOS_TIMERS */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Create the queue(s) */</span></span><br><span class="line">  <span class="comment">/* creation of colorQ */</span></span><br><span class="line">  colorQHandle = osMessageQueueNew (<span class="number">16</span>, <span class="keyword">sizeof</span>(<span class="keyword">uint8_t</span>), &amp;colorQ_attributes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN RTOS_QUEUES */</span></span><br><span class="line">  <span class="comment">/* add queues, ... */</span></span><br><span class="line">  <span class="comment">/* USER CODE END RTOS_QUEUES */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Create the thread(s) */</span></span><br><span class="line">  <span class="comment">/* creation of drawColor */</span></span><br><span class="line">  drawColorHandle = osThreadNew(StartDefaultTask, <span class="literal">NULL</span>, &amp;drawColor_attributes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN RTOS_THREADS */</span></span><br><span class="line">  <span class="comment">/* add threads, ... */</span></span><br><span class="line">  <span class="comment">/* USER CODE END RTOS_THREADS */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN RTOS_EVENTS */</span></span><br><span class="line">  <span class="comment">/* add events, ... */</span></span><br><span class="line">  <span class="comment">/* USER CODE END RTOS_EVENTS */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>队列从Cube里直接创建即可，不需要额外的代码启动。</li>
<li>队列相关的操作函数在<code>cmsis_os2.h</code>中，如图</li>
<li><img src="/imgs/image-20211218130544220.png" alt="image-20211218130544220"></li>
</ul>
<h2 id="测试CMSIS-V2使用ili9341驱动"><a href="#测试CMSIS-V2使用ili9341驱动" class="headerlink" title="测试CMSIS_V2使用ili9341驱动"></a>测试CMSIS_V2使用ili9341驱动</h2><ul>
<li><p>能开始像芯片发送一次左右的指令，然后就会不知道因为什么原因（猜测是SPI）进入hardFault无限循环</p>
</li>
<li><p><img src="/imgs/image-20211218132008015.png" alt="image-20211218132008015"></p>
</li>
<li><p>认为还是<strong>只能用</strong><code>CMSIS_V1</code>进行操作。</p>
</li>
<li><p>尝试过SPI和DMA都不使用freeRTOS的中断，中断都比RTOS高，也尝试过DMA不用而SPI用，<strong>都不行。</strong></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>使用crow在CPP环境下开发web服务器</title>
    <url>/2023/04/19/%E4%BD%BF%E7%94%A8crow%E5%9C%A8CPP%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%BC%80%E5%8F%91web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><ul>
<li><a href="https://crowcpp.org/master/">官方网站</a></li>
<li><a href="https://github.com/CrowCpp/Crow">github</a></li>
<li>下载自己需要的relaease即可<ul>
<li><img src="/imgs/9edcaefdfd3b82149dac42244821ed13f17edc338f633e9b1edb24d5ebf43a14.png" alt="picture 1">  <h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2></li>
</ul>
</li>
<li>C++包的头文件在<code>/usr/include</code>目录下</li>
<li>但是出现错误<strong>fatal error: boost/optional.hpp: No such file or directory</strong></li>
<li>此时安装<code>boost</code>，也就是<code>sudo apt-get install libboost-all-dev</code></li>
<li>然后又报错<code>undefined reference to pthread_sigmask</code>，此时在编译后加参数<code>-lpthread</code>添加多线程库</li>
<li>但是还有错误<code>undefined reference to boost::system::system_category()&#39;</code>之类的，需要添加参数<code>-lboost_system -lboost_thread</code></li>
<li>最终的编译命令为<code>g++ ./crowHelloWorld.cpp -o helloWorld -lpthread -lboost_system -lboost_thread</code></li>
<li>输出结果<ul>
<li><img src="/imgs/dd4678720db50310c4cceaae5977b02902d56d5864021e62b06ff4a9b390b858.png" alt="picture 2">  </li>
<li><img src="/imgs/9e2db2a339b05758e287d902bfd5a0984c784886dfffb2057440165ca6bb5ba3.png" alt="picture 3">  </li>
</ul>
</li>
</ul>
<h2 id="一个简单的包含前后端互换数据的案例"><a href="#一个简单的包含前后端互换数据的案例" class="headerlink" title="一个简单的包含前后端互换数据的案例"></a>一个简单的包含前后端互换数据的案例</h2><ul>
<li><a href="https://blog.csdn.net/yz2zcx/article/details/105758850">新手参考</a><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;crow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    crow::SimpleApp app;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CROW_ROUTE</span>(app, <span class="string">&quot;/&quot;</span>)([]()&#123;</span><br><span class="line">        <span class="keyword">auto</span> page = crow::mustache::<span class="built_in">load_text</span>(<span class="string">&quot;./mainPage.html&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CROW_ROUTE</span>(app, <span class="string">&quot;/data&quot;</span>).<span class="built_in">methods</span>(<span class="string">&quot;POST&quot;</span>_method)([](<span class="keyword">const</span> crow::request&amp; req)&#123;</span><br><span class="line">        <span class="keyword">auto</span> x = crow::json::<span class="built_in">load</span>(req.body);</span><br><span class="line">        std::cout&lt;&lt;x[<span class="string">&quot;data&quot;</span>]&lt;&lt;std::endl;</span><br><span class="line">        crow::json::wvalue retDict;</span><br><span class="line">        retDict[<span class="string">&quot;message&quot;</span>] = x[<span class="string">&quot;data&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> crow::<span class="built_in">response</span>(retDict);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.<span class="built_in">port</span>(<span class="number">8080</span>).<span class="built_in">multithreaded</span>().<span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3></li>
<li>注意后端发送的JSON数据<strong>不需要解析（PARSE）</strong><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;send something...&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendAjax()&quot;</span>&gt;</span>send<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&quot;/data&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(&#123; <span class="string">&#x27;data&#x27;</span>: input.value &#125;),</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">datas</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(datas);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// dataDict = JSON.parse(datas);</span></span></span><br><span class="line"><span class="javascript">                div1.innerHTML = datas[<span class="string">&#x27;message&#x27;</span>];</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main: </span></span><br><span class="line">	g++ ./crowHelloWorld.cpp -o main -lpthread -lboost_system -lboost_thread</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="comment"># rm *.o</span></span><br><span class="line">	rm main</span><br></pre></td></tr></table></figure>
<h3 id="文件目录格式"><a href="#文件目录格式" class="headerlink" title="文件目录格式"></a>文件目录格式</h3></li>
<li><code>.html</code>文件需要放在工作目录的<code>templates</code>文件夹下<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3></li>
<li><img src="/imgs/d8207e1f2ed546fa746dc1773bbbab150bbadcb6bcdd8ddba15d407af9baa142.png" alt="picture 4">  </li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>crow</tag>
      </tags>
  </entry>
  <entry>
    <title>使用gdb调试qemu上的Linux</title>
    <url>/2023/09/02/%E4%BD%BF%E7%94%A8gdb%E8%B0%83%E8%AF%95qemu%E4%B8%8A%E7%9A%84Linux/</url>
    <content><![CDATA[<h2 id="修改Linux内核编译选项"><a href="#修改Linux内核编译选项" class="headerlink" title="修改Linux内核编译选项"></a>修改Linux内核编译选项</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/166253161">参考</a></li>
<li><strong>注意 这个选项可能找不到</strong><ul>
<li><img src="/imgs/2ee2577f6c7c405d96172e5833fb425147c0302a31931a40aabd8d442b4c6e7a.png" alt="picture 0">  </li>
</ul>
</li>
<li>还需要修改<code>menuconfig</code>中的一个设置<ul>
<li><img src="/imgs/dd1841b9a0fa8141c4ff3fb858f75583499d12b45a14f0fccc780831fc798bbe.png" alt="picture 3">  </li>
<li><strong>关闭下面这一条</strong>，否则也无法实现在规定的断点位置停下</li>
<li><img src="/imgs/1baba0eab3a48ee885262a7d31a85a1e985d6312e43a6f46ab61d0506669a1a6.png" alt="picture 4">  </li>
</ul>
</li>
</ul>
<h2 id="进入内核"><a href="#进入内核" class="headerlink" title="进入内核"></a>进入内核</h2><ul>
<li>使用qemu执行如下命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 -s -S \</span><br><span class="line">-netdev &quot;user,id=eth0&quot; \</span><br><span class="line">-device &quot;e1000,netdev=eth0&quot; \</span><br><span class="line">-object &quot;filter-dump,id=eth0,netdev=eth0,file=dump.dat&quot; \</span><br><span class="line">-kernel $kernel_image \</span><br><span class="line">-append &quot;root=/dev/am rdinit=sbin/init ip=10.0.2.15::10.0.2.1:255.255.255.0 console=ttyS0&quot; \</span><br><span class="line">-nographic \</span><br><span class="line">-initrd $rootfs_img</span><br></pre></td></tr></table></figure></li>
<li><code>-s</code>参数表示在<strong>1234</strong>端口接受GDB调试，<code>-S</code>参数表示冻结CPU直到远程GDB输入相应命令</li>
<li>然后输入<code>gdb vmlinux</code></li>
<li><code>target remote localhost:1234</code></li>
<li>然后<img src="/imgs/71c87b1382680d5bb1847344512573a248089d9d81a673056c54bb3d8bc217ab.png" alt="picture 1">  </li>
<li>然后输入<code>continue</code>或<code>c</code>继续执行<h2 id="gdb的使用"><a href="#gdb的使用" class="headerlink" title="gdb的使用"></a>gdb的使用</h2></li>
<li><img src="/imgs/57a7dc71cdb839bd8c2fc4f7b3fb6ad2d8dba573f37c3b05d2a3613450910e8f.png" alt="picture 2">  <ul>
<li><code>b &lt;函数名&gt;</code>在函数位置设置断点</li>
</ul>
</li>
<li><img src="/imgs/ac23c0bf2e3b67199489f420b67c796717a94d0d4ae446839a1ce93354f2a33f.png" alt="picture 5">  </li>
<li>使用<code>step</code>单步执行</li>
<li><code>info locals</code>显示当前环境的局部变量</li>
<li><code>info args</code>显示函数的传入参数等等</li>
<li>有时候一些变量会因为编译过程中被优化掉了导致无法查看，显示为<code>&lt;optimized out&gt;</code><ul>
<li><img src="/imgs/5471da4b10b1c3336482ef5f32336451062271e0c17c6facd064037a0cfee430.png" alt="picture 6">  </li>
</ul>
</li>
<li>可以通过设置为<code>volatile</code>或者防止优化改变上述状况<h2 id="一些内核调试经验"><a href="#一些内核调试经验" class="headerlink" title="一些内核调试经验"></a>一些内核调试经验</h2><h3 id="warning-trace"><a href="#warning-trace" class="headerlink" title="warning trace"></a>warning trace</h3></li>
<li>如下的trace<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[  111.555855] ------------[ cut here ]------------</span><br><span class="line">[  111.560683] WARNING: CPU: 0 PID: 129 at kernel/dma/mapping.c:533 dma_free_attrs+0x4a/0x60</span><br><span class="line">[  111.562335] Modules linked in: r4l_e1000_demo(OE)</span><br><span class="line">[  111.563461] CPU: 0 PID: 129 Comm: ip Tainted: G        W  OE      6.1.0-rc1 #38</span><br><span class="line">[  111.564123] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014</span><br><span class="line">[  111.564595] RIP: 0010:dma_free_attrs+0x4a/0x60</span><br><span class="line">[  111.565445] Code: 40 00 a9 00 02 00 00 74 21 48 85 d2 74 13 4d 85 c9 74 10 4d 8b 59 10 4d 85 db 74 05 e8 ef c0</span><br><span class="line">[  111.566470] RSP: 0018:ffffc90000673a80 EFLAGS: 00000046</span><br><span class="line">[  111.567058] RAX: 0000000000000046 RBX: ffff88800425a0d0 RCX: 000000000608b000</span><br><span class="line">[  111.567506] RDX: ffff88800608b000 RSI: 0000000000000080 RDI: ffff88800425a0d0</span><br><span class="line">[  111.568004] RBP: ffffc90000673a80 R08: 0000000000000000 R09: 0000000000000000</span><br><span class="line">[  111.568556] R10: ffffffff82ab6ff0 R11: ffffffff818fa860 R12: 0000000000000080</span><br><span class="line">[  111.569160] R13: 0000000000000041 R14: 000000000608b000 R15: ffff88800608b000</span><br><span class="line">[  111.569613] FS:  00000000024fa3c0(0000) GS:ffff888007600000(0000) knlGS:0000000000000000</span><br><span class="line">[  111.570234] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033</span><br><span class="line">[  111.570839] CR2: 00000000005305a1 CR3: 0000000006068000 CR4: 00000000000006f0</span><br><span class="line">[  111.571537] Call Trace:</span><br><span class="line">[  111.572137]  &lt;TASK&gt;</span><br><span class="line">[  111.573023]  rust_helper_dma_free_coherent+0x3c/0x50</span><br><span class="line">[  111.573691]  _RINvNtCs3yuwAp0waWO_4core3ptr13drop_in_placeINtNtCsa5tTp5JGY9w_14r4l_e1000_demo8ring_buf7RingBu]</span><br><span class="line">[  111.574911]  ? _RNvXs4_NtNtNtCs3yuwAp0waWO_4core3fmt3num3impxNtB9_7Display3fmt+0x30/0x30</span><br><span class="line">[  111.576226]  _RNvXs7_Csa5tTp5JGY9w_14r4l_e1000_demoNtB5_9NetDeviceNtNtCsfATHBUcknU9_6kernel3net16DeviceOperat]</span><br><span class="line">[  111.577870]  _RNvMs2_NtCsfATHBUcknU9_6kernel3netINtB5_12RegistrationNtCsa5tTp5JGY9w_14r4l_e1000_demo9NetDevic]</span><br><span class="line">[  111.579888]  __dev_close_many+0x124/0x170</span><br><span class="line">[  111.580119]  __dev_change_flags+0xf5/0x200</span><br><span class="line">[  111.580311]  dev_change_flags+0x27/0x60</span><br><span class="line">[  111.580567]  devinet_ioctl+0x4ec/0x600</span><br><span class="line">[  111.580943]  inet_ioctl+0xec/0x1a0</span><br><span class="line">[  111.581246]  ? _copy_to_user+0x1d/0x30</span><br><span class="line">[  111.581408]  ? put_user_ifreq+0x49/0x60</span><br><span class="line">[  111.581569]  ? sock_do_ioctl+0xae/0x100</span><br><span class="line">[  111.581925]  sock_do_ioctl+0x3e/0x100</span><br><span class="line">[  111.582206]  sock_ioctl+0x2ac/0x360</span><br><span class="line">[  111.582796]  __se_sys_ioctl+0x7c/0xc0</span><br><span class="line">[  111.583239]  __x64_sys_ioctl+0x1d/0x20</span><br><span class="line">[  111.583579]  do_syscall_64+0x62/0x90</span><br><span class="line">[  111.583833]  ? do_user_addr_fault+0x3b5/0x4f0</span><br><span class="line">[  111.584116]  ? exit_to_user_mode_prepare+0x3c/0xa0</span><br><span class="line">[  111.584622]  ? irqentry_exit_to_user_mode+0x9/0x20</span><br><span class="line">[  111.585147]  ? irqentry_exit+0x12/0x40</span><br><span class="line">[  111.585467]  ? exc_page_fault+0x8e/0x210</span><br><span class="line">[  111.585871]  entry_SYSCALL_64_after_hwframe+0x63/0xcd</span><br><span class="line">[  111.586505] RIP: 0033:0x4afa6f</span><br><span class="line">[  111.587134] Code: 00 48 89 44 24 18 31 c0 48 8d 44 24 60 c7 04 24 10 00 00 00 48 89 44 24 08 48 8d 44 24 20 40</span><br><span class="line">[  111.588324] RSP: 002b:00007ffe25bed850 EFLAGS: 00000246 ORIG_RAX: 0000000000000010</span><br><span class="line">[  111.589367] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00000000004afa6f</span><br><span class="line">[  111.589720] RDX: 00007ffe25bed910 RSI: 0000000000008914 RDI: 0000000000000003</span><br><span class="line">[  111.589961] RBP: 0000000000640287 R08: 0000000000000000 R09: 0000000000000000</span><br><span class="line">[  111.590853] R10: 00007ffe25beef40 R11: 0000000000000246 R12: 0000000000000003</span><br><span class="line">[  111.591466] R13: 00007ffe25bed910 R14: 0000000000000000 R15: 0000000000000000</span><br><span class="line">[  111.592168]  &lt;/TASK&gt;</span><br><span class="line">[  111.592524] ---[ end trace 0000000000000000 ]---</span><br></pre></td></tr></table></figure></li>
<li>是Warning Trace，并不是内核出现错误，出现段错误一般会有<code>segmentation fault</code>或者<code>core dumped</code></li>
<li>这个仅仅是警告</li>
<li>触发原因是内核<code>dma_free_attrs</code>函数有一个语句<code>WARN_ON(irqs_disabled())</code><ul>
<li>会在<code>irq</code>被禁止的条件下发出一条warning<h3 id="但是此时并不能看到Rust部分的调用栈，也没法使用Rust编译的模块中的符号设置断点"><a href="#但是此时并不能看到Rust部分的调用栈，也没法使用Rust编译的模块中的符号设置断点" class="headerlink" title="但是此时并不能看到Rust部分的调用栈，也没法使用Rust编译的模块中的符号设置断点"></a>但是此时并不能看到Rust部分的调用栈，也没法使用Rust编译的模块中的符号设置断点</h3></li>
</ul>
</li>
<li><code>todo</code></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>使用使用Flask，Gunicorn和Nginx部署一个云端ubuntu上的服务器</title>
    <url>/2023/11/21/%E4%BD%BF%E7%94%A8%E4%BD%BF%E7%94%A8Flask%EF%BC%8CGunicorn%E5%92%8CNginx%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E4%BA%91%E7%AB%AFubuntu%E4%B8%8A%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前期下载配置"><a href="#前期下载配置" class="headerlink" title="前期下载配置"></a>前期下载配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新软件包列表</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Flask</span></span><br><span class="line">sudo pip3 install flask</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Gunicorn</span></span><br><span class="line">sudo pip3 install gunicorn</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Nginx</span></span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="创建一个Flask-app"><a href="#创建一个Flask-app" class="headerlink" title="创建一个Flask app"></a>创建一个Flask app</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="comment"># 导入Flask模块</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Flask应用实例</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义根路由和视图函数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是主模块，运行Flask应用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="创建gunicorn-conf-py"><a href="#创建gunicorn-conf-py" class="headerlink" title="创建gunicorn.conf.py"></a>创建<code>gunicorn.conf.py</code></h2><ul>
<li>注意要在当期目录下创建<code>./logs</code>文件夹<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gunicorn.conf.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的输出路径</span></span><br><span class="line">log_path = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_path):</span><br><span class="line">    os.mkdir(log_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的格式</span></span><br><span class="line">log_format = <span class="string">&#x27;%(asctime)s %(levelname)s %(process)d %(message)s&#x27;</span></span><br><span class="line">date_format = <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的级别</span></span><br><span class="line">log_level = <span class="string">&#x27;info&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的文件名</span></span><br><span class="line">access_log_file = os.path.join(log_path, <span class="string">&#x27;access.log&#x27;</span>)</span><br><span class="line">error_log_file = os.path.join(log_path, <span class="string">&#x27;error.log&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志的配置项</span></span><br><span class="line">accesslog = access_log_file</span><br><span class="line">errorlog = error_log_file</span><br><span class="line">loglevel = log_level</span><br><span class="line"><span class="built_in">format</span> = log_format</span><br><span class="line">datefmt = date_format</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置绑定的IP和端口号</span></span><br><span class="line">bind = <span class="string">&#x27;0.0.0.0:5000&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用上面的配置文件启动gunicorn"><a href="#使用上面的配置文件启动gunicorn" class="headerlink" title="使用上面的配置文件启动gunicorn"></a>使用上面的配置文件启动gunicorn</h2></li>
<li><code>gunicorn -c gunicorn.conf.py &lt;py主文件名&gt;:app</code><h2 id="创建nginx的配置文件"><a href="#创建nginx的配置文件" class="headerlink" title="创建nginx的配置文件"></a>创建nginx的配置文件</h2></li>
<li><code>/etc/nginx/sites-available/flask.conf</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义一个名为flask的server块</span></span><br><span class="line">server &#123;</span><br><span class="line">    # 监听80端口</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    # 定义服务器名称，可以是域名或者IP地址</span><br><span class="line">    server_name 52.184.77.113;</span><br><span class="line"></span><br><span class="line">    # 定义根路由的处理方式</span><br><span class="line">    location / &#123;</span><br><span class="line">        # 转发请求到Gunicorn服务器，注意IP和端口要与Gunicorn绑定的一致</span><br><span class="line">        proxy_pass http://0.0.0.0:5000;</span><br><span class="line"></span><br><span class="line">        # 设置一些代理相关的头部信息</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建软连接<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建符号链接</span></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/flask.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></li>
<li>重启nginx服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启Nginx服务</span></span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></li>
<li>如果服务器需要配置外网端口访问的话在相应的平台配置即可</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>javaScript</tag>
        <tag>html</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>使用网页版的触控板遥控电脑</title>
    <url>/2022/03/22/%E4%BD%BF%E7%94%A8%E7%BD%91%E9%A1%B5%E7%89%88%E7%9A%84%E8%A7%A6%E6%8E%A7%E6%9D%BF%E9%81%A5%E6%8E%A7%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<h1 id="使用网页版的触控板遥控电脑"><a href="#使用网页版的触控板遥控电脑" class="headerlink" title="使用网页版的触控板遥控电脑"></a>使用网页版的触控板遥控电脑</h1><h2 id="基于flask和pyautogui开发的后端"><a href="#基于flask和pyautogui开发的后端" class="headerlink" title="基于flask和pyautogui开发的后端"></a>基于flask和pyautogui开发的后端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_from_directory</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">returnIndex</span>():</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;remotePage.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/mousemove&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveMouse</span>():</span></span><br><span class="line">    data = json.loads(request.get_data())</span><br><span class="line">    xMove = data[<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">    yMove = data[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    pyautogui.moveRel(xOffset=xMove, yOffset=yMove, duration=<span class="number">0.0</span>, tween=pyautogui.linear)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/click&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click</span>():</span></span><br><span class="line">    data = json.loads(request.get_data())</span><br><span class="line">    clickTime = data[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">    clickBtn = data[<span class="string">&#x27;btn&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> (clickTime == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (clickBtn == <span class="number">1</span>):  <span class="comment"># 左单击</span></span><br><span class="line">            pyautogui.click(x=<span class="literal">None</span>, y=<span class="literal">None</span>, clicks=<span class="number">1</span>, interval=<span class="number">0.0</span>, button=<span class="string">&#x27;left&#x27;</span>, duration=<span class="number">0.0</span>, tween=pyautogui.linear)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 右单击</span></span><br><span class="line">            pyautogui.click(x=<span class="literal">None</span>, y=<span class="literal">None</span>, clicks=<span class="number">1</span>, interval=<span class="number">0.0</span>, button=<span class="string">&#x27;right&#x27;</span>, duration=<span class="number">0.0</span>,</span><br><span class="line">                            tween=pyautogui.linear)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (clickBtn == <span class="number">1</span>):  <span class="comment"># 左双击</span></span><br><span class="line">            pyautogui.doubleClick(x=<span class="literal">None</span>, y=<span class="literal">None</span>, interval=<span class="number">0.0</span>, button=<span class="string">&#x27;left&#x27;</span>, duration=<span class="number">0.0</span>,</span><br><span class="line">                                  tween=pyautogui.linear)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 右双击</span></span><br><span class="line">            pyautogui.doubleClick(x=<span class="literal">None</span>, y=<span class="literal">None</span>, interval=<span class="number">0.0</span>, button=<span class="string">&#x27;right&#x27;</span>, duration=<span class="number">0.0</span>,</span><br><span class="line">                                  tween=pyautogui.linear)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyBoard</span>():</span></span><br><span class="line">    data = json.loads(request.get_data())</span><br><span class="line">    key = data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    moveType = data[<span class="string">&#x27;move&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> (moveType == <span class="number">1</span>):</span><br><span class="line">        pyautogui.keyDown(key)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pyautogui.keyUp(key)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/altTabAndWin&#x27;</span> ,methods = [<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">altAndWin</span>():</span></span><br><span class="line">    data = json.loads(request.get_data())</span><br><span class="line">    key = data[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span>(key == <span class="string">&#x27;altTab&#x27;</span>):</span><br><span class="line">        pyautogui.hotkey(<span class="string">&#x27;altleft&#x27;</span>, <span class="string">&#x27;tab&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pyautogui.press(<span class="string">&#x27;winleft&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app.config[&#x27;JSON_AS_ASCII&#x27;] = False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="前端html"><a href="#前端html" class="headerlink" title="前端html"></a>前端html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div id = &quot;div1&quot;&gt;0, 0&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;button id=&quot;Mup&quot; style=&quot;width: 10%; height: 30px; left: 45%;top:10px;position:absolute&quot; onmousedown=&quot;handleMDown(event)&quot;onmouseup = &quot;handleMUp(event)&quot;&gt;↑&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;Mleft&quot; style=&quot;width: 10%; height: 30px; left: 20%;top:60px;position:absolute&quot; onmousedown=&quot;handleMDown(event)&quot;onmouseup = &quot;handleMUp(event)&quot;&gt;←&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;Mright&quot; style=&quot;width: 10%; height: 30px; left: 70%;top: 60px;position:absolute&quot; onmousedown=&quot;handleMDown(event)&quot;onmouseup = &quot;handleMUp(event)&quot;&gt;→&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button id=&quot;Mdown&quot; style=&quot;width: 10%; height: 30px; left: 45%;top:110px;position:absolute&quot; onmousedown=&quot;handleMDown(event)&quot;onmouseup = &quot;handleMUp(event)&quot;&gt;↓&lt;/button&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;click&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 12%; height: 30px; left: 20%;top:160px;position:absolute&quot;</span><span class="attr">onclick</span> = <span class="string">&quot;handleClick(event);&quot;</span>&gt;</span>左击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;dClick&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 12%; height: 30px; left: 44%;top:160px;position:absolute&quot;</span><span class="attr">onclick</span> = <span class="string">&quot;handleClick(event);&quot;</span>&gt;</span>双击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;rClick&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 12%; height: 30px; left: 68%;top:160px;position:absolute&quot;</span><span class="attr">onclick</span> = <span class="string">&quot;handleClick(event);&quot;</span>&gt;</span>右击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">style</span>=<span class="string">&quot;top:190px;position:relative&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;esc&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 20%;top:200px;position:absolute&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>Esc<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot; &quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 30%; height: 30px; left: 35%;top:200px;position:absolute&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>Space<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;enter&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 70%;top:200px;position:absolute&quot;</span><span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>Enter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;left&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 20%;top:240px;position:absolute&quot;</span><span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span><span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>l<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;up&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 35%;top:240px;position:absolute&quot;</span><span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span><span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>u<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;down&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 55%;top:240px;position:absolute&quot;</span><span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span><span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>d<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;right&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 70%;top:240px;position:absolute&quot;</span><span class="attr">onmousedown</span>=<span class="string">&quot;handleDown(event)&quot;</span><span class="attr">onmouseup</span>=<span class="string">&quot;handleUp(event)&quot;</span>&gt;</span>r<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;altTab&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 20%;top:280px;position:absolute&quot;</span><span class="attr">onclick</span> = <span class="string">&quot;handleClick(event);&quot;</span>&gt;</span>AltTab<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&quot;Win&quot;</span> <span class="attr">style</span> = <span class="string">&quot;width: 10%; height: 30px; left: 70%;top:280px;position:absolute&quot;</span><span class="attr">onclick</span> = <span class="string">&quot;handleClick(event);&quot;</span>&gt;</span>Win<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// mouseXPrev = window.event.clientX;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// mouseYPrev = window.touch.pageY;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">mouseXPrev = -<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">mouseYPrev = -<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">// event.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    event.preventDefault();</span></span><br><span class="line"><span class="javascript">    mouseXPrev = event.targetTouches[<span class="number">0</span>].pageX;</span></span><br><span class="line"><span class="javascript">    mouseYPrev = event.targetTouches[<span class="number">0</span>].pageY;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//document.getElementById(&quot;div1&quot;).value = mouseXPrev + &#x27;, &#x27; + mouseYPrev;</span></span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> touch = event.targetTouches[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// if(mouseXPrev&lt;0)mouseXPrev = Number(touch.pageX);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// if(mouseYPrev&lt;0)mouseYPrev = Number(touch.pageY);</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(touch.pageY&gt;<span class="number">160</span>)<span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> x = <span class="built_in">Number</span>(touch.pageX)-mouseXPrev;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> y = <span class="built_in">Number</span>(touch.pageY)-mouseYPrev;</span></span><br><span class="line"><span class="javascript">    dataToSend[<span class="string">&#x27;x&#x27;</span>] = x;</span></span><br><span class="line"><span class="javascript">    dataToSend[<span class="string">&#x27;y&#x27;</span>] = y;</span></span><br><span class="line"><span class="javascript">    mouseXPrev = <span class="built_in">Number</span>(touch.pageX);</span></span><br><span class="line"><span class="javascript">    mouseYPrev = <span class="built_in">Number</span>(touch.pageY);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(jsonToSend)</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>:<span class="string">&quot;mousemove&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">function handleMDown(buttonClicked)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    switch(buttonClicked.target.id)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mup&#x27;:Mup = true;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mdown&#x27;:Mdown = true;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mleft&#x27;:Mleft = true;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mright&#x27;:Mright = true;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">function handleMUp(buttonClicked)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    switch(buttonClicked.target.id)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mup&#x27;:Mup = false;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mdown&#x27;:Mdown = false;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mleft&#x27;:Mleft = false;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        case &#x27;Mright&#x27;:Mright = false;break;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">handleDown</span>(<span class="params">buttonClicked</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;key&#x27;</span>:buttonClicked.target.id,<span class="string">&#x27;move&#x27;</span>:<span class="number">1</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>:<span class="string">&quot;key&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">handleUp</span>(<span class="params">buttonClicked</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;key&#x27;</span>:buttonClicked.target.id,<span class="string">&#x27;move&#x27;</span>:<span class="number">2</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>:<span class="string">&quot;key&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">buttonClicked</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">switch</span>(buttonClicked.target.id)</span></span><br><span class="line"><span class="javascript">    &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;click&#x27;</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;time&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;btn&#x27;</span>:<span class="number">1</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;dClick&#x27;</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;time&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;btn&#x27;</span>:<span class="number">1</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;rClick&#x27;</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;time&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;btn&#x27;</span>:<span class="number">2</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;altTab&#x27;</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;altTab&#x27;</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;altTabAndWin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;Win&#x27;</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataToSend = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;win&#x27;</span>&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsonToSend = <span class="built_in">JSON</span>.stringify(dataToSend);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(jsonToSend)</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;altTabAndWin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:jsonToSend,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">datas</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                </span>&#123;&#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>前端的要点是调用了<code>event.targetTouches</code>这一属性，获得手指按压或者是触控笔的位置</li>
<li>此API在计算机端无法使用</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>修复删除双系统之后BIOS中存在多余启动引导项的问题</title>
    <url>/2022/01/09/%E4%BF%AE%E5%A4%8D%E5%88%A0%E9%99%A4%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%90%8EBIOS%E4%B8%AD%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%BD%99%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC%E9%A1%B9%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="修复删除双系统之后BIOS中存在多余启动引导项的问题"><a href="#修复删除双系统之后BIOS中存在多余启动引导项的问题" class="headerlink" title="修复删除双系统之后BIOS中存在多余启动引导项的问题"></a>修复删除双系统之后BIOS中存在多余启动引导项的问题</h1><h2 id="下载DiskGenius"><a href="#下载DiskGenius" class="headerlink" title="下载DiskGenius"></a>下载DiskGenius</h2><p><a href="http://www.diskgenius.cn/download.php">http://www.diskgenius.cn/download.php</a></p>
<p>然后此处按下delete即可</p>
<p><img src="/imgs/image-20220109001539680.png" alt="image-20220109001539680"></p>
<p>可见启动引导项中已经没有了刚才删除的Manjaro选项</p>
<p><img src="/imgs/image-20220109002008500.png" alt="image-20220109002008500"></p>
]]></content>
  </entry>
  <entry>
    <title>修复linux不能识别外接显示器并且开启独显</title>
    <url>/2022/01/20/%E4%BF%AE%E5%A4%8Dmanjaro%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%AB%E5%A4%96%E6%8E%A5%E6%98%BE%E7%A4%BA%E5%99%A8%E5%B9%B6%E4%B8%94%E5%BC%80%E5%90%AF%E7%8B%AC%E6%98%BE/</url>
    <content><![CDATA[<h1 id="修复linux不能识别外接显示器并且开启独显"><a href="#修复linux不能识别外接显示器并且开启独显" class="headerlink" title="修复linux不能识别外接显示器并且开启独显"></a>修复linux不能识别外接显示器并且开启独显</h1><ul>
<li><p>按照<a href="https://github.com/Askannz/optimus-manager%E7%9A%84%E7%94%A8%E6%88%B7%E8%AF%B4%E6%98%8E%EF%BC%88manjaro%EF%BC%89">https://github.com/Askannz/optimus-manager的用户说明（manjaro）</a></p>
<ul>
<li><p><img src="/../imgs/image-20220120104302285.png" alt="image-20220120104302285"></p>
</li>
<li><p>将系统的<code>/etc/sddm.conf</code>文件进行修改注释掉两处之后，重启计算机，并且打开<code>optimus-manager-qt</code>，切换到英伟达显卡，再次重启，并且设置开机自启动模式</p>
</li>
</ul>
</li>
</ul>
<p><img src="/../imgs/image-20220120104437272.png" alt="image-20220120104437272"></p>
]]></content>
  </entry>
  <entry>
    <title>修改/etc/sudoers文件出错导致问题解决方案</title>
    <url>/2023/06/27/%E4%BF%AE%E6%94%B9-etc-sudoers%E6%96%87%E4%BB%B6%E5%87%BA%E9%94%99%E5%AF%BC%E8%87%B4%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="出错实例"><a href="#出错实例" class="headerlink" title="出错实例"></a>出错实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; /etc/sudoers: syntax error near line 21 &lt;&lt;&lt;</span></span><br><span class="line">sudo: parse error in /etc/sudoers near line 21</span><br><span class="line">sudo: no valid sudoers sources found, quitting</span><br><span class="line">sudo: unable to initialize policy plugin</span><br></pre></td></tr></table></figure>
<p>之后尝试使用</p>
<ul>
<li><code>pkexec visudo</code>又报错<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">==== AUTHENTICATING FOR org.freedesktop.policykit.exec ===</span><br><span class="line">Authentication is needed to run `/usr/sbin/visudo&#x27; as the super user</span><br><span class="line">Authenticating as: ubuntu,,, (ubuntu)</span><br><span class="line">Password: </span><br><span class="line">polkit-agent-helper-1: error response to PolicyKit daemon: GDBus.Error:org.freedesktop.PolicyKit1.Error.Failed: No session for cookie</span><br><span class="line">==== AUTHENTICATION FAILED ===</span><br><span class="line">Error executing command as another user: Not authorized</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2></li>
<li><a href="https://codeleading.com/article/16806443604/#google_vignette">参考链接</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>分析基于epoll的C++高性能webServer代码（一）</title>
    <url>/2022/06/29/%E5%88%86%E6%9E%90%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84C-%E9%AB%98%E6%80%A7%E8%83%BDwebServer%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="分析基于epoll的C-高性能webServer代码（一）"><a href="#分析基于epoll的C-高性能webServer代码（一）" class="headerlink" title="分析基于epoll的C++高性能webServer代码（一）"></a>分析基于epoll的C++高性能webServer代码（一）</h1><h2 id="std-function用法"><a href="#std-function用法" class="headerlink" title="std::function用法"></a>std::function用法</h2><ul>
<li><a href="https://blog.csdn.net/qq_35721743/article/details/83217416?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3-83217416-blog-123063589.pc_relevant_blogantidownloadv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3-83217416-blog-123063589.pc_relevant_blogantidownloadv1&utm_relevant_index=5">参考链接</a>  <a href="https://en.cppreference.com/w/cpp/utility/functional/function">cpp官方reference</a></li>
<li>类模板<code>std :: function</code>是一个通用的<strong>多态函数包装器</strong>。 <code>std :: function</code>的实例可以存储，复制和调用任何可调用的目标 ：包括函数，lambda表达式，绑定表达式或其他函数对象，以及指向成员函数和指向数据成员的指针。当<code>std::function</code>对象未包裹任何实际的可调用元素，调用该<code>std::function</code>对象将抛出<code>std::bad_function_call</code>异常。</li>
</ul>
<h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><table>
<thead>
<tr>
<th>成员函数声明</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>constructor</td>
<td>构造函数：constructs a new std::function instance</td>
</tr>
<tr>
<td>destructor</td>
<td>析构函数： destroys a std::function instance</td>
</tr>
<tr>
<td>operator=</td>
<td>给定义的function对象赋值</td>
</tr>
<tr>
<td>operator bool</td>
<td>检查定义的function对象是否包含一个有效的对象</td>
</tr>
<tr>
<td>operator()</td>
<td>调用一个对象</td>
</tr>
</tbody></table>
<h3 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h3><ul>
<li>调用普通函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt;func = f;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">func</span>(<span class="number">1</span>, <span class="number">2</span>)&lt;&lt;endl;      <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>调用模板函数对象</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//function object</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">functor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span> <span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   functor ft;</span><br><span class="line">   function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; func = ft&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">   cout&lt;&lt;<span class="built_in">func</span>(<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;endl;    <span class="comment">//3</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用lambda表达式</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> f = [](<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b) &#123;<span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">	std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt;func = f;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">func</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;      <span class="comment">// 3</span></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="epoll原理以及讲解"><a href="#epoll原理以及讲解" class="headerlink" title="epoll原理以及讲解"></a>epoll原理以及讲解</h2><ul>
<li><a href="https://blog.csdn.net/haogenmin/article/details/118527213">参考网页</a> <a href="https://zhuanlan.zhihu.com/p/63179839">知乎原文</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>分析基于epoll的C++高性能webServer代码（二）</title>
    <url>/2022/06/29/%E5%88%86%E6%9E%90%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84C-%E9%AB%98%E6%80%A7%E8%83%BDwebServer%E4%BB%A3%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="分析基于epoll的C-高性能webServer代码（二）"><a href="#分析基于epoll的C-高性能webServer代码（二）" class="headerlink" title="分析基于epoll的C++高性能webServer代码（二）"></a>分析基于epoll的C++高性能webServer代码（二）</h1><h2 id="C-bind-函数用法"><a href="#C-bind-函数用法" class="headerlink" title="C++bind()函数用法"></a>C++<code>bind()</code>函数用法</h2><ul>
<li><p><a href="https://blog.csdn.net/dongkun152/article/details/123992292">参考链接</a></p>
</li>
<li><p>std::bind()函数作为<strong>函数的适配器</strong>，它可以<strong>扩大函数是使用场合</strong>，使得函数更加灵活的被使用。<br>template&lt;class F, class… Args&gt;</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span>(F&amp;&amp;f, Args&amp;&amp;… args);</span><br></pre></td></tr></table></figure>

<ul>
<li>参数：<br>f 可以是function object，函数指针，函数引用，成员函数指针，或者数据成员的指针。</li>
<li>返回值：<br>function object</li>
</ul>
<h3 id="可以用std-placeholders-1等替换函数本身的输入参数"><a href="#可以用std-placeholders-1等替换函数本身的输入参数" class="headerlink" title="可以用std::placeholders::_1等替换函数本身的输入参数"></a>可以用<code>std::placeholders::_1</code>等替换函数本身的输入参数</h3><ul>
<li>举例：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; (a -b -c) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fn1 = <span class="built_in">bind</span>(func, _1, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">auto</span> fn2 = <span class="built_in">bind</span>(func, <span class="number">2</span>, _1, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fn1</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">fn2</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">-11</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意上面的三输入函数<code>func</code>使用<code>bind</code>替换掉了其中的两个输入参数，仅仅在<code>placeholder</code>的位置提供一个输入</li>
<li>注意，当具有多个输入的时候，输入的顺序是按照<code>std::placeholders::_1</code>、<code>std::placeholders::_2</code>、<code>std::placeholders::_3</code>等的顺序</li>
<li>举例：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::placeholders;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; (a - b -c) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fn1= <span class="built_in">bind</span>(func, _2, <span class="number">2</span>, _1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the value of function is :&quot;</span>;</span><br><span class="line">    <span class="built_in">fn1</span>(<span class="number">1</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> fn2 = <span class="built_in">bind</span>(func, _1, <span class="number">2</span>, _2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the value of function after changing placeholder position is :&quot;</span>;</span><br><span class="line">    <span class="built_in">fn2</span>(<span class="number">1</span>, <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">the value of function is :10</span></span><br><span class="line"><span class="comment">the value of function after changing placeholder position is :-14</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意上面的函数中，fn1的实际输入到func中的参数是<code>func(13, 2, 1)</code>，而输入到fn2中的参数实际上是<code>func(1, 2, 13)</code></li>
</ul>
<h2 id="httpServer的成员函数分析"><a href="#httpServer的成员函数分析" class="headerlink" title="httpServer的成员函数分析"></a>httpServer的成员函数分析</h2><ul>
<li><a href="http://naotu.baidu.com/file/5affaf781a1d7a139d281fba48af613a?token=e03c48870d07da80">类结构思维导图</a></li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li>使用初始化列表初始化成员<code>tcpserver_</code>，然后将<code>tcpserver_</code>的函数接口全部初始化为HttpServer提供的处理函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HttpServer::<span class="built_in">HttpServer</span>(EventLoop *loop, <span class="keyword">int</span> port)</span><br><span class="line">    : <span class="built_in">tcpserver_</span>(loop, port),</span><br><span class="line">    <span class="built_in">cnt</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    tcpserver_.<span class="built_in">SetNewConnCallback</span>(std::<span class="built_in">bind</span>(&amp;HttpServer::HandleNewConnection, <span class="keyword">this</span>, std::placeholders::_1));</span><br><span class="line">    tcpserver_.<span class="built_in">SetMessageCallback</span>(std::<span class="built_in">bind</span>(&amp;HttpServer::HandleMessage, <span class="keyword">this</span>, std::placeholders::_1, std::placeholders::_2));</span><br><span class="line">    tcpserver_.<span class="built_in">SetSendCompleteCallback</span>(std::<span class="built_in">bind</span>(&amp;HttpServer::HandleSendComplete, <span class="keyword">this</span>, std::placeholders::_1));</span><br><span class="line">    tcpserver_.<span class="built_in">SetCloseCallback</span>(std::<span class="built_in">bind</span>(&amp;HttpServer::HandleClose, <span class="keyword">this</span>, std::placeholders::_1));</span><br><span class="line">    tcpserver_.<span class="built_in">SetErrorCallback</span>(std::<span class="built_in">bind</span>(&amp;HttpServer::HandleError, <span class="keyword">this</span>, std::placeholders::_1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HandleNewConnection-TcpConnection-ptcpconn"><a href="#HandleNewConnection-TcpConnection-ptcpconn" class="headerlink" title="HandleNewConnection(TcpConnection *ptcpconn)"></a>HandleNewConnection(TcpConnection *ptcpconn)</h3><ul>
<li>处理新建立的http连接请求</li>
<li>新建一个<code>HttpSession</code>对象</li>
<li>将该对象放入<code>httpsessionlist_</code>中(<code>httpsessionlist_</code>是一个map，通过TcpConnection映射到httpSession对象)</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HttpServer::HandleNewConnection</span><span class="params">(TcpConnection *ptcpconn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::string msg(s);</span></span><br><span class="line">    HttpSession *phttpsession = <span class="keyword">new</span> <span class="built_in">HttpSession</span>();</span><br><span class="line">    httpsessionnlist_[ptcpconn] = phttpsession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HandleMessage-TcpConnection-ptcpconn-std-string-amp-s"><a href="#HandleMessage-TcpConnection-ptcpconn-std-string-amp-s" class="headerlink" title="HandleMessage(TcpConnection *ptcpconn, std::string &amp;s)"></a>HandleMessage(TcpConnection *ptcpconn, std::string &amp;s)</h3><ul>
<li>调用<code>httpsessionlist_</code>中的对象处理信息</li>
<li>将同样的数据发送回发送方（回显）</li>
<li>处理短链接问题</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HttpServer::HandleMessage</span><span class="params">(TcpConnection *ptcpconn, std::string &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;http num is:&quot; &lt;&lt; ++cnt &lt;&lt; std::endl;   </span></span><br><span class="line">    HttpSession *phttpsession =  httpsessionnlist_[ptcpconn];</span><br><span class="line">    phttpsession-&gt;<span class="built_in">PraseHttpRequest</span>(s);</span><br><span class="line">    phttpsession-&gt;<span class="built_in">HttpProcess</span>();</span><br><span class="line">    std::string msg;</span><br><span class="line">    phttpsession-&gt;<span class="built_in">AddToBuf</span>(msg);</span><br><span class="line">    ptcpconn-&gt;<span class="built_in">Send</span>(msg);</span><br><span class="line">    <span class="keyword">if</span>(!phttpsession-&gt;<span class="built_in">KeepAlive</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//短连接，可以告诉框架层数据发完就可以关掉TCP连接，不过这里注释掉，还是交给客户端主动关闭吧</span></span><br><span class="line">        <span class="comment">//ptcpconn-&gt;HandleClose();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>HttpProcess()</code>的行为：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HttpSession::HttpProcess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span> == httprequestcontext_.method)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;POST&quot;</span> == httprequestcontext_.method)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;HttpServer::HttpParser&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        errormsg = <span class="string">&quot;Method Not Implemented&quot;</span>;</span><br><span class="line">        <span class="built_in">HttpError</span>(<span class="number">501</span>, <span class="string">&quot;Method Not Implemented&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> pos = httprequestcontext_.url.<span class="built_in">find</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(pos != std::string::npos)</span><br><span class="line">    &#123;</span><br><span class="line">        path_ = httprequestcontext_.url.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">        querystring_ = httprequestcontext_.url.<span class="built_in">substr</span>(pos+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        path_ = httprequestcontext_.url;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//keepalive判断处理</span></span><br><span class="line">    std::map&lt;std::string, std::string&gt;::const_iterator iter = httprequestcontext_.header.<span class="built_in">find</span>(<span class="string">&quot;Connection&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(iter != httprequestcontext_.header.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        keepalive_ = (iter-&gt;second == <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(httprequestcontext_.version == <span class="string">&quot;HTTP/1.1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            keepalive_ = <span class="literal">true</span>;<span class="comment">//HTTP/1.1默认长连接</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            keepalive_ = <span class="literal">false</span>;<span class="comment">//HTTP/1.0默认短连接</span></span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    responsebody_.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;/&quot;</span> == path_)</span><br><span class="line">    &#123;        </span><br><span class="line">        path_ = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;/hello&quot;</span> == path_)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Wenbbench 测试用</span></span><br><span class="line">        std::string <span class="built_in">filetype</span>(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        responsebody_ = (<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        responsecontext_ += httprequestcontext_.version + <span class="string">&quot; 200 OK\r\n&quot;</span>;</span><br><span class="line">        responsecontext_ += <span class="string">&quot;Server: Chen Shuaihao&#x27;s NetServer/0.1\r\n&quot;</span>;</span><br><span class="line">        responsecontext_ += <span class="string">&quot;Content-Type: &quot;</span> + filetype + <span class="string">&quot;; charset=utf-8\r\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(iter != httprequestcontext_.header.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            responsecontext_ += <span class="string">&quot;Connection: &quot;</span> + iter-&gt;second + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        responsecontext_ += <span class="string">&quot;Content-Length: &quot;</span> + std::<span class="built_in">to_string</span>(responsebody_.<span class="built_in">size</span>()) + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        responsecontext_ += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        responsecontext_ += responsebody_;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::string responsebody;    </span></span><br><span class="line">    path_.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>((fp = <span class="built_in">fopen</span>(path_.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//perror(&quot;error fopen&quot;);</span></span><br><span class="line">        <span class="comment">//404 NOT FOUND</span></span><br><span class="line">        <span class="built_in">HttpError</span>(<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">fread</span>(buffer, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer), <span class="number">1</span>, fp) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            responsebody_.<span class="built_in">append</span>(buffer);</span><br><span class="line">            <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">feof</span>(fp))</span><br><span class="line">        &#123;</span><br><span class="line">            responsebody_.<span class="built_in">append</span>(buffer);</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;error fread&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;        	</span><br><span class="line">        <span class="built_in">fclose</span>(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">filetype</span><span class="params">(<span class="string">&quot;text/html&quot;</span>)</span></span>; <span class="comment">//暂时固定为html</span></span><br><span class="line">    responsecontext_ += httprequestcontext_.version + <span class="string">&quot; 200 OK\r\n&quot;</span>;</span><br><span class="line">    responsecontext_ += <span class="string">&quot;Server: Chen Shuaihao&#x27;s NetServer/0.1\r\n&quot;</span>;</span><br><span class="line">    responsecontext_ += <span class="string">&quot;Content-Type: &quot;</span> + filetype + <span class="string">&quot;; charset=utf-8\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(iter != httprequestcontext_.header.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        responsecontext_ += <span class="string">&quot;Connection: &quot;</span> + iter-&gt;second + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    responsecontext_ += <span class="string">&quot;Content-Length: &quot;</span> + std::<span class="built_in">to_string</span>(responsebody_.<span class="built_in">size</span>()) + <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    responsecontext_ += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    responsecontext_ += responsebody_;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HttpServer-HandleClose-TcpConnection-ptcpconn"><a href="#HttpServer-HandleClose-TcpConnection-ptcpconn" class="headerlink" title="HttpServer::HandleClose(TcpConnection *ptcpconn)"></a>HttpServer::HandleClose(TcpConnection *ptcpconn)</h2><ul>
<li>通过传入的参数<code>TcpConnecton</code>和map映射找到对应的<code>httpSession</code></li>
<li>将<code>httpSession</code>从列表中删除</li>
<li>释放<code>httpSession</code>占用的内存空间</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HttpServer::HandleClose</span><span class="params">(TcpConnection *ptcpconn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpSession *phttpsession = httpsessionnlist_[ptcpconn];</span><br><span class="line">    httpsessionnlist_.<span class="built_in">erase</span>(ptcpconn);</span><br><span class="line">    <span class="keyword">delete</span> phttpsession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HttpServer-HandleError-TcpConnection-ptcpconn"><a href="#HttpServer-HandleError-TcpConnection-ptcpconn" class="headerlink" title="HttpServer::HandleError(TcpConnection *ptcpconn)"></a>HttpServer::HandleError(TcpConnection *ptcpconn)</h2><ul>
<li>删除对应的<code>httpSession</code>同上</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HttpServer::HandleError</span><span class="params">(TcpConnection *ptcpconn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HttpSession *phttpsession = httpsessionnlist_[ptcpconn];</span><br><span class="line">    httpsessionnlist_.<span class="built_in">erase</span>(ptcpconn);</span><br><span class="line">    <span class="keyword">delete</span> phttpsession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HttpServer-Start"><a href="#HttpServer-Start" class="headerlink" title="HttpServer::Start()"></a>HttpServer::Start()</h2><ul>
<li>直接调用内部的<code>tcpserver</code>成员的<code>start</code>函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HttpServer::Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tcpserver_.<span class="built_in">Start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>动态规划（二）</title>
    <url>/2023/12/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Leetcode-1143-最长公共子序列"><a href="#Leetcode-1143-最长公共子序列" class="headerlink" title="Leetcode 1143. 最长公共子序列"></a>Leetcode 1143. 最长公共子序列</h2><ul>
<li><strong>暴力递归方法（或者动态规划）</strong></li>
<li>每次两个字符串往前走一个位置（比如到达i, j），假如两个字符串在这个位置的值相同，那么就以(i-1, j-1)位置的最长子串的长度+1作为当前位置的值</li>
<li>否则，就从两个字符串分别到（i-1，j）和（i，j-1）位置选择一个较大的作为结果<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = text1.<span class="built_in">length</span>(), n = text2.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(m + <span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = text1.<span class="built_in">at</span>(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c2 = text2.<span class="built_in">at</span>(j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (c1 == c2) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="LeetCode-72-编辑距离"><a href="#LeetCode-72-编辑距离" class="headerlink" title="LeetCode 72. 编辑距离"></a>LeetCode 72. 编辑距离</h2><ul>
<li>创建一个二维数组，一个维度是第一个字符串的长度，另一个是第二个字符串的长度</li>
<li>当 <code>word1[i] == word2[j]</code>，<code>dp[i][j] = dp[i-1][j-1]</code></li>
<li>当 <code>word1[i] != word2[j]</code>，<code>dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1</code></li>
<li>其中，<code>dp[i-1][j-1]</code> 表示<strong>替换</strong>操作，<code>dp[i-1][j]</code> 表示<strong>删除</strong>操作，<code>dp[i][j-1]</code> 表示<strong>插入</strong>操作。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word1.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> n = word2.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">map</span>(m+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>, INT_MAX));</span><br><span class="line">        map[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;=n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>&amp;&amp; j &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    map[i][j] = map[i][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i &gt; <span class="number">0</span>&amp;&amp; j == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    map[i][j] = map[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    map[i][j] = map[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    map[i][j] = <span class="built_in">min</span>(map[i<span class="number">-1</span>][j], <span class="built_in">min</span>(map[i][j<span class="number">-1</span>], map[i<span class="number">-1</span>][j<span class="number">-1</span>]))+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-474-一和零"><a href="#Leetcode-474-一和零" class="headerlink" title="Leetcode 474. 一和零"></a>Leetcode 474. 一和零</h2><ul>
<li>此题主要是从一个数组中选择几个元素组成某个目的</li>
<li>本质上是遍历每个元素然后决定要/不要的问题</li>
<li>所以遍历每个元素的时候要针对<strong>要这个元素</strong>和<strong>不要这个元素</strong>做出两种情况的递推。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// int maxLen;</span></span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; lenMap;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">smap</span>(strs.<span class="built_in">size</span>(), vector&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// lenMap</span></span><br><span class="line">        <span class="comment">// maxLen = 0;</span></span><br><span class="line">        lenMap = vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt;(strs.<span class="built_in">size</span>()+<span class="number">1</span>, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(m+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(n+<span class="number">1</span>, <span class="number">-1</span>)));</span><br><span class="line">        lenMap[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(index&lt;strs[i].<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                ++smap[i][strs[i][index++] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;strs.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;=m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k&lt;=n; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(lenMap[i][j][k]&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                    lenMap[i+<span class="number">1</span>][j][k]=<span class="built_in">max</span>(lenMap[i][j][k], lenMap[i+<span class="number">1</span>][j][k]); </span><br><span class="line">                    <span class="keyword">if</span>(j+smap[i][<span class="number">0</span>]&lt;=m &amp;&amp; k+smap[i][<span class="number">1</span>]&lt;=n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        lenMap[i+<span class="number">1</span>][j+smap[i][<span class="number">0</span>]][k+smap[i][<span class="number">1</span>]] = <span class="built_in">max</span>(lenMap[i][j][k]+<span class="number">1</span>, lenMap[i+<span class="number">1</span>][j+smap[i][<span class="number">0</span>]][k+smap[i][<span class="number">1</span>]]);</span><br><span class="line">                        maxLen = <span class="built_in">max</span>(maxLen, lenMap[i+<span class="number">1</span>][j+smap[i][<span class="number">0</span>]][k+smap[i][<span class="number">1</span>]]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen&lt;<span class="number">0</span>?<span class="number">0</span>:maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>cpp</tag>
        <tag>Leetcode</tag>
        <tag>动态规划</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/2022/08/28/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>了解数组中的一个数，左边最近的比这个数大的数，和右边最近的比这个数大的数在哪</li>
<li>在一维数组中对每一个数找到<strong>第一个比自己小的元素</strong>。这类“<strong>在一维数组中找第一个满足某种条件的数</strong>”的场景就是典型的单调栈应用场景<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="无重复数字"><a href="#无重复数字" class="headerlink" title="无重复数字"></a>无重复数字</h3></li>
<li>求某个数字附近最近的比他大的数字：<ul>
<li>使用一个栈，这个栈从下到上是由大到小的顺序</li>
<li>新加入的数字符合单调性？直接加入</li>
<li>不符合单调性？弹出栈顶的数字，此时记录，对于被弹出的这个数字而言：<ul>
<li>左边最近的比他大的数字就是弹出这个数字之后的栈顶元素</li>
<li>右边最近的比他大的数字就是正要进栈的数字</li>
<li>直到符合单调性为止</li>
</ul>
</li>
<li>最后结束的时候栈中还有数据怎么办？<ul>
<li>栈中剩余的所有数据的右边最近比他大的数字都是无</li>
<li>左边最近的比他大的数字都是他在栈中的下一个元素</li>
<li>栈底的最后一个元素左右都是无<h3 id="有重复数字"><a href="#有重复数字" class="headerlink" title="有重复数字"></a>有重复数字</h3></li>
</ul>
</li>
</ul>
</li>
<li>栈中放的内容都是链表，每个位置链表结点存放index</li>
<li>弹出的时候，右边最近比他大的数字是当前等待进栈的数字，左边最近的比他大的数字是栈中下面紧邻位置链表的最后一个位置</li>
<li>同样数字进栈的时候，将同样的数字对应的index串联在进栈位置链表的下一个位置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getNearLessNoRepeat(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 只存位置！</span></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// 当遍历到i位置的数，arr[i]</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; arr[stack.peek()] &gt; arr[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> leftLessIndex = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">            res[j][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">            res[j][<span class="number">1</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = stack.pop();</span><br><span class="line">        <span class="keyword">int</span> leftLessIndex = stack.isEmpty() ? -<span class="number">1</span> : stack.peek();</span><br><span class="line">        res[j][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">        res[j][<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getNearLess(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][<span class="number">2</span>];</span><br><span class="line">    Stack&lt;List&lt;Integer&gt;&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; <span class="comment">// i -&gt; arr[i] 进栈</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; arr[stack.peek().get(<span class="number">0</span>)] &gt; arr[i]) &#123;</span><br><span class="line">            List&lt;Integer&gt; popIs = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> leftLessIndex = stack.isEmpty() ? -<span class="number">1</span> : stack.peek().get(stack.peek().size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (Integer popi : popIs) &#123;</span><br><span class="line">                res[popi][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">                res[popi][<span class="number">1</span>] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; arr[stack.peek().get(<span class="number">0</span>)] == arr[i]) &#123;</span><br><span class="line">            stack.peek().add(Integer.valueOf(i));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            list.add(i);</span><br><span class="line">            stack.push(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        List&lt;Integer&gt; popIs = stack.pop();</span><br><span class="line">        <span class="keyword">int</span> leftLessIndex = stack.isEmpty() ? -<span class="number">1</span> : stack.peek().get(stack.peek().size() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer popi : popIs) &#123;</span><br><span class="line">            res[popi][<span class="number">0</span>] = leftLessIndex;</span><br><span class="line">            res[popi][<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-739-每日温度"><a href="#Leetcode-739-每日温度" class="headerlink" title="Leetcode 739.每日温度"></a>Leetcode 739.每日温度</h2><ul>
<li><p>单调栈解法</p>
</li>
<li><p>可以维护一个存储下标的单调栈，从栈底到栈顶的下标对应的温度列表中的温度依次递减。如果一个下标在单调栈里，则表示尚未找到下一次温度更高的下标。</p>
</li>
<li><p>正向遍历温度列表。对于温度列表中的每个元素<code> temperatures[i]</code>，如果栈为空，则直接将 <code>i</code> 进栈，如果栈不为空，则比较栈顶元素 <code>prevIndex</code> 对应的温度 <code>temperatures[prevIndex]</code> 和当前温度 <code>temperatures[i]</code>，如果 <code>temperatures[i]</code> &gt; <code>temperatures[prevIndex]</code>，则将 <code>prevIndex</code> 移除，并将 <code>prevIndex</code> 对应的等待天数设为 <code>i - prevIndex</code>，重复上述操作直到栈为空或者栈顶元素对应的温度小于等于当前温度，然后将 i 进栈。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dailyTemperatures</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; temperatures)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = temperatures.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; temperatures[i] &gt; temperatures[s.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">                <span class="keyword">int</span> previousIndex = s.<span class="built_in">top</span>();</span><br><span class="line">                ans[previousIndex] = i - previousIndex;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            s.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode-155-最小栈"><a href="#Leetcode-155-最小栈" class="headerlink" title="Leetcode 155.最小栈"></a>Leetcode 155.最小栈</h2><ul>
<li><p>当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中</p>
</li>
<li><p>当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出</p>
</li>
<li><p>在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; x_stack;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; min_stack;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line">        min_stack.<span class="built_in">push</span>(INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x_stack.<span class="built_in">push</span>(x);</span><br><span class="line">        min_stack.<span class="built_in">push</span>(<span class="built_in">min</span>(min_stack.<span class="built_in">top</span>(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x_stack.<span class="built_in">pop</span>();</span><br><span class="line">        min_stack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x_stack.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_stack.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Leetcode-84-柱状图中最大的矩形"><a href="#Leetcode-84-柱状图中最大的矩形" class="headerlink" title="Leetcode 84. 柱状图中最大的矩形"></a>Leetcode 84. 柱状图中最大的矩形</h2><ul>
<li>随后我们需要进行向左右两边扩展，使得扩展到的柱子的高度均不小于 <code>h</code>。换句话说，我们需要找到左右两侧最近的高度小于 <code>h</code> 的柱子，这样这两根柱子之间（不包括其本身）的所有柱子高度均不小于 <code>h</code>，并且就是 <code>i</code> 能够扩展到的最远范围。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = heights.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">left</span><span class="params">(n)</span>, <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        </span><br><span class="line">        stack&lt;<span class="keyword">int</span>&gt; mono_stack; <span class="comment">// 找左侧比较小的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!mono_stack.<span class="built_in">empty</span>() &amp;&amp; heights[mono_stack.<span class="built_in">top</span>()] &gt;= heights[i]) &#123;</span><br><span class="line">                mono_stack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            left[i] = (mono_stack.<span class="built_in">empty</span>() ? <span class="number">-1</span> : mono_stack.<span class="built_in">top</span>());</span><br><span class="line">            mono_stack.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mono_stack = stack&lt;<span class="keyword">int</span>&gt;();<span class="comment">// 找右侧比较小的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!mono_stack.<span class="built_in">empty</span>() &amp;&amp; heights[mono_stack.<span class="built_in">top</span>()] &gt;= heights[i]) &#123;</span><br><span class="line">                mono_stack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            right[i] = (mono_stack.<span class="built_in">empty</span>() ? n : mono_stack.<span class="built_in">top</span>());</span><br><span class="line">            mono_stack.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;<span class="comment">// 根据左侧和右侧比较小的元素的位置计算出不小于当前竖条宽度的面积</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, (right[i] - left[i] - <span class="number">1</span>) * heights[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>同一WiFi下两个Linux设备使用scp传输文件</title>
    <url>/2022/01/17/%E5%90%8C%E4%B8%80WiFi%E4%B8%8B%E4%B8%A4%E4%B8%AALinux%E8%AE%BE%E5%A4%87%E4%BD%BF%E7%94%A8scp%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="同一WiFi下两个Linux设备使用scp传输文件"><a href="#同一WiFi下两个Linux设备使用scp传输文件" class="headerlink" title="同一WiFi下两个Linux设备使用scp传输文件"></a>同一WiFi下两个Linux设备使用scp传输文件</h1><p>首先要保证两个设备可以互相ping通</p>
<p><img src="/imgs/image-20220117122232319.png" alt="image-20220117122232319"></p>
<p>然后在主机上使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp &lt;文件路径&gt; &lt;对方用户名&gt;@ip:&lt;要复制到的路径&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/imgs/image-20220117122635576.png" alt="image-20220117122635576"></p>
<p>效果如上图</p>
<h2 id="遇到向windows传输的时候connect-refused的问题"><a href="#遇到向windows传输的时候connect-refused的问题" class="headerlink" title="遇到向windows传输的时候connect refused的问题"></a>遇到向windows传输的时候connect refused的问题</h2><ul>
<li><img src="/imgs/1203203bc20b4679abc84fdfed06dd63c9b78dfdf231f48b2db0500ed36333fd.png" alt="picture 1">  <h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3></li>
<li>安装<code>openssh</code></li>
<li><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_install_firstuse">参考</a></li>
<li>注意要用管理员权限打开Terminal</li>
<li>使用powershell安装即可</li>
<li>安装完之后关闭防火墙<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Start the sshd service</span></span><br><span class="line">Start-Service sshd</span><br></pre></td></tr></table></figure></li>
<li>之后即可使用scp向Windows发送文件</li>
<li><img src="/imgs/13a8f9af8fb2610bdffc75804507a1ea3fd5139b6390c1dba2b1e52ad66161d9.png" alt="picture 2">  <h2 id="windows发送文件的一些注意事项"><a href="#windows发送文件的一些注意事项" class="headerlink" title="windows发送文件的一些注意事项"></a>windows发送文件的一些注意事项</h2></li>
<li>windows设备的用户名是C盘<code>用户</code>文件夹下的用户文件夹的名字</li>
<li>密码是<code>微软账号</code>的密码</li>
<li>目标地址路径<strong>不能带有空格，不能使用引号</strong></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>在Ubuntu创建ftp服务器</title>
    <url>/2023/04/02/%E5%9C%A8Ubuntu%E5%88%9B%E5%BB%BAftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="创建FTP并指定文件夹"><a href="#创建FTP并指定文件夹" class="headerlink" title="创建FTP并指定文件夹"></a>创建FTP并指定文件夹</h2><ul>
<li>先安装<code>vsftpd</code>，使用<code>sudo apt install vsftpd</code>安装</li>
<li>然后创建新用户<code>sudo useradd &lt;用户名&gt;</code></li>
<li>然后设置新用户的密码<code>passwd &lt;用户名&gt;</code></li>
<li><strong>指定新用户的根目录为你想使用的目录</strong><code>sudo usermod -d &lt;需要的路径&gt; &lt;用户名&gt;</code></li>
<li>将这个目录的权限修改为全部允许，也就是<code>chmod 777 &lt;路径&gt;</code></li>
<li>在<code>/etc/vsftpd.conf</code>中修改相应的选项给予相应的权限，<a href="https://ubuntu.com/server/docs/service-ftp">参考</a><ul>
<li><strong>不要乱改上述文件否则可能导致vsftpd服务无法启动</strong></li>
<li>修改之前备份文件<code>sudo mv /etc/vsftpd.conf /etc/vsftpd.conf.bak</code></li>
<li>查看FTP服务是否开启了<code>sudo netstat -antup | grep ftp</code></li>
</ul>
</li>
<li>重启服务<code>sudo systemctl restart vsftpd</code></li>
<li>在其他电脑使用<strong>刚才创建的用户和设置的密码登录FTP</strong>，打开直接就是根目录</li>
<li>递归修改目录下的所有文件（夹）的权限<code>chmod -R 777 &lt;路径&gt;</code><h2 id="FTP目录下的文件无法打开的情况"><a href="#FTP目录下的文件无法打开的情况" class="headerlink" title="FTP目录下的文件无法打开的情况"></a>FTP目录下的文件无法打开的情况</h2></li>
<li>具体是双击文件打开的时候<strong>直接打开浏览器</strong></li>
<li>原因是windows必须把FTP上的文件复制到本地之后才能打开，不能在服务器页面直接打开<h2 id="透穿"><a href="#透穿" class="headerlink" title="透穿"></a>透穿</h2></li>
<li>透穿教程参考windows下的FTP服务配置即可<h2 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h2></li>
<li>机械硬盘重启Linux系统的时候可能需要<strong>重新插拔</strong>，否则可能挂载不上，挂载不上可能导致链接FTP的时候<strong>访问被拒绝</strong><h2 id="配置sudo无密码的非root用户"><a href="#配置sudo无密码的非root用户" class="headerlink" title="配置sudo无密码的非root用户"></a>配置sudo无密码的非root用户</h2></li>
<li><code>sudo vim /etc/sudoers</code></li>
<li>找到一行<code>%sudo   ALL=(ALL:ALL) ALL</code></li>
<li>在其后加一行<code>&lt;用户名&gt; ALL=(ALL) NOPASSWD:ALL</code></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>图相关算法</title>
    <url>/2022/08/24/%E5%9B%BE%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="图对象的定义"><a href="#图对象的定义" class="headerlink" title="图对象的定义"></a>图对象的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> HashMap&lt;Integer, Node&gt; nodes;</span><br><span class="line">	<span class="keyword">public</span> HashSet&lt;Edge&gt; edges;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		nodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		edges = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="边对象的定义"><a href="#边对象的定义" class="headerlink" title="边对象的定义"></a>边对象的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> weight;</span><br><span class="line">	<span class="keyword">public</span> Node from;</span><br><span class="line">	<span class="keyword">public</span> Node to;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> weight, Node from, Node to)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.weight = weight;</span><br><span class="line">		<span class="keyword">this</span>.from = from;</span><br><span class="line">		<span class="keyword">this</span>.to = to;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="节点对象的定义"><a href="#节点对象的定义" class="headerlink" title="节点对象的定义"></a>节点对象的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点结构的描述</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> in;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> out;</span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Node&gt; nexts;</span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.value = value;</span><br><span class="line">		in = <span class="number">0</span>;</span><br><span class="line">		out = <span class="number">0</span>;</span><br><span class="line">		nexts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code01_BFS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 从node出发，进行宽度优先遍历</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Node start)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (start == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">		HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		queue.add(start);</span><br><span class="line">		set.add(start);</span><br><span class="line">		<span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">			Node cur = queue.poll();</span><br><span class="line">			System.out.println(cur.value);</span><br><span class="line">			<span class="keyword">for</span> (Node next : cur.nexts) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!set.contains(next)) &#123;</span><br><span class="line">					set.add(next);</span><br><span class="line">					queue.add(next);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>主要是在添加一个节点的所有相邻节点到队列里的时候使用了一个set结构判断这个节点是否被添加过，防止无限循环的产生<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code02_DFS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">		HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		stack.add(node);</span><br><span class="line">		set.add(node);</span><br><span class="line">		System.out.println(node.value);</span><br><span class="line">		<span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">			Node cur = stack.pop();</span><br><span class="line">			<span class="keyword">for</span> (Node next : cur.nexts) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!set.contains(next)) &#123;</span><br><span class="line">					stack.push(cur);</span><br><span class="line">					stack.push(next);</span><br><span class="line">					set.add(next);</span><br><span class="line">					System.out.println(next.value);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用一个栈的数据结构，每从栈中弹出一个节点的时候，遍历该节点的所有邻接点，如果不在已经遍历过的节点的set内，那么先将<strong>节点自身</strong>进栈，然后再将<strong>该邻接节点</strong>进栈<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2></li>
<li>对于一个带权连通无向图G=(V,E)，生成树不同，每棵树的权（<strong>树中所有边上的权值和</strong>）也不同，设R为G的所有生成树的集合，若T为R中权值和最小的生成树，则T称为G的最小生成树（Minimum-Spanning-Tree，MST）<h2 id="kruskal算法"><a href="#kruskal算法" class="headerlink" title="kruskal算法"></a>kruskal算法</h2></li>
<li>并查集：具有检查数据结构中的一些节点是否在同一个集合中、以及将不同的集合合并为一个集合的功能的数据结构<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//undirected graph only</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code04_Kruskal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Union-Find Set</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">		<span class="comment">// key 某一个节点， value key节点往上的节点</span></span><br><span class="line">		<span class="keyword">private</span> HashMap&lt;Node, Node&gt; fatherMap;</span><br><span class="line">		<span class="comment">// key 某一个集合的代表节点, value key所在集合的节点个数</span></span><br><span class="line">		<span class="keyword">private</span> HashMap&lt;Node, Integer&gt; sizeMap;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			fatherMap = <span class="keyword">new</span> HashMap&lt;Node, Node&gt;();</span><br><span class="line">			sizeMap = <span class="keyword">new</span> HashMap&lt;Node, Integer&gt;();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSets</span><span class="params">(Collection&lt;Node&gt; nodes)</span> </span>&#123;</span><br><span class="line">			fatherMap.clear();</span><br><span class="line">			sizeMap.clear();</span><br><span class="line">			<span class="keyword">for</span> (Node node : nodes) &#123;</span><br><span class="line">				fatherMap.put(node, node);</span><br><span class="line">				sizeMap.put(node, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> Node <span class="title">findFather</span><span class="params">(Node n)</span> </span>&#123;</span><br><span class="line">			Stack&lt;Node&gt; path = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">			<span class="keyword">while</span>(n != fatherMap.get(n)) &#123;</span><br><span class="line">				path.add(n);</span><br><span class="line">				n = fatherMap.get(n);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span>(!path.isEmpty()) &#123;</span><br><span class="line">				fatherMap.put(path.pop(), n);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> n;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> findFather(a) == findFather(b);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Node aDai = findFather(a);</span><br><span class="line">			Node bDai = findFather(b);</span><br><span class="line">			<span class="keyword">if</span> (aDai != bDai) &#123;</span><br><span class="line">				<span class="keyword">int</span> aSetSize = sizeMap.get(aDai);</span><br><span class="line">				<span class="keyword">int</span> bSetSize = sizeMap.get(bDai);</span><br><span class="line">				<span class="keyword">if</span> (aSetSize &lt;= bSetSize) &#123;</span><br><span class="line">					fatherMap.put(aDai, bDai);</span><br><span class="line">					sizeMap.put(bDai, aSetSize + bSetSize);</span><br><span class="line">					sizeMap.remove(aDai);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					fatherMap.put(bDai, aDai);</span><br><span class="line">					sizeMap.put(aDai, aSetSize + bSetSize);</span><br><span class="line">					sizeMap.remove(bDai);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Edge o1, Edge o2)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title">kruskalMST</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">		UnionFind unionFind = <span class="keyword">new</span> UnionFind();</span><br><span class="line">		unionFind.makeSets(graph.nodes.values());</span><br><span class="line">		<span class="comment">// 从小的边到大的边，依次弹出，小根堆！</span></span><br><span class="line">		PriorityQueue&lt;Edge&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> EdgeComparator());</span><br><span class="line">		<span class="keyword">for</span> (Edge edge : graph.edges) &#123; <span class="comment">// M 条边</span></span><br><span class="line">			priorityQueue.add(edge);  <span class="comment">// O(logM)</span></span><br><span class="line">		&#125;</span><br><span class="line">		Set&lt;Edge&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		<span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123; <span class="comment">// M 条边</span></span><br><span class="line">			Edge edge = priorityQueue.poll(); <span class="comment">// O(logM)</span></span><br><span class="line">			<span class="keyword">if</span> (!unionFind.isSameSet(edge.from, edge.to)) &#123; <span class="comment">// O(1)</span></span><br><span class="line">				result.add(edge);</span><br><span class="line">				unionFind.union(edge.from, edge.to);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>findfFather函数是当一个节点具有多级的父亲的时候找到最高级别的父亲，并且修改一路上所有节点的父亲为最高级的父亲</li>
<li>算法的思路是先按照权值将图中所有的边都放入小根堆中，将图中所有节点放入并查集中独立存在，然后从堆中依次弹出边，假如边链接的两端不是同一个集合，那么将边放入结果中，同时在并查集中合并两个集合，直到无可合并为止。<h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">// undirected graph only</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code05_Prim</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Edge o1, Edge o2)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title">primMST</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 解锁的边进入小根堆</span></span><br><span class="line">		PriorityQueue&lt;Edge&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> EdgeComparator());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 哪些点被解锁出来了</span></span><br><span class="line">		HashSet&lt;Node&gt; nodeSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		Set&lt;Edge&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;(); <span class="comment">// 依次挑选的的边在result里</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Node node : graph.nodes.values()) &#123; <span class="comment">// 随便挑了一个点</span></span><br><span class="line">			<span class="comment">// node 是开始点</span></span><br><span class="line">			<span class="keyword">if</span> (!nodeSet.contains(node)) &#123;</span><br><span class="line">				nodeSet.add(node);</span><br><span class="line">				<span class="keyword">for</span> (Edge edge : node.edges) &#123; <span class="comment">// 由一个点，解锁所有相连的边</span></span><br><span class="line">					priorityQueue.add(edge);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">while</span> (!priorityQueue.isEmpty()) &#123;</span><br><span class="line">					Edge edge = priorityQueue.poll(); <span class="comment">// 弹出解锁的边中，最小的边</span></span><br><span class="line">					Node toNode = edge.to; <span class="comment">// 可能的一个新的点</span></span><br><span class="line">					<span class="keyword">if</span> (!nodeSet.contains(toNode)) &#123; <span class="comment">// 不含有的时候，就是新的点</span></span><br><span class="line">						nodeSet.add(toNode);</span><br><span class="line">						result.add(edge);</span><br><span class="line">						<span class="keyword">for</span> (Edge nextEdge : toNode.edges) &#123;</span><br><span class="line">							priorityQueue.add(nextEdge);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// break;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 请保证graph是连通图</span></span><br><span class="line">	<span class="comment">// graph[i][j]表示点i到点j的距离，如果是系统最大值代表无路</span></span><br><span class="line">	<span class="comment">// 返回值是最小连通图的路径之和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> size = graph.length;</span><br><span class="line">		<span class="keyword">int</span>[] distances = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">		<span class="keyword">boolean</span>[] visit = <span class="keyword">new</span> <span class="keyword">boolean</span>[size];</span><br><span class="line">		visit[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">			distances[i] = graph[<span class="number">0</span>][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> minPath = Integer.MAX_VALUE;</span><br><span class="line">			<span class="keyword">int</span> minIndex = -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!visit[j] &amp;&amp; distances[j] &lt; minPath) &#123;</span><br><span class="line">					minPath = distances[j];</span><br><span class="line">					minIndex = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (minIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> sum;</span><br><span class="line">			&#125;</span><br><span class="line">			visit[minIndex] = <span class="keyword">true</span>;</span><br><span class="line">			sum += minPath;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!visit[j] &amp;&amp; distances[j] &gt; graph[minIndex][j]) &#123;</span><br><span class="line">					distances[j] = graph[minIndex][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>prim算法主要用到一个存储边用的小根堆和一个记录哪些点被解锁的set</li>
<li>首先在graph中随便选择一个点，将这个点加入记录解锁的点的集合，然后将这个<strong>点的所有边</strong>放入优先级队列中，然后开始while循环，每次从优先级队列中弹出一个权值最小的边，假如这个边指向的节点<strong>不在</strong>前面的set中的话就将这个边指向的节点放入点set中，将这条边放入结果中，然后将<strong>该节点延伸出的所有边</strong>放入优先级队列中。<h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2></li>
<li>该算法主要是找到指定起始点到图上剩余所有点的最近距离<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class16;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no negative weight</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code06_Dijkstra</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Node, Integer&gt; <span class="title">dijkstra1</span><span class="params">(Node from)</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Node, Integer&gt; distanceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    distanceMap.put(from, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 打过对号的点</span></span><br><span class="line">    HashSet&lt;Node&gt; selectedNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Node minNode = getMinDistanceAndUnselectedNode(distanceMap, selectedNodes);</span><br><span class="line">    <span class="keyword">while</span> (minNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//  原始点  -&gt;  minNode(跳转点)   最小距离distance</span></span><br><span class="line">        <span class="keyword">int</span> distance = distanceMap.get(minNode);</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : minNode.edges) &#123;</span><br><span class="line">            Node toNode = edge.to;</span><br><span class="line">            <span class="keyword">if</span> (!distanceMap.containsKey(toNode)) &#123;</span><br><span class="line">                distanceMap.put(toNode, distance + edge.weight);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// toNode </span></span><br><span class="line">                distanceMap.put(edge.to, Math.min(distanceMap.get(toNode), distance + edge.weight));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        selectedNodes.add(minNode);</span><br><span class="line">        minNode = getMinDistanceAndUnselectedNode(distanceMap, selectedNodes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> distanceMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">getMinDistanceAndUnselectedNode</span><span class="params">(HashMap&lt;Node, Integer&gt; distanceMap, HashSet&lt;Node&gt; touchedNodes)</span> </span>&#123;</span><br><span class="line">    Node minNode = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> minDistance = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;Node, Integer&gt; entry : distanceMap.entrySet()) &#123;</span><br><span class="line">        Node node = entry.getKey();</span><br><span class="line">        <span class="keyword">int</span> distance = entry.getValue();</span><br><span class="line">        <span class="keyword">if</span> (!touchedNodes.contains(node) &amp;&amp; distance &lt; minDistance) &#123;</span><br><span class="line">            minNode = node;</span><br><span class="line">            minDistance = distance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node node;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> distance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NodeRecord</span><span class="params">(Node node, <span class="keyword">int</span> distance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.node = node;</span><br><span class="line">        <span class="keyword">this</span>.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>算法主要依赖一个记录到对应节点最近距离的哈希表和一个记录某个节点是否已经被锁定的set</li>
<li>在初始时刻将起始点到起始点放入哈希表，并且将其距离设置为0。</li>
<li>然后的while循环每次都对找出的当前<strong>尚未被锁定</strong>而且在哈希表中到起始位置距离最小的点指向的所有尚未被锁定的节点的距离进行重算，假如被指向的节点之前的距离小于从该点出发到被指向的点的距离，将被指向点的距离更新为被选中的点出发的距离。（假如被指向的点<strong>不存在</strong>于哈希表中的话认为被指向的点的距离为<strong>正无穷</strong>，同样添加该点的距离条目进行更新）。然后将当前选中的点锁定，也就是假如被锁定的点的set中，然后找到当前未被锁定而且从总出发点开始距离最短的点，再次重复循环。</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图神经网络</title>
    <url>/2023/03/13/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="交叉熵损失函数"><a href="#交叉熵损失函数" class="headerlink" title="交叉熵损失函数"></a>交叉熵损失函数</h2><ul>
<li><img src="/imgs/c3e1e205f945ee53affe5cab25bd8bede8ed5c8cdeb275f766c1e097ecd6257d.png" alt="picture 1">  <ul>
<li>实际上就是判断对的<u>总概率乘积的对数取负号</u>（为了将问题从最大化问题转化为最小化问题）</li>
</ul>
</li>
<li><img src="/imgs/99d08b2fa43eb240fec65f3f1452b319535fa92a87a9a7cea33cb11fc4fc3d00.png" alt="picture 2">  <ul>
<li>此处在每个交叉熵层之前添加一个softmax，使得输出的概率之和为1</li>
</ul>
</li>
<li><img src="/imgs/4324000b8fe7d098941678f0fdd1e381c08b2d64a827206a79710be9373762a9.png" alt="picture 3">  <ul>
<li>优化的本质方式是（梯度下降法）交叉熵损失函数对各个参数求偏导数，然后根据学习率进行下降，以最小化损失函数<h2 id="下降的一些细节"><a href="#下降的一些细节" class="headerlink" title="下降的一些细节"></a>下降的一些细节</h2></li>
</ul>
</li>
<li><img src="/imgs/2f599b49457b10b963d6c4a24319038a9f538e054fe4396e208f08f399964f6c.png" alt="picture 4">  <ul>
<li>一般不会一次下降就将所有数据输入求梯度进行下降， 而是选择<code>mini- batch</code>多少的数据进行计算，求损失函数并且下降</li>
</ul>
</li>
<li><img src="/imgs/6d2d633decf1b0459a7ebbe745096c54056d1d682c261912d664eb8c3df64049.png" alt="picture 5">  </li>
<li><img src="/imgs/2daacbfb51d5ac783c19e8db11c41c00f3420c8b7e80150e41c8ddc8e7f096c5.png" alt="picture 6">  <h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2></li>
<li><img src="/imgs/3272e16d2757781267157095316a5b681cc51af8be1ea89dff3206e4ceb532ea.png" alt="picture 9">  <ul>
<li>本质上是矩阵和卷积核的<u>对应位置相乘然后求和</u><h2 id="图神经网路做的事"><a href="#图神经网路做的事" class="headerlink" title="图神经网路做的事"></a>图神经网路做的事</h2></li>
</ul>
</li>
<li><img src="/imgs/1361fea356f8550570bd9bfded9ca1513daea40007635e02fa492e0e09bcdd77.png" alt="picture 7">  </li>
<li>本质上是将<strong>一个个的节点映射成低维空间中的点</strong>（向量），点之间的距离反映关联程度<ul>
<li><img src="/imgs/1ffbacd78d483acc38f86dd0072e00036d043b3bbfcea1dd710ba836c6fb66d2.png" alt="picture 8">  </li>
</ul>
</li>
<li>图神经网路得层数（不是其中神经网络得层数，而是每个节点的邻居的层数）不能太深，否则所有节点的最终总邻居都差不多，导致所有节点的最终结果都类似，称为过平滑<ul>
<li><img src="/imgs/281e3fb46c6e7887157c463baae0682dd54932f023ad27d0ab9f854d1e2322cf.png" alt="picture 10">  </li>
</ul>
</li>
<li><img src="/imgs/275a596b0bccfbb2071c2f982ff6838463c38b0307a9639577e63f8cb6569f22.png" alt="picture 12">  <ul>
<li>此处<strong>H矩阵左乘一个A阵</strong>做的事实际上是从H矩阵中选出与点邻接的点的嵌入，将其累加</li>
<li><img src="/imgs/bbbf41392fc0b51350f6eb82b681012e66ec3765f0a0ee628ac44cf21ed3384e.png" alt="picture 13">  <ul>
<li><code>D^-1A</code>实际上代表的是每个邻接节点相加的权重，比如三个节点就是每个点1/3，四个就是每个点1/4</li>
</ul>
</li>
</ul>
</li>
<li><strong>经过矩阵线性变换方向不变的向量就是矩阵的特征向量，幅值变化的幅度就是矩阵的特征值</strong></li>
<li><img src="/imgs/74fd3c2b073b662da1f8018a72ebe0b374168a295a1f86c0893551128f7cd4ef.png" alt="picture 14">  <ul>
<li>上述矩阵是为了保证矩阵的最大特征值恒定是1，同时考虑到一个节点的下一个节点多少，比如一个节点项链的节点多，那么与这个节点相邻的节点的权重就会下降而不是随意平均分布</li>
</ul>
</li>
<li><img src="/imgs/47ba41b2302f49ba2dcd4bfbfe7502d504ceb3a9d89aeef0ac2f3aa25ca04411.png" alt="picture 16">  <ul>
<li>计算流程</li>
<li><img src="/imgs/edbc989af48e46213dad734eacfcd0933ab4d1236b2dac9d1ea3460898fde126.png" alt="picture 17">  </li>
</ul>
</li>
<li><img src="/imgs/a4ea27692228b51fd11407af888d18a0f647c602d28277bb1c4f34cbe8c63326.png" alt="picture 18">  </li>
</ul>
<h3 id="最简单的图卷积神经网路"><a href="#最简单的图卷积神经网路" class="headerlink" title="最简单的图卷积神经网路"></a>最简单的图卷积神经网路</h3><ul>
<li><img src="/imgs/5aec50e2652e990dde38f90d053ee9df24645c0ef259dad872d96d1535c23602.png" alt="picture 11">  <h3 id="图卷积最终形式的计算图"><a href="#图卷积最终形式的计算图" class="headerlink" title="图卷积最终形式的计算图"></a>图卷积最终形式的计算图</h3></li>
<li><img src="/imgs/6a086a8e9fc3fea9696beaf9ce57f55c60d388da3b25e61a9291ffd45f2729fb.png" alt="picture 15">  <h2 id="Alpha-Zero的操作"><a href="#Alpha-Zero的操作" class="headerlink" title="Alpha Zero的操作"></a>Alpha Zero的操作</h2></li>
<li><img src="/imgs/1fca348d4e6bead3bbeb88771f7d96e891be63ff75595ce265d990ee25e572fc.png" alt="picture 19">  </li>
</ul>
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>图神经网路</tag>
      </tags>
  </entry>
  <entry>
    <title>基于WSL开发内核模块</title>
    <url>/2022/08/08/%E5%9F%BA%E4%BA%8EWSL%E5%BC%80%E5%8F%91%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="WSL内核更换为自定义版本（解决微软安装的内核版本源码找不到的问题）"><a href="#WSL内核更换为自定义版本（解决微软安装的内核版本源码找不到的问题）" class="headerlink" title="WSL内核更换为自定义版本（解决微软安装的内核版本源码找不到的问题）"></a>WSL内核更换为自定义版本（解决微软安装的内核版本源码找不到的问题）</h2><ul>
<li><a href="https://blog.csdn.net/m0_46161993/article/details/109062992">编译自定义内核参考连接</a></li>
<li><a href="https://blog.csdn.net/chubbykkk/article/details/125216332">替换自定义内核参考</a></li>
<li>效果<ul>
<li><img src="/imgs/d543dbfb866f2ea29a9c8841d6d6100514d0bef1c8278ed300c480e03ac57786.png" alt="图 1">  </li>
<li>注意，<strong>config-wsl</strong>文件中的<code>CONFIG_LOCALVERSION=&quot;-microsoft-wsl&quot;</code>是<strong>可以修改</strong>的<h2 id="模块的安装和卸载"><a href="#模块的安装和卸载" class="headerlink" title="模块的安装和卸载"></a>模块的安装和卸载</h2></li>
</ul>
</li>
<li>安装：<code>sudo insmod &lt;模块文件名&gt;</code></li>
<li>卸载：<code>rmmod &lt;模块文件名&gt;</code></li>
<li>查看模块信息 <code>modinfo &lt;模块文件名&gt;</code></li>
<li><a href="https://zhuanlan.zhihu.com/p/268363827">参考链接</a></li>
<li>打开系统日志可见效果;</li>
<li><img src="/imgs/01d831157a75cf187c848e60646f401dc4a953698b903fe4d961239b81c4f0da.png" alt="图 2">  <h2 id="在-proc下创建文件并且通过读写该文件实现与内核的交互"><a href="#在-proc下创建文件并且通过读写该文件实现与内核的交互" class="headerlink" title="在/proc下创建文件并且通过读写该文件实现与内核的交互"></a>在/proc下创建文件并且通过读写该文件实现与内核的交互</h2></li>
<li><a href="https://www.cnblogs.com/Ph-one/p/5530320.html">参考链接</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/486960022">参考链接</a></li>
<li><a href="https://www.jianshu.com/p/2ddd32527367">参考连接</a></li>
<li>上述参考链接由一些错误之处，比如需要include <code>#include &lt;linux/uaccess.h&gt;</code><ul>
<li><code>proc_ops</code>的结构体ing不是<code>file_operations</code>，而是自己的结构<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc_ops</span> <span class="title">procOps</span> =</span> </span><br><span class="line">&#123;</span><br><span class="line">    .proc_open = demo_open,</span><br><span class="line">    .proc_write = demo_set,</span><br><span class="line">    <span class="comment">// .read = seq_read,</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>create_proc_entry</code>函数往往找不到需要替换成<code>proc_create</code>函数</li>
<li><code>single_open</code>实际上是<code>simple_open</code>等等</li>
<li>需要自己通过查看相应的头文件进行修正<h2 id="添加内核服务器并连接"><a href="#添加内核服务器并连接" class="headerlink" title="添加内核服务器并连接"></a>添加内核服务器并连接</h2></li>
<li><a href="http://blog.chinaunix.net/uid-29043620-id-5843468.html">参考链接</a></li>
<li><a href="https://www.freesion.com/article/7378816741/">参考链接</a></li>
<li>基本方法与创建Socket类似，用户需要自己定义一个内核端口号用于跟用户程序通信，用户程序只要跟相同端口号通信即可。</li>
</ul>
<h2 id="内核线程的创建"><a href="#内核线程的创建" class="headerlink" title="内核线程的创建"></a>内核线程的创建</h2><ul>
<li><a href="https://www.cnblogs.com/Ph-one/p/6077787.html">参考链接</a></li>
<li>主要是<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct task_struct *<span class="title">kthread_create</span><span class="params">(<span class="keyword">int</span> (*threadfn)(<span class="keyword">void</span> *data),</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">void</span> *data,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">const</span> <span class="keyword">char</span> namefmt[], ...)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>和<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wake_up_process</span><span class="params">(struct task_struct *tsk)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>两个函数</li>
<li>因为使用<code>kthread_create</code>创建线程之后<strong>并不会立即开始执行</strong>，需要通过<code>wake_up_process</code>函数使其开始执行才可以。</li>
</ul>
<h2 id="内核互斥锁等"><a href="#内核互斥锁等" class="headerlink" title="内核互斥锁等"></a>内核互斥锁等</h2><ul>
<li><a href="https://www.lmlphp.com/user/60011/article/item/607287/">参考链接</a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mutex.h&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>加锁<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mutex_lock</span><span class="params">(struct mutex *lock)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>解锁<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mutex_unlock</span><span class="params">(struct mutex *lock)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="内核动态内存分配"><a href="#内核动态内存分配" class="headerlink" title="内核动态内存分配"></a>内核动态内存分配</h2></li>
<li><a href="https://blog.csdn.net/W_shaolin/article/details/121070583">参考链接</a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *<span class="title">kmalloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">gfp_t</span> flags)</span></span></span><br></pre></td></tr></table></figure>
<h2 id="内核延时"><a href="#内核延时" class="headerlink" title="内核延时"></a>内核延时</h2></li>
<li><a href="https://blog.csdn.net/liangzc1124/article/details/121756964">参考链接</a></li>
</ul>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><ul>
<li><a href="https://gitee.com/frankzhang0219/linuxKernelServer">仓库链接</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>在固态和机械盘上安装Ubuntu</title>
    <url>/2022/03/02/%E5%9C%A8%E5%9B%BA%E6%80%81%E5%92%8C%E6%9C%BA%E6%A2%B0%E7%9B%98%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu/</url>
    <content><![CDATA[<h1 id="在固态和机械盘上安装Ubuntu"><a href="#在固态和机械盘上安装Ubuntu" class="headerlink" title="在固态和机械盘上安装Ubuntu"></a>在固态和机械盘上安装Ubuntu</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>挂载系统不同分区的时候，注意/和/home的空间大小是按照/来计算的，也就是说假如/home是另外挂载在容量更大的机械硬盘上的话，是无法使用的，同样会因为空间超出而导致无法继续使用</li>
</ul>
<h2 id="系统映像烧写"><a href="#系统映像烧写" class="headerlink" title="系统映像烧写"></a>系统映像烧写</h2><ul>
<li>使用UltraISO点击此处打开.iso文件</li>
<li><img src="/imgs/image-20220302114757775.png" alt="image-20220302114757775"></li>
<li>打开之后选择启动–写入硬盘映像</li>
<li><img src="/imgs/image-20220302114830381.png" alt="image-20220302114830381"></li>
<li>然后选择插入的U盘</li>
<li><img src="/imgs/image-20220302114901025.png" alt="image-20220302114901025"></li>
<li>开始写入即可</li>
</ul>
<hr>
<ul>
<li>系统安装参考链接<a href="https://www.cnblogs.com/booturbo/p/10265039.html">https://www.cnblogs.com/booturbo/p/10265039.html</a></li>
</ul>
<h2 id="磁盘空间划分"><a href="#磁盘空间划分" class="headerlink" title="磁盘空间划分"></a>磁盘空间划分</h2><ul>
<li>在C盘划分大约<strong>40G</strong>的空闲空间，在机械盘划分<strong>150G</strong>的空闲空间，然后开始安装</li>
</ul>
<h3 id="进入BIOS并且使用U盘启动"><a href="#进入BIOS并且使用U盘启动" class="headerlink" title="进入BIOS并且使用U盘启动"></a>进入BIOS并且使用U盘启动</h3><ul>
<li><p>我的电脑是微星主板，按下开机键之后连续按下delete直到进入BIOS界面</p>
</li>
<li><p>无论是简易模式还是高级模式都能找到这个拖动条</p>
</li>
<li><p><img src="/imgs/image-20220302115447406.png" alt="image-20220302115447406"></p>
</li>
<li><p>用鼠标将U盘拖动到第一个即可</p>
</li>
<li><p>点击右上角<code>x</code>保存并退出</p>
</li>
<li><p>选择normal installation</p>
</li>
<li><p>点击continue，等待一段时间</p>
</li>
<li><p>此处选择something else</p>
</li>
<li><p><img src="/imgs/image-20220302115923889.png" alt="image-20220302115923889"></p>
</li>
<li><p>首先选中free space ，划分/boot分区512M即可</p>
</li>
<li><p><img src="/imgs/image-20220302120523616.png" alt="image-20220302120523616"></p>
</li>
<li><p>此时划分交换空间8G</p>
</li>
<li><p><img src="/imgs/image-20220302120719950.png" alt="image-20220302120719950"></p>
</li>
<li><p>C盘的剩余空间划分给系统<code>/</code>目录</p>
</li>
<li><p><img src="/imgs/image-20220302121047750.png" alt="image-20220302121047750"></p>
</li>
<li><p>机械盘上的空间划分给/home</p>
</li>
<li><p><img src="/imgs/image-20220302121132920.png" alt="image-20220302121132920"></p>
</li>
<li><p><strong>注意，device for boot loader installation选择/boot所在的分区，否则有可能<u>安装好后系统无法启动</u></strong></p>
</li>
<li><p><img src="/imgs/image-20220302122927538.png" alt="image-20220302122927538"></p>
</li>
</ul>
<hr>
<ul>
<li><p>有时候，安装好Ubuntu之后，微星主板启动的时候<strong>还是会直接进入Windows，无法进入Ubuntu</strong>，这是因为<strong>硬盘启动项</strong>的原因</p>
</li>
<li><p><img src="/imgs/image-20220302153254474.png" alt="image-20220302153254474"></p>
<ul>
<li><p>顺序为，先点击顶部的倒梯形切换到高级模式，然后点击设置-启动-底部的<code>UEFI硬盘BBS优先权</code></p>
</li>
<li><p><img src="/imgs/image-20220302153411158.png" alt="image-20220302153411158"></p>
</li>
<li><p>将第一个选择为Ubuntu即可</p>
</li>
</ul>
</li>
<li><p>退出BIOS设置，重新启动，可见已经可以进入ubuntu提供的系统选择的界面了</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>堆排序和快排</title>
    <url>/2022/01/20/%E5%A0%86%E6%8E%92%E5%BA%8F%E5%92%8C%E5%BF%AB%E6%8E%92/</url>
    <content><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//heapSort 构建大顶堆或者小顶堆，将堆顶元素与堆尾元素交换后再调整，如此反复</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//构建大顶堆 k为最后一个非叶子节点，逐渐-1，即从下向上，从右往左</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = arr.length/<span class="number">2</span> - <span class="number">1</span>;k&gt;=<span class="number">0</span>;k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">adjustHeap</span>(arr,k,arr.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序 交换+调整</span></span><br><span class="line">    <span class="keyword">int</span> temp =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">    &#123;</span><br><span class="line">        temp =arr [<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="built_in">adjustHeap</span>(arr,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param arr 待调整数组</span></span><br><span class="line"><span class="comment">     * @param i 非叶子节点在数组中的索引</span></span><br><span class="line"><span class="comment">     * @param length 对多少个元素进行调整</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];<span class="comment">//取出当前非叶子叶结点的值</span></span><br><span class="line">    <span class="comment">//k为当前节点的左子节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>*i+<span class="number">1</span>;k&lt;length;k=<span class="number">2</span>*k+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k+<span class="number">1</span>&lt;length &amp;&amp; arr[k+<span class="number">1</span>]&gt;arr[k])</span><br><span class="line">        &#123;<span class="comment">//右子节点大于左子节点</span></span><br><span class="line">            k++;<span class="comment">//k指向右子节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[k]&gt;temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果当前节点大于父节点就交换</span></span><br><span class="line">            arr[i] = arr[k];</span><br><span class="line">            i = k;<span class="comment">//!!!!!!精髓，因为该子节点值大小发生了改变，可能会使其子根堆发生改变，索引要调整其子根堆</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//否则直接退出，因为其后面的节点一定满足堆定义</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>一个对象的下标为i，他的左右子节点分别是<code>2i+1</code>和<code>2i+2</code></li>
<li>更换节点的时候</li>
</ul>
<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//quickSort 每次选择一个元素并且将整个数组以这个元素分为两部分，小于该元素的放右边，大于该元素的放左边</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)&#123; <span class="comment">//跳出递归的条件</span></span><br><span class="line">        <span class="comment">//partition就是划分操作，将arr划分成满足条件的两个子表</span></span><br><span class="line">        <span class="keyword">int</span> pivotpos = <span class="built_in">partition</span>(arr,l,r);</span><br><span class="line">        <span class="comment">//依次对左右两个子表进行递归排序</span></span><br><span class="line">        <span class="built_in">quickSort</span>(arr,l,pivotpos);</span><br><span class="line">        <span class="built_in">quickSort</span>(arr,pivotpos+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//以当前数组的最后一个元素作为中枢pivot，进行划分</span></span><br><span class="line">    <span class="keyword">int</span> pivot = arr[r];</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r &amp;&amp; arr[l]&lt;pivot) l++;</span><br><span class="line">        arr[r] = arr[l];<span class="comment">//将比中枢值大的移动到右端r处 由于r处为中枢或者该位置值已经被替换到l处，所以直接可以替换</span></span><br><span class="line">        <span class="keyword">while</span> (l&lt;r &amp;&amp; arr[r]&gt;=pivot) r--;</span><br><span class="line">        arr[l] = arr[r];<span class="comment">//将比中枢值小的移动到左端l处 由于前面l处的值已经换到r处，所以该位置值也可以替换掉</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//l==r时，重合，这个位置就是中枢的最终位置</span></span><br><span class="line">    arr[l] = pivot;</span><br><span class="line">    <span class="comment">//返回存放中枢的最终位置</span></span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>主要的思路是每次选择一个（实际上一般是最右边的那一个）元素作为标准，将比这个元素小的元素移动到数组的左边，大的移动到右边，最后实现这个元素的左边的所有元素都比这个元素小，右边的都比这个大。然后再分别对左边和右边的数组分别排序，实现递归。<h2 id="Leetcode-295-数据流的中位数"><a href="#Leetcode-295-数据流的中位数" class="headerlink" title="Leetcode 295. 数据流的中位数"></a>Leetcode 295. 数据流的中位数</h2></li>
<li>用一个最小堆记录大于中位数的数字，和一个最大堆记录小于中位数的数字</li>
<li>新加入的数字与小于中位数的数字中的最大值比较，决定插入哪个堆</li>
<li>根据总数替换中位数的值<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, less&lt;<span class="keyword">int</span>&gt;&gt; queMin;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; queMax;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queMin.<span class="built_in">empty</span>() || num &lt;= queMin.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            queMin.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (queMax.<span class="built_in">size</span>() + <span class="number">1</span> &lt; queMin.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                queMax.<span class="built_in">push</span>(queMin.<span class="built_in">top</span>());</span><br><span class="line">                queMin.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            queMax.<span class="built_in">push</span>(num);</span><br><span class="line">            <span class="keyword">if</span> (queMax.<span class="built_in">size</span>() &gt; queMin.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                queMin.<span class="built_in">push</span>(queMax.<span class="built_in">top</span>());</span><br><span class="line">                queMax.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (queMin.<span class="built_in">size</span>() &gt; queMax.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> queMin.<span class="built_in">top</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (queMin.<span class="built_in">top</span>() + queMax.<span class="built_in">top</span>()) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用VSCode搜索包含引用的内容</title>
    <url>/2023/03/04/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8VSCode%E6%90%9C%E7%B4%A2%E5%8C%85%E5%90%AB%E5%BC%95%E7%94%A8%E7%9A%84%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<ul>
<li>按下<code>Ctrl+SHift+F</code>打开搜索页面如下<ul>
<li><img src="/imgs/c01bce8d66758b4e912c1c03da664c8124e0edbdd2b3b73ad96bc8640cd879eb.png" alt="picture 1">  </li>
</ul>
</li>
<li>然后点击三个点，弹出包含和不包含文件目录</li>
<li>此时需要输入（以Linux内核文件包含头文件目录为例）<code>/usr/src/linux-headers-5.4.0-139-generic</code></li>
<li>然后在顶栏输入搜索的内容即可<ul>
<li><img src="/imgs/1619e53c3466b3811dcb0402486e2009f09bda2461e6423f4866b5f17fe6dddf.png" alt="picture 4">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>VsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Win电脑上调试iOS设备的网页</title>
    <url>/2023/07/27/%E5%A6%82%E4%BD%95%E5%9C%A8Win%E7%94%B5%E8%84%91%E4%B8%8A%E8%B0%83%E8%AF%95iOS%E8%AE%BE%E5%A4%87%E7%9A%84%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul>
<li><a href="https://blog.csdn.net/weixin_44738381/article/details/109027446">参考</a></li>
<li>微软应用商店安装<code>iTunes</code></li>
<li>安装scoop<ul>
<li>powershell输入<code>iwr -useb get.scoop.sh | iex</code></li>
</ul>
</li>
<li>安装插件和环境<ul>
<li><code>scoop bucket add extras</code></li>
<li><code>scoop install ios-webkit-debug-proxy</code></li>
</ul>
</li>
<li>安装调试器（需要node.js）<ul>
<li><code>npm install remotedebug-ios-webkit-adapter -g</code><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2></li>
</ul>
</li>
<li>打开iOS设备的<strong>设置—&gt;Safari浏览器—&gt;高级—&gt;将网页检查器打开</strong></li>
<li>启动iTunes</li>
<li>使用iPad数据线链接电脑的Type-C接口和iPad</li>
<li>首次连接可能需要在iOS设备上信任本电脑</li>
<li>开启插件<code>remotedebug_ios_webkit_adapter --port=9000</code><ul>
<li><img src="/imgs/9447c904b98f9e27cfdbf22f9ee582b15e01deec1768a3fc1ca9bb51e45fc9cf.png" alt="picture 0">  </li>
</ul>
</li>
<li>添加上面监听的端口9000<ul>
<li><img src="/imgs/9d15f0e5aae7dfc05f62716638b6ae5f3a6d6a7befb88ab12f88a58218eacbd6.png" alt="picture 1">  </li>
<li><img src="/imgs/96a9234b13a0b280eea2dda999178879e1240533f44388b13fe905e9bd136a2f.png" alt="picture 2">  </li>
</ul>
</li>
<li>连接上iPad设备<ul>
<li><img src="/imgs/5636a52cdf68b5a8049061f1dc80d75f9e3be0f245c60eb57ae416412ad9c1e0.png" alt="picture 3">  </li>
<li>点击<code>inspect</code>查看网页</li>
<li><img src="/imgs/37f71f0b6bb255c3ee37342a6d95b3f64bb232cad7a00a55c9cb8e036dce2b32.png" alt="picture 4">  <h2 id="控制台传输问题"><a href="#控制台传输问题" class="headerlink" title="控制台传输问题"></a>控制台传输问题</h2></li>
</ul>
</li>
<li>有时候safari无法捕捉到网页的控制台输出，导致chrome远程调试的时候无法输出JavaScript中的<code>console.log()</code>信息</li>
<li><img src="/imgs/2fb611ababbcce3923c51b289a085ba1b0c34d0362d5c853cc110d8589a793ee.png" alt="picture 5">  </li>
<li><code>console.error()</code>一样无法输出，此时只能在html中创建一个元素手动修改其<code>innerHTML</code>来显示输出<h2 id="DOM元素参考"><a href="#DOM元素参考" class="headerlink" title="DOM元素参考"></a>DOM元素参考</h2></li>
<li><a href="https://www.w3schools.com/tags/ref_av_dom.asp">w3school</a><h2 id="safari-iPad-端播放MP4的编码注意事项"><a href="#safari-iPad-端播放MP4的编码注意事项" class="headerlink" title="safari(iPad)端播放MP4的编码注意事项"></a>safari(iPad)端播放MP4的编码注意事项</h2></li>
<li> H.264 视频编码和 AAC 音频编码</li>
<li>MP4 文件的元数据（称为 moov box）应该位于文件的开头<ul>
<li> ffmpeg选项为<code>-movflags faststart</code></li>
</ul>
</li>
<li>将视频的声道设置为<strong>双声道</strong>（某些多声道的视频即使视频编码无问题也无法播放）<ul>
<li> ffmpeg选项<code>-ac 2</code></li>
</ul>
</li>
<li>html播放器遇到不支持的视频的时候可能会出现<code>video</code>标签的<ul>
<li>networkState为<code>3</code></li>
<li>readyState为<code>0</code></li>
<li><code>error.code</code>为<code>4</code>也就是<code>MEDIA_ERR_SRC_NOT_SUPPORTED</code></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>html</tag>
        <tag>iOS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>小空间词频统计</title>
    <url>/2022/08/29/%E5%B0%8F%E7%A9%BA%E9%97%B4%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="大数据问题的一般思路"><a href="#大数据问题的一般思路" class="headerlink" title="大数据问题的一般思路"></a>大数据问题的一般思路</h2><ul>
<li><img src="/imgs/de52034f9740d556c3569a224bb4bc6ba1d9926fdec348c89cfb28b7d82fd640.png" alt="图 9">  <h2 id="利用位数组"><a href="#利用位数组" class="headerlink" title="利用位数组"></a>利用位数组</h2></li>
<li>利用基础类型（比如int）制作一个bit数组</li>
<li>比如一个int是32位，那么10个int就是320位的位数组</li>
<li>利用<u>每个位的1和0</u>计数数字的存在与否<h2 id="小空间词频统计"><a href="#小空间词频统计" class="headerlink" title="小空间词频统计"></a>小空间词频统计</h2></li>
<li>假如用一个小空间计算40亿个数字中<code>unsigned int</code>中的<u>哪个不包括在内</u><ul>
<li>先申请允许内存大小的数组，检查系统内存能够允许的数组长度，找<u>最近的长度为2的整数幂次</u>的数组长度作为长度</li>
<li>然后按照数组的长度均分<code>unsigned int</code>范围得到小的范围长度</li>
<li>遍历整个数组，每个元素除以小范围的长度，结果向下取整得到自己属于哪个小范围</li>
<li>将词频数组对应的index位置（上一步计算的结果）<code>+1</code></li>
<li>循环一遍之后，词频数组中肯定有某个位置的词频达不到理论上的小范围长度</li>
<li>将整个统计范围的长度从整个<code>unsigned int</code>范围调整到上一个词频达不到满的小范围</li>
<li><u>重复上述步骤</u>遍历整个数据，丢弃所有不在范围内的数字，其他数字按照第二次划分的小范围分类，统计结束之后再看哪个位置的词频达不到此时的小范围</li>
</ul>
</li>
<li>统计巨量URL的访问次数<ul>
<li>使用哈希函数将URL转换，然后分流到一定数量（按照服务器的内存资源决定）的小文件中，每个小文件使用一个利用<u>URL被访问次数</u>组织的大根堆</li>
<li>将每个大根堆的堆顶组织成大根堆得到总堆</li>
<li>结果就是依次将内容从总堆中弹出，弹出之后找到这个元素原来所在的大根堆，同样将这个元素弹出，然后弹出后的大根堆的头部放入总大根堆中。</li>
</ul>
</li>
<li>利用位数组统计出现了两次的数字<ul>
<li>用<strong>两位</strong>表示一个数字是否出现过</li>
<li><code>00</code>没出现过，<code>01</code>出现一次，<code>10</code>出现两次，<code>11</code>出现大于2次</li>
</ul>
</li>
<li>利用小空间找<strong>中位数</strong><ul>
<li>同样利用小范围词频统计（第一种）操作</li>
<li>统计到找出中位数在哪个小分区里</li>
<li>然后对这个对应的小分区再等分找到具体的中位数的位置<h2 id="小空间给大数组"><a href="#小空间给大数组" class="headerlink" title="小空间给大数组"></a>小空间给大数组</h2></li>
</ul>
</li>
<li>方法一<ul>
<li>小空间使用小根堆</li>
<li>小根堆存储的内容是&lt;数字，出现次数&gt;的元组，有小根堆中存在的数字的时候，相应的出现次数+1</li>
<li>小根堆不能直接用一条记录的空间计算，<u>需要考虑一些额外的开销</u>，实际可用的空间可能是总空间/16或者其他数值</li>
<li>堆的大小用最接近的2的整数次幂次</li>
<li>然后按照被排序的内容/堆的大小得到被排序内容按大小分的小段</li>
<li>第一次处理落在最小部分段内的数据，第二次处理第二小部分段内的数据…</li>
<li>都处理完即可得到所有排序</li>
</ul>
</li>
<li>方法二<ul>
<li>使用一个大根堆存储此时数组中最小的几种数字</li>
<li>假如此时一个新的数字小于此时大根堆中最大的数字，那么可以加入</li>
<li>假如这个数字比大根堆中最大的数字还大，那么说明这个数字不属于整个数组中最小的k个数字之一，直接忽略（k为堆的大小）</li>
<li>假如此时大根堆的数字超出数字限制，那么将最大的数字弹出然后将新的数字压入</li>
<li>然后将大根堆内的所有数字逆序排出并清空堆，然后给堆设置最小值，等于上次弹出之前堆中最大的数字，以后只考虑大于这个数字的数</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集相关</title>
    <url>/2022/08/26/%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><ul>
<li><p>并查集支持<strong>集合合并</strong></p>
</li>
<li><p>提供的操作：</p>
<ul>
<li>查询两个样本是否属于同一个集合</li>
<li>提供两个不同的集合的合并操作</li>
</ul>
</li>
<li><p>实际上是给出一个<strong>向上指针</strong>的图结构，看一个元素<strong>向上指的指针一直到不能再往上找到代表元素</strong>，看是否是同一个元素</p>
<ul>
<li>合并集合的操作就是将内容少的集合直接通过指针连在内容多的集合下面即可（二者向上到最顶就会指向同一个元素）</li>
</ul>
</li>
<li><p>并查集向上找最顶节点的优化：</p>
<ul>
<li>在每个元素向上遍历找最顶结点的之后，将遍历经过的整条链上的所有节点的父节点直接更改为最顶的节点</li>
<li><img src="/imgs/71dc4c9665f1d746036fb857732b28b556ecbb705e1de924cb25ff4262704c78.png" alt="图 7">  </li>
<li><img src="/imgs/c2e3e7dfcfa68bb6419a50e2a18a6a5f925a60ae043c1b830b51ea47d7941641.png" alt="图 8">  </li>
<li>防止某一个链过长的问题<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> class14;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code05_UnionFind</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">		V value;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line">			value = v;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// 样本对应的图中的node表</span></span><br><span class="line">		<span class="keyword">public</span> HashMap&lt;V, Node&lt;V&gt;&gt; nodes;</span><br><span class="line">        <span class="comment">// 一个元素对应的父是谁</span></span><br><span class="line">		<span class="keyword">public</span> HashMap&lt;Node&lt;V&gt;, Node&lt;V&gt;&gt; parents;</span><br><span class="line">        <span class="comment">// 图中代表元素（最顶上元素）对应的集合具有几个点</span></span><br><span class="line">		<span class="keyword">public</span> HashMap&lt;Node&lt;V&gt;, Integer&gt; sizeMap;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(List&lt;V&gt; values)</span> </span>&#123;</span><br><span class="line">			nodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">			parents = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">			sizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">			<span class="keyword">for</span> (V cur : values) &#123;</span><br><span class="line">				Node&lt;V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(cur);</span><br><span class="line">				nodes.put(cur, node);</span><br><span class="line">                <span class="comment">// 一个元素的父节点默认是自己</span></span><br><span class="line">				parents.put(node, node);</span><br><span class="line">                <span class="comment">// 每个元素都是代表元素</span></span><br><span class="line">				sizeMap.put(node, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 给你一个节点，请你往上到不能再往上，把代表返回</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Node&lt;V&gt; <span class="title">findFather</span><span class="params">(Node&lt;V&gt; cur)</span> </span>&#123;</span><br><span class="line">			Stack&lt;Node&lt;V&gt;&gt; path = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">			<span class="keyword">while</span> (cur != parents.get(cur)) &#123;</span><br><span class="line">				path.push(cur);</span><br><span class="line">				cur = parents.get(cur);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">// 优化父节点</span></span><br><span class="line">			<span class="keyword">while</span> (!path.isEmpty()) &#123;</span><br><span class="line">				parents.put(path.pop(), cur);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> cur;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 此处应该增加判断a和b是否存在</span></span><br><span class="line">			<span class="keyword">return</span> findFather(nodes.get(a)) == findFather(nodes.get(b));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 此处应该增加判断a和b是否存在</span></span><br><span class="line">			Node&lt;V&gt; aHead = findFather(nodes.get(a));</span><br><span class="line">			Node&lt;V&gt; bHead = findFather(nodes.get(b));</span><br><span class="line">			<span class="keyword">if</span> (aHead != bHead) &#123;</span><br><span class="line">				<span class="keyword">int</span> aSetSize = sizeMap.get(aHead);</span><br><span class="line">				<span class="keyword">int</span> bSetSize = sizeMap.get(bHead);</span><br><span class="line">				Node&lt;V&gt; big = aSetSize &gt;= bSetSize ? aHead : bHead;</span><br><span class="line">				Node&lt;V&gt; small = big == aHead ? bHead : aHead;</span><br><span class="line">				parents.put(small, big);</span><br><span class="line">				sizeMap.put(big, aSetSize + bSetSize);</span><br><span class="line">                <span class="comment">// 小集合的头节点不在是头节点</span></span><br><span class="line">				sizeMap.remove(small);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> sizeMap.size();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>按照上面方式实现的并查集的实现，如果上面的findFather函数的调用次数达到了O(N)的水平，单次findFather调用的开销是O(1)水平</p>
</li>
<li><p>一般认为使用并查集的时间复杂度是O(1)的</p>
<h2 id="并行计算问题"><a href="#并行计算问题" class="headerlink" title="并行计算问题"></a>并行计算问题</h2></li>
<li><p><img src="/imgs/e29aff06d9eda4c8b36d408f5a222054e00312876b52a624ef0d4042ddba49bf.png" alt="图 6">  </p>
</li>
<li><p> 假如将一张大图直接划分成两个部分分别执行的话会因为两部分相互分割导致岛的数量变多</p>
</li>
<li><p>需要合并逻辑在执行结束之后合并多余的岛</p>
<ul>
<li> 搜集每个在<strong>矩阵被分割边界</strong>上的被统计点的最开始统计的点是哪个</li>
<li> <img src="/imgs/5c6a91e4e1ecce59b214291d25caa18d291bb57a47912c05dfff599e4c14c1f4.png" alt="图 9">  </li>
<li> 讨论边界相连的岛的情况，去并查集查询父亲的情况，不是同一个的话就<strong>合并并且总数-1</strong></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>安装NodeJS以及hexo</title>
    <url>/2021/12/08/%E5%AE%89%E8%A3%85NodeJS%E4%BB%A5%E5%8F%8Ahexo/</url>
    <content><![CDATA[<h1 id="安装nodeJS以及hexo框架的踩坑笔记"><a href="#安装nodeJS以及hexo框架的踩坑笔记" class="headerlink" title="安装nodeJS以及hexo框架的踩坑笔记"></a>安装nodeJS以及hexo框架的踩坑笔记</h1><ul>
<li>版本问题：<br>一开始使用的是最新版本的NodeJS然后安装完成Hexo之后发现不能在控制台使用hexo init blog，显示hexo不是命令。<br>然后使用HodeJS12.0.0，自带npm，安装完成（注意不要使用13等版本，npm不是支持每个nodeJS版本）</li>
<li>假如直接<code>git clone</code>hexo的仓库报错的话可能是换设备之后 <strong>无法通用</strong> ，还是需要在 <strong>原设备</strong> 上才能打的开<img src="/imgs/image-20211214003223898.png" alt="image-20211214003223898"></li>
<li>假如重装hexo失败的话，删除图中文件夹下的hexo有关的所有内容<img src="/imgs/image-20211208201712068.png" alt="image-20211208201712068"></li>
<li>安装完成之后在控制台输入以下代码，假如没有报错而且能够正确显示版本号的话说明安装成功<br><code>node -v</code><code>npm -v</code></li>
</ul>
<ul>
<li>另注意，假如安装完nodeJS之后，输入<code>node -v</code>得到的版本和安装的 <strong>不同</strong> ，此时需要将NodeJS卸载然后安装在 <strong>默认的安装位置</strong> 。注意，AMD CPU的计算机下载x86的，Intel的下载x64的msi安装文件</li>
</ul>
<ul>
<li><p>插入图片问题<br>有时候插入的图片会加载失败比如显示为 <img src="/imgs/2.png" alt="2">，此时可以通过以下几步解决问题</p>
</li>
<li><p>首先，在source目录下新建一个文件夹比如imgs</p>
<p><img src="/imgs/image-20211208204226807.png" alt="image-20211208204226807"></p>
<p>然后把typora的根目录设置为source</p>
<p><img src="/imgs/image-20211208204322540.png" alt="image-20211208204322540"></p>
<p>然后设置将图片复制到imgs下</p>
<p><img src="/imgs/image-20211208204358165.png" alt="image-20211208204358165"></p>
<p>配置好上述功能之后，直接把用到的图片从剪贴板复制到typora即可</p>
<p><strong>不要安装</strong>网上博客说的插件，安装之后可能无法启动网站</p>
<p>也<strong>不需要</strong>在config中开启每新建一篇博客就新建一个文件夹之类的选项，反而更麻烦</p>
</li>
<li><p>修改主题<br>从github将主题项目 <code>git clone</code>到blogs的 <code>\themes\&lt;主题名称&gt;</code>文件夹，然后将总目录下的 <code>_config.yml</code>中的 <code>theme</code>更换为&lt;主题名称&gt;<br>假如无法clone的话，可以将项目打包下载然后解压到同样的文件夹中即可</p>
</li>
<li><p>设置个人信息如下图<br><img src="/imgs/3.png" alt="3"></p>
</li>
<li><p>此外，在主题的配置文件中（也是 <code>_config.yml</code>）也有一些可以修改的地方，可以自己动手改一改</p>
</li>
<li><p>在推送网站之前需要安装一个git配合插件<br><code>npm install hexo-deployer-git --save</code></p>
</li>
</ul>
<h2 id="更换设备"><a href="#更换设备" class="headerlink" title="更换设备"></a>更换设备</h2><ul>
<li>注意更换设备的时候<strong>不能</strong>简单的<code>git clone</code>，这样的话是无法打开的。只能自己在本地新建一个博客，然后将<code>source</code>和<code>themes</code>以及<code>config</code>文件和文件夹都 <strong>复制进去</strong></li>
</ul>
<h2 id="部署的地址"><a href="#部署的地址" class="headerlink" title="部署的地址"></a>部署的地址</h2><ul>
<li>部署的时候 <strong><u>不能使用</u></strong> 网页上的教程repo地址如图</li>
</ul>
<p><img src="/imgs/image-20211209101305939.png" alt="image-20211209101305939"></p>
<p>需要直接写成自己的<strong>仓库地址+.git</strong>，比如</p>
<p><img src="/imgs/image-20211209101336927.png" alt="image-20211209101336927"></p>
<ul>
<li>此外，相关的 <strong>url和root</strong> 配置如下;</li>
</ul>
<p><img src="/imgs/image-20211209101427432.png" alt="image-20211209101427432"></p>
<p>即可正常显示</p>
<h2 id="向服务器提交过程"><a href="#向服务器提交过程" class="headerlink" title="向服务器提交过程"></a>向服务器提交过程</h2><p><code>hexo clean</code></p>
<p><code>hexo g</code></p>
<p><code>hexo d</code></p>
<h2 id="详细入门网站"><a href="#详细入门网站" class="headerlink" title="详细入门网站"></a>详细入门网站</h2><p><a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></p>
<h2 id="gitee网站教程"><a href="#gitee网站教程" class="headerlink" title="gitee网站教程"></a>gitee网站教程</h2><p><a href="https://gitee.com/help/articles/4136#article-header0">https://gitee.com/help/articles/4136#article-header0</a></p>
<h2 id="vscode-markdown插件（相对方便，但是不支持图片复制，建议还是用typora）"><a href="#vscode-markdown插件（相对方便，但是不支持图片复制，建议还是用typora）" class="headerlink" title="vscode markdown插件（相对方便，但是不支持图片复制，建议还是用typora）"></a>vscode markdown插件（相对方便，但是不支持图片复制，建议还是用typora）</h2><p>office viewer</p>
<p><img src="/imgs/4.png" alt="4"></p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>开发板配置nfs踩坑</title>
    <url>/2022/07/27/%E5%BC%80%E5%8F%91%E6%9D%BF%E9%85%8D%E7%BD%AEnfs%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="开发板配置nfs踩坑"><a href="#开发板配置nfs踩坑" class="headerlink" title="开发板配置nfs踩坑"></a>开发板配置nfs踩坑</h1><h2 id="配置好nfs服务器路径等之后重启nfs服务的时候可能无法重启遇到错误"><a href="#配置好nfs服务器路径等之后重启nfs服务的时候可能无法重启遇到错误" class="headerlink" title="配置好nfs服务器路径等之后重启nfs服务的时候可能无法重启遇到错误"></a>配置好nfs服务器路径等之后重启nfs服务的时候可能无法重启遇到错误</h2><ul>
<li><img src="/imgs/1b64ed91879caed772df196df38cbd0e5638597e292ef9ddd9505a4126295e86.png" alt="图 1">  </li>
<li>此时需要执行命令<code>sudo service rpcbind start</code></li>
<li>然后再执行<code>sudo /etc/init.d/nfs-kernel-server restart</code><h2 id="从Uboot启动Linux可能ping不通WSL的问题"><a href="#从Uboot启动Linux可能ping不通WSL的问题" class="headerlink" title="从Uboot启动Linux可能ping不通WSL的问题"></a>从Uboot启动Linux可能ping不通WSL的问题</h2></li>
<li>开发板Linux端使用命令<code>ifconfig eth0 172.20.98.200 netmask 255.255.240.0</code>，配置ip地址和子网掩码，配置到与WSL再<strong>同一个子网之下</strong>即可ping通<h2 id="Uboot可以通过tftp下载内核和设备树但是无法用nfs下载文件系统的问题"><a href="#Uboot可以通过tftp下载内核和设备树但是无法用nfs下载文件系统的问题" class="headerlink" title="Uboot可以通过tftp下载内核和设备树但是无法用nfs下载文件系统的问题"></a>Uboot可以通过tftp下载内核和设备树但是无法用nfs下载文件系统的问题</h2></li>
<li>使用WSL<strong>安装旧版（比如18.04）</strong>的Ubuntu</li>
<li>将Ubuntu移动到D盘（假如C盘空间不足）<a href="https://blog.csdn.net/qq_45700350/article/details/125227040">参考链接</a></li>
<li>安装好之后安装完nfs服务之后，将服务的配置文件<code>/etc/default/nfs-kernel-server</code>文件进行修改如下<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># Number of servers to start up</span></span><br><span class="line">RPCNFSDCOUNT=<span class="string">&quot;-V 2 8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Runtime priority of server (see nice(1))</span></span><br><span class="line">RPCNFSDPRIORITY=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Options for rpc.mountd.</span></span><br><span class="line"><span class="comment"># If you have a port-based firewall, you might want to set up</span></span><br><span class="line"><span class="comment"># a fixed port here using the --port option. For more information,</span></span><br><span class="line"><span class="comment"># see rpc.mountd(8) or http://wiki.debian.org/SecuringNFS</span></span><br><span class="line"><span class="comment"># To disable NFSv4 on the server, specify &#x27;--no-nfs-version 4&#x27; here</span></span><br><span class="line">RPCMOUNTDOPTS=<span class="string">&quot;-V 2 --manage-gids&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do you want to start the svcgssd daemon? It is only required for Kerberos</span></span><br><span class="line"><span class="comment"># exports. Valid alternatives are &quot;yes&quot; and &quot;no&quot;; the default is &quot;no&quot;.</span></span><br><span class="line">NEED_SVCGSSD=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Options for rpc.svcgssd.</span></span><br><span class="line">RPCSVCGSSDOPTS=<span class="string">&quot;--nfs-version 2,3,4 --debug --syslog&quot;</span></span><br><span class="line">RPCNFSDOPTS=<span class="string">&quot;--nfs-version 2,3,4 --debug --syslog&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>然后<strong>重启WSL虚拟机</strong>，然后重启tftp、xinetd、rpcbind、nfs服务**</li>
<li>注意重启之后WSL所处的<strong>网段、子网掩码、网关</strong>等都可能改变，，所以一定要使用WSL的<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig &lt;网卡号（比如eth0）&gt; &lt;指定的IP地址&gt;</span><br></pre></td></tr></table></figure>
设置WSL系统的IP地址到同一个网段下，假如重启之后<strong>开发板ping不通虚拟机</strong>的话还需要重新按照之前的博客配置虚拟机网络与开发板的桥接</li>
<li>成功结果如图</li>
<li><img src="/imgs/f3d2319d4773d96e9331fba91ad296b376fd2e876dedefe74e05bd8bc1ae205b.png" alt="图 2">  </li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>强化学习复习（一）</title>
    <url>/2022/10/06/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="马尔可夫过程"><a href="#马尔可夫过程" class="headerlink" title="马尔可夫过程"></a>马尔可夫过程</h2><ul>
<li><p><img src="/imgs/275a22ea5b6433abd04d8fbddb92f761a9057fd19afc2bda82cd131faac96110.png" alt="picture 9">  </p>
</li>
<li><p>注意，并不是说与之前的状态绝对意义上的无关，而是在t时刻之前的信息全部已知的情况下，只通过t时刻就可做出判断。也就是意味着，<strong>t时刻之前的状态对于待得到的t+1时刻的状态的影响全部体现在t时刻的信息中了</strong>。</p>
</li>
<li><p><img src="/imgs/25616d2b0e5fada3d0ddb5e6f129d381f59f79d37aa7e6a7a8dce0b8c53f8286.png" alt="picture 10">  </p>
</li>
<li><p> <img src="/imgs/97ecf9a445f6024b238f1963ab9937c56079595ca704644703cc74eb34e3f0b4.png" alt="picture 11">  </p>
</li>
<li><p>注意，非常关键的是在定义一个<code>状态</code>的时候，如何<u>让这个状态包含计算出下个状态所需要的所有信息</u></p>
<h2 id="马尔可夫决策过程"><a href="#马尔可夫决策过程" class="headerlink" title="马尔可夫决策过程"></a>马尔可夫决策过程</h2></li>
<li><p><img src="/imgs/a760aed68ebf4659099dfd844e95b9f3a3f8b3ff223bf295e101604e4dc6d1f6.png" alt="picture 12">  </p>
</li>
<li><p>时齐性</p>
<ul>
<li><img src="/imgs/296953f9cfc2fd8358fec39fb2dbb3e2a2bd59aabad95d2d1ccf7c8d9922a7fb.png" alt="picture 13">  </li>
</ul>
</li>
<li><p>时间连续的问题</p>
<ul>
<li><img src="/imgs/c5b9381536bf2a7d1c06608993b113ef85e4e666bed199eb8c81478b8e3a4d4d.png" alt="picture 14">  <h2 id="基于价值的思想"><a href="#基于价值的思想" class="headerlink" title="基于价值的思想"></a>基于价值的思想</h2></li>
</ul>
</li>
<li><p><img src="/imgs/479e70e6bc4369176f625da5751f0441e661efa26fbdd5c58ed4ce30cb6bd7e7.png" alt="picture 15">  </p>
<h2 id="基于策略还是基于价值"><a href="#基于策略还是基于价值" class="headerlink" title="基于策略还是基于价值"></a>基于策略还是基于价值</h2></li>
<li><p><img src="/imgs/cbdbb4eb9c16b69076103a2ac2bb158d8f39a585dfab99c6a6ea07d94652535c.png" alt="picture 16">  </p>
</li>
<li><p><img src="/imgs/33b349b35b46437a9534c90b9413da8746623dacbf0088f7b7b918ddf4564109.png" alt="picture 17">  </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li>
<li><p><img src="/imgs/9d594da14c780d7661ffb48885f69868395727f058b72307354e60d84dc24f4d.png" alt="picture 18">  </p>
<h2 id="基于价值的方法和基于策略的方法"><a href="#基于价值的方法和基于策略的方法" class="headerlink" title="基于价值的方法和基于策略的方法"></a>基于价值的方法和基于策略的方法</h2></li>
<li><p><img src="/imgs/68fafbe4f4748b9a64b4e4f887ff8dde5027ccc14c163d653b0ebbbc91ef0273.png" alt="picture 19">  </p>
</li>
<li><p>基于价值方法的核心思想在于对时间的差分，是一种动态规划的思想；而基于策略的方法则没有这种思想，而是要通盘考虑策略在整个时间轨道内造成的影响</p>
</li>
<li><p><img src="/imgs/875139c62dc89d23eddfa472c90d0ae54e15a1131262fb19d6760bba66473d6b.png" alt="picture 20">  </p>
<h2 id="Q值的思想"><a href="#Q值的思想" class="headerlink" title="Q值的思想"></a>Q值的思想</h2></li>
<li><p><img src="/imgs/1945b19ede6c60ed56350f818e7389608fc3ac8fa27e8b96a5eb4f6e21b83941.png" alt="picture 21">  </p>
</li>
<li><p>基于价值的基本解决方法</p>
<ul>
<li><img src="/imgs/dfcab65f4922dd312a0d8692ddacbb771de87d15415ebf8b872108ac43353059.png" alt="picture 22">  </li>
<li>其中的V是<img src="/imgs/e4c0e4a8934163161835e9940587e5e0c8151839ee6ef45e8c75dd645383d654.png" alt="picture 23">  </li>
<li>P是状态转移方程<h2 id="Q-Learning-的思路"><a href="#Q-Learning-的思路" class="headerlink" title="Q Learning 的思路"></a>Q Learning 的思路</h2></li>
</ul>
</li>
<li><p><img src="/imgs/b04e300913d76b79136dcab4ed6f4b49b6e4bd419410515b7c5ca2d4349c5101.png" alt="picture 24">  </p>
</li>
<li><p><img src="/imgs/f1ee7ec356f3485f5b817114d53e486b503bfb41f2b4c4df050f2cdea4774aa7.png" alt="picture 25">  </p>
</li>
<li><p>对于表格学习的QLearning实际上是一种用动态规划的方法每一步都修改一下对应位置的Q值的算法</p>
</li>
<li><p><img src="/imgs/75082e3ffd5b31058c285181a1d365e7fee8708e4b2750690269f9c2ee5edbb8.png" alt="picture 38">  </p>
</li>
<li><p>Q更新的思路：在每次尝试结束之后，将这次尝试得到的价值更新到Q网络预测的价值上</p>
<h3 id="on-policy-和-off-policy的区别"><a href="#on-policy-和-off-policy的区别" class="headerlink" title="on policy 和 off policy的区别"></a>on policy 和 off policy的区别</h3></li>
<li><p><img src="/imgs/771886329edaec68501b0228b4b93143c2531cae35b4a58842dfad2ae67c6444.png" alt="picture 26">  </p>
</li>
<li><p>一个通俗的比喻</p>
<ul>
<li><img src="/imgs/640211411248b69921d9fbe85c5c636b81ddef4728e4a2df15244a3897987b63.png" alt="picture 27">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习复习（三）</title>
    <url>/2022/10/07/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://github.com/pytorch/examples/tree/main/reinforcement_learning">pytorch关于强化学习的示例</a></p>
</li>
<li><p><a href="https://pytorch.org/docs/stable/_modules/torch/distributions/normal.html">pytorch源码</a></p>
<h2 id="Policy-Gradient"><a href="#Policy-Gradient" class="headerlink" title="Policy Gradient"></a>Policy Gradient</h2></li>
<li><p>基本上就是通过动作获得的奖励或者惩罚信息反向传播，给<code>Actor</code>网络进行指导</p>
</li>
<li><p><code>Critic</code>实际上是一个类似于<code>QNetwork</code>的网络，它的作用是对Actor的动作做出每个时刻的评价，之前只能在回合结束的时候根据给出的回报进行更新，但是拥有<code>Critic</code>之后就可以在每个时刻进行更新了，也就是**在一个回合结束之前，猜测出这个动作可能导致的reward，并以此指导<code>Actor</code>**。</p>
</li>
<li><p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.distributions <span class="keyword">import</span> Categorical</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch REINFORCE example&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--gamma&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.99</span>, metavar=<span class="string">&#x27;G&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;discount factor (default: 0.99)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">543</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;random seed (default: 543)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--render&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;render the environment&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--log-interval&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;interval between training status logs (default: 10)&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v1&#x27;</span>)</span><br><span class="line">env.seed(args.seed)</span><br><span class="line">torch.manual_seed(args.seed)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Policy</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Policy, self).__init__()</span><br><span class="line">        self.affine1 = nn.Linear(<span class="number">4</span>, <span class="number">128</span>)</span><br><span class="line">        self.dropout = nn.Dropout(p=<span class="number">0.6</span>)</span><br><span class="line">        self.affine2 = nn.Linear(<span class="number">128</span>, <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">        self.saved_log_probs = []</span><br><span class="line">        self.rewards = []</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.affine1(x)</span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        action_scores = self.affine2(x)</span><br><span class="line">        <span class="keyword">return</span> F.softmax(action_scores, dim=<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">policy = Policy()</span><br><span class="line">optimizer = optim.Adam(policy.parameters(), lr=<span class="number">1e-2</span>)</span><br><span class="line">eps = np.finfo(np.float64).eps.item()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_action</span>(<span class="params">state</span>):</span></span><br><span class="line">    state = torch.from_numpy(state).<span class="built_in">float</span>().unsqueeze(<span class="number">0</span>)</span><br><span class="line">    probs = policy(state)</span><br><span class="line">    m = Categorical(probs)</span><br><span class="line">    action = m.sample()</span><br><span class="line">    policy.saved_log_probs.append(m.log_prob(action))</span><br><span class="line">    <span class="keyword">return</span> action.item()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finish_episode</span>():</span></span><br><span class="line">    R = <span class="number">0</span></span><br><span class="line">    policy_loss = []</span><br><span class="line">    returns = []</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> policy.rewards[::-<span class="number">1</span>]:</span><br><span class="line">        R = r + args.gamma * R</span><br><span class="line">        returns.insert(<span class="number">0</span>, R)</span><br><span class="line">    returns = torch.tensor(returns)</span><br><span class="line">    returns = (returns - returns.mean()) / (returns.std() + eps)</span><br><span class="line">    <span class="keyword">for</span> log_prob, R <span class="keyword">in</span> <span class="built_in">zip</span>(policy.saved_log_probs, returns):</span><br><span class="line">        policy_loss.append(-log_prob * R)</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    policy_loss = torch.cat(policy_loss).<span class="built_in">sum</span>()</span><br><span class="line">    policy_loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line">    <span class="keyword">del</span> policy.rewards[:]</span><br><span class="line">    <span class="keyword">del</span> policy.saved_log_probs[:]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    running_reward = <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i_episode <span class="keyword">in</span> count(<span class="number">1</span>):</span><br><span class="line">        state, ep_reward = env.reset(), <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10000</span>):  <span class="comment"># Don&#x27;t infinite loop while learning</span></span><br><span class="line">            action = select_action(state)</span><br><span class="line">            state, reward, done, _ = env.step(action)</span><br><span class="line">            <span class="keyword">if</span> args.render:</span><br><span class="line">                env.render()</span><br><span class="line">            policy.rewards.append(reward)</span><br><span class="line">            ep_reward += reward</span><br><span class="line">            <span class="keyword">if</span> done:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        running_reward = <span class="number">0.05</span> * ep_reward + (<span class="number">1</span> - <span class="number">0.05</span>) * running_reward</span><br><span class="line">        finish_episode()</span><br><span class="line">        <span class="keyword">if</span> i_episode % args.log_interval == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Episode &#123;&#125;\tLast reward: &#123;:.2f&#125;\tAverage reward: &#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                  i_episode, ep_reward, running_reward))</span><br><span class="line">        <span class="keyword">if</span> running_reward &gt; env.spec.reward_threshold:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Solved! Running reward is now &#123;&#125; and &quot;</span></span><br><span class="line">                  <span class="string">&quot;the last episode runs to &#123;&#125; time steps!&quot;</span>.<span class="built_in">format</span>(running_reward, t))</span><br><span class="line">            torch.save(policy.state_dict(),<span class="string">&#x27;hello.pt&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li>
<li><p><code>Categorical</code>：<img src="/imgs/bbff369c31599485cece0ecd1f86a3c2d5f7d254eeb1b8f76de5053a207275b2.png" alt="picture 49">  </p>
<ul>
<li><code>log_probs</code><img src="/imgs/b02e3510312ce797463f7218ef7fde86af78b655a54491b1bee2766aac44d92d.png" alt="picture 50">  ，实际上就是将对应动作发生的可能性求了log<h3 id="给出策略的具体操作"><a href="#给出策略的具体操作" class="headerlink" title="给出策略的具体操作"></a>给出策略的具体操作</h3></li>
</ul>
</li>
<li><p><a href="https://www.zhihu.com/question/439220435">参考链接</a></p>
</li>
<li><p>给出策略的具体操作是先将输入经过一系列网络的运算之后，经过softmax归一化，得到和为1的几个输出。然后在输出过程中对于具有这几种概率的输出进行随机取样，得到最终的输出动作。（<strong>离散动作</strong>）</p>
</li>
<li><p>针对<strong>连续动作</strong>，可以将整个网络的输出更改为输出一个高斯分布函数的μ值（均值），结合用户指定的σ（方差），即可形成一个高斯分布，然后通过类似的sample采样即可得出需要的动作。注意训练阶段为了实现有效的exploration，不要使用太小的σ，否则因为输出太集中没法找到实际上的最优解。</p>
<ul>
<li>也可以让网络也输出σ</li>
<li>反向传播的思路相似，也是直接利用<code>torch.Distributions.Normal</code>的<code>log_prob</code>函数输出概率的log值<img src="/imgs/da881cab2fe598db70c03731a3ec37aec64f13d6f84d04168d697c1aa1d390d6.png" alt="picture 51"></li>
</ul>
</li>
</ul>
<h3 id="网络更新"><a href="#网络更新" class="headerlink" title="网络更新"></a>网络更新</h3><ul>
<li><img src="/imgs/b734753c9daa77b5104e2738198288151b8eafd8ec96a44556debd73f729b630.png" alt="picture 48">  <h2 id="DDPG"><a href="#DDPG" class="headerlink" title="DDPG"></a>DDPG</h2></li>
<li>现在我们来说说 DDPG 中所用到的神经网络. 它其实和我们之前提到的 Actor-Critic 形式差不多, 也需要有基于 策略 Policy 的神经网络 和基于 价值 Value 的神经网络, 但是为了体现 DQN 的思想, 每种神经网络我们都需要再细分为两个, Policy Gradient 这边, 我们有估计网络和现实网络, 估计网络用来输出实时的动作, 供 actor 在现实中实行. 而现实网络则是用来更新价值网络系统的. 所以我们再来看看价值系统这边, 我们也有现实网络和估计网络, 他们都在输出这个状态的价值, 而输入端却有不同, <strong>状态现实网络这边会拿着从动作现实网络来的动作加上状态的观测值加以分析, 而状态估计网络则是拿着当时 Actor 施加的动作当做输入</strong>.在实际运用中, DDPG 的这种做法的确带来了更有效的学习过程.</li>
<li><img src="/imgs/6a83e078a6bdb97f3a4cd97e1da8d01ea4068866f7bf6254e44e27d51c3f03ea.png" alt="picture 43">  <h3 id="学习的过程"><a href="#学习的过程" class="headerlink" title="学习的过程"></a>学习的过程</h3><h4 id="Critic网络"><a href="#Critic网络" class="headerlink" title="Critic网络"></a>Critic网络</h4></li>
<li><code>y_true</code>是要学习的值，这个值是通过<code>Critci</code>的<code>target</code>网络对于下一时刻的<code>actor</code>的<code>target</code>网络的动作做出的评估加上这一时刻的汇报<code>reward</code>计算出来的，而它自身需要修改的值就是直接对当前的环境观测和动作做出的值的判断<code>y_pred</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">critic_learn</span>():</span></span><br><span class="line">    a1 = self.actor_target(s1).detach()</span><br><span class="line">    y_true = r1 + self.gamma * self.critic_target(s1, a1).detach()</span><br><span class="line">    </span><br><span class="line">    y_pred = self.critic(s0, a0)</span><br><span class="line">    </span><br><span class="line">    loss_fn = nn.MSELoss()</span><br><span class="line">    loss = loss_fn(y_pred, y_true)</span><br><span class="line">    self.critic_optim.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    self.critic_optim.step()</span><br></pre></td></tr></table></figure></li>
<li>然后按照一定的比例<code>soft_update</code>对应的<code>target</code>网络即可<h4 id="Actor网络"><a href="#Actor网络" class="headerlink" title="Actor网络"></a>Actor网络</h4></li>
<li>直接利用<code>critic</code>网络对于此刻环境的观测和在此刻环境下<code>actor</code>网络的行为做出评价，然后直接反向传播</li>
<li>同样<code>soft_update</code>另一个<code>target</code>网络即可<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">actor_learn</span>():</span></span><br><span class="line">    loss = -torch.mean( self.critic(s0, self.actor(s0)) )</span><br><span class="line">    self.actor_optim.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    self.actor_optim.step()</span><br></pre></td></tr></table></figure>
<h2 id="A3C"><a href="#A3C" class="headerlink" title="A3C"></a>A3C</h2></li>
<li><a href="https://github.com/MorvanZhou/pytorch-A3C">pytorch A3C参考</a></li>
<li><img src="/imgs/8bed5783887792cdbaffbae4046098a68b2539e3a7093d5a4624fb6bb1378a00.png" alt="picture 44">  </li>
<li><img src="/imgs/bf942436af1a670b0ab91f0705dd4a8136963ade316c598d29a6a775f107841f.png" alt="picture 45">  </li>
<li><img src="/imgs/daf4381936a5297b7e62f97c553d7c997f51b7ebbecfaee2b4b204c1dd156fba.png" alt="picture 46">  </li>
<li><img src="/imgs/1cdcd316476945548933f8ad5922351079bb5ee5808860489a251970aa3c805d.png" alt="picture 47">  </li>
<li>实际上每个本地网络都是一个Actor-Critic的网络，损失分为动作网络<code>Actor</code>的loss和<code>Critic</code>网络的loss<ul>
<li>Critic的loss可以先计算<code>td_error</code>，用Critic在此时的环境中计算出的值与实际上每一步得到的增加随时间衰减的因子之后的实际上的Reward做差，然后平方即可得到Critic的loss</li>
<li>Actor的loss则是使用反向求出刚才动作的log_prob（怎么求上文有），然后再求出<code>entropy</code>，公式为<img src="/imgs/082feca831bedf90bf6c3253215c0e01b8c26b2ba406997eb4acb361db659f73.png" alt="`0.5 + 0.5 * math.log(2 * math.pi) + torch.log(m.scale)` 1">，然后log_prob×上文的td_error+一个系数×entropy，然后整个计算出来之后取相反数即可得到Actor的loss，然后将整个的两个loss取平均数，反向传播更新参数即可<u>（因为根据计算图倒推可以分别得到组成这个变量的两个变量分别的影响因素，所以不影响反向传播分别更新两个网络）</u>。<h3 id="torch中backword是怎么用的"><a href="#torch中backword是怎么用的" class="headerlink" title="torch中backword是怎么用的"></a>torch中backword是怎么用的</h3></li>
</ul>
</li>
<li>针对<strong>标量</strong>做出的对计算图的反向传播，得到标量的值，算出计算图中每个变量对于得到这个标量的偏导数<a href="https://zhuanlan.zhihu.com/p/168748668">参考</a></li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习复习（二）</title>
    <url>/2022/10/06/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="针对连续的Q的情况而将Q从表格替换为网络"><a href="#针对连续的Q的情况而将Q从表格替换为网络" class="headerlink" title="针对连续的Q的情况而将Q从表格替换为网络"></a>针对连续的Q的情况而将Q从表格替换为网络</h2><ul>
<li><img src="/imgs/56e3a858961bf313cd36c4bac26e8bedc5941668bddac9ed8e561a9b820468cb.png" alt="picture 37">  <ul>
<li>Q网络具有两种思路，一种是输入<em>环境和动作给出一个Q</em>，另一个是输入<em>一个环境，给出一些动作和动作对应的值</em></li>
</ul>
</li>
<li><img src="/imgs/7d5dbd086df9365d94bc2138c6f67b7b920eced2133f865e2f2efef1b3df69ca.png" alt="picture 28">  </li>
<li>因为不断的变化导致整个Q网络训练的过程中很难收敛</li>
<li><img src="/imgs/e5c66261a50ae3b0da9b6a71ce784a6bd1852017622d3f56cf0b3d14a3fd150d.png" alt="picture 29"> </li>
<li>实际上是用<u>旧的Q网络</u>参数得出Q结论，用这个结论计算与实际的Q的偏差更新新的Q网络，防止利用同一个网络计算参数的同时更新参数导致整个网络反复横跳，难于收敛。<ul>
<li>而且在实际更新的网络被更新很长时间（或一些间隔）之后才会将其参数复制到target网络上<h3 id="高估Q的问题"><a href="#高估Q的问题" class="headerlink" title="高估Q的问题"></a>高估Q的问题</h3></li>
</ul>
</li>
<li><img src="/imgs/0e9bbc8217b937cdd268739f560d7318ec24ee7c1457a8273d7d1bdd9ecdfdb2.png" alt="picture 30"> </li>
<li><img src="/imgs/858db5c4a204b8995fae718558bf7fcceb3b07e56800db57863325258d9c0c37.png" alt="picture 42">  </li>
<li><img src="/imgs/02e52f6bee1e9382607fd3470714dd573f7c103b624dde8b377c248d5aba94fd.png" alt="picture 31">  </li>
<li><img src="/imgs/9beffb98c7f71c0ab6ce40c33e649f56a4f56f184d80ff5fedd0f647e0a668f1.png" alt="picture 32">  </li>
<li>Double DQN和一般的DQN只有计算<code>QTarget</code>的时候不同，网络结构是相同的</li>
<li>进一步阐述<ul>
<li><img src="/imgs/76d859ace0fc75e56a4afe246eea0b4ef1adc7c99726ac2f2d2fde002413e624.png" alt="picture 41">  </li>
</ul>
</li>
<li>将估计目标价值的问题从<strong>直接用<code>QTarget</code>变成了使用<code>QEval</code>（也就是具有新参数的网络）先估计出下个时刻的动作（也就是选出具有最大回报的动作），再用<em>具有旧参数</em>的<code>QTarget</code>估计出下一时刻这个动作的价值</strong>，<u>然后用这个去更新<code>QEval</code></u><h3 id="记忆池增加优先级功能"><a href="#记忆池增加优先级功能" class="headerlink" title="记忆池增加优先级功能"></a>记忆池增加优先级功能</h3></li>
<li><img src="/imgs/e3b1ff9ac3d64b0706d1b43cb3661a526076fb61bbaa36a1f74def65859fda47.png" alt="picture 33">  </li>
</ul>
<h3 id="优势函数"><a href="#优势函数" class="headerlink" title="优势函数"></a>优势函数</h3><ul>
<li><img src="/imgs/3e652e0833171c9fa22eb5948e08e9a1ce589546ec11e0702bbf43277266d8ee.png" alt="picture 34">  </li>
<li><img src="/imgs/fd37397ca837e54dca9ad7a0d3f2d7ddbeb5807e02f50f9a502089242c66f6a6.png" alt="picture 35">  </li>
<li><img src="/imgs/a084b318788b696f3a24e886864a4db95e003ab7b2954a999fc95520acf03f65.png" alt="picture 36">  </li>
</ul>
<h2 id="插入：python中with的用法："><a href="#插入：python中with的用法：" class="headerlink" title="插入：python中with的用法："></a>插入：python中with的用法：</h2><ul>
<li><img src="/imgs/20cc43bc7c0d9699b0723be581daaeb64dd35e274988f04d0a905b0bfef17a1f.png" alt="picture 39">  </li>
<li>with的主要作用是进入被调用对象的<code>enter</code>方法，然后在with语句结束之后，<strong>自动</strong>调用对象的<code>exit</code>方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="comment">########with()##########</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in __enter__&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Foo&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">                    <span class="comment">#exc_type：　错误的类型 </span></span><br><span class="line">                    <span class="comment">#exc_val：　错误类型对应的值 </span></span><br><span class="line">                    <span class="comment">#exc_tb：　代码中错误发生的位置 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in __exit__&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sample</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Sample()</span><br><span class="line"><span class="keyword">with</span> get_sample() <span class="keyword">as</span> sample:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sample: &quot;</span> ,sample)</span><br></pre></td></tr></table></figure></li>
<li>输出为<img src="/imgs/621b749e773d0f8acbb17a2428ea340e3f67c880265c9be35dc193b5171241e8.png" alt="picture 40">  </li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>手动修复桌面反复登录（登不进去）以及开机自启桌面</title>
    <url>/2023/04/07/%E6%89%8B%E5%8A%A8%E4%BF%AE%E5%A4%8D%E6%A1%8C%E9%9D%A2%E5%8F%8D%E5%A4%8D%E7%99%BB%E5%BD%95%EF%BC%88%E7%99%BB%E4%B8%8D%E8%BF%9B%E5%8E%BB%EF%BC%89%E4%BB%A5%E5%8F%8A%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%A1%8C%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="删除桌面管理器"><a href="#删除桌面管理器" class="headerlink" title="删除桌面管理器"></a>删除桌面管理器</h2><ul>
<li>可能遇到在这个界面反复登录进不去或者进去之后一个黑色光标左上角反复跳动无限循环的情况<ul>
<li><img src="/imgs/a2601ab29befcccffb945f638ff8cd649e816608585f428c466b17308998a832.jpg" alt="picture 1">  </li>
</ul>
</li>
<li>此时可能需要手动删除掉原先的桌面管理器。使用<code>Ctrl+alt+F2</code>切换到TTY，删除比如<code>lightdm</code>，直接<code>sudo purge lightdm</code>，假如提示被占用的话，使用<code>skill+进程号</code>终止即可<h2 id="重装桌面"><a href="#重装桌面" class="headerlink" title="重装桌面"></a>重装桌面</h2></li>
<li>删除原来的桌面，然后安装一个新的（比如<code>xfce4</code>）使用<code>sudo apt install xfce4 sfce4-terminal</code><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2></li>
<li>在<code>/etc/rc.local</code>中添加一句话<code>startxfce4</code>即可</li>
<li>然后实现开机自动进入桌面环境</li>
<li><strong>注意，开机启动无论是在service中还是在rc.local中，都是以root身份启动的</strong></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习复习（四）</title>
    <url>/2022/10/09/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://github.com/sweetice/Deep-reinforcement-learning-with-pytorch">基于pytorch实现的强化学习网络</a></p>
<ul>
<li><strong>这个的PPO写的似乎有问题</strong></li>
</ul>
</li>
<li><p><a href="https://github.com/labmlai/annotated_deep_learning_paper_implementations">强化学习网络集合</a></p>
</li>
<li><p><a href="https://github.com/thu-ml/tianshou">集合 2</a></p>
</li>
<li><h2 id="PPO"><a href="#PPO" class="headerlink" title="PPO"></a>PPO</h2></li>
<li><p>PPO是基于Actor-Critic的算法</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/468828804">参考链接</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.distributions <span class="keyword">import</span> Normal</span><br><span class="line"><span class="keyword">from</span> torch.utils.data.sampler <span class="keyword">import</span> BatchSampler, SubsetRandomSampler</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Solve the Pendulum-v0 with PPO&#x27;</span>)</span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">&#x27;--gamma&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.9</span>, metavar=<span class="string">&#x27;G&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;discount factor (default: 0.9)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>, metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;random seed (default: 0)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--render&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;render the environment&#x27;</span>)</span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">&#x27;--log-interval&#x27;</span>,</span><br><span class="line">    <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">    default=<span class="number">10</span>,</span><br><span class="line">    metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    <span class="built_in">help</span>=<span class="string">&#x27;interval between training status logs (default: 10)&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">torch.manual_seed(args.seed)</span><br><span class="line"></span><br><span class="line">TrainingRecord = namedtuple(<span class="string">&#x27;TrainingRecord&#x27;</span>, [<span class="string">&#x27;ep&#x27;</span>, <span class="string">&#x27;reward&#x27;</span>])</span><br><span class="line">Transition = namedtuple(<span class="string">&#x27;Transition&#x27;</span>, [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a_log_p&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s_&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ActorNet, self).__init__()</span><br><span class="line">        self.fc = nn.Linear(<span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">        self.mu_head = nn.Linear(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">        self.sigma_head = nn.Linear(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.fc(x))</span><br><span class="line">        mu = <span class="number">2.0</span> * F.tanh(self.mu_head(x))</span><br><span class="line">        sigma = F.softplus(self.sigma_head(x))</span><br><span class="line">        <span class="keyword">return</span> (mu, sigma)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CriticNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CriticNet, self).__init__()</span><br><span class="line">        self.fc = nn.Linear(<span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">        self.v_head = nn.Linear(<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.fc(x))</span><br><span class="line">        state_value = self.v_head(x)</span><br><span class="line">        <span class="keyword">return</span> state_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>():</span></span><br><span class="line"></span><br><span class="line">    clip_param = <span class="number">0.2</span></span><br><span class="line">    max_grad_norm = <span class="number">0.5</span></span><br><span class="line">    ppo_epoch = <span class="number">10</span></span><br><span class="line">    buffer_capacity, batch_size = <span class="number">1000</span>, <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.training_step = <span class="number">0</span></span><br><span class="line">        self.anet = ActorNet().<span class="built_in">float</span>()</span><br><span class="line">        self.cnet = CriticNet().<span class="built_in">float</span>()</span><br><span class="line">        self.buffer = []</span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.optimizer_a = optim.Adam(self.anet.parameters(), lr=<span class="number">1e-4</span>)</span><br><span class="line">        self.optimizer_c = optim.Adam(self.cnet.parameters(), lr=<span class="number">3e-4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_action</span>(<span class="params">self, state</span>):</span></span><br><span class="line">        state = torch.from_numpy(state).<span class="built_in">float</span>().unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            (mu, sigma) = self.anet(state)</span><br><span class="line">        dist = Normal(mu, sigma)</span><br><span class="line">        action = dist.sample()</span><br><span class="line">        action_log_prob = dist.log_prob(action)</span><br><span class="line">        action = action.clamp(-<span class="number">2.0</span>, <span class="number">2.0</span>)</span><br><span class="line">        <span class="keyword">return</span> action.item(), action_log_prob.item()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">self, state</span>):</span></span><br><span class="line"></span><br><span class="line">        state = torch.from_numpy(state).<span class="built_in">float</span>().unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            state_value = self.cnet(state)</span><br><span class="line">        <span class="keyword">return</span> state_value.item()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_param</span>(<span class="params">self</span>):</span></span><br><span class="line">        torch.save(self.anet.state_dict(), <span class="string">&#x27;param/ppo_anet_params.pkl&#x27;</span>)</span><br><span class="line">        torch.save(self.cnet.state_dict(), <span class="string">&#x27;param/ppo_cnet_params.pkl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store</span>(<span class="params">self, transition</span>):</span></span><br><span class="line">        self.buffer.append(transition)</span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.counter % self.buffer_capacity == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.training_step += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        s = torch.tensor([t.s <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">        a = torch.tensor([t.a <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        r = torch.tensor([t.r <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        s_ = torch.tensor([t.s_ <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">        old_action_log_probs = torch.tensor(</span><br><span class="line">            [t.a_log_p <span class="keyword">for</span> t <span class="keyword">in</span> self.buffer], dtype=torch.<span class="built_in">float</span>).view(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        r = (r - r.mean()) / (r.std() + <span class="number">1e-5</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            target_v = r + args.gamma * self.cnet(s_)</span><br><span class="line"></span><br><span class="line">        adv = (target_v - self.cnet(s)).detach()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.ppo_epoch):</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> BatchSampler(</span><br><span class="line">                    SubsetRandomSampler(<span class="built_in">range</span>(self.buffer_capacity)), self.batch_size, <span class="literal">False</span>):</span><br><span class="line"></span><br><span class="line">                (mu, sigma) = self.anet(s[index])</span><br><span class="line">                dist = Normal(mu, sigma)</span><br><span class="line">                action_log_probs = dist.log_prob(a[index])</span><br><span class="line">                ratio = torch.exp(action_log_probs - old_action_log_probs[index])</span><br><span class="line"></span><br><span class="line">                surr1 = ratio * adv[index]</span><br><span class="line">                surr2 = torch.clamp(ratio, <span class="number">1.0</span> - self.clip_param,</span><br><span class="line">                                    <span class="number">1.0</span> + self.clip_param) * adv[index]</span><br><span class="line">                action_loss = -torch.<span class="built_in">min</span>(surr1, surr2).mean()</span><br><span class="line"></span><br><span class="line">                self.optimizer_a.zero_grad()</span><br><span class="line">                action_loss.backward()</span><br><span class="line">                nn.utils.clip_grad_norm_(self.anet.parameters(), self.max_grad_norm)</span><br><span class="line">                self.optimizer_a.step()</span><br><span class="line"></span><br><span class="line">                value_loss = F.smooth_l1_loss(self.cnet(s[index]), target_v[index])</span><br><span class="line">                self.optimizer_c.zero_grad()</span><br><span class="line">                value_loss.backward()</span><br><span class="line">                nn.utils.clip_grad_norm_(self.cnet.parameters(), self.max_grad_norm)</span><br><span class="line">                self.optimizer_c.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> self.buffer[:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    env = gym.make(<span class="string">&#x27;Pendulum-v0&#x27;</span>)</span><br><span class="line">    env.seed(args.seed)</span><br><span class="line"></span><br><span class="line">    agent = Agent()</span><br><span class="line"></span><br><span class="line">    training_records = []</span><br><span class="line">    running_reward = -<span class="number">1000</span></span><br><span class="line">    state = env.reset()</span><br><span class="line">    <span class="keyword">for</span> i_ep <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        state = env.reset()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">            action, action_log_prob = agent.select_action(state)</span><br><span class="line">            state_, reward, done, _ = env.step([action])</span><br><span class="line">            <span class="keyword">if</span> args.render:</span><br><span class="line">                env.render()</span><br><span class="line">            <span class="keyword">if</span> agent.store(Transition(state, action, action_log_prob, (reward + <span class="number">8</span>) / <span class="number">8</span>, state_)):</span><br><span class="line">                agent.update()</span><br><span class="line">            score += reward</span><br><span class="line">            state = state_</span><br><span class="line"></span><br><span class="line">        running_reward = running_reward * <span class="number">0.9</span> + score * <span class="number">0.1</span></span><br><span class="line">        training_records.append(TrainingRecord(i_ep, running_reward))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i_ep % args.log_interval == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Ep &#123;&#125;\tMoving average score: &#123;:.2f&#125;\t&#x27;</span>.<span class="built_in">format</span>(i_ep, running_reward))</span><br><span class="line">        <span class="keyword">if</span> running_reward &gt; -<span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Solved! Moving average score is now &#123;&#125;!&quot;</span>.<span class="built_in">format</span>(running_reward))</span><br><span class="line">            env.close()</span><br><span class="line">            agent.save_param()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;log/ppo_training_records.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                pickle.dump(training_records, f)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    plt.plot([r.ep <span class="keyword">for</span> r <span class="keyword">in</span> training_records], [r.reward <span class="keyword">for</span> r <span class="keyword">in</span> training_records])</span><br><span class="line">    plt.title(<span class="string">&#x27;PPO&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Episode&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Moving averaged episode reward&#x27;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;img/ppo.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></li>
<li><p>产生动作的方式与一般的PG类似，就是使用PG输出一个μ和σ然后使用正态分布，然后进行采样输出真正的动作</p>
<h3 id="网络更新"><a href="#网络更新" class="headerlink" title="网络更新"></a>网络更新</h3></li>
<li><p>reward归一化，将reward-平均数/标准差</p>
</li>
<li><p>计算target价值，使用当前回合的reward+系数×Critic对于下一状态的分析</p>
</li>
<li><p>估计价值和实际价值的差：直接用估计当前状态的价值与上一步计算的价值做差</p>
</li>
<li><p>计算actor网络的loss的方法是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(mu, sigma) = self.anet(s[index])</span><br><span class="line">dist = Normal(mu, sigma)</span><br><span class="line">action_log_probs = dist.log_prob(a[index])</span><br><span class="line">ratio = torch.exp(action_log_probs - old_action_log_probs[index])</span><br><span class="line"></span><br><span class="line">surr1 = ratio * adv[index]</span><br><span class="line">surr2 = torch.clamp(ratio, <span class="number">1.0</span> - self.clip_param,</span><br><span class="line">                    <span class="number">1.0</span> + self.clip_param) * adv[index]</span><br><span class="line">action_loss = -torch.<span class="built_in">min</span>(surr1, surr2).mean()</span><br></pre></td></tr></table></figure></li>
<li><p>先利用当前的网络采样输出μ和σ，然后计算之前action的log_prob，，然后利用表达式<code>e^(这次网络计算出的log可能性-上次网络计算出的log可能性)</code>，实际上就是<code>这次网络计算出的可能性/上次网络计算出的可能性</code>与上一步算出的估计价值和实际价值的差值<strong>修正这个值</strong>，主要目的是用合理的方法<u>利用其他时刻动作的输出，增加一个动作的利用效率</u></p>
</li>
<li><p><img src="/imgs/f8606933037c3541da1fdedf4142d2a36bcb61ee2ddd0dba8b63febd43dfd75c.png" alt="picture 1">  </p>
</li>
<li><p>然后用一个参数×上面的数值，处理之后得到最终需要反向传播的值（actor）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value_loss = F.smooth_l1_loss(self.cnet(s[index]), target_v[index])</span><br><span class="line">self.optimizer_c.zero_grad()</span><br><span class="line">value_loss.backward()</span><br><span class="line">nn.utils.clip_grad_norm_(self.cnet.parameters(), self.max_grad_norm)</span><br><span class="line">self.optimizer_c.step()</span><br></pre></td></tr></table></figure></li>
<li><p>更新Critic的参数操作是将现在的Critic网络对价值的判断与前面算出的目标价值判断进行比较，将二者的差进行反向传播</p>
<h2 id="BatchSampler和SubsetRamdomSampler"><a href="#BatchSampler和SubsetRamdomSampler" class="headerlink" title="BatchSampler和SubsetRamdomSampler"></a>BatchSampler和SubsetRamdomSampler</h2></li>
<li><p><code>SubsetRandomSampler</code>实际上是将数据的顺序打乱做一个全排列</p>
</li>
<li><p><code>BatchSampler</code>实际上是根据设置的batch_size给数据分成一个个的batch</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>强化学习复习（零）</title>
    <url>/2022/10/05/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%A4%8D%E4%B9%A0%EF%BC%88%E9%9B%B6%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><a href="https://zhuanlan.zhihu.com/p/468828804">原文链接</a><h2 id="Policy-gradient网络复习"><a href="#Policy-gradient网络复习" class="headerlink" title="Policy gradient网络复习"></a>Policy gradient网络复习</h2><h3 id="给出行为act的思路"><a href="#给出行为act的思路" class="headerlink" title="给出行为act的思路"></a>给出行为act的思路</h3></li>
<li>一个特定的情况序列（时间从0时刻到一个回合结束的时刻）发生的概率是可以计算的</li>
<li>平均的reward期望是每种情况发生的概率×每个情况对应的reward的和</li>
<li>优化的目标是尽可能的提高总的reward的期望<ul>
<li><img src="/imgs/4feeab02cc1f2e8f6da90219335c49438195381704a62f7f024966cc21afb95c.png" alt="picture 1">  </li>
<li>在这个过程中，第一个等号是梯度的变换；第二三个等号是利用了log函数的特性；第四个等号将求和转化成期望的形式；期望又可以由我们采集到的数据序列进行近似；最后一个等号是将每一个数据序列展开成每个数据点上的形式</li>
<li>总体上，我们希望更加靠近奖励比较大的那条序列（效果好的话语权自然要大一点嘛），因此用每条序列的奖励来加权平均他们的更新方向。<h3 id="critic函数"><a href="#critic函数" class="headerlink" title="critic函数"></a>critic函数</h3></li>
</ul>
</li>
<li>按照上面的说法，针对一个回合的训练，必须等到这个回合结束之后才能利用这个回合的reward对其进行参数调整，而且这样会导致一个回合中的每个动作的reward都使用同样的数值，很不精确</li>
<li>所以我们此时就使用critic网络计算出当前这个动作<code>st</code>开始到回合结束时刻的奖励</li>
<li><img src="/imgs/6761c7b6f169bf09a7bb2f1fa02aefda9ca88190eea866d64e8c23e7d1983865.png" alt="picture 2">  </li>
<li><img src="/imgs/37e7977a1b3bb1ddd032abbc85a0b8f2e3434f63bc30553fa3514d18099e42c8.png" alt="picture 3">  </li>
<li>可以理解为<strong>在<code>st</code>时刻，采取<code>at</code>行动比采取其他行动的<u>优势有多大</u></strong><h2 id="PPO算法"><a href="#PPO算法" class="headerlink" title="PPO算法"></a>PPO算法</h2></li>
<li>接着上面的讲，PG方法一个很大的缺点就是参数更新慢，因为我们每更新一次参数都需要进行重新的采样，这其实是中on-policy的策略，即我们想要训练的agent和与环境进行交互的agent是同一个agent；与之对应的就是off-policy的策略，即想要训练的agent和与环境进行交互的agent不是同一个agent，简单来说，就是拿别人的经验来训练自己。举个下棋的例子，如果你是通过自己下棋来不断提升自己的棋艺，那么就是on-policy的，如果是通过看别人下棋来提升自己，那么就是off-policy的<h3 id="重要性采样"><a href="#重要性采样" class="headerlink" title="重要性采样"></a>重要性采样</h3></li>
<li><img src="/imgs/a2866fe3c26cb3e9cadb580633cf64cbd460f716b477298a502dad8a31f9d20d.png" alt="picture 4">  </li>
<li>对于一个服从概率p分布的变量x， 我们要估计f(x) 的期望。直接想到的是，我们采用一个服从p的随机产生器，直接产生若干个变量x的采样，然后计算他们的函数值f(x)，最后求均值就得到结果。但这里有一个问题是，对于每一个给定点x，我们知道其发生的概率，但是我们<strong>并不知道p的分布</strong>，也就无法构建这个随机数发生器。因此需要转换思路：<u>从一个已知的分布q中进行采样。通过对采样点的概率进行比较，确定这个采样点的重要性</u>。也就是上图所描述的方法。</li>
<li>当然通过这种采样方式的分布p和q不能差距过大，否则，会由于采样的偏离带来谬误。</li>
<li><img src="/imgs/80ab8c305bddfe1ca4d308d47d3dac31f0c6680f78771b6f2d143b39f3ff5e0c.png" alt="picture 5">  </li>
<li><img src="/imgs/7e6b526fff456a6ab6e2c7d0bbd627db5c02dcc44a0d91f328d699896fc02e87.png" alt="picture 6">  </li>
<li>引入上文中说的优势函数可知</li>
<li><img src="/imgs/68010df5b578a09b2108c3fe9b5260a1a78519f9cf2b69b996a320f272e0b6c9.png" alt="picture 7">  </li>
<li><img src="/imgs/f27c7828a80a95923055fed1d923287388d472572ee176698179e56051f696f9.png" alt="picture 8">  <ul>
<li>一套策略参数θ，他与环境交互收集批量数据，然后批量数据关联到  的副本中。他每次都会被更新。</li>
<li>一套策略参数的副本θ’，他是策略参数与环境互动后收集的数据的关联参数，相当于重要性采样中的q分布。</li>
<li>一套评价网络的参数Φ，他是基于收集到的数据，用监督学习的方式来更新对状态的评估。他也是每次都更新。</li>
</ul>
</li>
<li>更新的思路实际上是<ul>
<li>0点时：我与环境进行互动，收集了很多数据。然后利用数据更新我的策略，此时我成为1点的我。当我被更新后，理论上，1点的我再次与环境互动，收集数据，然后把我更新到2点，然后这样往复迭代。</li>
<li>但是如果我仍然想继续0点的我收集的数据来进行更新。因为这些数据是0点的我（而不是1点的我）所收集的。所以，我要对这些数据做一些重要性重采样，让这些数据看起来像是1点的我所收集的。当然这里仅仅是看起来像而已，所以我们要对这个“不像”的程度加以更新时的惩罚（KL）。</li>
<li>其中，更新的方式是：我收集到的每个数据序列，对序列中每个（s, a）的优势程度做评估，<strong>评估越好的动作，将来就又在s状态时，让a出现的概率加大</strong>。这里评估优势程度的方法，可以用数据后面的总折扣奖励来表示。另外，考虑引入基线的Tip，我们就又引入一个评价者小明，让他跟我们一起学习，他只学习每个状态的期望折扣奖励的平均期望。这样，我们评估（s, a）时，我们就可以吧小明对 s 的评估结果就是 s 状态后续能获得的折扣期望，也就是我们的基线。注意哈：<u>优势函数中，前一半是实际数据中的折扣期望，后一半是估计的折扣期望（小明心中认为s应该得到的分数，即小明对s的期望奖励）</u>，如果你选取的动作得到的实际奖励比这个小明心中的奖励高，那小明为你打正分，认为可以提高这个动作的出现概率；如果选取的动作的实际得到的奖励比小明心中的期望还低，那小明为这个动作打负分，你应该减小这个动作的出现概率。这样，小明就成为了一个评判官。</li>
<li>当然，作为评判官，小明自身也要提高自己的知识文化水平，也要在数据中不断的学习打分技巧，这就是对Φ的更新了</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>手动给Debian安装xfce桌面记录</title>
    <url>/2023/04/11/%E6%89%8B%E5%8A%A8%E7%BB%99Debian%E5%AE%89%E8%A3%85xfce%E6%A1%8C%E9%9D%A2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h2><ul>
<li><code>sudo apt install xfce4-session</code></li>
<li>然后执行，报错<code>exec :xinit :not found</code></li>
<li>然后执行<code>sudo apt install xinit xserver-xorg</code></li>
<li>报错<code>Failed to execute child process &quot;dbus-launch&quot;</code>（图形界面报错）</li>
<li>执行<code>sudo apt install dbus-x11</code></li>
<li>但是此时再执行<code>startxfce4</code>出现黑屏，无响应，无光标</li>
<li>假如无法通过键盘切换回tty，可以用ssh远程控制命令行关闭桌面</li>
<li>关闭桌面的命令是<code>killall xfce4-session</code></li>
<li>查找进程：<code>ps -ef</code></li>
<li>意外可以使用的方法<code>sudo apt-get install xorg slim xfce4</code>，但是缺失了一些功能<h2 id="一些shell技巧"><a href="#一些shell技巧" class="headerlink" title="一些shell技巧"></a>一些shell技巧</h2></li>
<li><code>|</code>：输入了如下指令：<code>command0 | command1</code>，则command0的输出流入到command1中</li>
<li><code>||</code>：与&amp;&amp;的作用正好相反，是在<strong>执行到成功的指令时停止后续指令的执行</strong>。<code>command0 || command1</code>，如果command0执行成功，则command1不再执行。如果command0执行失败，则继续执行command1</li>
<li><code>&amp;</code>：输入了如下指令：<code>command0 &amp;</code>，则执行command0并使其<strong>进入后台</strong></li>
<li><code>&amp;&amp;</code>：输入了如下指令：command0 &amp;&amp; command1，则先从command0开始执行。<u>如果command0执行失败，则不再继续执行command1。如果执行command0执行成功，则继续执行command1。</u><br>所以，&amp;&amp;的作用是<strong>在执行到失败的指令时停止后续指令的执行</strong>。</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>携程库实现（一）</title>
    <url>/2024/01/11/%E6%90%BA%E7%A8%8B%E5%BA%93%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><a href="https://developer.aliyun.com/article/52886">参考</a><h2 id="ucontext-h上下文切换"><a href="#ucontext-h上下文切换" class="headerlink" title="ucontext.h上下文切换"></a><code>ucontext.h</code>上下文切换</h2></li>
<li>上下文结构体定义</li>
<li> <code>mcontext_t</code>类型与机器相关，并且不透明.<code>ucontext_t</code>结构体则至少拥有以下几个域:<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ucontext</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ucontext</span> *<span class="title">uc_link</span>;</span></span><br><span class="line">    <span class="keyword">sigset_t</span>         uc_sigmask;</span><br><span class="line">    <span class="keyword">stack_t</span>          uc_stack;</span><br><span class="line">    <span class="keyword">mcontext_t</span>       uc_mcontext;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">ucontext_t</span>;</span><br></pre></td></tr></table></figure></li>
<li>当当前上下文(如使用makecontext创建的上下文）运行终止时系统会恢复<code>uc_link</code>指向的上下文；<code>uc_sigmask</code>为该上下文中的阻塞信号集合；<code>uc_stack</code>为该上下文中使用的栈；<code>uc_mcontext</code>保存的上下文的特定机器表示，包括调用线程的特定寄存器等<h3 id="四个操作函数"><a href="#四个操作函数" class="headerlink" title="四个操作函数"></a>四个操作函数</h3></li>
<li><code>int getcontext(ucontext_t *ucp);</code><ul>
<li>初始化ucp结构体，将当前的上下文保存到ucp中</li>
</ul>
</li>
<li><code>int setcontext(const ucontext_t *ucp);</code><ul>
<li>设置当前的上下文为ucp，setcontext的上下文ucp应该通过getcontext或者makecontext取得，如果调用成功则不返回。</li>
<li>如果上下文是通过调用getcontext()取得,程序会继续执行这个调用。如果上下文是通过调用makecontext取得,程序会调用makecontext函数的第二个参数指向的函数，如果func函数返回,则恢复makecontext第一个参数指向的上下文第一个参数指向的上下文context_t中指向的uc_link</li>
<li>如果uc_link为NULL,则线程退出。</li>
</ul>
</li>
<li><code>void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);</code><ul>
<li> <code>makecontext</code>修改通过<code>getcontext</code>取得的上下文ucp(这意味着调用makecontext前必须先调用getcontext)。然后给该上下文指定一个栈空间ucp-&gt;stack，设置后继的上下文ucp-&gt;uc_link.</li>
<li> 当上下文通过setcontext或者swapcontext激活后，执行func函数，argc为func的参数个数，后面是func的参数序列。当func执行返回后，继承的上下文被激活，如果继承上下文为NULL时，线程退出</li>
</ul>
</li>
<li><code>int swapcontext(ucontext_t *oucp, ucontext_t *ucp);</code><ul>
<li><strong>保存当前上下文到oucp结构体中</strong>，<strong>然后激活upc上下文</strong>。 </li>
</ul>
</li>
<li>如果执行成功，<code>getcontext</code>返回0，<code>setcontext</code>和<code>swapcontext</code>不返回；如果执行失败，<code>getcontext</code>,<code>setcontext</code>,<code>swapcontext</code>返回-1，并设置对于的errno.</li>
</ul>
<table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>getcontext</td>
<td>获取上下文</td>
</tr>
<tr>
<td>setcontext</td>
<td>设置上下文</td>
</tr>
<tr>
<td>swapcontext</td>
<td>保存当前上下文，切换上下文</td>
</tr>
<tr>
<td>makecontext</td>
<td>创建新的上下文</td>
</tr>
</tbody></table>
<ul>
<li>例子<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">ucontext_t</span> context;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getcontext</span>(&amp;context);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setcontext</span>(&amp;context);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>上述函数会不断重复输出<code>Hello World</code>，因为<code>getcontext</code>将上下文设置在了输出之前，<code>setcontext</code>每次都把整个执行流返回到输出的位置</li>
</ul>
<h3 id="更换为执行时间最短先服务逻辑的调度器版本"><a href="#更换为执行时间最短先服务逻辑的调度器版本" class="headerlink" title="更换为执行时间最短先服务逻辑的调度器版本"></a>更换为执行时间最短先服务逻辑的调度器版本</h3><ul>
<li><a href="https://github.com/Winnerhust/uthread">参考的原版</a></li>
<li><a href="https://github.com/frankzjz219/coThread">我改进代码的github仓库</a></li>
<li>使用了优先级队列重写携程选择逻辑，切换的时候会选择当前已经运行时间最短的携程上处理机执行</li>
<li>运行结果<ul>
<li><img src="/imgs/941347f9abd1720738aefc5d97931550f21aa9612e6620b2f0e59f887e23f2f5.png" alt="picture 0">  </li>
<li>四个线程的优先级分别是4，3，2，1，可见是符合设置的<h3 id="1月12日修改"><a href="#1月12日修改" class="headerlink" title="1月12日修改"></a>1月12日修改</h3></li>
</ul>
</li>
<li>修改为了多线程版本，分别调度，分别设置优先级<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3></li>
<li>C/C++文件编译的时候<strong>每个源文件都是独立编译的</strong>，这样会导致即使头文件使用了<code>ifndef</code>之类的保护，仍然可能在整个项目中被<strong>不同的文件</strong>引用多次<ul>
<li>因此如果头文件中出现了函数或者是变量的定义的话，这个变量在整个项目中会被定义多次</li>
<li>因此头文件中只能声明，变量使用<code>extern</code>关键字声明</li>
<li>必须定义的函数用<code>inline</code></li>
</ul>
</li>
<li>注意在一个文件中定义的类静态变量在其他文件中使用的时候需要先用<code>extern</code>声明`</li>
<li>C++可以使用宏<code>__FILE__</code>判断自己所处的文件名称</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>多线程</tag>
        <tag>携程</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统and编译随记</title>
    <url>/2023/05/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fand%E7%BC%96%E8%AF%91%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="编译随记"><a href="#编译随记" class="headerlink" title="编译随记"></a>编译随记</h2><h3 id="优化barrier"><a href="#优化barrier" class="headerlink" title="优化barrier"></a>优化barrier</h3><ul>
<li><img src="/imgs/b62a8861fbeaa2635275bf41afb9890254b85016ebdec10ee15325b9d4157539.png" alt="picture 1">  <ul>
<li><code>asm volatile (&quot;mfence&quot; :::&quot;memory)</code></li>
<li>这句话的意思是该汇编语句可能访问内存的任何位置，因此任何内存相关的优化不能穿过这句话</li>
</ul>
</li>
<li><img src="/imgs/1bdc777c42b9bf2b6299b3b511a5e5da5365d5d8f53e23bb99717f7277d5b8b5.png" alt="picture 2">  <ul>
<li><code>__sync_synchronize()</code></li>
<li>这是编译器直接提供的一个barrier</li>
</ul>
</li>
<li>假如不写volatile的话，编译器可能直接不考虑变量的读写访存问题直接进行优化，比如优化等级选择<code>-O1</code>，<code>-O2</code>的话，<u>可能会直接略过循环，给变量赋值一个终值</u></li>
<li><u>仅靠编译器是无法实现原子操作的，必须有处理器本身的支持</u></li>
<li>PeterSon算法必须是使用原子操作的读写才可以，否则还是会出问题（虽然可能概率不大）</li>
<li>注意， 代码编译优化的时候不能够将其挪动到临界区外面（需要barrier），否则整个就会出错<ul>
<li><img src="/imgs/0516acbd54cb59a0a31ced244c4916b4cd530034275ae320a0a10361c73f2299.png" alt="picture 4">  </li>
</ul>
</li>
<li>前一条原子指令之前发生的事件，后一条原子指令都可见（也就是在他开始之前都完成了）</li>
<li><img src="/imgs/24b9121cda9dfdc899a4171279245802b54189c3b063ed8fdb72817b9c08f0aa.png" alt="picture 5">  <ul>
<li>注意临界区使用自旋锁的条件，禁止执行流的切换<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3></li>
</ul>
</li>
<li>互斥锁的操作实际上是能进入的时候就进入，<strong>不能进入的时候就进入等待队列，切换到别的线程</strong>，防止全部阻塞</li>
<li>但是互斥锁在处理公用的锁的时候需要用到自旋锁来保护自己的状态不被打断</li>
<li>互斥锁不自旋，不会因为自选浪费CPU</li>
<li>实际上上互斥锁的操作比较复杂，对于短的临界区，使用互斥锁反而慢<ul>
<li><img src="/imgs/091710405bd94d8758f1147cf688f64941f288df0339dbc2a989f722d3d95049.png" alt="picture 6">  </li>
</ul>
</li>
<li>Unix系统中的<strong>管道</strong>是一个天然的既带有<strong>同步</strong>又带有<strong>数据传输</strong>的机制<h3 id="手动原子指令"><a href="#手动原子指令" class="headerlink" title="手动原子指令"></a>手动原子指令</h3></li>
<li><img src="/imgs/ae4caadb166a305bf7b5d731eae16311e296d579341496b1774b28fd801c4028.png" alt="picture 3">  </li>
<li>在某一条汇编指令前面加<code>lock</code>，CPU对外有总线发送<code>LOCK</code>信号，会给予一个CPU内存的独占访问权限，直到这个信号结束，防止在指令执行完成期间内存被修改</li>
<li>原子指令做的事实际上就是将系统所有的执行流分成atmoic指令之前，和atomic指令之后，这两个是不可逾越不可互相交错的，相当于原子指令执行的过程中世界停止了，对于所有CPU核心或者所有其他进程线程而言<h3 id="如何解决并发的问题"><a href="#如何解决并发的问题" class="headerlink" title="如何解决并发的问题"></a>如何解决并发的问题</h3></li>
<li><img src="/imgs/e67732194af677ffd935d440dac7defd78b388d1db242254869f301d8de35667.png" alt="picture 7">  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;thread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;thread-sync.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">mutex_t</span> lk = MUTEX_INIT();</span><br><span class="line"><span class="keyword">cond_t</span> cv = COND_INIT();</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAN_PRODUCE (count &lt; n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CAN_CONSUME (count &gt; 0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tproduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    mutex_lock(&amp;lk);</span><br><span class="line">    <span class="keyword">while</span> (!CAN_PRODUCE) &#123;</span><br><span class="line">      cond_wait(&amp;cv, &amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>); count++;</span><br><span class="line">    cond_broadcast(&amp;cv);</span><br><span class="line">    mutex_unlock(&amp;lk);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tconsume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    mutex_lock(&amp;lk);</span><br><span class="line">    <span class="keyword">while</span> (!CAN_CONSUME) &#123;</span><br><span class="line">      cond_wait(&amp;cv, &amp;lk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>); count--;</span><br><span class="line">    cond_broadcast(&amp;cv);</span><br><span class="line">    mutex_unlock(&amp;lk);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  assert(argc == <span class="number">3</span>);</span><br><span class="line">  n = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">int</span> T = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line">    create(Tproduce);</span><br><span class="line">    create(Tconsume);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h3></li>
<li><img src="/imgs/28709dba035a9f9fb313ae889093ebd491fc0afdb44718a694306efe90bda4bd.png" alt="picture 8">  </li>
<li>go语言对于线程的新处理方式（结合线程与携程）<ul>
<li><img src="/imgs/b949111729348f37145baeaaf9a83b017673fc57ae0fd0b479269f0c7abaf4a4.png" alt="picture 9">  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">go</span> spinner(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">  <span class="keyword">const</span> n = <span class="number">45</span></span><br><span class="line">  fibN := fib(n) <span class="comment">// slow</span></span><br><span class="line">  fmt.Printf(<span class="string">&quot;\rFibonacci(%d) = %d\n&quot;</span>, n, fibN)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spinner</span><span class="params">(delay time.Duration)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, r := <span class="keyword">range</span> <span class="string">`-\|/`</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;\r%c&quot;</span>, r)</span><br><span class="line">      time.Sleep(delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> x &lt; <span class="number">2</span> &#123; <span class="keyword">return</span> x &#125;</span><br><span class="line">  <span class="keyword">return</span> fib(x - <span class="number">1</span>) + fib(x - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>注意，打印<code>\r</code>实际上是使得光标回到行首，也就是可以实现在行首的同一个位置不停的重复打印字符的目的</li>
<li>比如go语言中进程间通信就是管道的方式<code>channel</code><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stream = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> n = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">produce</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;produce&quot;</span>, i)</span><br><span class="line">    stream &lt;- i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consume</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    x := &lt;-stream</span><br><span class="line">    fmt.Println(<span class="string">&quot;consume&quot;</span>, x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> produce()</span><br><span class="line">  &#125;</span><br><span class="line">  consume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为cuda编写程序"><a href="#为cuda编写程序" class="headerlink" title="为cuda编写程序"></a>为cuda编写程序</h3></li>
<li>编写的是类似与C或者cpp的程序，但是使用<code>nvcc</code>编译器进行编译，得到相应的结果</li>
<li>cuda程序最好不要有分支<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ITER 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIM 12800</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> colors[MAX_ITER + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> data[DIM * DIM];</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="keyword">uint32_t</span> <span class="title">mandelbrot</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> zr = <span class="number">0</span>, zi = <span class="number">0</span>, zrsqr = <span class="number">0</span>, zisqr = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_ITER; i++) &#123;</span><br><span class="line">    zi = zr * zi * <span class="number">2</span> + y;</span><br><span class="line">    zr = zrsqr - zisqr + x;</span><br><span class="line">    zrsqr = zr * zr;</span><br><span class="line">    zisqr = zi * zi;</span><br><span class="line">    <span class="keyword">if</span> (zrsqr + zisqr &gt; <span class="number">4.0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// SIMT threads diverges here!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">mandelbrot_kernel</span><span class="params">(<span class="keyword">uint32_t</span> *data, <span class="keyword">double</span> xmin, <span class="keyword">double</span> ymin, <span class="keyword">double</span> step, <span class="keyword">uint32_t</span> *colors)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pix_per_thread = DIM * DIM / (gridDim.x * blockDim.x);</span><br><span class="line">  <span class="keyword">int</span> tId = blockDim.x * blockIdx.x + threadIdx.x;</span><br><span class="line">  <span class="keyword">int</span> offset = pix_per_thread * tId;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; offset + pix_per_thread; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = i % DIM;</span><br><span class="line">    <span class="keyword">int</span> y = i / DIM;</span><br><span class="line">    <span class="keyword">double</span> cr = xmin + x * step;</span><br><span class="line">    <span class="keyword">double</span> ci = ymin + y * step;</span><br><span class="line">    data[y * DIM + x] = colors[mandelbrot(cr, ci)];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (gridDim.x * blockDim.x * pix_per_thread &lt; DIM * DIM</span><br><span class="line">      &amp;&amp; tId &lt; (DIM * DIM) - (blockDim.x * gridDim.x)) &#123;</span><br><span class="line">    <span class="keyword">int</span> i = blockDim.x * gridDim.x * pix_per_thread + tId;</span><br><span class="line">    <span class="keyword">int</span> x = i % DIM;</span><br><span class="line">    <span class="keyword">int</span> y = i / DIM;</span><br><span class="line">    <span class="keyword">double</span> cr = xmin + x * step;</span><br><span class="line">    <span class="keyword">double</span> ci = ymin + y * step;</span><br><span class="line">    data[y * DIM + x] = colors[mandelbrot(cr, ci)];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span> freq = <span class="number">6.3</span> / MAX_ITER;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_ITER; i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> r = <span class="built_in">sin</span>(freq * i + <span class="number">3</span>) * <span class="number">127</span> + <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">char</span> g = <span class="built_in">sin</span>(freq * i + <span class="number">5</span>) * <span class="number">127</span> + <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="built_in">sin</span>(freq * i + <span class="number">1</span>) * <span class="number">127</span> + <span class="number">128</span>;</span><br><span class="line">    colors[i] = b + <span class="number">256</span> * g + <span class="number">256</span> * <span class="number">256</span> * r;</span><br><span class="line">  &#125;</span><br><span class="line">  colors[MAX_ITER] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint32_t</span> *dev_colors, *dev_data;</span><br><span class="line">  cudaMalloc((<span class="keyword">void</span>**)&amp;dev_colors, <span class="keyword">sizeof</span>(colors));</span><br><span class="line">  cudaMalloc(&amp;dev_data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">  cudaMemcpy(dev_colors, colors, <span class="keyword">sizeof</span>(colors), cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">double</span> xcen = <span class="number">-0.5</span>, ycen = <span class="number">0</span>, scale = <span class="number">3</span>;</span><br><span class="line">  mandelbrot_kernel&lt;&lt;&lt;<span class="number">512</span>, <span class="number">512</span>&gt;&gt;&gt;(</span><br><span class="line">    dev_data,</span><br><span class="line">    xcen - (scale / <span class="number">2</span>),</span><br><span class="line">    ycen - (scale / <span class="number">2</span>),</span><br><span class="line">    scale / DIM,</span><br><span class="line">    dev_colors</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  cudaMemcpy(data, dev_data, <span class="keyword">sizeof</span>(data), cudaMemcpyDeviceToHost);</span><br><span class="line">  cudaFree(dev_data);</span><br><span class="line">  cudaFree(dev_colors);</span><br><span class="line"></span><br><span class="line">  FILE *fp = fopen(<span class="string">&quot;mandelbrot.ppm&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(fp, <span class="string">&quot;P6\n%d %d 255\n&quot;</span>, DIM, DIM);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DIM * DIM; i++) &#123;</span><br><span class="line">    fputc((data[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>, fp);</span><br><span class="line">    fputc((data[i] &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>, fp);</span><br><span class="line">    fputc((data[i] &gt;&gt;  <span class="number">0</span>) &amp; <span class="number">0xff</span>, fp);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="javaScript中的并发"><a href="#javaScript中的并发" class="headerlink" title="javaScript中的并发"></a>javaScript中的并发</h3></li>
<li><img src="/imgs/45297a2f6ecf71272c074133f7719604052e3957e18d8f0e3ac01e04b406102e.png" alt="picture 10">  </li>
<li>JS的时间轴是不会被打断的，一个函数一定要运行到结束位置</li>
<li>假如函数中的有<strong>耗时</strong>的操作，这个耗时的操作会被移动到浏览器的后台执行，执行完成之后会有一个callback函数，此时浏览器切换到继续需要执行的回调函数<ul>
<li><img src="/imgs/6f87d8e906c73da15374c01c013dc42a2d60f17ceb2de224d26749106e946a3a.png" alt="picture 11">  </li>
<li>两个函数本质上都是回调函数</li>
</ul>
</li>
<li>并且，假如<strong>耗时的步骤完成</strong>之后，系统中正在有其他函数执行，那么会<strong>等到其他函数执行结束</strong>之后在进行回调</li>
<li>所以不存在事件内与其他执行流并发的问题<h3 id="解决-ajax不便于维护的问题，引入Promise"><a href="#解决-ajax不便于维护的问题，引入Promise" class="headerlink" title="解决$.ajax不便于维护的问题，引入Promise"></a>解决$.ajax不便于维护的问题，引入<strong>Promise</strong></h3></li>
<li><img src="/imgs/28f98465b87a62795b9a04222bd7f73d075b84409b55a3d137625f8e533ff399.png" alt="picture 12">  </li>
<li><img src="/imgs/07c28b49b08e100c0c6b7251b21dea5e72194a38d16b2f17b24ee9e0d6d8b52a.png" alt="picture 13">  </li>
<li><img src="/imgs/84d7d5d349fbfbc3822405a85aa96cf542b64471d46d33761ddb13f6e664eb9d.png" alt="picture 14">  </li>
<li><a href="https://www.runoob.com/js/js-promise.html">教程</a><h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3></li>
<li><img src="/imgs/eb42f65ed6435a4f320a66ba8f7813241f9376a7d6b64cbaf8d7c53b0cf8fbad.png" alt="picture 15">  </li>
<li>比如解决哲学家吃饭问题，将所有的叉子从小到大编号，要求每个哲学家都先拿自己手边编号较小的叉子，再拿编号大的，所有人都按照同样的顺序拿叉子<h3 id="编译器的线程消毒器选项-fsanitize-thread"><a href="#编译器的线程消毒器选项-fsanitize-thread" class="headerlink" title="编译器的线程消毒器选项-fsanitize-thread"></a>编译器的线程消毒器选项<code>-fsanitize-thread</code></h3></li>
<li><img src="/imgs/6b5f02292b0ab17f7f8d03a825d5f1262bbb791557018fc1ae048263b53ed754.png" alt="picture 16">  </li>
<li>辅助检查并发bug<ul>
<li><img src="/imgs/2d4ccec9c22dd7b01234d2cb3307300e66c8e5b17fde29f1b7a729b62d969257.png" alt="picture 17">  </li>
<li>运行时检查内存访问</li>
<li>基本假设是每个线程里面的事件是<U>顺序发生的</u></li>
<li>假如不同的线程之间访问同一片内存，但是这两个操作之间不存在一个线程先解锁，另一个线程再上锁的操作的话，就会导致data race问题</li>
</ul>
</li>
<li>其他的<code>sanitizer</code><ul>
<li><img src="/imgs/40b41b03f179094f118eaeb700576cf28e695839cbb5927cd6dda3053e46f8d0.png" alt="picture 18">  </li>
</ul>
</li>
<li>比如可以检查是否操作了已经释放过的内存<ul>
<li><img src="/imgs/b07e5ca9137ff5a7b67f99b1ede88ea1e017087603cf67cbe9358f88a6eb8c0a.png" alt="picture 19">  </li>
</ul>
</li>
<li><img src="/imgs/64b32973af0e279a2eb77e982e1d0fffe1326f5c9c76959601e6a538d4cb293c.png" alt="picture 20">  <ul>
<li><code>0xccccc...</code>字符串在<strong>gb</strong>解码下是“烫烫烫烫…”</li>
<li><code>oxcdcdcdcd...</code>在<strong>gb</strong>解码下是“屯屯屯屯屯”</li>
<li></li>
</ul>
</li>
</ul>
<h2 id="中断相关"><a href="#中断相关" class="headerlink" title="中断相关"></a>中断相关</h2><ul>
<li><img src="/imgs/dfea478d59330419bdd5a897a6f0d1efdee99a178abfe0d5df469d2b87cd67ea.png" alt="picture 21">  <ul>
<li>关中断</li>
<li>在正常模式下，假如应用程序试图执行这个操作，CPU会直接产生中断，认为应用程序执行了非法操作</li>
</ul>
</li>
<li><img src="/imgs/8f014eec5845cbb60d45e9b0fc0278c94c44a969c01dd200e056af02ecdbee48.png" alt="picture 22">  </li>
<li>对于单处理器系统，关闭中断就可以实行互斥，再重新开中断之前都不会被打断</li>
<li><strong>多处理器系统不适用</strong></li>
<li>中断发生的时候中断处理程序会把所有的寄存器搬到内存里保存，再中断返回的时候又会把所有的寄存器数值搬回原来的位置<h2 id="50行代码实现一个操作系统"><a href="#50行代码实现一个操作系统" class="headerlink" title="50行代码实现一个操作系统"></a>50行代码实现一个操作系统</h2></li>
<li>头文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User-defined tasks</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    lock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%s on CPU #%d\n&quot;</span>, arg, cpu_current());</span><br><span class="line">    unlock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">volatile</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Task tasks[] = &#123;</span><br><span class="line">  &#123; .name = <span class="string">&quot;A&quot;</span>, .entry = func &#125;,</span><br><span class="line">  &#123; .name = <span class="string">&quot;B&quot;</span>, .entry = func &#125;,</span><br><span class="line">  &#123; .name = <span class="string">&quot;C&quot;</span>, .entry = func &#125;,</span><br><span class="line">  &#123; .name = <span class="string">&quot;D&quot;</span>, .entry = func &#125;,</span><br><span class="line">  &#123; .name = <span class="string">&quot;E&quot;</span>, .entry = func &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>.c文件<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;am.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;klib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;klib-macros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CPU 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">task</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">task</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">void</span>      (*entry)(<span class="keyword">void</span> *);</span><br><span class="line">    Context    *context;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">uint8_t</span> <span class="built_in">stack</span>[<span class="number">8192</span>];</span><br><span class="line">&#125; Task;  <span class="comment">// A &quot;state machine&quot;</span></span><br><span class="line"></span><br><span class="line">Task *currents[MAX_CPU];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> current currents[cpu_current()]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> locked = <span class="number">0</span>;  <span class="comment">// A spin lock</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>   </span>&#123; <span class="keyword">while</span> (atomic_xchg(&amp;locked, <span class="number">1</span>)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123; atomic_xchg(&amp;locked, <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tasks.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Context *<span class="title">on_interrupt</span><span class="params">(Event ev, Context *ctx)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!current) current = &amp;tasks[<span class="number">0</span>];  <span class="comment">// First interrupt</span></span><br><span class="line">  <span class="keyword">else</span> current-&gt;context = ctx;  <span class="comment">// Save pointer to stack-saved context</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">  &#125; <span class="keyword">while</span> ((current - tasks) % cpu_count() != cpu_current());</span><br><span class="line">  <span class="keyword">return</span> current-&gt;context;  <span class="comment">// Restore a new context</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mp_entry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  yield();  <span class="comment">// Self-trap; never returns</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cte_init(on_interrupt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(tasks); i++) &#123;</span><br><span class="line">    Task *task    = &amp;tasks[i];</span><br><span class="line">    Area <span class="built_in">stack</span>    = (Area) &#123; &amp;task-&gt;context + <span class="number">1</span>, task + <span class="number">1</span> &#125;;</span><br><span class="line">    task-&gt;context = kcontext(<span class="built_in">stack</span>, task-&gt;entry, (<span class="keyword">void</span> *)task-&gt;name);</span><br><span class="line">    task-&gt;next    = &amp;tasks[(i + <span class="number">1</span>) % LENGTH(tasks)];</span><br><span class="line">  &#125;</span><br><span class="line">  mpe_init(mp_entry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="防止循环被直接优化的方法"><a href="#防止循环被直接优化的方法" class="headerlink" title="防止循环被直接优化的方法"></a>防止循环被直接优化的方法</h3></li>
<li>在for中使用<code>volatile</code>的计数变量<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">volatile</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>: i++);</span><br></pre></td></tr></table></figure></li>
<li>上述代码中的<code>yield</code>实际上是原地产生一个处理器中断</li>
<li>注意在Union中使用struct的方式<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">task</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">task</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">void</span>      (*entry)(<span class="keyword">void</span> *);</span><br><span class="line">    Context    *context;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">uint8_t</span> <span class="built_in">stack</span>[<span class="number">8192</span>];</span><br><span class="line">&#125; Task;  <span class="comment">// A &quot;state machine&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>CPU是一种状态机的容器，操作系统的任务就是让CPU在不同的状态机之间轮换<h2 id="创建新的进程"><a href="#创建新的进程" class="headerlink" title="创建新的进程"></a>创建新的进程</h2></li>
<li><img src="/imgs/af4d77a20992005f6b5f0ab01ca05f36efd57c920710634cc3c8391dcd767a5d.png" alt="picture 23">  </li>
<li>命令行允许<code>:</code>作为标识符</li>
<li>一变二、二变四创建新的进程<h3 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h3></li>
<li>所有进程都是从上一个进程fork（复制）出来的，多有状态都被复制了，包括PC指针等等，因此存在父子关系</li>
<li><img src="/imgs/a99d16e8b193deacd899533fa77553ee58d621403d318f5d438bb124b419c089.png" alt="image.png 1">  <ul>
<li>会产生四个进程</li>
<li>顺序不是确定的</li>
<li><img src="/imgs/e0cec5dc228866f011701f15a75090abfa8ae6f99ebaa7c9922883874c442d9a.png" alt="picture 25">  </li>
</ul>
</li>
<li><img src="/imgs/30cab2144ac9c75f96211c74ec404c56d873c3b2bfccf6eca078434cafd8bb71.png" alt="picture 26">  <ul>
<li>上述代码会创建四个进程，最终输出6个hello</li>
<li>但是，使用管道<code>|</code>讲程序输出到<code>cat</code>的时候，有时会产生八个输出<ul>
<li>因为假如<code>printf</code>输出对应的是一个管道的话，可能会使得<strong>输出被buffer起来</strong>而不是直接打印到屏幕上，实际上是每次第一次创建的两个进程的buffer里有一个hello，<strong>这个hello随着fork被复制到了新的四个进程</strong>，进程又打印了一次hello，结果每个进程打印两个hello</li>
<li><u>缓冲区会随着fork()被复制到新的进程中</u></li>
<li>包括代码、库函数、<code>malloc</code>复制出来的内存等等，都会被复制到新的进程中<h3 id="重置状态机"><a href="#重置状态机" class="headerlink" title="重置状态机"></a>重置状态机</h3></li>
</ul>
</li>
</ul>
</li>
<li><code>execve()</code></li>
<li>的行为是把一个静态的状态机重置为传递给<code>execve</code>的文件路径指向的可执行文件描述的初始状态，并且给<code>main()</code>函数传递<code>argc</code>, <code>argv</code>两个参数<ul>
<li><img src="/imgs/b5fbd8c493f4dba68a92cbbde9be282587672ddba5dbbc982e07c740409b4609.png" alt="picture 27">  <h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4></li>
</ul>
</li>
<li><img src="/imgs/ac960cb9ba99d2a159d143a6c3de0d6729da419fac913222d251a6a101600421.png" alt="picture 28">  </li>
<li>环境变量也是通过<code>execve</code>传进去的，会继承父进程的环境变量</li>
<li>修改命令行的提示符<ul>
<li><img src="/imgs/da120285da5ca0e9cf2b7da565681e3845821423086c9c39793f0f9a9000fa9b.png" alt="picture 29">  </li>
<li><code>PS1</code>变量</li>
</ul>
</li>
<li><img src="/imgs/95ff71d201b53be794d42cffe4784d1edc103cf5718579245f80f96d25d9d96c.png" alt="picture 30">  </li>
<li><img src="/imgs/1e4dece047c5e8638245377f2367e8b3a2514e1d0ad89a8150e493b93cbe9def.png" alt="picture 31">  <ul>
<li>这个代码<code>execve</code>成功的话就不会执行<code>printf</code>，因为已经重置了<h2 id="销毁状态机"><a href="#销毁状态机" class="headerlink" title="销毁状态机"></a>销毁状态机</h2></li>
</ul>
</li>
<li><code>exit()</code></li>
<li><img src="/imgs/656777a86704e16bc32a3fd9275778244894fccc7a489cc4309226af1700153c.png" alt="picture 32">  <ul>
<li>与C语言的库函数<code>exit</code>区分开</li>
</ul>
</li>
<li><img src="/imgs/7d7f359d2434f365b8b251bef01ddf04f6b1aff4aac9090d4f4129cbf62df8fc.png" alt="picture 33">  <ul>
<li>这个的作用是exit hook，就是在退出的执行一些处理后事的程序</li>
<li>这个程序只对C语言标准库中的<code>exit</code>函数起作用，假如直接用系统调用的<code>_exit</code>，那么不会打印任何东西直接退出</li>
</ul>
</li>
<li><img src="/imgs/8eff125287d97617fe1b056b269fba3878f1e39c1f8e4e70209bcca344a0ed12.png" alt="picture 34">  <ul>
<li>多线程和单线程也是有区别的</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统and编译随记（2）</title>
    <url>/2023/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fand%E7%BC%96%E8%AF%91%E9%9A%8F%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2><h3 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h3><ul>
<li><img src="/imgs/780308b2b5bf9eb28ad4258bbeec0bfa374ccdfea6ca0b0398ea909c6ab02bfd.png" alt="picture 1">  </li>
<li>初始化完了之后就会变成一个中断（系统调用）的处理工具</li>
<li><code>systemd</code>是所有进程的根进程<h2 id="构件最小的Linux系统"><a href="#构件最小的Linux系统" class="headerlink" title="构件最小的Linux系统"></a>构件最小的Linux系统</h2></li>
<li>initramfs：<ul>
<li><img src="/imgs/878c4b914de8d04a716b195d0546d5644d39138a9bb70781835242d6b55211c9.png" alt="picture 2">  <h3 id="系统启动的第一个程序init"><a href="#系统启动的第一个程序init" class="headerlink" title="系统启动的第一个程序init"></a>系统启动的第一个程序<code>init</code></h3></li>
</ul>
</li>
<li>busybox是Linux中所有工具的集合打包，可以变成<code>ls</code>, <code>vi</code>等等（使用busybox [程序名]）即可<ul>
<li>所有工具打包在一个二进制文件里</li>
<li>功能较全面的工具包</li>
<li><img src="/imgs/108d594f6611b0fd7638f1cf52f8a2a926eb0b028322c7841e3bf5dcaa813076.png" alt="picture 3">  </li>
<li>如何实现不需要手动打<code>busybox</code>就使用所有命令？<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> $(<span class="variable">$BB</span> --list); <span class="keyword">do</span></span><br><span class="line">  <span class="variable">$BB</span> ln -s <span class="variable">$BB</span> /bin/<span class="variable">$cmd</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">mkdir -p /tmp</span><br><span class="line">mkdir -p /proc &amp;&amp; mount -t proc  none /proc</span><br><span class="line">mkdir -p /sys  &amp;&amp; mount -t sysfs none /sys</span><br><span class="line">mknod /dev/tty c 4 1</span><br><span class="line">setsid /bin/sh &lt;/dev/tty &gt;/dev/tty 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>循环是将busybox支持的所有命令，以这个命令的名字作为文件名，创建一个符号链接到<code>/bin</code>下，这样的话就可以实现命令行直接使用，实际上文件都是busybox<ul>
<li>busy如何知道是哪个命令调用的自己？<ul>
<li>每个命令行调用传入的<strong>第一个参数</strong>都是调用的名称</li>
</ul>
</li>
</ul>
</li>
<li>下面是挂载各种目录</li>
<li><code>proc</code>有所有进程的信息</li>
<li><code>setsid</code>:<ul>
<li>在新的会话中运行程序，也就是setsid命令 子进程从父进程继承了：SessionID、进程组ID和打开的终端。子进程如果要<strong>脱离</strong>这些，代码中可通过调用setsid来实现。，而命令行或脚本中可以通过使用命令setsid来运行程序实现。<u>setsid帮助一个进程脱离从父进程继承而来的已打开的终端、隶属进程组和隶属的会话。</u></li>
<li>给Linux内核传参<code>rdinit=</code>，即可修改启动的进程是<code>init</code>还是别的</li>
</ul>
</li>
<li><code>init</code>执行后会调用<code>pivot_root</code>函数</li>
<li><img src="/imgs/672702a78069893abbf1bd465397084b4222b07450ba3d5d4b6d2fcb713caa2a.png" alt="picture 4">  </li>
<li><code>/usr/sbin/init</code>：<ul>
<li><img src="/imgs/63de1517e3190672b4b91e5afa57a415912e4c1c163af5bb855caa627d70c8de.png" alt="picture 5">  </li>
</ul>
</li>
<li>需要在此<strong>之前</strong>挂在好根文件系统，将需要放入内核的模块（比如驱动）放入并且启动，例如网卡驱动</li>
<li>创建完成之后再调换root，切换到<code>systemd</code>，进入正常的启动流程</li>
<li><img src="/imgs/82e123f07e91f643f9fb95e7cc827c9aa231fc0680f0aafde3bf0507de63295c.png" alt="picture 6">  <ul>
<li>第一句话是创建一个节点，主设备号是8次设备号是0，是磁盘</li>
<li>第二句创建一个<code>/newroot</code>文件目录</li>
<li>第三句将磁盘挂载到<code>/newroot</code></li>
<li>第四句<code>switch root</code></li>
</ul>
</li>
<li><code>systemd</code>执行完后续的初始化之后，再将系统的权限交给窗口管理器</li>
<li>窗口管理器完成用户界面的显示之后，将权限交给用户<h2 id="进程地址空间"><a href="#进程地址空间" class="headerlink" title="进程地址空间"></a>进程地址空间</h2><h3 id="pmap"><a href="#pmap" class="headerlink" title="pmap"></a>pmap</h3></li>
<li>pmap [进程号]得到进程地址空间中的内容</li>
<li>可以用gdb将一个程序暂停，使用<code>info inferiors</code>得到进程号，然后使用pmap得到空间内容<ul>
<li><img src="/imgs/1a06c04103a6ec2209527e2906f0f91ab046d789ae730964756ddd0ff002f2d2.png" alt="picture 7">  </li>
</ul>
</li>
<li></li>
<li>应用程序的内存是段组成的（带权限的连续的内存块）<ul>
<li><img src="/imgs/b1790b090683c064824d067918ee401d7eba9f339ad82cb7ffaef445a52952c0.png" alt="picture 8">  </li>
<li>第一个4k只读，第二个4k可读可执行</li>
<li>16k只读<h3 id="cat-proc-进程号-maps"><a href="#cat-proc-进程号-maps" class="headerlink" title="cat /proc/进程号/maps"></a>cat /proc/进程号/maps</h3></li>
</ul>
</li>
<li><img src="/imgs/a61e6ef2f73d9c5d18de377b21ef2b597ff7a6c3c945dc59a975605113f061f6.png" alt="picture 9">  </li>
<li>实际上<code>pmap</code>是通过读取<code>/proc/进程号/maps</code>实现的</li>
</ul>
<h2 id="操作系统API"><a href="#操作系统API" class="headerlink" title="操作系统API"></a>操作系统API</h2><ul>
<li><p>操作系统是API+对象</p>
</li>
<li><p>API+对象构成了内核</p>
</li>
<li><p>但是用户不太可能跟内核直接交互，所以需要一个shell方便交互</p>
</li>
<li><p><code>bash</code>中的<u>``</u>和 <strong>$()<strong>很多时候</strong>可以互换</strong></p>
</li>
<li><p><code>bash</code>中可以使用<code>&lt;</code>将命令行的输入重定向</p>
<ul>
<li><img src="/imgs/f02be8129fb8d5f6a02f32a9fbba5f035e09ccacb4aa6367ab26f1e7fc1c55af.png" alt="picture 10">  </li>
</ul>
</li>
<li><p><code>vim</code>支持将某一个程序的输出直接作为文件编辑，<code>-</code>的意思是标准输入</p>
<ul>
<li><img src="/imgs/479239d08746074bf25e371bee85415871c7a7ddfe2e084f16b625770b2a0dfb.png" alt="picture 11">  </li>
</ul>
</li>
<li><p>使用<code>vim &lt;(ls)</code>这句命令可以将<code>ls</code>的输出传递给<code>vim</code></p>
</li>
<li><p>与<code>ls | vim -</code>效果类似</p>
</li>
<li><p>shell支持程序前后台切换</p>
<ul>
<li>可以使用<code>jobs</code>命令查看</li>
<li>使用<code>fg %序号</code>将这个程序切换回前台</li>
<li>使用<code>Ctrl Z</code>将一个现在在前台的程序转移到后台并且暂停</li>
</ul>
</li>
<li><p>shell（或者bash）可以用<code>-x</code>选项在执行脚本文件的时候将脚本的执行过程打印出来，否则不容易调试</p>
<h3 id="shell实现管道"><a href="#shell实现管道" class="headerlink" title="shell实现管道"></a>shell实现管道</h3></li>
<li><p>查看运行的进程打开的文件描述符</p>
<ul>
<li><img src="/imgs/06fb5923df8bcf1c6ca3f386d7a599daa6ea9b7f768ebec7c097cc673bca415e.png" alt="picture 12">  </li>
</ul>
</li>
<li><p>文件描述符</p>
<ul>
<li>0 —— stdin   （标准输入）</li>
<li>1 —— stdout （标准输出）</li>
<li>2 —— stderr （标准错误）</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Linux port of xv6-riscv shell (no libc)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parsed command representation</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> EXEC = <span class="number">1</span>, REDIR, PIPE, LIST, BACK &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARGS 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void *)0)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;</span><br><span class="line">  <span class="keyword">char</span> *argv[MAXARGS], *eargv[MAXARGS];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type, fd, mode;</span><br><span class="line">  <span class="keyword">char</span> *file, *efile;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">left</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">left</span>, *<span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">backcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute cmd.  Never returns.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runcmd</span><span class="params">(struct cmd* cmd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p[<span class="number">2</span>];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">backcmd</span>* <span class="title">bcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span>* <span class="title">ecmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listcmd</span>* <span class="title">lcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span>* <span class="title">pcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span>* <span class="title">rcmd</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cmd == <span class="number">0</span>) syscall(SYS_exit, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (cmd-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> EXEC:</span><br><span class="line">      ecmd = (struct execcmd*)cmd;</span><br><span class="line">      <span class="keyword">if</span> (ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>) syscall(SYS_exit, <span class="number">1</span>);</span><br><span class="line">      syscall(SYS_execve, ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv, <span class="literal">NULL</span>);</span><br><span class="line">      print(<span class="string">&quot;fail to exec &quot;</span>, ecmd-&gt;argv[<span class="number">0</span>], <span class="string">&quot;\n&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> REDIR:</span><br><span class="line">      rcmd = (struct redircmd*)cmd;</span><br><span class="line">      syscall(SYS_close, rcmd-&gt;fd);</span><br><span class="line">      <span class="keyword">if</span> (syscall(SYS_open, rcmd-&gt;file, rcmd-&gt;mode, <span class="number">0644</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        print(<span class="string">&quot;fail to open &quot;</span>, rcmd-&gt;file, <span class="string">&quot;\n&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        syscall(SYS_exit, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      runcmd(rcmd-&gt;cmd);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> LIST:</span><br><span class="line">      lcmd = (struct listcmd*)cmd;</span><br><span class="line">      <span class="keyword">if</span> (syscall(SYS_fork) == <span class="number">0</span>) runcmd(lcmd-&gt;left);</span><br><span class="line">      syscall(SYS_wait4, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      runcmd(lcmd-&gt;right);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> PIPE:</span><br><span class="line">      pcmd = (struct pipecmd*)cmd;</span><br><span class="line">      assert(syscall(SYS_pipe, p) &gt;= <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (syscall(SYS_fork) == <span class="number">0</span>) &#123;</span><br><span class="line">        syscall(SYS_close, <span class="number">1</span>);</span><br><span class="line">        syscall(SYS_dup, p[<span class="number">1</span>]);</span><br><span class="line">        syscall(SYS_close, p[<span class="number">0</span>]);</span><br><span class="line">        syscall(SYS_close, p[<span class="number">1</span>]);</span><br><span class="line">        runcmd(pcmd-&gt;left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (syscall(SYS_fork) == <span class="number">0</span>) &#123;</span><br><span class="line">        syscall(SYS_close, <span class="number">0</span>);</span><br><span class="line">        syscall(SYS_dup, p[<span class="number">0</span>]);</span><br><span class="line">        syscall(SYS_close, p[<span class="number">0</span>]);</span><br><span class="line">        syscall(SYS_close, p[<span class="number">1</span>]);</span><br><span class="line">        runcmd(pcmd-&gt;right);</span><br><span class="line">      &#125;</span><br><span class="line">      syscall(SYS_close, p[<span class="number">0</span>]);</span><br><span class="line">      syscall(SYS_close, p[<span class="number">1</span>]);</span><br><span class="line">      syscall(SYS_wait4, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      syscall(SYS_wait4, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> BACK:</span><br><span class="line">      bcmd = (struct backcmd*)cmd;</span><br><span class="line">      <span class="keyword">if</span> (syscall(SYS_fork) == <span class="number">0</span>) runcmd(bcmd-&gt;cmd);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      assert(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  syscall(SYS_exit, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getcmd</span><span class="params">(<span class="keyword">char</span>* buf, <span class="keyword">int</span> nbuf)</span> </span>&#123;</span><br><span class="line">  print(<span class="string">&quot;(sh-xv6) &gt; &quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nbuf; i++) buf[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (nbuf-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> nread = syscall(SYS_read, <span class="number">0</span>, buf, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (nread &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*(buf++) == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _start() &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read and run input commands.</span></span><br><span class="line">  <span class="keyword">while</span> (getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">&#x27;d&#x27;</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// Chdir must be called by the parent, not the child.</span></span><br><span class="line">      buf[<span class="built_in">strlen</span>(buf) - <span class="number">1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></span><br><span class="line">      <span class="keyword">if</span> (syscall(SYS_chdir, buf + <span class="number">3</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        print(<span class="string">&quot;cannot cd &quot;</span>, buf + <span class="number">3</span>, <span class="string">&quot;\n&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (syscall(SYS_fork) == <span class="number">0</span>) runcmd(parsecmd(buf));</span><br><span class="line">    syscall(SYS_wait4, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  syscall(SYS_exit, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructors</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">execcmd</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = zalloc(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = EXEC;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">redircmd</span><span class="params">(struct cmd* subcmd, <span class="keyword">char</span>* file, <span class="keyword">char</span>* efile, <span class="keyword">int</span> mode,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="keyword">int</span> fd)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = zalloc(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = REDIR;</span><br><span class="line">  cmd-&gt;cmd = subcmd;</span><br><span class="line">  cmd-&gt;file = file;</span><br><span class="line">  cmd-&gt;efile = efile;</span><br><span class="line">  cmd-&gt;mode = mode;</span><br><span class="line">  cmd-&gt;fd = fd;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">pipecmd</span><span class="params">(struct cmd* left, struct cmd* right)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = zalloc(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = PIPE;</span><br><span class="line">  cmd-&gt;left = left;</span><br><span class="line">  cmd-&gt;right = right;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">listcmd</span><span class="params">(struct cmd* left, struct cmd* right)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listcmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = zalloc(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = LIST;</span><br><span class="line">  cmd-&gt;left = left;</span><br><span class="line">  cmd-&gt;right = right;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">backcmd</span><span class="params">(struct cmd* subcmd)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">backcmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = zalloc(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = BACK;</span><br><span class="line">  cmd-&gt;cmd = subcmd;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parsing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> whitespace[] = <span class="string">&quot; \t\r\n\v&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> symbols[] = <span class="string">&quot;&lt;|&gt;&amp;;()&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gettoken</span><span class="params">(<span class="keyword">char</span>** ps, <span class="keyword">char</span>* es, <span class="keyword">char</span>** q, <span class="keyword">char</span>** eq)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span>* s;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">  s = *ps;</span><br><span class="line">  <span class="keyword">while</span> (s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s)) s++;</span><br><span class="line">  <span class="keyword">if</span> (q) *q = s;</span><br><span class="line">  ret = *s;</span><br><span class="line">  <span class="keyword">switch</span> (*s) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">      s++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">      s++;</span><br><span class="line">      <span class="keyword">if</span> (*s == <span class="string">&#x27;&gt;&#x27;</span>) &#123;</span><br><span class="line">        ret = <span class="string">&#x27;+&#x27;</span>; s++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      ret = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">      <span class="keyword">while</span> (s &lt; es &amp;&amp; !<span class="built_in">strchr</span>(whitespace, *s) &amp;&amp; !<span class="built_in">strchr</span>(symbols, *s)) s++;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (eq) *eq = s;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s)) s++;</span><br><span class="line">  *ps = s;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">(<span class="keyword">char</span>** ps, <span class="keyword">char</span>* es, <span class="keyword">char</span>* toks)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span>* s;</span><br><span class="line"></span><br><span class="line">  s = *ps;</span><br><span class="line">  <span class="keyword">while</span> (s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s)) s++;</span><br><span class="line">  *ps = s;</span><br><span class="line">  <span class="keyword">return</span> *s &amp;&amp; <span class="built_in">strchr</span>(toks, *s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parseline</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function">struct cmd* <span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function">struct cmd* <span class="title">parseexec</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function">struct cmd* <span class="title">nulterminate</span><span class="params">(struct cmd*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span>* es;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  es = s + <span class="built_in">strlen</span>(s);</span><br><span class="line">  cmd = parseline(&amp;s, es);</span><br><span class="line">  peek(&amp;s, es, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  assert(s == es);</span><br><span class="line">  nulterminate(cmd);</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parseline</span><span class="params">(<span class="keyword">char</span>** ps, <span class="keyword">char</span>* es)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = parsepipe(ps, es);</span><br><span class="line">  <span class="keyword">while</span> (peek(ps, es, <span class="string">&quot;&amp;&quot;</span>)) &#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = backcmd(cmd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (peek(ps, es, <span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = listcmd(cmd, parseline(ps, es));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span>** ps, <span class="keyword">char</span>* es)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = parseexec(ps, es);</span><br><span class="line">  <span class="keyword">if</span> (peek(ps, es, <span class="string">&quot;|&quot;</span>)) &#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = pipecmd(cmd, parsepipe(ps, es));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parseredirs</span><span class="params">(struct cmd* cmd, <span class="keyword">char</span>** ps, <span class="keyword">char</span>* es)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tok;</span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (peek(ps, es, <span class="string">&quot;&lt;&gt;&quot;</span>)) &#123;</span><br><span class="line">    tok = gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    assert(gettoken(ps, es, &amp;q, &amp;eq) == <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (tok) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">        cmd = redircmd(cmd, q, eq, O_RDONLY, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">        cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREAT | O_TRUNC, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:  <span class="comment">// &gt;&gt;</span></span><br><span class="line">        cmd = redircmd(cmd, q, eq, O_WRONLY | O_CREAT, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parseblock</span><span class="params">(<span class="keyword">char</span>** ps, <span class="keyword">char</span>* es)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  assert(peek(ps, es, <span class="string">&quot;(&quot;</span>));</span><br><span class="line">  gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  cmd = parseline(ps, es);</span><br><span class="line">  assert(peek(ps, es, <span class="string">&quot;)&quot;</span>));</span><br><span class="line">  gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  cmd = parseredirs(cmd, ps, es);</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd* <span class="title">parseexec</span><span class="params">(<span class="keyword">char</span>** ps, <span class="keyword">char</span>* es)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line">  <span class="keyword">int</span> tok, argc;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span>* <span class="title">cmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>* <span class="title">ret</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (peek(ps, es, <span class="string">&quot;(&quot;</span>)) <span class="keyword">return</span> parseblock(ps, es);</span><br><span class="line"></span><br><span class="line">  ret = execcmd();</span><br><span class="line">  cmd = (struct execcmd*)ret;</span><br><span class="line"></span><br><span class="line">  argc = <span class="number">0</span>;</span><br><span class="line">  ret = parseredirs(ret, ps, es);</span><br><span class="line">  <span class="keyword">while</span> (!peek(ps, es, <span class="string">&quot;|)&amp;;&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((tok = gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    assert(tok == <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    cmd-&gt;argv[argc] = q;</span><br><span class="line">    cmd-&gt;eargv[argc] = eq;</span><br><span class="line">    assert(++argc &lt; MAXARGS);</span><br><span class="line">    ret = parseredirs(ret, ps, es);</span><br><span class="line">  &#125;</span><br><span class="line">  cmd-&gt;argv[argc] = <span class="number">0</span>;</span><br><span class="line">  cmd-&gt;eargv[argc] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NUL-terminate all the counted strings.</span></span><br><span class="line"><span class="function">struct cmd* <span class="title">nulterminate</span><span class="params">(struct cmd* cmd)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">backcmd</span>* <span class="title">bcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span>* <span class="title">ecmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">listcmd</span>* <span class="title">lcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span>* <span class="title">pcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span>* <span class="title">rcmd</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cmd == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (cmd-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> EXEC:</span><br><span class="line">      ecmd = (struct execcmd*)cmd;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; ecmd-&gt;argv[i]; i++) *ecmd-&gt;eargv[i] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> REDIR:</span><br><span class="line">      rcmd = (struct redircmd*)cmd;</span><br><span class="line">      nulterminate(rcmd-&gt;cmd);</span><br><span class="line">      *rcmd-&gt;efile = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> PIPE:</span><br><span class="line">      pcmd = (struct pipecmd*)cmd;</span><br><span class="line">      nulterminate(pcmd-&gt;left);</span><br><span class="line">      nulterminate(pcmd-&gt;right);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> LIST:</span><br><span class="line">      lcmd = (struct listcmd*)cmd;</span><br><span class="line">      nulterminate(lcmd-&gt;left);</span><br><span class="line">      nulterminate(lcmd-&gt;right);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> BACK:</span><br><span class="line">      bcmd = (struct backcmd*)cmd;</span><br><span class="line">      nulterminate(bcmd-&gt;cmd);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实际上的操作是使用一系列的<code>syscall</code>实现<strong>创建一个管道，将标准输出指向管道的输入，将标准输入指向管道的输出等等</strong>，从而将两个不同的进程通过管道连接起来</li>
<li>管道里的一切都是文本</li>
<li>上文中的p是指针（文件描述符）</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统and编译随记（4）</title>
    <url>/2023/06/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fand%E7%BC%96%E8%AF%91%E9%9A%8F%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h2 id="在操作系统上实现进程"><a href="#在操作系统上实现进程" class="headerlink" title="在操作系统上实现进程"></a>在操作系统上实现进程</h2><h3 id="Thread-OS"><a href="#Thread-OS" class="headerlink" title="Thread OS"></a>Thread OS</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;am.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;klib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;klib-macros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTASK 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">task</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">task</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">void</span>      (*entry)(<span class="keyword">void</span> *);</span><br><span class="line">    Context    *context;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">uint8_t</span> <span class="built_in">stack</span>[<span class="number">8192</span>];</span><br><span class="line">&#125; Task;</span><br><span class="line"></span><br><span class="line">Task *current, tasks[NTASK];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_entry</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    yield();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Context *<span class="title">on_interrupt</span><span class="params">(Event ev, Context *ctx)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!current) &#123;</span><br><span class="line">    current = &amp;tasks[<span class="number">0</span>];  <span class="comment">// First trap</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    current-&gt;context = ctx;</span><br><span class="line">    current = current-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current-&gt;context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cte_init(on_interrupt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(tasks); i++) &#123;</span><br><span class="line">    Task *task    = &amp;tasks[i];</span><br><span class="line">    Area <span class="built_in">stack</span>    = (Area) &#123; &amp;task-&gt;context + <span class="number">1</span>, task + <span class="number">1</span> &#125;;</span><br><span class="line">    task-&gt;context = kcontext(<span class="built_in">stack</span>, thread_entry, <span class="literal">NULL</span>);</span><br><span class="line">    task-&gt;next    = &amp;tasks[(i + <span class="number">1</span>) % LENGTH(tasks)];</span><br><span class="line">  &#125;</span><br><span class="line">  yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="上面的系统与真实的进程有什么区别"><a href="#上面的系统与真实的进程有什么区别" class="headerlink" title="上面的系统与真实的进程有什么区别"></a>上面的系统与真实的进程有什么区别</h3><ul>
<li>每个进程都能看到<strong>所有变量</strong></li>
<li>进程的地址空间<strong>不是独立的</strong><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3></li>
<li>硬件对内存地址进行翻译，将虚拟内存地址翻译为物理内存地址</li>
<li><img src="/imgs/645d35334ac80ab478cea330d373549cf3cebc9107209d7644b9c50756a24b5b.png" alt="picture 1">  </li>
<li>用户态的程序不能够访问上述映射的数据结构</li>
<li>系统虚拟地址空间映射到实际地址空间可能不是全部的（可能<u>没有分配物理页面</u>）<ul>
<li>访问的没有分配的页面的时候会有缺页异常被调用</li>
<li>只是在地址空间上做了一个标记</li>
</ul>
</li>
<li>使用二叉搜索树找到某一个内存空间的位置（一个有序的集合）<h3 id="多个进程的不同虚拟地址映射到同一个位置"><a href="#多个进程的不同虚拟地址映射到同一个位置" class="headerlink" title="多个进程的不同虚拟地址映射到同一个位置"></a>多个进程的不同虚拟地址映射到同一个位置</h3></li>
<li>比如很多进程都用到<code>libc</code>，但是所有进程都用的是同一个而且只读</li>
<li>证明：找到映射的物理地址是同一个</li>
<li>复制的不同进程中使用<code>malloc</code>分配的是不同的，但是代码部分的地址是相同的，不会真的复制<h3 id="fork-写时复制"><a href="#fork-写时复制" class="headerlink" title="fork()写时复制"></a><code>fork()</code>写时复制</h3></li>
<li><img src="/imgs/b81fe55c1611965d77874e50f2a6f58a96dda8b596cc43c44295f53a81834b0b.png" alt="picture 2">  </li>
<li>防止<code>fork</code>之后直接执行<code>execve</code>浪费时间</li>
<li>只读的部分就不需要拷贝</li>
<li>写的时候触发一个缺页中断，写这个位置的进程在检查权限之后会拷贝一次这个页面</li>
<li>注意是按页面拷贝的，而不是按变量拷贝的，比如在一个巨大的数组中修改一个值，只拷贝被修改的这个页面<h3 id="利用fork-创建内存的历史记录"><a href="#利用fork-创建内存的历史记录" class="headerlink" title="利用fork()创建内存的历史记录"></a>利用fork()创建内存的历史记录</h3></li>
<li>一个长期执行的应用程序防止出现bug导致crash，可以每隔一段时间fork()一次，相当于记录了一个快照，如果出错的话可以回退<h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3></li>
<li><img src="/imgs/916913544eea956df2161d852a39cc09cd7f5620e890e2fdf1ac20ad1d2acc37.png" alt="picture 3"> <h4 id="手动控制CPU的调度"><a href="#手动控制CPU的调度" class="headerlink" title="手动控制CPU的调度"></a>手动控制CPU的调度</h4></li>
<li>Linux没有硬实时的机制，只能体现在CPU资源获得的控制上</li>
<li>使用<code>nice</code>分配CPU<h4 id="多级反馈调度队列"><a href="#多级反馈调度队列" class="headerlink" title="多级反馈调度队列"></a>多级反馈调度队列</h4></li>
<li>如果一个程序是计算密集的，可以往后排，但是如果这个程序需要与用户交互那就需要往前排</li>
<li>实现的方式是如果一个程序没有用完时间片就主动交出CPU，就提高它的优先级，否则降低<h4 id="尽量公平分配CPU"><a href="#尽量公平分配CPU" class="headerlink" title="尽量公平分配CPU"></a>尽量公平分配CPU</h4></li>
<li><img src="/imgs/511133687f997c6d22afeb6849ce33292bf31547a629e42e3e02749e0da04ba9.png" alt="picture 4">  </li>
<li>中断的时候补偿获得过CPU最少的进程</li>
<li>使用红黑树把所有可以调度的进程的时间排序<h3 id="如何在公平的调度之下实现不同的优先级"><a href="#如何在公平的调度之下实现不同的优先级" class="headerlink" title="如何在公平的调度之下实现不同的优先级"></a>如何在公平的调度之下实现不同的优先级</h3></li>
<li>不同进程运行的时间的计算方式不同，不同的人的时钟不一样快即可，优先级高的人的时钟慢，否则就快一些<h3 id="真实的CPU调度"><a href="#真实的CPU调度" class="headerlink" title="真实的CPU调度"></a>真实的CPU调度</h3></li>
<li>低优先级的进程持有锁的时候被高优先级打断了怎么办</li>
<li><u>实时操作系统的操作就是<strong>高优先级的进程可以无条件抢占低优先级</strong>的进程</u></li>
<li>操作系统需要知道到底谁获得了什么锁，在什么时候释放</li>
<li>优先级继承：<ul>
<li>低优先级的任务阻碍了高优先级的任务，则低优先级的任务会继承高优先级任务的优先级</li>
<li>优先级反转<ul>
<li><img src="/imgs/a5a7267d9035709b1ea47c92a09a49894cdf6a2c4ea147ebedd896e83eee63ee.png" alt="picture 5">  <h3 id="多处理器调度"><a href="#多处理器调度" class="headerlink" title="多处理器调度"></a>多处理器调度</h3></li>
</ul>
</li>
</ul>
</li>
<li><img src="/imgs/37e5ea926bc0162e5b650495e824b86fd50f467606f81dc1bc08dee45038737d.png" alt="picture 6">  </li>
<li><img src="/imgs/95e5c77318d5e738409d65367a3e4640140a2cd9f1a2b73441259b7c5804e6da.png" alt="picture 7">  </li>
<li>处理器逻辑门跳变的时候会发热产生功耗，也就是所谓的动态功耗（另外还有静态功耗）<h2 id="什么是core-dump"><a href="#什么是core-dump" class="headerlink" title="什么是core dump"></a>什么是core dump</h2></li>
<li>将程序crash的时候的内存保存成elf文件，事后可以用gdb调试<h2 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h2></li>
<li>I/O是什么</li>
<li>设备抽象成寄存器<ul>
<li><img src="/imgs/4e0dcd5aa40f3a83efb5f928fc793bb1ffeda77c7e6d7dbb9f68dd5afbc8ec07.png" alt="picture 8">  </li>
</ul>
</li>
<li>将设备寄存器<strong>映射到内粗地址</strong>上</li>
<li>CPU<u>像访问内存一样访问寄存器</u><h2 id="设备树"><a href="#设备树" class="headerlink" title="设备树"></a>设备树</h2></li>
<li>告诉系统任何设备在什么位置</li>
<li><img src="/imgs/ce8514bb8c3ac03e14091fc35c0e7ad2700ad16545bf1225518cdef8c50bf2e3.png" alt="picture 9">  <h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2></li>
<li>如何在不增加系统IO设计的基础上扩展其他设备</li>
<li>通过总线连接设备</li>
<li>连接其他总线</li>
<li>将所有的IO设备统一管理起来的设备</li>
<li><img src="/imgs/e9a364661e7974eb38fdea09b042ab8bce8d67f21d8d3ba88c062c9d5383bf8f.png" alt="picture 10">  </li>
<li><code>PCI</code>可以连接<code>USB</code>总线</li>
<li>速度快的设备是直接连接在PCI总线上的<ul>
<li> 显卡是直接挂载PCI总线上的</li>
<li> 千兆网卡</li>
<li> 桥接USB、SATA等控制器也可以<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2></li>
</ul>
</li>
<li>什么是中断？</li>
<li>中断就是CPU上的一根线</li>
<li>处理重要的中断的时候需要屏蔽掉其他的中断<h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2></li>
<li>大量的内存拷贝需要占用很长的CPU时间</li>
<li><img src="/imgs/4d5162de01434b9faa779ed7a95a43295ccb4f91683202fe7b910bfa74f69d31.png" alt="picture 12">  </li>
<li>此时引入一个专门的拷贝控制器</li>
<li><img src="/imgs/2d4ca609192063157056dce1daeac7750787e6ea423218c89e279969719b3393.png" alt="picture 11">  </li>
<li>此时内存复制不再需要CPU的直接参与，节约时间</li>
<li>用于控制内存和设备之间传输数据<h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2></li>
<li><img src="/imgs/1d6d125acabe82b610e452fc49ab309f6106c9ac5f35ab55e4e17e16f3322b3c.png" alt="picture 13">  </li>
<li>将通用计算简化，得到可以大量并行的计算<h3 id="如何绘制三维画面"><a href="#如何绘制三维画面" class="headerlink" title="如何绘制三维画面"></a>如何绘制三维画面</h3></li>
<li>任何一个多边形都可以分为<code>n-2</code>个三角形</li>
<li>为每个三角形贴图</li>
<li>将三角形投射到摄像机的平面上</li>
<li><img src="/imgs/f7b3d21cba0a06fe1a8f4106942e0df5ef32ee2641438873b0a6cc3dbc3d3539.png" alt="picture 14">  <h2 id="IO设备的抽象和分类"><a href="#IO设备的抽象和分类" class="headerlink" title="IO设备的抽象和分类"></a>IO设备的抽象和分类</h2></li>
<li><img src="/imgs/772c552ea3472f7c2b691064f62ecf123e79793a371f26ef7d5fc3f19c73add5.png" alt="picture 15">  <h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3></li>
<li>字节流，读取字符然后丢弃</li>
<li>块设备，读取字节数组按块访问<h2 id="设备驱动是什么"><a href="#设备驱动是什么" class="headerlink" title="设备驱动是什么"></a>设备驱动是什么</h2></li>
<li><img src="/imgs/7a797eb9b5c7c59ac577bdd012ecefd3240a3995529135c7f54a140f087d551d.png" alt="picture 16">  </li>
<li>就是一段内核代码</li>
<li>将系统对设备的<code>read</code>，<code>write</code>等操作翻译成设备对应的操作</li>
<li>设备驱动程序完成的就是设备的通讯协议</li>
<li><code>/dev</code>下就是设备文件<ul>
<li><code>/dev/stdout</code>就是标准输出，还有<code>/dev/stdin</code>, <code>/dev/stderr</code></li>
<li><code>echo Hello &gt; /dev/tty</code>这句话会把Hello输出到命令行上</li>
<li><code>/dev/tty</code>就是命令行</li>
<li>但是用户实际使用的是<strong>虚拟终端</strong>，也就是所谓的<code>/dev/pts/数字序号</code><ul>
<li>不同的终端数字不同</li>
</ul>
</li>
<li><code>/dev/zero</code>是一个0设备，不断生成0</li>
<li><code>/dev/null</code>设备是一个NULL设备，将其他设备的输出重定向给这个设备，就会直接被扔掉<ul>
<li>这个设备的<code>weite</code>函数什么都不做</li>
</ul>
</li>
<li><code>/dev/random</code>生成随机数，认为是真的随机数</li>
<li><code>/dev/urandom</code>是随机性不太高的随机数</li>
</ul>
</li>
<li><img src="/imgs/62d42c205ed95d3f5e65209089d919fb2b0dd8cccab9f06b11a45456fc92de0d.png" alt="picture 17">  </li>
<li><img src="/imgs/c4f7e1d7cd3e91d936f819aca7009d6cdf84aee7cf562aa4b91d32a9eac278cf.png" alt="picture 18">  <ul>
<li>将一切额外的复杂性都丢给了<strong>控制</strong>，也就是<code>ioctl</code></li>
<li>将所有的复杂性都丢给了<strong>文件系统</strong></li>
<li>导致系统存在很多隐形的依赖关系，比如<code>/proc</code>等等<h3 id="字符设备"><a href="#字符设备" class="headerlink" title="字符设备"></a>字符设备</h3></li>
</ul>
</li>
<li>内核模块实例<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_DEV 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dev_major = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">lx_class</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">lx_read</span><span class="params">(struct file *, <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">lx_write</span><span class="params">(struct file *, <span class="keyword">const</span> <span class="keyword">char</span> __user *, <span class="keyword">size_t</span>, <span class="keyword">loff_t</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">fops</span> =</span> &#123;</span><br><span class="line">  .owner = THIS_MODULE,</span><br><span class="line">  .read = lx_read,</span><br><span class="line">  .write = lx_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nuke</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span></span><br><span class="line">&#125; devs[MAX_DEV];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">lx_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dev_t</span> dev;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allocate device range</span></span><br><span class="line">  alloc_chrdev_region(&amp;dev, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;nuke&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create device major number</span></span><br><span class="line">  dev_major = MAJOR(dev);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create class</span></span><br><span class="line">  lx_class = class_create(THIS_MODULE, <span class="string">&quot;nuke&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX_DEV; i++) &#123;</span><br><span class="line">    <span class="comment">// register device</span></span><br><span class="line">    cdev_init(&amp;devs[i].cdev, &amp;fops);</span><br><span class="line">    cdev.owner = THIS_MODULE;</span><br><span class="line">    cdev_add(&amp;devs[i].cdev, MKDEV(dev_major, i), <span class="number">1</span>);</span><br><span class="line">    device_create(lx_class, <span class="literal">NULL</span>, MKDEV(dev_major, i), <span class="literal">NULL</span>, <span class="string">&quot;nuke%d&quot;</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">lx_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  device_destroy(lx_class, MKDEV(dev_major, <span class="number">0</span>));</span><br><span class="line">  class_unregister(lx_class);</span><br><span class="line">  class_destroy(lx_class);</span><br><span class="line">  unregister_chrdev_region(MKDEV(dev_major, <span class="number">0</span>), MINORMASK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">lx_read</span><span class="params">(struct file *file, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *offset)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (*offset != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> *data = <span class="string">&quot;This is dangerous!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">size_t</span> datalen = <span class="built_in">strlen</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (count &gt; datalen) &#123;</span><br><span class="line">      count = datalen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(buf, data, count)) &#123;</span><br><span class="line">      <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    *offset += count;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">ssize_t</span> <span class="title">lx_write</span><span class="params">(struct file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *offset)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> databuf[<span class="number">4</span>] = <span class="string">&quot;\0\0\0\0&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">4</span>) &#123;</span><br><span class="line">    count = <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  copy_from_user(databuf, buf, count);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strncmp</span>(databuf, <span class="string">&quot;\x01\x14\x05\x14&quot;</span>, <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *EXPLODE[] = &#123;</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣀⣀⠀⠀⣀⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⣀⣠⣤⣤⣾⣿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣶⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠁⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠻⢿⡿⢿⣿⣿⣿⣿⠟⠛⠛⠋⣀⣀⠙⠻⠿⠿⠋⠻⢿⣿⣿⠟⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⠈⠉⣉⣠⣴⣷⣶⣿⣿⣿⣿⣶⣶⣶⣾⣶⠀⠀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠋⠈⠛⠿⠟⠉⠻⠿⠋⠉⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣷⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣤⣤⣶⣿⣿⣷⣦⣤⣤⣤⣤⣀⣀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⢰⣿⠛⠉⠉⠁⠀⠀⠀⢸⣿⣿⣧⠀⠀⠀⠀⠉⠉⠙⢻⣷⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠙⠻⠷⠶⣶⣤⣤⣤⣿⣿⣿⣿⣦⣤⣤⣴⡶⠶⠟⠛⠁⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠓⠀⠀⠀⠀⠀⠀⠀⠀⠀&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(EXPLODE) / <span class="keyword">sizeof</span>(EXPLODE[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">      printk(<span class="string">&quot;\033[01;31m%s\033[0m\n&quot;</span>, EXPLODE[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    printk(<span class="string">&quot;nuke: incorrect secret, cannot lanuch.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(lx_init);</span><br><span class="line">module_exit(lx_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;jyy&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>更多file operations<ul>
<li><img src="/imgs/48d959984abc94cebcc887af1c8440381b9a85cab4c82c6cec509456e7924379.png" alt="picture 19">  <h3 id="块设备"><a href="#块设备" class="headerlink" title="块设备"></a>块设备</h3></li>
</ul>
</li>
<li><img src="/imgs/ae6e9ee70d5e032f11bbadf1fbd71e5861f3d026b29710829c6f9cb982f92abc.png" alt="picture 20">  </li>
<li>是一种<u>共享</u>的设备</li>
<li>不能直接写入字节，必须先把所在范围内的全部擦除，然后才能写入</li>
<li>一次写入的大小是一个block，不是随机访问的</li>
<li>在文件系统和磁盘设备之间<ul>
<li><img src="/imgs/eccaf80280becb4369ee89ac8c574b570dc7269706c76b5bf39d3bc620d8d9bf.png" alt="picture 21">  </li>
<li><img src="/imgs/3919d17b349bfae35d2cafd8b9577d892fba46e78f3b365bb773693f8d012eb5.png" alt="picture 22">  </li>
</ul>
</li>
<li>因此通过隔离实现了虚拟化保障安全<ul>
<li><img src="/imgs/28f565503ddcb6d093f4b51bce865fdb314086c71e30e43fce2da1b873cdd666.png" alt="picture 23">  </li>
<li>文件系统是磁盘的虚拟化</li>
<li>将一个磁盘变成多个可扩展的动态字节序列（虚拟磁盘）</li>
</ul>
</li>
<li>将虚拟磁盘映射到进程的地址空间<ul>
<li><img src="/imgs/f3ac35c8d682fe3ff820cab2857e95892955744da47f18b4bd45824f3b3fb8df.png" alt="picture 24">  </li>
<li>可以改变虚拟磁盘（文件）的大小</li>
</ul>
</li>
<li><code>fork</code>的时候会继承偏移量<ul>
<li><img src="/imgs/3b84113f43355660c23939cde848f671167cd508b03469f5ddf8ec3b198b0d72.png" alt="picture 25">  </li>
<li>假如父子进程一起write一个文件100字节，会共享同一个偏移量，互相不覆盖但是顺序会竞争<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2></li>
</ul>
</li>
<li><code>Unix</code>系统的文件系统只有一个根<code>/</code></li>
<li>外接存储设备<ul>
<li>可以将任何一个磁盘上的文件系统挂载到文件系统中的任何一个节点上</li>
<li>可以把各种各样的文件系统挂载到任何一个节点上</li>
<li>目录拼接</li>
<li>磁盘分区也可以通过挂载将其包含到文件系统中</li>
<li><code>mount</code>方法，<code>mount 设备 要挂载到的地址</code><ul>
<li><img src="/imgs/ab2f6c26e3fd6ce21e84730d5bbe02a93092640915ba675fa6c9659bc03446d8.png" alt="picture 26">  </li>
</ul>
</li>
</ul>
</li>
<li><code>loop</code>是回环设备，将文件变为磁盘设备</li>
<li><img src="/imgs/b5fc5c4fe32464e06fde01d003c8a6a28aa5a7424760e65facb62edc033340f2.png" alt="picture 29">  <h3 id="切换根文件系统"><a href="#切换根文件系统" class="headerlink" title="切换根文件系统"></a>切换根文件系统</h3></li>
<li>使用<code>switch_root</code>命令</li>
<li>执行的内容包括<ul>
<li>删除根文件系统的全部内容，节省空间</li>
<li>安装新的文件系统并切换到这个文件系统</li>
<li>把<code>stdin</code>, <code>stdout</code>, <code>stderr</code>附加到新的<code>/dev/console</code>，然后执行新文件系统的<code>init</code>程序</li>
</ul>
</li>
<li>命令格式</li>
<li><code>switch_root [-c /dev/console] NEW_ROOT NEW_INIT [ARGUMENTS_TO_INIT]</code><ul>
<li>其中<code>NEW_ROOT</code>是实际的根文件系统的挂载目录，执行<code>switch_root</code>命令前需要挂载到系统中</li>
<li><code>NEW_INIT</code>是实际根文件系统的<code>init</code>程序的路径，一般是<code>/sbin/init</code></li>
<li><code>-c /dev/console</code>是可选参数，用于重定向实际的根文件系统的设备文件，一般情况我们不会使用</li>
<li>而<code>ARGUMENTS_TO_INIT</code>则是传递给实际的根文件系统的<code>init</code>程序的参数，也是可选的<h3 id="将一个磁盘映像文件挂载到文件系统之中"><a href="#将一个磁盘映像文件挂载到文件系统之中" class="headerlink" title="将一个磁盘映像文件挂载到文件系统之中"></a>将一个磁盘映像文件挂载到文件系统之中</h3></li>
</ul>
</li>
<li><code>.img</code>文件</li>
<li><code>mnt xxx.img /路径</code></li>
<li>系统将这个文件使用一个<code>loop</code>创建为一个设备</li>
<li>然后挂载这个设备<ul>
<li><img src="/imgs/2886cc5713330f3abc84175c7476c53a6c2751b5a6a8080c74910eb23dd3b0e5.png" alt="picture 27">  <h2 id="Linux文件系统的标准"><a href="#Linux文件系统的标准" class="headerlink" title="Linux文件系统的标准"></a>Linux文件系统的标准</h2></li>
</ul>
</li>
<li><img src="/imgs/d9c5ee68a7ec204d6df6d6c090c5e1924aa2b0afa0402f7e29af1a8814e0f693.png" alt="picture 28">  <h3 id="使用python访问目录"><a href="#使用python访问目录" class="headerlink" title="使用python访问目录"></a>使用python访问目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> Path(<span class="string">&#x27;/proc&#x27;</span>).glob(<span class="string">&#x27;*/status&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(f.parts[-<span class="number">2</span>], \</span><br><span class="line">        (f.parent / <span class="string">&#x27;cmdline&#x27;</span>).read_text() <span class="keyword">or</span> <span class="string">&#x27;[kernel]&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h3><h4 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h4></li>
<li><code>ln [参数] [源文件或目录] [目标文件或目录]</code></li>
<li>创建的是硬链接，实际上指向的是同一个文件，文件的编号都是相同的</li>
<li>修改一个就是修改所有</li>
<li>完全不可区分</li>
<li>便于节省空间</li>
<li><strong>仅仅存储指向实际文件数据的指针</strong></li>
<li><strong>不可链接目录</strong></li>
<li><strong>不可跨文件系统</strong><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4></li>
<li>类似于快捷方式</li>
<li>本身就是一个文件</li>
<li>当引用这个文件时，去找另一个文件</li>
<li>另一个文件的绝对/相对路径以文本形式存储在文件里</li>
<li><strong>可以跨文件系统、可以链接目录</strong></li>
<li>链接指向的位置当前不存在也没关系</li>
<li><code>ln -s 目标 快捷方式</code></li>
<li>允许创建一个到<u>上一级目录</u>的软连接</li>
<li>允许成环<ul>
<li>无限递归</li>
<li>使用<code>find</code>寻找的时候，会报错检测到了文件系统回环</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统and编译随记（3）</title>
    <url>/2023/06/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9Fand%E7%BC%96%E8%AF%91%E9%9A%8F%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一些shell技巧"><a href="#一些shell技巧" class="headerlink" title="一些shell技巧"></a>一些shell技巧</h2><h3 id="xxd"><a href="#xxd" class="headerlink" title="xxd"></a><code>xxd</code></h3><ul>
<li><p>命令行工具，作用是把二进制文件变成文本可读的文件</p>
</li>
<li><p><code>xxd</code>是二进制转文本</p>
</li>
<li><p><code>xxd -r</code>是转换过的文本再转换回去</p>
<h3 id="vim调用外部程序"><a href="#vim调用外部程序" class="headerlink" title="vim调用外部程序"></a>vim调用外部程序</h3></li>
<li><p>使用命令<code>%!</code></p>
</li>
<li><p>比如vim调用xxd，是使用<code>%!xxd</code>实现</p>
<h2 id="读取可执行文件的信息"><a href="#读取可执行文件的信息" class="headerlink" title="读取可执行文件的信息"></a>读取可执行文件的信息</h2></li>
<li><p><img src="/imgs/cd95d05175da4fd7e9f90d2bcf3e93f1530d1aaf683afb6c7ae2c896b9e69131.png" alt="picture 1">  </p>
</li>
<li><p><code>readelf</code></p>
<h2 id="binutils工具集"><a href="#binutils工具集" class="headerlink" title="binutils工具集"></a>binutils工具集</h2></li>
<li><p><a href="https://blog.csdn.net/zqixiao_09/article/details/50783007">参考链接</a></p>
</li>
<li><p><code>nm</code>命令可以显示一个可执行文件中的符号</p>
</li>
<li><p><code>addr2line</code>可以将一个代码的地址转换为行号</p>
<h2 id="设定从一个特定的内存地址开始执行代码"><a href="#设定从一个特定的内存地址开始执行代码" class="headerlink" title="设定从一个特定的内存地址开始执行代码"></a>设定从一个特定的内存地址开始执行代码</h2></li>
<li><p><img src="/imgs/b0c45a81ef3a6b1392c39b6f92cd6a17c6e42ca5053d390fa3594a6369f6f81c.png" alt="picture 2">  </p>
</li>
<li><p>将一个内存地址指针赋值给<code>void (*指针名)()</code>，然后执行这个函数即可</p>
<h2 id="什么是加载器"><a href="#什么是加载器" class="headerlink" title="什么是加载器"></a>什么是加载器</h2></li>
<li><p>将内存需要的空间搬到内存里</p>
</li>
<li><p>给正确的权限</p>
</li>
<li><p>配置初始状态</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generated by GPT-4; unmodified</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;binary_file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the binary file</span></span><br><span class="line">  <span class="keyword">int</span> fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the file size</span></span><br><span class="line">  <span class="keyword">off_t</span> file_size = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">  lseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate memory for the binary</span></span><br><span class="line">  <span class="keyword">void</span> *mem = mmap(<span class="literal">NULL</span>, file_size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (mem == MAP_FAILED) &#123;</span><br><span class="line">    perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Close the file</span></span><br><span class="line">  close(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cast the memory address to a function pointer and call it</span></span><br><span class="line">  <span class="keyword">void</span> (*binary_func)() = (<span class="keyword">void</span> (*)())mem;</span><br><span class="line">  binary_func();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up</span></span><br><span class="line">  munmap(mem, file_size);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2></li>
<li><p> 找到文件，前4kb映射到内存里</p>
</li>
<li><p> 里面有<code>header</code></p>
</li>
<li><p> 解析<code>header</code></p>
</li>
<li><p>命令行<code>readelf</code>命令可以实现这个功能</p>
<ul>
<li> <code>-h</code>读的是header</li>
<li> <code>-a</code>读所有的</li>
</ul>
</li>
<li><p> 检查执行的环境对不对，比如CPU架构是不是吻合</p>
</li>
<li><p>加载的时候需要将程序中标记了<code>LOAD</code>的位置搬到内存中程序声明的相应的位置即可</p>
<ul>
<li> 计算开始位置，结束位置，权限等</li>
<li> 然后将文件映射到上述的空间中</li>
</ul>
</li>
<li><p>初始化栈</p>
<ul>
<li> <img src="/imgs/1bc3b74ab01130bdbb45a16627dd463cd3dea700d402d90cf98f533222e13885.png" alt="picture 3">  </li>
<li>在程序内存中直接定义一个静态的stack<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STK_SZ           (1 &lt;&lt; 20)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROUND(x, align)  (((uintptr_t)x) &amp; ~(align - 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(x, align)    (((uintptr_t)x) &amp; (align - 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push(sp, T, ...) (&#123; *((T*)sp) = (T)__VA_ARGS__; \</span></span><br><span class="line"><span class="meta">                            sp = (void *)((uintptr_t)(sp) + sizeof(T)); &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execve_</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// WARNING: This execve_ does not free process resources.</span></span><br><span class="line">  <span class="comment">// **NOT** all process states are properly initialized.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> fd = open(file, O_RDONLY);</span><br><span class="line">  assert(fd &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Map ELF header to memory</span></span><br><span class="line">  Elf64_Ehdr *h = mmap(<span class="literal">NULL</span>, <span class="number">4096</span>, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">  assert(h != MAP_FAILED);</span><br><span class="line">  assert(h-&gt;e_type == ET_EXEC &amp;&amp; h-&gt;e_machine == EM_X86_64);</span><br><span class="line"></span><br><span class="line">  Elf64_Phdr *pht = (Elf64_Phdr *)((<span class="keyword">char</span> *)h + h-&gt;e_phoff);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h-&gt;e_phnum; i++) &#123;</span><br><span class="line">    Elf64_Phdr *p = &amp;pht[i];</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">      <span class="comment">// Memory map region</span></span><br><span class="line">      <span class="keyword">uintptr_t</span> map_beg = ROUND(p-&gt;p_vaddr, p-&gt;p_align);</span><br><span class="line">      <span class="keyword">uintptr_t</span> map_end = map_beg + p-&gt;p_memsz;</span><br><span class="line">      <span class="keyword">while</span> (map_end % p-&gt;p_align != <span class="number">0</span>) map_end++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Memory map flags</span></span><br><span class="line">      <span class="keyword">int</span> prot = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;p_flags &amp; PF_R) prot |= PROT_READ;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;p_flags &amp; PF_W) prot |= PROT_WRITE;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;p_flags &amp; PF_X) prot |= PROT_EXEC;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Memory map size</span></span><br><span class="line">      <span class="keyword">int</span> map_sz = p-&gt;p_filesz + (p-&gt;p_vaddr % p-&gt;p_align);</span><br><span class="line">      <span class="keyword">while</span> (map_sz % p-&gt;p_align != <span class="number">0</span>) map_sz++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Map file contents to memory</span></span><br><span class="line">      <span class="keyword">void</span> *ret = mmap(</span><br><span class="line">        (<span class="keyword">void</span> *)map_beg,                 <span class="comment">// addr, rounded to ALIGN</span></span><br><span class="line">        map_sz,                          <span class="comment">// length</span></span><br><span class="line">        prot,                            <span class="comment">// protection</span></span><br><span class="line">        MAP_PRIVATE | MAP_FIXED,         <span class="comment">// flags, private &amp; strict</span></span><br><span class="line">        fd,                              <span class="comment">// file descriptor</span></span><br><span class="line">        ROUND(p-&gt;p_offset, p-&gt;p_align)   <span class="comment">// offset</span></span><br><span class="line">      );</span><br><span class="line">      assert(ret != MAP_FAILED);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Map extra anonymous memory (e.g., bss)</span></span><br><span class="line">      <span class="keyword">intptr_t</span> extra_sz = p-&gt;p_memsz - p-&gt;p_filesz;</span><br><span class="line">      <span class="keyword">if</span> (extra_sz &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">uintptr_t</span> extra_beg = map_beg + map_sz;</span><br><span class="line">        ret = mmap(</span><br><span class="line">          (<span class="keyword">void</span> *)extra_beg, extra_sz, prot,  <span class="comment">// addr, length, protection</span></span><br><span class="line">          MAP_ANONYMOUS | MAP_PRIVATE | MAP_FIXED,  <span class="comment">// flags</span></span><br><span class="line">          <span class="number">-1</span>, <span class="number">0</span>  <span class="comment">// no file</span></span><br><span class="line">        );</span><br><span class="line">        assert(ret != MAP_FAILED);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  close(fd);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> <span class="built_in">stack</span>[STK_SZ], rnd[<span class="number">16</span>];</span><br><span class="line">  <span class="keyword">void</span> *sp = (<span class="keyword">void</span> *)ROUND(<span class="built_in">stack</span> + <span class="keyword">sizeof</span>(<span class="built_in">stack</span>) - <span class="number">4096</span>, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">void</span> *sp_exec = sp;</span><br><span class="line">  <span class="keyword">int</span> argc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// argc</span></span><br><span class="line">  <span class="keyword">while</span> (argv[argc]) argc++;</span><br><span class="line">  push(sp, <span class="keyword">intptr_t</span>, argc);</span><br><span class="line">  <span class="comment">// argv[], NULL-terminate</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= argc; i++)</span><br><span class="line">    push(sp, <span class="keyword">intptr_t</span>, argv[i]);</span><br><span class="line">  <span class="comment">// envp[], NULL-terminate</span></span><br><span class="line">  <span class="keyword">for</span> (; *envp; envp++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strchr</span>(*envp, <span class="string">&#x27;_&#x27;</span>)) <span class="comment">// remove some verbose ones</span></span><br><span class="line">      push(sp, <span class="keyword">intptr_t</span>, *envp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// auxv[], AT_NULL-terminate</span></span><br><span class="line">  push(sp, <span class="keyword">intptr_t</span>, <span class="number">0</span>);</span><br><span class="line">  push(sp, Elf64_auxv_t, &#123; .a_type = AT_RANDOM, .a_un.a_val = (<span class="keyword">uintptr_t</span>)rnd &#125; );</span><br><span class="line">  push(sp, Elf64_auxv_t, &#123; .a_type = AT_NULL &#125; );</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;mov $0, %%rdx;&quot;</span> <span class="comment">// required by ABI</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;mov %0, %%rsp;&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;jmp *%1&quot;</span> : : <span class="string">&quot;a&quot;</span>(sp_exec), <span class="string">&quot;b&quot;</span>(h-&gt;e_entry))</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s file [args...]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  execve_(argv[<span class="number">1</span>], argv + <span class="number">1</span>, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当一个程序中引用了声明过但是尚未定义的函数的时候，原始程序</p>
<ul>
<li><img src="/imgs/f13593b6812eca1eb5c27767ea5ec03131d911dbedb79f2395e841a17f5e1353.png" alt="picture 6">  </li>
<li>编译结果</li>
<li><img src="/imgs/8f8567baf0ac632a59d474d6a80fa44454638ab64ab148e33f6b05642e14f091.png" alt="picture 4">  </li>
<li>在<code>readelf</code>中可以看到需要重定位的部分</li>
<li><img src="/imgs/ad0badf93660fef837c672285971d60c169ab44867fbf720e6156e8098f0907a.png" alt="picture 5">  <h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2></li>
</ul>
</li>
<li><p>拆解应用程序的需求</p>
</li>
<li><p>将运行库和程序代码分离</p>
<ul>
<li><img src="/imgs/68814898a84e4012ba9da482f87029095000e0e069669e5d5c1b3c34516a5bcd.png" alt="picture 7">  </li>
</ul>
</li>
<li><p>静态链接的程序很大，动态链接较小</p>
</li>
<li><p>方便通过升级库的方式来实现升级，而不需要一旦升级就整个编译所有程序</p>
</li>
<li><p>同时还可以实现部分程序的重新编译，其他程序与之链接即可，不需要重新编译</p>
</li>
<li><p>类似地，遇到调用声明过但是没有定义的函数的时候，运行时会存在一个位置需要将其地址修改为函数定义的位置</p>
<ul>
<li><p>编译器将一个现在未知的地址翻译为一个动态的位置</p>
</li>
<li><p><img src="/imgs/0b6154fdb73b7ea389077c6c30f6eff22453576410db410711e3dc1448b7a765.png" alt="picture 9">  </p>
</li>
<li><p><code>DSYM</code>是动态的位置</p>
</li>
<li><p>前半部分是需要加载的库和符号</p>
<ul>
<li>DSYM需要一张表，从名字映射到地址</li>
</ul>
</li>
<li><p>dl.h </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REC_SZ 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DL_MAGIC <span class="meta-string">&quot;\x01\x14\x05\x14&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __ASSEMBLER__</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> DL_HEAD     __hdr: \</span></span><br><span class="line"><span class="meta">                      <span class="comment">/* magic */</span>    .ascii DL_MAGIC; \</span></span><br><span class="line"><span class="meta">                      <span class="comment">/* file_sz */</span>  .4byte (__end - __hdr); \</span></span><br><span class="line"><span class="meta">                      <span class="comment">/* code_off */</span> .4byte (__code - __hdr)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> DL_CODE     .fill REC_SZ - 1, 1, 0; \</span></span><br><span class="line"><span class="meta">                      .align REC_SZ, 0; \</span></span><br><span class="line"><span class="meta">                      __code:</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> DL_END      __end:</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> RECORD(sym, off, name) \</span></span><br><span class="line"><span class="meta">    .align REC_SZ, 0; \</span></span><br><span class="line"><span class="meta">    sym .8byte (off); .ascii name</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> IMPORT(sym) RECORD(sym:,           0, <span class="meta-string">&quot;?&quot;</span> #sym <span class="meta-string">&quot;\0&quot;</span>)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> EXPORT(sym) RECORD(    , sym - __hdr, <span class="meta-string">&quot;#&quot;</span> #sym <span class="meta-string">&quot;\0&quot;</span>)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> LOAD(lib)   RECORD(    ,           0, <span class="meta-string">&quot;+&quot;</span> lib  <span class="meta-string">&quot;\0&quot;</span>)</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> DSYM(sym)   *sym(%rip)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dl_hdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> magic[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">uint32_t</span> file_sz, code_off;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">symbol</span> &#123;</span></span><br><span class="line">    <span class="keyword">int64_t</span> offset;</span><br><span class="line">    <span class="keyword">char</span> type, name[REC_SZ - <span class="keyword">sizeof</span>(<span class="keyword">int64_t</span>) - <span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>dlbox.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;dl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dlib</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dl_hdr</span> <span class="title">hdr</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">symbol</span> *<span class="title">symtab</span>;</span> <span class="comment">// borrowed spaces from header</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *path;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> struct dlib *<span class="title">dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">struct dlib *<span class="title">dlopen_chk</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dlib</span> *<span class="title">lib</span> =</span> dlopen(path);</span><br><span class="line">  <span class="keyword">if</span> (!lib) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Not a valid dlib file: %s.\n&quot;</span>, path);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation of binutils</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dl_gcc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">256</span>], *dot = <span class="built_in">strrchr</span>(path, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (dot) &#123;</span><br><span class="line">    *dot = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;gcc -m64 -fPIC -c %s.S &amp;&amp; &quot;</span></span><br><span class="line">      <span class="string">&quot;objcopy -S -j .text -O binary %s.o %s.dl&quot;</span>, path, path, path);</span><br><span class="line">    system(buf);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dl_readdl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dlib</span> *<span class="title">h</span> =</span> dlopen_chk(path);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;DLIB file %s:\n\n&quot;</span>, h-&gt;path);</span><br><span class="line">  <span class="keyword">for</span> (struct symbol *sym = h-&gt;symtab; sym-&gt;type; sym++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (sym-&gt;type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;    LOAD  %s\n&quot;</span>, sym-&gt;name); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;  EXTERN  %s\n&quot;</span>, sym-&gt;name); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>: <span class="built_in">printf</span>(   <span class="string">&quot;%08lx  %s\n&quot;</span>, sym-&gt;offset, sym-&gt;name); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dl_objdump</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dlib</span> *<span class="title">h</span> =</span> dlopen_chk(path);</span><br><span class="line">  <span class="keyword">char</span> *hc = (<span class="keyword">char</span> *)h, cmd[<span class="number">64</span>];</span><br><span class="line">  FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Disassembly of binary %s:\n&quot;</span>, h-&gt;path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">char</span> *code = hc + h-&gt;hdr.code_off; code &lt; hc + h-&gt;hdr.file_sz; code++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (struct symbol *sym = h-&gt;symtab; sym-&gt;type; sym++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hc + sym-&gt;offset == code) &#123;</span><br><span class="line">        <span class="keyword">int</span> off = code - hc - h-&gt;hdr.code_off;</span><br><span class="line">        <span class="keyword">if</span> (fp) pclose(fp);</span><br><span class="line">        <span class="built_in">sprintf</span>(cmd, <span class="string">&quot;ndisasm - -b 64 -o 0x%08x\n&quot;</span>, off);</span><br><span class="line">        fp = popen(cmd, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%016x &lt;%s&gt;:\n&quot;</span>, off, sym-&gt;name);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fp) fputc(*code, fp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp) pclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// binutils: interpreter</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dl_interp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dlib</span> *<span class="title">h</span> =</span> dlopen_chk(path);</span><br><span class="line">  <span class="keyword">int</span> (*entry)() = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">for</span> (struct symbol *sym = h-&gt;symtab; sym-&gt;type; sym++)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(sym-&gt;name, <span class="string">&quot;main&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">      entry = (<span class="keyword">void</span> *)((<span class="keyword">char</span> *)h + sym-&gt;offset);</span><br><span class="line">  <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(entry());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *cmd;</span><br><span class="line">  <span class="keyword">void</span> (*handler)(<span class="keyword">const</span> <span class="keyword">char</span> *path);</span><br><span class="line">&#125; commands[] = &#123;</span><br><span class="line">  &#123; <span class="string">&quot;gcc&quot;</span>,     dl_gcc &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;readdl&quot;</span>,  dl_readdl &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;objdump&quot;</span>, dl_objdump &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;interp&quot;</span>,  dl_interp &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;&quot;</span>,        <span class="literal">NULL</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s &#123;gcc|readdl|objdump|interp&#125; FILE...\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (struct cmd *cmd = &amp;commands[<span class="number">0</span>]; cmd-&gt;handler; cmd++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> **path = &amp;argv[<span class="number">2</span>]; *path &amp;&amp; <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], cmd-&gt;cmd) == <span class="number">0</span>; path++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (path != argv + <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      cmd-&gt;handler(*path);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation of dlopen()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">symbol</span> *<span class="title">libs</span>[16], <span class="title">syms</span>[128];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">dlsym</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dlexport</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> *addr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dlload</span><span class="params">(struct symbol *sym)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> struct dlib *<span class="title">dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dl_hdr</span> <span class="title">hdr</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dlib</span> *<span class="title">h</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> fd = open(path, O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) <span class="keyword">goto</span> bad;</span><br><span class="line">  <span class="keyword">if</span> (read(fd, &amp;hdr, <span class="keyword">sizeof</span>(hdr)) &lt; <span class="keyword">sizeof</span>(hdr)) <span class="keyword">goto</span> bad;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strncmp</span>(hdr.magic, DL_MAGIC, <span class="built_in">strlen</span>(DL_MAGIC)) != <span class="number">0</span>) <span class="keyword">goto</span> bad;</span><br><span class="line"></span><br><span class="line">  h = mmap(<span class="literal">NULL</span>, hdr.file_sz, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (h == (<span class="keyword">void</span> *)<span class="number">-1</span>) <span class="keyword">goto</span> bad;</span><br><span class="line"></span><br><span class="line">  h-&gt;symtab = (struct symbol *)((<span class="keyword">char</span> *)h + REC_SZ);</span><br><span class="line">  h-&gt;path = path;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (struct symbol *sym = h-&gt;symtab; sym-&gt;type; sym++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (sym-&gt;type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: dlload(sym); <span class="keyword">break</span>; <span class="comment">// (recursively) load</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>: sym-&gt;offset = (<span class="keyword">uintptr_t</span>)dlsym(sym-&gt;name); <span class="keyword">break</span>; <span class="comment">// resolve</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>: dlexport(sym-&gt;name, (<span class="keyword">char</span> *)h + sym-&gt;offset); <span class="keyword">break</span>; <span class="comment">// export</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line"></span><br><span class="line">bad:</span><br><span class="line">  <span class="keyword">if</span> (fd &gt; <span class="number">0</span>) close(fd);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">dlsym</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(syms); i++)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(syms[i].name, name) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">void</span> *)syms[i].offset;</span><br><span class="line">  assert(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dlexport</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">void</span> *addr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(syms); i++)</span><br><span class="line">    <span class="keyword">if</span> (!syms[i].name[<span class="number">0</span>]) &#123;</span><br><span class="line">      syms[i].offset = (<span class="keyword">uintptr_t</span>)addr; <span class="comment">// load-time offset</span></span><br><span class="line">      <span class="built_in">strcpy</span>(syms[i].name, name);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  assert(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dlload</span><span class="params">(struct symbol *sym)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LENGTH(libs); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (libs[i] &amp;&amp; <span class="built_in">strcmp</span>(libs[i]-&gt;name, sym-&gt;name) == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">// already loaded</span></span><br><span class="line">    <span class="keyword">if</span> (!libs[i]) &#123;</span><br><span class="line">      libs[i] = sym;</span><br><span class="line">      dlopen(sym-&gt;name); <span class="comment">// load recursively</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  assert(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>多次依赖的库只会加载一次</p>
<h3 id="位置无关代码"><a href="#位置无关代码" class="headerlink" title="位置无关代码"></a>位置无关代码</h3></li>
<li><p><img src="/imgs/2ee0949c1e1e558e24eb42454e3bf23c01d9d25acdf53169541b1b539f595ef8.png" alt="picture 10">  </p>
</li>
<li><p>将定位从绝对位置更改为相对pc指针的位置，防止不同模块重叠地址</p>
</li>
<li><p>每一段代码除了代码和数据之外还有一个<strong>TABLE</strong></p>
<ul>
<li><img src="/imgs/9fb5e7906c4908d811712383d710872bf05e6bc7e8632cc6de61402732e672e6.png" alt="picture 11">  </li>
</ul>
</li>
<li><p>引用外部函数的时候，先访问TABLE上对应的位置，再从此处查到真正的位置</p>
</li>
<li><p><img src="/imgs/fcba124775f4965aa033a621501f3e23ccd222e0476a11fea9f3b26f1fbb2ec2.png" alt="picture 12">  </p>
<ul>
<li>C语言代码的角度无法区分这两者的区别</li>
<li>外部库的调用没有内部那么频繁</li>
<li><img src="/imgs/80a22c808eb094d335f91c6d97e81316f19042202f7f3433d261a904dd9496ee.png" alt="picture 13">  </li>
<li>实际上只有涉及外部调用的时候才会查表，程序执行的都是都是CALL</li>
<li><img src="/imgs/ee7248e579976a3a911866bdbb777a84b3a94b99300ae35c98516d6e39d391e2.png" alt="picture 14">  <ul>
<li>以上是真正查表的位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="虚拟地址空间映射"><a href="#虚拟地址空间映射" class="headerlink" title="虚拟地址空间映射"></a>虚拟地址空间映射</h2><ul>
<li><img src="/imgs/a3f7e4cb5338414773344c62aa74612901196053f7a5fb252ff4d87963b650ba.png" alt="picture 15">  </li>
<li>操作系统对于只读的代码，只分配一次内存，不会因为创建了多个副本就映射多次浪费内存</li>
<li><code>fork()</code>时对于虚拟地址的复制<ul>
<li><img src="/imgs/f51ed40134fde06c87d67471d47a807c7e53b62e8778d420c5d28450a825f8aa.png" alt="picture 16">  </li>
<li>一个内存只要不写，就可以不复制</li>
<li>只读的内存是不复制的</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP知识笔记（1）</title>
    <url>/2023/07/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="编译、重定位、装入和链接"><a href="#编译、重定位、装入和链接" class="headerlink" title="编译、重定位、装入和链接"></a>编译、重定位、装入和链接</h2><ul>
<li><img src="/imgs/1a721cc175df7718d8b31218f7b2b189263c723c2fbf683d67155c7de7ae0ece.png" alt="picture 0">  <ul>
<li>编译是得到单个的程序模块</li>
<li>链接是将程序中用到的模块链接在一起，组合他们的虚拟地址（逻辑地址）</li>
<li>装入是得到真正的物理地址<h3 id="可重定位文件的结构"><a href="#可重定位文件的结构" class="headerlink" title="可重定位文件的结构"></a>可重定位文件的结构</h3><h4 id="Elf-Header部分"><a href="#Elf-Header部分" class="headerlink" title="Elf Header部分"></a>Elf Header部分</h4></li>
</ul>
</li>
<li>存放文件的基本信息<h4 id="text段"><a href="#text段" class="headerlink" title=".text段"></a>.text段</h4></li>
<li>存放编译好的机器代码<h4 id="data段"><a href="#data段" class="headerlink" title=".data段"></a>.data段</h4></li>
<li>存放已经初始化的全局变量和静态变量<h4 id="bss段"><a href="#bss段" class="headerlink" title=".bss段"></a>.bss段</h4></li>
<li>未初始化的全局变量和静态变量以及初始化为0的全局变量和静态变量</li>
<li><code>better save space</code></li>
<li>并不占据实际的空间，只是一个占位符</li>
<li>系统真正运行的时候会分配空间并且初始化为0<h4 id="COMMON"><a href="#COMMON" class="headerlink" title="COMMON"></a>COMMON</h4></li>
<li>存放未初始化的全局变量<h4 id="rodata"><a href="#rodata" class="headerlink" title=".rodata"></a>.rodata</h4></li>
<li>存放<strong>只读</strong>数据</li>
<li>比如字符串和<code>switch</code>的跳转表<h4 id="rel-text"><a href="#rel-text" class="headerlink" title=".rel.text"></a>.rel.text</h4></li>
<li>存放需要重定位的代码<h4 id="rel-data"><a href="#rel-data" class="headerlink" title=".rel.data"></a>.rel.data</h4></li>
<li>存放已初始化的数据的重定位<h3 id="可执行文件的结构"><a href="#可执行文件的结构" class="headerlink" title="可执行文件的结构"></a>可执行文件的结构</h3><h4 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h4></li>
<li>文件的总体格式<h4 id="init"><a href="#init" class="headerlink" title=".init"></a>.init</h4></li>
<li>初始化用的代码<h4 id="text-rodata和-data"><a href="#text-rodata和-data" class="headerlink" title=".text .rodata和.data"></a>.text .rodata和.data</h4></li>
<li>与可重定位文件类似</li>
</ul>
<h3 id="强符号和弱符号"><a href="#强符号和弱符号" class="headerlink" title="强符号和弱符号"></a>强符号和弱符号</h3><ul>
<li>强符号<ul>
<li>函数和已经初始化的全局变量</li>
</ul>
</li>
<li>弱符号<ul>
<li>未初始化的全局变量</li>
</ul>
</li>
<li>多个同名的强符号一起出现的时候会引起链接器错误</li>
<li>强符号和弱符号一起出现的时候会同意认为是强符号，而不会报错<ul>
<li>类型不同的强弱符号，在弱符号出现的模块中，类型会保留弱符号的类型，尽管实际上内存中存储的是强符号的类型</li>
<li>给编译器<code>-fno-common</code>选项，会在多重定义时报错防止上述错误</li>
</ul>
</li>
<li>多个弱符号也会认为是同一个变量<h3 id="运行时的内存映像"><a href="#运行时的内存映像" class="headerlink" title="运行时的内存映像"></a>运行时的内存映像</h3></li>
<li><img src="/imgs/b632dd4bb03af638e7ba5dd009fece7b790e76771370df56204484709be1304e.png" alt="picture 1">  </li>
<li>代码段，数据段和堆是相邻的</li>
<li>栈在最大可用地址的位置，从大到小，堆从小到大</li>
<li>程序运行加载的过程<ul>
<li><img src="/imgs/bfeee56b7cc8a00a5c78d26ca8052c4d853c6cafa1619180b3fb062d5b29ceb4.png" alt="picture 2">  </li>
</ul>
</li>
<li>只编译不链接就得到<strong>可重定位目标文件</strong><h4 id="一个指令序列加载的例子"><a href="#一个指令序列加载的例子" class="headerlink" title="一个指令序列加载的例子"></a>一个指令序列加载的例子</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generated by GPT-4; unmodified</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s &lt;binary_file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Open the binary file</span></span><br><span class="line">  <span class="keyword">int</span> fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">  <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the file size</span></span><br><span class="line">  <span class="keyword">off_t</span> file_size = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">  lseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate memory for the binary</span></span><br><span class="line">  <span class="keyword">void</span> *mem = mmap(<span class="literal">NULL</span>, file_size, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (mem == MAP_FAILED) &#123;</span><br><span class="line">    perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Close the file</span></span><br><span class="line">  close(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cast the memory address to a function pointer and call it</span></span><br><span class="line">  <span class="keyword">void</span> (*binary_func)() = (<span class="keyword">void</span> (*)())mem;</span><br><span class="line">  binary_func();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clean up</span></span><br><span class="line">  munmap(mem, file_size);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>也就是打开文件，创建文件和内存位置之间大小等于文件大小的映射关系(mmap)，将指定大小的文件映射到内存空间中，然后将映射到的内存地址强制类型转换为函数指针，然后从这个位置开始执行<h4 id="一个应用程序加载的例子"><a href="#一个应用程序加载的例子" class="headerlink" title="一个应用程序加载的例子"></a>一个应用程序加载的例子</h4></li>
<li>应用程序在内存中除了代码段<code>.text</code>，数据段<code>.data</code>和BSS段<code>.bss</code>以外，还包含动态分配内存用的堆和栈空间<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;elf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STK_SZ           (1 &lt;&lt; 20)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROUND(x, align)  (((uintptr_t)x) &amp; ~(align - 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD(x, align)    (((uintptr_t)x) &amp; (align - 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push(sp, T, ...) (&#123; *((T*)sp) = (T)__VA_ARGS__; \</span></span><br><span class="line"><span class="meta">                            sp = (void *)((uintptr_t)(sp) + sizeof(T)); &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execve_</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">  <span class="comment">// WARNING: This execve_ does not free process resources.</span></span><br><span class="line">  <span class="comment">// **NOT** all process states are properly initialized.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> fd = open(file, O_RDONLY);</span><br><span class="line">  assert(fd &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Map ELF header to memory</span></span><br><span class="line">  Elf64_Ehdr *h = mmap(<span class="literal">NULL</span>, <span class="number">4096</span>, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">  assert(h != MAP_FAILED);</span><br><span class="line">  assert(h-&gt;e_type == ET_EXEC &amp;&amp; h-&gt;e_machine == EM_X86_64);</span><br><span class="line"></span><br><span class="line">  Elf64_Phdr *pht = (Elf64_Phdr *)((<span class="keyword">char</span> *)h + h-&gt;e_phoff);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h-&gt;e_phnum; i++) &#123;</span><br><span class="line">    Elf64_Phdr *p = &amp;pht[i];</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;p_type == PT_LOAD) &#123;</span><br><span class="line">      <span class="comment">// Memory map region</span></span><br><span class="line">      <span class="keyword">uintptr_t</span> map_beg = ROUND(p-&gt;p_vaddr, p-&gt;p_align);</span><br><span class="line">      <span class="keyword">uintptr_t</span> map_end = map_beg + p-&gt;p_memsz;</span><br><span class="line">      <span class="keyword">while</span> (map_end % p-&gt;p_align != <span class="number">0</span>) map_end++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Memory map flags</span></span><br><span class="line">      <span class="keyword">int</span> prot = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;p_flags &amp; PF_R) prot |= PROT_READ;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;p_flags &amp; PF_W) prot |= PROT_WRITE;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;p_flags &amp; PF_X) prot |= PROT_EXEC;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Memory map size</span></span><br><span class="line">      <span class="keyword">int</span> map_sz = p-&gt;p_filesz + (p-&gt;p_vaddr % p-&gt;p_align);</span><br><span class="line">      <span class="keyword">while</span> (map_sz % p-&gt;p_align != <span class="number">0</span>) map_sz++;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Map file contents to memory</span></span><br><span class="line">      <span class="keyword">void</span> *ret = mmap(</span><br><span class="line">        (<span class="keyword">void</span> *)map_beg,                 <span class="comment">// addr, rounded to ALIGN</span></span><br><span class="line">        map_sz,                          <span class="comment">// length</span></span><br><span class="line">        prot,                            <span class="comment">// protection</span></span><br><span class="line">        MAP_PRIVATE | MAP_FIXED,         <span class="comment">// flags, private &amp; strict</span></span><br><span class="line">        fd,                              <span class="comment">// file descriptor</span></span><br><span class="line">        ROUND(p-&gt;p_offset, p-&gt;p_align)   <span class="comment">// offset</span></span><br><span class="line">      );</span><br><span class="line">      assert(ret != MAP_FAILED);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Map extra anonymous memory (e.g., bss)</span></span><br><span class="line">      <span class="keyword">intptr_t</span> extra_sz = p-&gt;p_memsz - p-&gt;p_filesz;</span><br><span class="line">      <span class="keyword">if</span> (extra_sz &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">uintptr_t</span> extra_beg = map_beg + map_sz;</span><br><span class="line">        ret = mmap(</span><br><span class="line">          (<span class="keyword">void</span> *)extra_beg, extra_sz, prot,  <span class="comment">// addr, length, protection</span></span><br><span class="line">          MAP_ANONYMOUS | MAP_PRIVATE | MAP_FIXED,  <span class="comment">// flags</span></span><br><span class="line">          <span class="number">-1</span>, <span class="number">0</span>  <span class="comment">// no file</span></span><br><span class="line">        );</span><br><span class="line">        assert(ret != MAP_FAILED);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  close(fd);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> <span class="built_in">stack</span>[STK_SZ], rnd[<span class="number">16</span>];</span><br><span class="line">  <span class="keyword">void</span> *sp = (<span class="keyword">void</span> *)ROUND(<span class="built_in">stack</span> + <span class="keyword">sizeof</span>(<span class="built_in">stack</span>) - <span class="number">4096</span>, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">void</span> *sp_exec = sp;</span><br><span class="line">  <span class="keyword">int</span> argc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// argc</span></span><br><span class="line">  <span class="keyword">while</span> (argv[argc]) argc++;</span><br><span class="line">  push(sp, <span class="keyword">intptr_t</span>, argc);</span><br><span class="line">  <span class="comment">// argv[], NULL-terminate</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= argc; i++)</span><br><span class="line">    push(sp, <span class="keyword">intptr_t</span>, argv[i]);</span><br><span class="line">  <span class="comment">// envp[], NULL-terminate</span></span><br><span class="line">  <span class="keyword">for</span> (; *envp; envp++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strchr</span>(*envp, <span class="string">&#x27;_&#x27;</span>)) <span class="comment">// remove some verbose ones</span></span><br><span class="line">      push(sp, <span class="keyword">intptr_t</span>, *envp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// auxv[], AT_NULL-terminate</span></span><br><span class="line">  push(sp, <span class="keyword">intptr_t</span>, <span class="number">0</span>);</span><br><span class="line">  push(sp, Elf64_auxv_t, &#123; .a_type = AT_RANDOM, .a_un.a_val = (<span class="keyword">uintptr_t</span>)rnd &#125; );</span><br><span class="line">  push(sp, Elf64_auxv_t, &#123; .a_type = AT_NULL &#125; );</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;mov $0, %%rdx;&quot;</span> <span class="comment">// required by ABI</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;mov %0, %%rsp;&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;jmp *%1&quot;</span> : : <span class="string">&quot;a&quot;</span>(sp_exec), <span class="string">&quot;b&quot;</span>(h-&gt;e_entry))</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], <span class="keyword">char</span> *envp[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s file [args...]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  execve_(argv[<span class="number">1</span>], argv + <span class="number">1</span>, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>手动实现了一个应用程序的加载器</li>
<li>先加载了ELF的文件头（header）到内存中</li>
<li><img src="/imgs/7081ef003317910ae886fc032b1b94ad53140285b2cb7a9e151a8429b0e98d09.png" alt="picture 10">  </li>
<li>ELF文件中有一些<code>LOAD</code>标记，指示文件中的某个位置的规定大小的部分需要加载到内存中指定的位置上，还原程序执行的初始状态</li>
<li>然后给程序准备初始状态下的栈中的内容<ul>
<li><img src="/imgs/3ab19a81ec989bca27e66af42a11225ce4085bbb5ea31718535261aa0af87e15.png" alt="picture 11">  </li>
<li>操作就是分配一个栈大小的变量，然后向其中push变量，所谓push也就是存入东西然后移动指针</li>
<li>然后跳转指针即可<h4 id="Linux提供了一个在程序执行的过程中加载共享库的函数"><a href="#Linux提供了一个在程序执行的过程中加载共享库的函数" class="headerlink" title="Linux提供了一个在程序执行的过程中加载共享库的函数"></a>Linux提供了一个在程序执行的过程中加载共享库的函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>flag</code>可以设置为<code>RTLD_LASY</code>，将代码推迟到执行的时候再符号解析</li>
<li>还提供了一个获取共享库的符号地址的方法<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">dlsym</span><span class="params">(<span class="keyword">void</span>* handle, <span class="keyword">char</span>* symbol)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>其中的<code>handle</code>就是前面打开的共享库</li>
<li>symbol就是其中的符号名称<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dlclose</span><span class="params">(<span class="keyword">void</span>* handle)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>卸载共享库<h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2></li>
<li>异步中断<ul>
<li>不是当前程序引起的，比如I/O操作引起的</li>
</ul>
</li>
<li>同步中断<ul>
<li>CPU中执行的指令引起的中断</li>
</ul>
</li>
<li><img src="/imgs/7e0dd67349348712f8cb96c04ffe5cf2ac370b12d3ba3acec424f32e0786d17a.png" alt="picture 3">  <h3 id="程序异常"><a href="#程序异常" class="headerlink" title="程序异常"></a>程序异常</h3></li>
<li><img src="/imgs/575b6666f04b2d0c34cb2a4318f2bcea71bc3332562735760362f99ce9e27063.png" alt="picture 4">  </li>
<li>所谓的段错误（Segmentation Fault）就是程序试图访问一块未申请的内存空间引起的，也就是图中的13号</li>
<li>18号异常时机器检查，一般是硬件错误引起的</li>
<li><img src="/imgs/de6a53626cd9334b198037cd83d99a01ac1129536503a21c46b383bfe632033d.png" alt="picture 5">  <ul>
<li>Linux系统调用号对应的是跳转表中内存的偏移量<h3 id="fork和execve"><a href="#fork和execve" class="headerlink" title="fork和execve"></a>fork和execve</h3></li>
</ul>
</li>
<li><code>fork</code>调用一次返回两次<ul>
<li>父进程和子进程各一次</li>
</ul>
</li>
<li><code>execve</code>调用一次不返回<h3 id="程序执行的传参argv"><a href="#程序执行的传参argv" class="headerlink" title="程序执行的传参argv"></a>程序执行的传参<code>argv</code></h3></li>
<li><img src="/imgs/6f9ee657579f945904321a75edc03b43c5e81b4b631a4b07136b87ea62c63e25.png" alt="picture 6">  <ul>
<li>argv的第一个是可执行文件的名字</li>
<li><code>argc</code>是参数的数量</li>
</ul>
</li>
<li><img src="/imgs/7d15745c726c53d708323f43631998d02d44f069cdb33bf319be7ae6ca5a4e92.png" alt="picture 7">  <ul>
<li>环境变量是<code>envp</code>，也类似</li>
<li><code>execve</code>的作用就是调用加载器如图<ul>
<li><img src="/imgs/fed85bf9602bec823fc921d9e6e095eb3d78863a584da55971933c8f1c392ca8.png" alt="picture 8">  <h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3></li>
</ul>
</li>
</ul>
</li>
<li>终止运行但是没有被父进程回收的进程就是<code>zombie</code>进程<h3 id="回收进程"><a href="#回收进程" class="headerlink" title="回收进程"></a>回收进程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">int</span> *statusp,<span class="keyword">int</span> options)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>如果pid&gt;0，则回收该pid指定的某个确定的进程</li>
<li>如果pid=-1，则回收该进程创建的所有子进程</li>
<li>第二个参数是导致返回的子进程的状态信息（终止的原因是正常返回还是异常终止还是其他）</li>
<li><code>waitpid</code>程序<strong>不会按照任何特定顺序</strong>回收子进程，除非明确指定<h3 id="发送信号"><a href="#发送信号" class="headerlink" title="发送信号"></a>发送信号</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">int</span> sig)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>如果pid为0，则发送信号给调用进程所在进程组中的所有进程，包括自己</li>
<li>如果pid&gt;0，则发送信号给pid指定的进程</li>
<li>如果pid&lt;0，则发送信号给进程组-pid的每个进程<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">alarm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> secs)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>进程可以用<code>alarm</code>给自己发送信号，参数是在 secs秒之后给调用进程发送一个<code>SIGALRM</code></li>
<li>secs为0就不会调用新的闹钟了<h3 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h3></li>
<li>一个进程最多<strong>只有一个</strong>同类型的信号，等待处理的信号超过一个的时候会被<strong>直接丢弃</strong></li>
<li>处理多个信号<ul>
<li><img src="/imgs/5c2be80572109b2acf56dcd28d8f3fa0553db2cfeecab42a7de0588293a2b3e1.png" alt="picture 9">  </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>有序表</title>
    <url>/2022/09/03/%E6%9C%89%E5%BA%8F%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="有序表的实现"><a href="#有序表的实现" class="headerlink" title="有序表的实现"></a>有序表的实现</h2><ul>
<li>底层：<ul>
<li>红黑树</li>
<li>AVL树</li>
<li>SB树</li>
<li>跳表</li>
</ul>
</li>
<li>时间复杂度：O(log(N)) </li>
<li>红黑树、AVL树、SB树是<em>平衡搜索二叉树</em><h3 id="搜索二叉树的插入和删除"><a href="#搜索二叉树的插入和删除" class="headerlink" title="搜索二叉树的插入和删除"></a>搜索二叉树的插入和删除</h3></li>
<li>插入直接按照大小分支插入即可</li>
<li>假如没有子节点的节点直接删除即可</li>
<li>假如删除的节点只有一个孩子节点<ul>
<li>直接让父节点的指针指向唯一的孩子即可</li>
</ul>
</li>
<li>左右双全：<ul>
<li>用左树最右的节点或者是右树最左的节点</li>
<li>这样的节点必然不是两个孩子的节点</li>
<li>先将这个节点的子节点（假如存在）移到这个节点原来的位置</li>
<li>然后将这个节点移到被删除的具有两个孩子的节点的位置<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3></li>
</ul>
</li>
<li>防止因为用户数据输入顺序的原因导致树左右不平衡使得搜索的时间复杂度上升</li>
<li>左树和右树的体量差不多大</li>
<li>AVL树在增删结点的时候会从这个节点的父节点开始向上查每个节点的平衡性</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习知识帖</title>
    <url>/2022/10/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E5%B8%96/</url>
    <content><![CDATA[<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/33992985">梯度下降法</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/34842727">正规方程法(最小二乘法)</a></p>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28408516">逻辑回归</a></p>
<h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2></li>
<li><p>在逻辑回归中，最常用的是代价函数是交叉熵(Cross Entropy)，交叉熵是一个常见的代价函数，在神经网络中也会用到。下面是《神经网络与深度学习》一书对交叉熵的解释：</p>
</li>
<li><p>交叉熵是对「出乎意料」（译者注：原文使用suprise）的度量。神经元的目标是去计算函数x→y=y(x)。但是我们让它取而代之计算函数x→a=a(x)。假设我们把a当作y等于1的概率，1−a是y等于0的概率。那么，交叉熵衡量的是我们在知道y的真实值时的平均「出乎意料」程度。当输出是我们期望的值，我们的「出乎意料」程度比较低；当输出不是我们期望的，我们的「出乎意料」程度就比较高。</p>
</li>
<li><p>在1948年，克劳德·艾尔伍德·香农将热力学的熵，引入到信息论，因此它又被称为香农熵(Shannon Entropy)，它是香农信息量(Shannon Information Content, SIC)的期望。香农信息量用来度量不确定性的大小：一个事件的香农信息量等于0，表示该事件的发生不会给我们提供任何新的信息，例如确定性的事件，发生的概率是1，发生了也不会引起任何惊讶；当不可能事件发生时，香农信息量为无穷大，这表示给我们提供了无穷多的新信息，并且使我们无限的惊讶</p>
</li>
<li><p>[交叉熵](<a href="https://blog.csdn.net/rtygbwwwerr/article/details/50778098">https://blog.csdn.net/rtygbwwwerr/article/details/50778098</a></p>
</li>
<li><p><img src="/imgs/320549d4337620d61dd7b081632aa72e223e40cb5484ebaedd5756de3236de03.png" alt="picture 1">  </p>
<ul>
<li>上述式子是熵的期望（不同情况的熵的加权和）</li>
</ul>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28415991">代价函数</a></p>
<h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2></li>
<li><p><a href="https://blog.csdn.net/v_july_v/article/details/7624837">SVM原理</a></p>
<h2 id="KMeans"><a href="#KMeans" class="headerlink" title="KMeans"></a>KMeans</h2></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/78798251?utm_source=qq">KMeans</a></p>
<h2 id="Dueling-DQN"><a href="#Dueling-DQN" class="headerlink" title="Dueling DQN"></a>Dueling DQN</h2></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/110807201">Dueling DQN</a></p>
<h2 id="文章链接"><a href="#文章链接" class="headerlink" title="文章链接"></a>文章链接</h2></li>
<li><p><a href="https://openai.com/blog/vpt/">openai用强化学习玩我的世界</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>编写C并行计算程序并统计时间</title>
    <url>/2023/02/22/%E7%BC%96%E5%86%99C%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E5%B9%B6%E7%BB%9F%E8%AE%A1%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret = pthread_create(ids+i, <span class="literal">NULL</span>, calc, (<span class="keyword">void</span>*)(seq+i));</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如上强制类型转换修改指针类型的时候，假如指针与其他类型的变量有加减，需要先完成加减再进行修改，否则会先将指针类型转换为<code>void*</code>再计算，使得指针的位置出错</p>
</li>
<li><p>尽量避免使用<code>&amp;数组名[下标]</code>的方式传递指针</p>
</li>
<li><p>编译的时候记得再gcc最后加参数<code>-lpthread</code>比如</p>
<ul>
<li><code>gcc parallelCalc.c -o par -lpthread</code><h2 id="c语言计时"><a href="#c语言计时" class="headerlink" title="c语言计时"></a>c语言计时</h2></li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/lqtcsq/article/details/113189091">参考链接</a></p>
</li>
<li><p>都是<code>time.h</code>中的</p>
<ul>
<li>一种是<code>time_t time(time_t * timer)</code>，参数传递NULL即可</li>
<li>另一种是直接计算硬件滴答数，要换算成秒，需要除以CLK_TCK或者 CLK_TCKCLOCKS_PER_SEC。</li>
<li><code>clock_t clock(void);</code><h2 id="时间统计（开1000个线程）"><a href="#时间统计（开1000个线程）" class="headerlink" title="时间统计（开1000个线程）"></a>时间统计（开1000个线程）</h2></li>
</ul>
</li>
<li><p>规模为100：</p>
<ul>
<li><img src="/imgs/b17dac56d785e2e078952f1308f910d85ee7f0bdd113c3a507dc266020db8881.png" alt="picture 6">  </li>
</ul>
</li>
<li><p>1000：</p>
<ul>
<li><img src="/imgs/25e4f6a0c09f52871dc5bdb698ee75cd17834fc278fb923fdb877c40bb967b24.png" alt="picture 7">  </li>
</ul>
</li>
<li><p>10000：</p>
<ul>
<li><img src="/imgs/df99bc87e5c1835ab73ead3e13575c9c4bd466248f24a456ada27084f011fe20.png" alt="picture 10">  </li>
</ul>
</li>
<li><p>100000：</p>
<ul>
<li><img src="/imgs/e0053b8c364f57fc9a094e0fb0a894491a57b39115bd4c36558d8aa57da71243.png" alt="picture 11">  </li>
</ul>
</li>
<li><p>1000000：</p>
<ul>
<li><img src="/imgs/9a59aa35ecb8631be1923c1a12f799fe35fc36f9157a645fd7251b395aa2dd83.png" alt="picture 12">  </li>
</ul>
</li>
<li><p>10000000：</p>
<ul>
<li><img src="/imgs/55a5ef6b382f597fccd48eabbec78f86a72d3ba6047edcb5b2334f7c86cbc2a4.png" alt="picture 13">  <h4 id="CPU使用情况"><a href="#CPU使用情况" class="headerlink" title="CPU使用情况"></a>CPU使用情况</h4></li>
</ul>
</li>
<li><p>设置VMWare虚拟机为8核心</p>
<ul>
<li><img src="/imgs/960c173c3e113b1171f5de5468539cc51829650c3437f6a6eb38bd083388fef2.png" alt="picture 14">  </li>
<li>可以明显地观察到有8个核心的占用一下子升高</li>
</ul>
</li>
<li><p>顺序执行</p>
<ul>
<li><img src="/imgs/7fb97d3fdba5362444d1d0cbb6ef173c4727e87ea068526a785ed597e3b4a30e.png" alt="picture 15">  </li>
<li>没有明显的CPU使用（也或许是计算任务在不同的CPU之间来回变化），效率很低</li>
<li><img src="/imgs/a38e06067cc496686d22f1b79dd2387661af485e449c1e918b8a4dd563c8e06a.png" alt="picture 16">  </li>
</ul>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZEOFMAT 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZEOFVEC 10000000</span></span><br><span class="line"><span class="comment">// int matrix[SIZEOFMAT][SIZEOFVEC];</span></span><br><span class="line"><span class="comment">// int vector[SIZEOFVEC];</span></span><br><span class="line"><span class="keyword">int</span> seq[SIZEOFMAT];</span><br><span class="line"><span class="keyword">int</span>* rets[SIZEOFMAT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">calc</span><span class="params">(<span class="keyword">void</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;enter\n&quot;);</span></span><br><span class="line">    <span class="keyword">int</span> rowNum = *(<span class="keyword">int</span>*)input;</span><br><span class="line">    <span class="keyword">int</span> *sum = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 分配内存 不使用临时变量</span></span><br><span class="line">    *sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// printf(&quot;线程%d: \n&quot;, rowNum);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZEOFVEC; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *sum+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;sum: %d\n&quot;, *sum);</span></span><br><span class="line">    <span class="comment">// printf(&quot;exit\n&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span>*)sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">clock_t</span> start,end;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pthread_t</span> ids[SIZEOFMAT];</span><br><span class="line">    <span class="keyword">int</span> outVec[SIZEOFMAT];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZEOFMAT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        seq[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i = 0;i&lt;SIZEOFMAT;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 0;j&lt;SIZEOFVEC;j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         matrix[i][j] = j;</span></span><br><span class="line">    <span class="comment">//         vector[j] = j;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    start = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZEOFMAT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = pthread_create(ids+i, <span class="literal">NULL</span>, calc, (<span class="keyword">void</span>*)(seq+i));</span><br><span class="line">        <span class="comment">// printf(&quot;创建了%d\n&quot;, i);</span></span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;创建发生错误！&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;SIZEOFMAT;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;joining\n&quot;);</span></span><br><span class="line">        pthread_join(ids[i], (<span class="keyword">void</span>**)(rets+i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;SIZEOFMAT;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;%d, &quot;, *rets[i]);</span></span><br><span class="line">        <span class="built_in">free</span>(rets[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;并行计算经过的时间为 %d\n&quot;</span>, end-start);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int stdSum = 0;</span></span><br><span class="line">    <span class="comment">// for(int i = 0;i&lt;SIZEOFVEC;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     stdSum+=i*i;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// printf(&quot;\n参照: %d\n&quot;, stdSum);</span></span><br><span class="line">    </span><br><span class="line">    start = clock();</span><br><span class="line">    <span class="keyword">int</span> sumSeq[SIZEOFMAT] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;SIZEOFMAT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;SIZEOFVEC; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sumSeq[i]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;SIZEOFMAT;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;%d, &quot;, sumSeq[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环计算经过的时间为:%d\n&quot;</span>, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>给Linux内核增加实时补丁并安装</title>
    <url>/2023/10/20/%E7%BB%99Linux%E5%86%85%E6%A0%B8%E5%A2%9E%E5%8A%A0%E5%AE%9E%E6%97%B6%E8%A1%A5%E4%B8%81%E5%B9%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="为何要安装实时补丁"><a href="#为何要安装实时补丁" class="headerlink" title="为何要安装实时补丁"></a>为何要安装实时补丁</h2><ul>
<li>Linux系统从原理上说并不是一个实时系统，因为Linux系统有很多状态是不可被抢占的，比如持有自旋锁的状态等等，在其他博客中有所涉及，这会导致Linux系统定时不准等一系列问题，对实时控制十分不利</li>
<li>增加实时补丁不能完全使得Linux系统变为实时系统，但是可以使得Linux系统不可抢占的部分大为减少，增强实时性<h2 id="安装实时补丁"><a href="#安装实时补丁" class="headerlink" title="安装实时补丁"></a>安装实时补丁</h2></li>
<li><a href="https://blog.csdn.net/qq_44786250/article/details/125736966">参考</a><h3 id="对单个文件打补丁"><a href="#对单个文件打补丁" class="headerlink" title="对单个文件打补丁"></a>对单个文件打补丁</h3></li>
<li>在内核源码根目录下</li>
<li><code>patch -p1 &lt; 补丁文件.patch</code><h3 id="修改内核启动顺序"><a href="#修改内核启动顺序" class="headerlink" title="修改内核启动顺序"></a>修改内核启动顺序</h3></li>
<li>编辑<code>/etc/default/grub</code>文件</li>
<li>GRUB_TIMEOUT=10  %超时时间，单位s</li>
<li>GRUB_DEFAULT=”1&gt;2”  %1代表默认启动内核，2代表所启动内核位于列表中第2个（序号从0开始）</li>
</ul>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul>
<li><img src="/imgs/77624abe0dcccbff9f91659a256034ba71294da78a837f76211681bf0f79806b.png" alt="picture 0">  </li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="启动Ubuntu的时候bad-shim-signature"><a href="#启动Ubuntu的时候bad-shim-signature" class="headerlink" title="启动Ubuntu的时候bad shim signature"></a>启动Ubuntu的时候bad shim signature</h3><ul>
<li><p>因为BIOS里开启了安全启动，进入BIOS关闭<strong>secure boot</strong>即可</p>
<h3 id="遇到类似于memtest86-needs-a-16bit等等问题"><a href="#遇到类似于memtest86-needs-a-16bit等等问题" class="headerlink" title="遇到类似于memtest86+ needs a 16bit等等问题"></a>遇到类似于memtest86+ needs a 16bit等等问题</h3></li>
<li><p>在<code>/etc/default/grub</code>文件中添加一行<code>GRUB_DISABLE_OS_PROBER=false</code>，但是<strong>未能解决问题</strong></p>
</li>
<li><p>但是只要在开机的时候按下<code>Esc</code>到Ubuntu高级设置，找到需要的内核启动即可</p>
<h2 id="更换内核之后因为Linux下头文件与内核版本不符导致不能安装本机编译的模块"><a href="#更换内核之后因为Linux下头文件与内核版本不符导致不能安装本机编译的模块" class="headerlink" title="更换内核之后因为Linux下头文件与内核版本不符导致不能安装本机编译的模块"></a>更换内核之后因为Linux下头文件与内核版本不符导致不能安装本机编译的模块</h2><h3 id="以下方法未解决问题"><a href="#以下方法未解决问题" class="headerlink" title="以下方法未解决问题"></a>以下方法未解决问题</h3></li>
<li><p><code>insmod</code>报错为<code>insmod: ERROR: could not insert module ***.ko: Invalid module format</code></p>
</li>
<li><p><code>dmesg</code>查看到报错为<code>disagrees about version of symbol module_layout</code></p>
</li>
<li><p><a href="https://blog.csdn.net/wukongmingjing/article/details/81901927">可能的解决方法</a></p>
<ul>
<li><p>(不要执行这一步)编译内核的时候删去模块版本检查<code>module versioning support</code>，在<code>Enable loadable module support</code>下</p>
</li>
<li><p>然后重新安装内核，重新编译模块安装，安装失败使用<code>sudo dmesg</code>查看内核log，得到<code>version magic &#39;6.2.0-rt3 SMP preempt mod_unload modversions &#39; should be &#39;6.2.0-rt3 SMP preempt_rt mod_unload &#39;</code></p>
</li>
<li><p>重新安装内核之后修改内核<code>/usr/src</code>下的内核源码</p>
</li>
<li><p><code>/usr/src/linux-headers-系统内核名称/include/generated</code>下的<code>utsrelease.h</code>中的选项</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UTS_RELEASE <span class="meta-string">&quot;6.2.0-rt3&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UTS_UBUNTU_RELEASE_ABI 35</span></span><br></pre></td></tr></table></figure></li>
<li><p>第一个修改为需要的内核名称即可</p>
</li>
<li><p>然后修改<code>/usr/src/linux-headers-&lt;内核名称&gt;/include/config/kernel.release</code>文件，内容修改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;需要的内核名称&gt; <span class="comment">// 比如 6.2.0-rt3</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后修改真正产生<code>version magic</code>字符串的文件<code>/usr/src/linux-headers-&lt;内核名称&gt;/include/linux/vermagic.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SPDX-License-Identifier: GPL-2.0 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LINUX_VERMAGIC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LINUX_VERMAGIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INCLUDE_VERMAGIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> <span class="meta-string">&quot;This header can be included from kernel/module.c or *.mod.c only&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;generated/utsrelease.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/vermagic.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Simply sanity version stamp for modules. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_SMP <span class="meta-string">&quot;SMP &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_SMP <span class="meta-string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#ifdef CONFIG_PREEMPT_BUILD</span></span><br><span class="line"><span class="comment">#define MODULE_VERMAGIC_PREEMPT &quot;preempt &quot;</span></span><br><span class="line"><span class="comment">#elif defined(CONFIG_PREEMPT_RT)</span></span><br><span class="line"><span class="comment">#define MODULE_VERMAGIC_PREEMPT &quot;preempt_rt &quot;</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#define MODULE_VERMAGIC_PREEMPT &quot;&quot;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 修改此处</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_PREEMPT <span class="meta-string">&quot;preempt_rt &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MODULE_UNLOAD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_MODULE_UNLOAD <span class="meta-string">&quot;mod_unload &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_MODULE_UNLOAD <span class="meta-string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MODVERSIONS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_MODVERSIONS <span class="meta-string">&quot;modversions &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_VERMAGIC_MODVERSIONS <span class="meta-string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RANDSTRUCT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;generated/randstruct_hash.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_RANDSTRUCT <span class="meta-string">&quot;RANDSTRUCT_&quot;</span> RANDSTRUCT_HASHED_SEED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODULE_RANDSTRUCT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// 修改下面的部分拼出自己想要的version magic</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERMAGIC_STRING                \</span></span><br><span class="line"><span class="meta">        UTS_RELEASE <span class="meta-string">&quot; &quot;</span>                \</span></span><br><span class="line"><span class="meta">        MODULE_VERMAGIC_SMP            \</span></span><br><span class="line"><span class="meta">         MODULE_VERMAGIC_PREEMPT       \</span></span><br><span class="line"><span class="meta">        MODULE_VERMAGIC_MODULE_UNLOAD  \</span></span><br><span class="line"><span class="meta">        <span class="comment">// MODULE_VERMAGIC_MODVERSIONS \</span></span></span><br><span class="line"><span class="comment"><span class="meta">        MODULE_ARCH_VERMAGIC           \</span></span></span><br><span class="line"><span class="comment"><span class="meta">        MODULE_RANDSTRUCT</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _LINUX_VERMAGIC_H */</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>找到<code>VERMAGIC_STRING</code>中的对应项，自己修改为需要的值或者顺序，注释掉不需要的即可</p>
</li>
<li><p>然后得到与前面要求的相同的<code>version magic</code>字符串，即可<code>insmod</code>了</p>
<h4 id="找不到符号Unknown-symbol-mutex-init-err-2"><a href="#找不到符号Unknown-symbol-mutex-init-err-2" class="headerlink" title="找不到符号Unknown symbol __mutex_init (err -2)"></a>找不到符号<code>Unknown symbol __mutex_init (err -2)</code></h4></li>
</ul>
</li>
<li><p>insmod报错<code>insmod: ERROR: could not insert module ***.ko: Unknown symbol in module</code></p>
</li>
<li><p><strong>未能解决</strong></p>
<h3 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h3></li>
<li><p>在编译内核模块的时候，将内核模块目录下的<code>Makefile</code>文件中的<code>KDIR</code><strong>修改为自己编译当前内核源码的目录，不要用<code>/usr/src</code>下的源码</strong>，然后照常make即可<code>insmod</code></p>
</li>
<li><p><strong>不要</strong>在<code>make menuconfig</code>中关闭<code>module versioning support</code>选项，否则会因为<code>version magic</code>字符串不一致导致很多<u>预编译好的其他模组不能安装</u></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>联想y7000等同系列笔记本电脑CPU被降频以及蓝牙设置丢失解决办法</title>
    <url>/2022/08/27/%E8%81%94%E6%83%B3y7000%E7%AD%89%E5%90%8C%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91CPU%E8%A2%AB%E9%99%8D%E9%A2%91%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="联想y7000等同系列笔记本电脑CPU被降频以及蓝牙设置丢失解决办法"><a href="#联想y7000等同系列笔记本电脑CPU被降频以及蓝牙设置丢失解决办法" class="headerlink" title="联想y7000等同系列笔记本电脑CPU被降频以及蓝牙设置丢失解决办法"></a>联想y7000等同系列笔记本电脑CPU被降频以及蓝牙设置丢失解决办法</h1><ul>
<li>CPU被降频为0.78或者CPU的占用封顶34%，同时没有任何风扇转动声音的情况</li>
<li>或者是蓝牙的设置直接丢失找不到，电脑失去蓝牙功能</li>
<li>拔掉电脑一些外设，包括电源线</li>
<li>关机</li>
<li>长按电脑开机键20-30s释放静电，再重启即可</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>滑动窗口问题</title>
    <url>/2022/08/28/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="leetcode-76-最小覆盖字串"><a href="#leetcode-76-最小覆盖字串" class="headerlink" title="leetcode 76.最小覆盖字串"></a>leetcode 76.最小覆盖字串</h2><ul>
<li>begin从0开始，end从-1开始</li>
<li>注意<code>vector&lt;&gt;.size()</code>返回的是无符号整数</li>
<li>不能直接与int比较大小，尤其是存在负数的情况</li>
<li>假如窗口的下一个元素是目标字符串中的</li>
<li>先把下一个加入窗口</li>
<li>假如此时需要的字符数量超过了目标字符串的数量</li>
<li>试图前移开头，删除元素直到没有窗口中没有多余的字母为止</li>
<li>注意， <strong>假如此时窗口中的该字符数量已经超过了需要的该字符数量</strong>，那就不能再增加已经cover的字符计数了，否则会导致错误<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; um, uTarget;</span><br><span class="line">        <span class="keyword">int</span> covered = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;t.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            um[t[i]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!uTarget.<span class="built_in">count</span>(t[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                uTarget[t[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++uTarget[t[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> minBegin = <span class="number">0</span>, minEnd = <span class="number">0</span>, minLen = INT_MAX;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;end&lt;&lt;&quot;|&quot;&lt;&lt;n-1&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span>(end&lt;(n<span class="number">-1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;&#x27;@&#x27;&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(um.<span class="built_in">count</span>(s[end+<span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(um[s[end+<span class="number">1</span>]]&gt;=uTarget[s[end+<span class="number">1</span>]])</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// ++covered;</span></span><br><span class="line">                    ++um[s[++end]];</span><br><span class="line">                    <span class="keyword">while</span>(begin&lt;end&amp;&amp;((!um.<span class="built_in">count</span>(s[begin]))||(um[s[begin]]&gt;uTarget[s[begin]])))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// cout&lt;&lt;&#x27;!&#x27;;</span></span><br><span class="line">                        <span class="keyword">if</span>(um.<span class="built_in">count</span>(s[begin]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            --um[s[begin]];</span><br><span class="line">                            <span class="comment">// --covered;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        ++begin;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ++covered;</span><br><span class="line">                    ++um[s[++end]];</span><br><span class="line">                    <span class="keyword">while</span>((begin&lt;end)&amp;&amp;((um.<span class="built_in">count</span>(s[begin]) == <span class="number">0</span>)||(um[s[begin]]&gt;uTarget[s[begin]])))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// cout&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">                        <span class="keyword">if</span>(um.<span class="built_in">count</span>(s[begin]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            --um[s[begin]];</span><br><span class="line">                            <span class="comment">// --covered;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        ++begin;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> ++end;</span><br><span class="line">            <span class="keyword">if</span>(covered&gt;=t.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(end-begin+<span class="number">1</span>&lt;=minLen)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;&quot;@&quot;&lt;&lt;endl;</span></span><br><span class="line">                    minBegin = begin;</span><br><span class="line">                    minEnd = end;</span><br><span class="line">                    minLen = end-begin+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;s.substr(begin, end-begin+1)&lt;&lt;(end-begin+1)&lt;&lt;&#x27;|&#x27;&lt;&lt;covered&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(covered&gt;=t.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s.<span class="built_in">substr</span>(minBegin, minLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-3-无重复字符的最长子串"><a href="#leetcode-3-无重复字符的最长子串" class="headerlink" title="leetcode 3.无重复字符的最长子串"></a>leetcode 3.无重复字符的最长子串</h2></li>
<li>使用滑动窗口，假如前面没有重复字符的话就把滑动窗口的后边缘往前移，假如有的话就把前边缘往前移到不重复为止<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;=<span class="number">1</span>)<span class="keyword">return</span> s.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> startInd = <span class="number">0</span>, endInd = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(m.<span class="built_in">count</span>(s[endInd+<span class="number">1</span>]) == <span class="number">0</span>||m[s[endInd+<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++endInd;</span><br><span class="line">                m[s[endInd]] = <span class="number">1</span>;</span><br><span class="line">                maxLen = maxLen&gt;=(endInd - startInd+<span class="number">1</span>)?maxLen:(endInd - startInd+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(endInd == s.<span class="built_in">size</span>() - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> maxLen;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(m.<span class="built_in">count</span>(s[endInd+<span class="number">1</span>])&gt;<span class="number">0</span>&amp;&amp;m[s[endInd+<span class="number">1</span>]]&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(m.<span class="built_in">count</span>(s[startInd]))</span><br><span class="line">                &#123;</span><br><span class="line">                    m[s[startInd]]-=<span class="number">1</span>;</span><br><span class="line">                    ++startInd;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><ul>
<li>一种两端都可以进出的数据结构<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2></li>
<li>保持双端队列的头部位置是窗口中最大的数字</li>
<li>窗口的运动是随意的，不是固定窗口大小的</li>
<li>将滑动窗口的右边界向右扩展的时候</li>
<li>双端队列中存储的是双端队列中数字的index，但是使用的是index对应的数字<ul>
<li>假如此时右边界新进入的数字比此时双端队列的末尾数字大的话就弹出此时双端队列末尾的数字，直到双端队列末尾的数字<strong>大于</strong>右边界新进入的数字（或者双端队列为空）。严格保证双端队列的单调性。</li>
<li>假如此时窗口的左边界向右移动导致窗口内有数字被移出窗口，那么此时将被移出窗口的数字与双端队列头部的数字（也就是此时窗口的最大值）比较，假如二者相同（是同一个index对应的数字），则弹出双端队列头部的数字，否则不管。</li>
<li>双端队列的信息实际上是<strong>假如此时滑动窗口的右边界不动，但是左边界前移，那么随着前移窗口中的最大值会是谁</strong></li>
<li> 实际上是用<u>下标大的大数字</u>替换<u>下标小的小数字</u><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2></li>
</ul>
</li>
<li><u>平均</u>每个时刻都是O(1)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getMaxWindow(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> w) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || w &lt; <span class="number">1</span> || arr.length &lt; w) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// qmax 窗口最大值的更新结构</span></span><br><span class="line">    <span class="comment">// 放下标</span></span><br><span class="line">    LinkedList&lt;Integer&gt; qmax = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length - w + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> R = <span class="number">0</span>; R &lt; arr.length; R++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!qmax.isEmpty() &amp;&amp; arr[qmax.peekLast()] &lt;= arr[R]) &#123;</span><br><span class="line">            qmax.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">        qmax.addLast(R);</span><br><span class="line">        <span class="keyword">if</span> (qmax.peekFirst() == R - w) &#123;</span><br><span class="line">            qmax.pollFirst();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (R &gt;= w - <span class="number">1</span>) &#123;</span><br><span class="line">            res[index++] = arr[qmax.peekFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-220-存在重复元素III"><a href="#leetcode-220-存在重复元素III" class="headerlink" title="leetcode 220. 存在重复元素III"></a>leetcode 220. 存在重复元素III</h2></li>
<li>注意需要维护的是一个滑动窗口中的所有元素的排列，要能<strong>迅速找到最小值和最大值，同时可以任意删除任何一个元素</strong>，使用cpp的<strong>有序集合</strong><code>set</code>实现<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        set&lt;<span class="keyword">int</span>&gt; rec;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> iter = rec.<span class="built_in">lower_bound</span>(<span class="built_in">max</span>(nums[i], INT_MIN + t) - t);</span><br><span class="line">            <span class="keyword">if</span> (iter != rec.<span class="built_in">end</span>() &amp;&amp; *iter &lt;= <span class="built_in">min</span>(nums[i], INT_MAX - t) + t) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rec.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">                rec.<span class="built_in">erase</span>(nums[i - k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>注意有序集合查找最小值和最大值的方法是<code>lower_bound</code>函数</li>
<li><code>set::lower_bound()</code> 是 C++ STL 中的一个内置函数，用于在集合中查找一个元素。它返回一个迭代器，指向集合中<strong>第一个大于等于指定值的元素</strong>。如果指定值大于集合中的最大值，则返回指向集合末尾的迭代器。该函数的时间复杂度为 O(logn)，其中 n 是集合的大小。</li>
</ul>
<h2 id="leetcode-209-长度最小的子数组"><a href="#leetcode-209-长度最小的子数组" class="headerlink" title="leetcode 209. 长度最小的子数组"></a>leetcode 209. 长度最小的子数组</h2><ul>
<li>此题因为必须是连续数组，而且是求和，因此考虑使用滑动窗口的方法解决<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minLen = INT_MAX;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;start&lt;&lt;&#x27; &#x27;&lt;&lt;end&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(sum&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(end == nums.<span class="built_in">size</span>()<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">                ++end;</span><br><span class="line">                sum+=nums[end];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(end-start+<span class="number">1</span>&lt;minLen)</span><br><span class="line">                &#123;</span><br><span class="line">                    minLen = end - start+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sum-=nums[start];</span><br><span class="line">                ++start;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(end&lt;nums.<span class="built_in">size</span>() &amp;&amp; end&gt;=start);</span><br><span class="line">        <span class="keyword">return</span> minLen == INT_MAX?<span class="number">0</span>:minLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>芯片的启动和bootLoader</title>
    <url>/2023/06/20/%E8%8A%AF%E7%89%87%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8CbootLoader/</url>
    <content><![CDATA[<h2 id="bootloader"><a href="#bootloader" class="headerlink" title="bootloader"></a>bootloader</h2><h3 id="8086芯片"><a href="#8086芯片" class="headerlink" title="8086芯片"></a>8086芯片</h3><ul>
<li>reset引脚跳变的时候</li>
<li>CS（代码段寄存器）和IP（指令指针寄存器）分别初始化为<code>0xffff</code>和<code>0x0000</code>，组合成一个20位的长度地址，再从这个地址跳转到其他地址<h3 id="ARM芯片"><a href="#ARM芯片" class="headerlink" title="ARM芯片"></a>ARM芯片</h3></li>
<li><img src="/imgs/57ec30a8f7250a218f23c72bb900a78037e9ac385daab274de33317068b72536.png" alt="picture 1">  </li>
<li>PC直接复位到0地址，然后从中断向量表的<code>Reset</code>位置获取下一步跳转的地址</li>
<li>直接将代码搬运到内存中执行</li>
<li>之后再以此为基础运行别的代码</li>
<li><strong>出场写好的，用于启动用户软件的软件称为boot ROM</strong><h3 id="修改这部分代码"><a href="#修改这部分代码" class="headerlink" title="修改这部分代码"></a>修改这部分代码</h3></li>
<li><img src="/imgs/8c6d30b382db21109c773da02af6dad393f8ce0facdcfa01fda580153fad2087.png" alt="picture 2">  <ul>
<li>大部分芯片是用外部电路手动配置的方式</li>
<li>拨码开关的信号会被记录下来控制部分启动信息</li>
<li>对于电脑而言就是<code>BIOS</code><h3 id="二次至多次引导代码-bootloader"><a href="#二次至多次引导代码-bootloader" class="headerlink" title="二次至多次引导代码(bootloader)"></a>二次至多次引导代码(bootloader)</h3></li>
</ul>
</li>
<li>一般<code>bootloader</code>是说这个<h4 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h4></li>
<li><code>boot rom</code>不够灵活</li>
<li>用户可控<code>bootloader</code></li>
<li>MCU<ul>
<li>单核或者多核同构</li>
<li>主频小于1GHz</li>
<li>没有MMU</li>
<li>最多运行RTOS</li>
<li><img src="/imgs/d0c62019ce7041521e0657170d70f385d735469755cb91e6ef6fdc5d6e85a12f.png" alt="picture 3">  </li>
<li>程序运行基本都是NOR Flash<ul>
<li>有分离的地址线和数据线</li>
<li>运行不需要拷贝到RAM中</li>
</ul>
</li>
<li>STM32的启动<ul>
<li>启动时会固定跳转到0地址位置</li>
<li>通过两个boot引脚控制启动的代码映射<ul>
<li>引脚01的时候可以映射system boot（arm中的boot rom）</li>
<li>第二位是0的时候，可以把存放用户代码的internal Flash映射到0</li>
<li>引脚11的时候将internal SRAM映射到0</li>
</ul>
</li>
</ul>
</li>
<li>boot loader需要完成的任务<ul>
<li>关闭看门狗，初始化中断和trap向量表，进行时钟和外设初始化，让芯片正常运行起来</li>
<li>提供CAN、UART、ETH等用于通讯功能的驱动，能够接收外部数据传输请求</li>
<li>提供FLASH的读写与擦除驱动，设计服务来对通讯端口接收到的更新代码进行校验、存储，以及跳转操作系统或后续应用程序代码</li>
<li>如有必要，还会开发一些基础诊断服务，串口交互程序等等</li>
</ul>
</li>
</ul>
</li>
<li>嵌入式Linux的SoC和计算机<ul>
<li>系统一般存储在NAND Flash中（计算机一般是硬盘），运行前需要先将代码搬运到SRAM中</li>
<li>主要任务就是将代码从NAND Flash或者硬盘中搬运到SRAM中</li>
<li>转移的这部分内容就是<code>bootloader</code></li>
<li>转移的内容包括SPL和uBoot<ul>
<li>SPL是接力赛中的第二棒，初始化更大的外部DRAM，再将uBoot搬运到外部RAM中运行</li>
<li>uBoot运行初始化程序，再将系统环境变量将OS内核搬运到DRAM中执行</li>
<li>OS再完成根文件系统的加载等等<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li>
</ul>
</li>
</ul>
</li>
<li>boot rom<ul>
<li>硬件自检，部分初始化，提供外部配置引脚</li>
</ul>
</li>
<li>自己写的boot loader<ul>
<li>可以访问外部RAM，NAND Flash</li>
<li>初始化时钟，通讯等</li>
<li>接收，存储以及跳转代码</li>
</ul>
</li>
<li>application层<ul>
<li>操作系统，文件系统</li>
<li>用户应用程序</li>
<li>方便更新</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>内核</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Cube新建项目使用UART编译出错的问题</title>
    <url>/2022/01/06/%E8%A7%A3%E5%86%B3Cube%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8UART%E7%BC%96%E8%AF%91%E5%87%BA%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决Cube新建项目使用UART编译出错的问题"><a href="#解决Cube新建项目使用UART编译出错的问题" class="headerlink" title="解决Cube新建项目使用UART编译出错的问题"></a>解决Cube新建项目使用UART编译出错的问题</h1><p>注意<code>stm32f4xx_hal_conf.h</code>中有一些宏定义</p>
<p><img src="/imgs/image-20220106220834007.png" alt="image-20220106220834007"></p>
<p>此处可能是系统没有将<code>#define HAL_UART_MODULE_ENABLED   </code>取消注释，此处自己删除注释即可正常编译</p>
<p><img src="/imgs/image-20220106220934356.png" alt="image-20220106220934356"></p>
]]></content>
  </entry>
  <entry>
    <title>解决C语言变量被重复定义错误的问题</title>
    <url>/2021/12/17/%E8%A7%A3%E5%86%B3C%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E8%A2%AB%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决C语言变量被重复定义错误的问题"><a href="#解决C语言变量被重复定义错误的问题" class="headerlink" title="解决C语言变量被重复定义错误的问题"></a>解决C语言变量被重复定义错误的问题</h1><h2 id="头文件编译的原理"><a href="#头文件编译的原理" class="headerlink" title="头文件编译的原理"></a>头文件编译的原理</h2><ul>
<li>在每次头文件被某个.c文件include的时候，头文件头会被插入到代码中<code>#include &quot;xxx.h&quot;</code>的位置，假如在头文件中定义了变量，然后这个头文件被多个.c文件同时Include的话，就会导致头文件中的变量以同样的名称被定义多次。因此产生错误</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>就是在定义该变量的.c文件的头文件中（或者需要用到在其他.c文件中定义的变量的文件中）给对应的变量加<code>extern</code>关键字定义，此时会意味着这个变量是在其他位置被定义的，在此处仅仅是声明一下，而不是定义，也不分配内存空间。此时在该文件被其他.c文件Include的时候，就不会使得变量被定义多次。</li>
<li>或者使用<code>#ifndef</code>，<code>#define XX</code>，<code>#endif</code>防止if块中的内容被定义多次。</li>
</ul>
<h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><ul>
<li><p>C语言中两种方式使用#include命令,<code> #include &lt;&gt;</code>与<code>#include ””</code>的区别</p>
</li>
<li><p>一种是在包含指令<code>#include</code>后面”&lt;&gt;”将头文件名括起来。这种方式用于<strong>标准或系统提供</strong>的头文件，到保存系统标准头文件的位置查找头文件。</p>
</li>
<li><p>另一种是在包含指令<code>#include</code>后用双引号””将头文件包括起来。这种方式常用与<strong>程序员自己的头文件</strong>。用这种格式时，C编译器先查找当前目录是否有指定名称的头文件，然后在从标准头文件目录中查找。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>解决VMwareTools安装了仍然不能实现虚拟机和主机复制粘贴的问题</title>
    <url>/2022/09/17/%E8%A7%A3%E5%86%B3VMwareTools%E5%AE%89%E8%A3%85%E4%BA%86%E4%BB%8D%E7%84%B6%E4%B8%8D%E8%83%BD%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="解决VMwareTools安装了仍然不能实现虚拟机和主机复制粘贴的问题"><a href="#解决VMwareTools安装了仍然不能实现虚拟机和主机复制粘贴的问题" class="headerlink" title="解决VMwareTools安装了仍然不能实现虚拟机和主机复制粘贴的问题"></a>解决VMwareTools安装了仍然不能实现虚拟机和主机复制粘贴的问题</h2><ul>
<li>Ubuntu版本：<code>18.04</code></li>
<li>先尝试使用VMware提供的安装方法（从插入的CD驱动器中安装包）</li>
<li><strong>失败解决办法</strong><ul>
<li>命令行输入<code>sudo apt-get autoremove open-vm-tools</code></li>
<li>然后使用<code>sudo apt-get install open-vm-tools-desktop</code></li>
<li>假如安装不上的话就执行<code>sudo apt-get update</code>和<code>sudo apt-get install open-vm-tools-desktop fuse</code>两句命令，但是实际上直接update之后就可以安装了</li>
<li>然后重启虚拟机，尝试拖放和粘贴文字操作已经可行</li>
</ul>
</li>
<li>参考链接<ul>
<li><a href="https://www.cnblogs.com/zhouzhihao/p/16486787.html">参考</a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Windows下Powershell无法执行脚本无法运行conda的问题</title>
    <url>/2023/06/30/%E8%A7%A3%E5%86%B3Windows%E4%B8%8BPowershell%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cconda%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决Windows下Powershell无法执行脚本或者无法运行conda指令的问题"><a href="#解决Windows下Powershell无法执行脚本或者无法运行conda指令的问题" class="headerlink" title="解决Windows下Powershell无法执行脚本或者无法运行conda指令的问题"></a>解决Windows下Powershell无法执行脚本或者无法运行conda指令的问题</h1><ul>
<li>报错：<ul>
<li><img src="/imgs/ec0ce3a3276e41b0a7f11baf2d2b6179554a375156cb73f2a218c518eeda6c32.png" alt="picture 1">  </li>
</ul>
</li>
<li><a href="https://blog.csdn.net/weixin_43939392/article/details/123537132">参考</a></li>
<li>在当前powershell中输入<code>get-ExecutionPolicy</code>查看，一般结果是<code>Restricted</code></li>
<li>输入<code>Set-ExecutionPolicy -Scope CurrentUser</code></li>
<li>输入<code>RemoteSigned</code>切换模式</li>
<li>然后重启powershell即可</li>
<li>此时假如遇到<code>conda</code>命令无法执行的问题，只需要<code>conda init powershell</code>然后重启即可</li>
</ul>
]]></content>
      <tags>
        <tag>powershell</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>贝叶斯回归</title>
    <url>/2022/10/16/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/436569049">参考链接</a><br><a href="https://www.zhihu.com/people/tao-tie-wen-10/posts">总链接</a></p>
]]></content>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title>解决因为重刷系统导致的key校验不通过VSCode无法远程Linux</title>
    <url>/2023/04/03/%E8%A7%A3%E5%86%B3%E5%9B%A0%E4%B8%BA%E9%87%8D%E5%88%B7%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%87%B4%E7%9A%84key%E6%A0%A1%E9%AA%8C%E4%B8%8D%E9%80%9A%E8%BF%87VSCode%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8BLinux/</url>
    <content><![CDATA[<ul>
<li>查看文件<code>C:\\Users\\用户名/.ssh/known_hosts</code></li>
<li>删除对应IP地址对应的key</li>
<li>然后即可像连接没链接过的机器一样链接，不会报错</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>远程</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Linux开机启动脚本</title>
    <url>/2022/01/12/%E9%85%8D%E7%BD%AELinux%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="配置Linux开机启动脚本"><a href="#配置Linux开机启动脚本" class="headerlink" title="配置Linux开机启动脚本"></a>配置Linux开机启动脚本</h1><p>Linux开机启动脚本一般在<code>/etc/rc.d</code>目录下或者是<code>/etc</code>下的<code>rc.local</code>文件，此时使用vim工具在其后新增文本内容，执行用户指定的<code>.sh</code>脚本即可</p>
<p><img src="/imgs/image-20220112173132465.png" alt="image-20220112173132465"></p>
<p>在<code>exit 0</code>之前，添加下面两行脚本</p>
<p><img src="/imgs/image-20220112173302603.png" alt="image-20220112173302603"></p>
<p>第一行起到提示的作用，第二行开始执行对应的脚本，再次之前确定具有执行脚本的权限（<code>x</code>权限）。执行效果：</p>
<p><img src="/imgs/image-20220112180339588.png" alt="image-20220112180339588"></p>
<p>可见开机已经自动执行脚本</p>
]]></content>
  </entry>
  <entry>
    <title>配置开发板通过网线连接本机WSL虚拟机</title>
    <url>/2022/07/27/%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E6%9D%BF%E9%80%9A%E8%BF%87%E7%BD%91%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%9C%AC%E6%9C%BAWSL%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="配置开发板通过网线连接本机WSL虚拟机"><a href="#配置开发板通过网线连接本机WSL虚拟机" class="headerlink" title="配置开发板通过网线连接本机WSL虚拟机"></a>配置开发板通过网线连接本机WSL虚拟机</h1><ul>
<li><p>开发板先正常启动到Linux系统方便调试</p>
</li>
<li><p>开发板用上面的网线接口连接到计算机的网口</p>
</li>
<li><p>此时在计算机Windows端命令行输入<code>ipconfig</code>可以看到“以太网”具有相应的IP地址等信息</p>
</li>
<li><p>打开WSL虚拟机</p>
</li>
<li><p>在WSL虚拟机使用<code>ifconfig</code>命令查看虚拟机的网络配置，IP地址，子网掩码，广播地址等等</p>
</li>
<li><p><img src="/imgs/61f4265dbfff438355aad4fbe7486a2eafda4b901f1dc691ab19f9d533f457b0.png" alt="图 1">  </p>
</li>
<li><p>虚拟机使用<code>netstat -rn</code>命令查看网关</p>
</li>
<li><p><img src="/imgs/4c7645d1ddf70738ba0b2481e06e64ba824a9cf41d4df016ae1d27d57c2c3747.png" alt="图 2">  </p>
</li>
<li><p>看到内核路由表的第一条的Gateway就是网关信息</p>
</li>
<li><p><strong>此时WSL处在NAT模式，没有开启桥接</strong></p>
</li>
<li><p>使用命令<code>Get-NetAdapter</code>查看网络设备</p>
</li>
<li><p>使用命令<code>Set-VMSwitch WSL -NetAdapterName &lt;桥接到的网卡名称&gt;</code>桥接WSL与以太网，如下(直接输入中文“以太网”即可)</p>
</li>
<li><p><img src="/imgs/ec8dfe21ae9cf0d454518137d0a9b8c4ac8759f610575c1012027702b0fbc280.png" alt="图 3">  </p>
</li>
<li><p>复位开发板，按下键盘打断Uboot启动Linux</p>
</li>
<li><p>使用Uboot的如下命令设置网络并保存环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenv ipaddr &lt;与WSL虚拟机在同一子网下的另一个IP地址&gt;</span><br><span class="line">setenv gatewayip &lt;WSL虚拟机上看到的网关&gt;</span><br><span class="line">setenv netmask &lt;WSL虚拟机看到的子网掩码&gt;</span><br><span class="line">setenv serverip &lt;WSL虚拟机上ifconfig看到的IP地址&gt;</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure></li>
<li><p>然后尝试ping WSL虚拟机IP（也就是在WSL中ifconfig看到的IP）</p>
</li>
<li><p><img src="/imgs/5aa9ff0c921acd969021449f60b49a85e3d9597b1ed0c42f285dac9fb217856c.png" alt="图 4">  </p>
</li>
<li><p>然后开始使用tftp传输Linux内核</p>
</li>
<li><p><img src="/imgs/7aca547914f9f4056cbb698df2d99ecef6131cf615739af5b4c324fce75ade36.png" alt="图 5">  </p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>配置WSL2为桥接模式（原来是NAT模式）</title>
    <url>/2022/07/26/%E9%85%8D%E7%BD%AEWSL2%E4%B8%BA%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8E%9F%E6%9D%A5%E6%98%AFNAT%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<h1 id="配置WSL2为桥接模式（原来是NAT模式）"><a href="#配置WSL2为桥接模式（原来是NAT模式）" class="headerlink" title="配置WSL2为桥接模式（原来是NAT模式）"></a>配置WSL2为桥接模式（原来是NAT模式）</h1><ul>
<li><p>配置为<strong>桥接模式</strong>之后局域网中的设备就可以<strong>直接访问WSL</strong>，不需要借助电脑的端口转发</p>
</li>
<li><p>首先在命令行（具有<strong>管理员权限</strong>）中输入<code>Get-NetAdapter</code>，查看电脑的网卡情况（此时可能看不到WSL的虚拟网卡）</p>
</li>
<li><p><img src="/imgs/2a1e4199284bb6f34b17e59acd90a47457a8270692ad41ad95f55a44156d3789.png" alt="图 1">  </p>
</li>
<li><p>然后使用命令<code>Set-VMSwitch WSL -NetAdapterName &lt;桥接到的网卡名称&gt;</code>，将其中的尖括号部分替换为需要桥接到的网卡，比如<strong>WLAN</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-VMSwitch WSL -NetAdapterName WLAN</span><br></pre></td></tr></table></figure></li>
<li><p>然后再次使用<code>Get-NetAdapter</code>，输出如下</p>
</li>
<li><p><img src="/imgs/8ace140dd419539ff686b785950ad0bdf57c82012717a7bac6b33975b722d621.png" alt="图 2">  </p>
</li>
<li><p>可见增加了基于Hyper-V的WSL虚拟网卡</p>
</li>
<li><p>然后使用Windows的<code>ipconfig</code>查询计算机的网关等信息，同时在设置中查看计算机的DNS等信息，然后使用这些信息配置WSL的网络</p>
</li>
<li><p><img src="/imgs/10c4b7c405b29480c2d8b5b872eb6d84c2b5755f0cde537de5765af517962dcf.png" alt="图 4">  </p>
</li>
<li><p><img src="/imgs/90b8d5543f1531f630d77bea20a2c514681f8a4be4d7bd5f90f017df9811201e.png" alt="图 5">  </p>
</li>
<li><p>使用如下命令配置WSL的网络（WSL中）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ip addr del $(ip addr show eth0 | grep <span class="string">&#x27;inet\b&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | head -n 1) dev eth0</span><br><span class="line">sudo ip addr add &lt;需要设置的IP地址&gt;/24 broadcast &lt;局域网广播地址（一般是网络号.网络号.网络号.255）&gt; dev eth0</span><br><span class="line">sudo ip route add 0.0.0.0/0 via &lt;默认网关&gt; dev eth0</span><br></pre></td></tr></table></figure></li>
<li><p>然后WSL<code>ping</code>百度可以ping通</p>
</li>
<li><p><img src="/imgs/211a40fcd4e0364e16eff2edf904fa5feb73b3093a1105796ae967d2c1965262.png" alt="图 6">  </p>
</li>
<li><p>Windows<code>ping</code>WSL的IP也可以<code>ping</code>通</p>
</li>
<li><p><img src="/imgs/4742d27c3fd93d8907e7b0a501ac471f5c9876026ba066418a1faec43a047045.png" alt="图 7">  </p>
</li>
<li><p>参考链接 </p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/488442403">知乎</a> </li>
<li><a href="https://blog.csdn.net/chubbykkk/article/details/125216708">csdn</a></li>
</ul>
</li>
<li><p><strong>注意这样实际上是整个电脑通过WSL的网卡在上网，使用的就是主机的IP地址</strong></p>
<h2 id="更改WSL为桥接模式之后远程显示的问题"><a href="#更改WSL为桥接模式之后远程显示的问题" class="headerlink" title="更改WSL为桥接模式之后远程显示的问题"></a>更改WSL为桥接模式之后远程显示的问题</h2></li>
<li><p>因为更改WSL为桥接模式之后，WSL变为局域网下与Windows平级的设备，所以需要重新配置<code>.bashrc</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>找到这一行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=&lt;IP地址&gt;:0</span><br></pre></td></tr></table></figure></li>
<li><p>将这一行中尖括号的部分修改为<strong>计算机在局域网中的IP地址</strong>然后即可继续使用WSL桌面（比如<code>startxfce4</code>）</p>
</li>
<li><p><img src="/imgs/6ceb41155c3d371a919243c79169702e60f5b5bd66864aba5360198b3dc84a3d.png" alt="图 8">  </p>
<h2 id="修改DNS服务器"><a href="#修改DNS服务器" class="headerlink" title="修改DNS服务器"></a>修改DNS服务器</h2><p>您可以通过以下步骤在WSL中设置DNS服务器：</p>
</li>
<li><p>启动WSL，进入目录，创建<code>wsl.conf</code>文件。例如，您可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/../../etc</span><br><span class="line">sudo vim wsl.conf</span><br><span class="line">sudo touch wsl.conf</span><br></pre></td></tr></table></figure></li>
<li><p>将这些行添加到wsl.conf中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf=false</span><br></pre></td></tr></table></figure></li>
<li><p>退出WSL，关闭WSL。您可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></li>
<li><p>此时，由于有了wsl.conf，run/resolvconf应该不再存在，并且将不再被创建。</p>
</li>
<li><p>删除现有的符号链接文件。例如，您可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/../../etc</span><br><span class="line">sudo rm resolv.conf</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个新的resolv.conf文件。例如，您可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim resolv.conf</span><br><span class="line">sudo touch resolv.conf</span><br></pre></td></tr></table></figure></li>
<li><p>将自己的DNS添加到resolv.conf中。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure></li>
<li><p>其中<code>8.8.8.8</code>是您想要使用的DNS服务器地址。</p>
</li>
<li><p>重启WSL。您可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></li>
<li><p>再次启动WSL</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>链表相关题目题解</title>
    <url>/2022/01/24/%E9%93%BE%E8%A1%A8%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="链表相关题目题解"><a href="#链表相关题目题解" class="headerlink" title="链表相关题目题解"></a>链表相关题目题解</h1><h2 id="返回链表倒数第k个元素"><a href="#返回链表倒数第k个元素" class="headerlink" title="返回链表倒数第k个元素"></a>返回链表倒数第k个元素</h2><ul>
<li>快慢指针，<strong>第一个指针先移动k步，然后第二个指针再从头开始，这个时候这两个指针同时移动，当第一个指针到链表的末尾的时候，返回第二个指针即可</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function">def <span class="title">FindKthToTail</span><span class="params">(self , pHead , k )</span>:</span></span><br><span class="line"><span class="function">        <span class="meta"># write code here</span></span></span><br><span class="line"><span class="function">        # 快慢指针</span></span><br><span class="line"><span class="function">        fast </span>= pHead</span><br><span class="line">        slow = pHead</span><br><span class="line">        # 快指针先走k步</span><br><span class="line">        <span class="keyword">for</span> i in range(<span class="number">0</span>, k):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fast:</span><br><span class="line">                <span class="keyword">return</span> None</span><br><span class="line">            fast = fast.next</span><br><span class="line">        # 双指针同时行走</span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            fast = fast.next</span><br><span class="line">            slow = slow.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>栈</strong>。把原链表的结点全部压栈，然后再把栈中最上面的k个节点出栈，出栈的结点重新串成一个新的链表即可</p>
</li>
<li><p><img src="/../imgs/image-20220124130552601.png" alt="image-20220124130552601"></p>
</li>
</ul>
<h2 id="链表反序"><a href="#链表反序" class="headerlink" title="链表反序"></a>链表反序</h2><ul>
<li>直接遍历</li>
<li>递归</li>
</ul>
<h2 id="链表公共节点"><a href="#链表公共节点" class="headerlink" title="链表公共节点"></a>链表公共节点</h2><ul>
<li><p>给定两个单链表<code>A，B</code>，假设一定含有公共结点，返回第一个公共结点的指针。</p>
</li>
<li><p>双指针</p>
</li>
<li><p><img src="/../imgs/image-20220124132357395.png" alt="image-20220124132357395"></p>
</li>
<li><p><img src="/../imgs/image-20220124132433562.png" alt="image-20220124132433562"></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">FindFirstCommonNode</span><span class="params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;</span><br><span class="line">        ListNode *ta = pHead1, *tb = pHead2;</span><br><span class="line">        <span class="keyword">while</span> (ta != tb) &#123;</span><br><span class="line">            ta = ta ? ta-&gt;next : pHead2;</span><br><span class="line">            tb = tb ? tb-&gt;next : pHead1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>上述代码是从第一个链表的尾部循环到第二个链表的头部，第二个链表从尾部循环到第一个链表的头部，<strong>相当于是把一个链表完整的连接在了另一个后面构成一个长度为m+n的新的链表，长度相等，而且保留原来的相同的节点</strong></li>
</ul>
<h2 id="找带环链表的入口位置"><a href="#找带环链表的入口位置" class="headerlink" title="找带环链表的入口位置"></a>找带环链表的入口位置</h2><ul>
<li><p>返回带有环的链表的环的入口节点</p>
</li>
<li><p><img src="/../imgs/image-20220124134956992.png" alt="image-20220124134956992"></p>
</li>
<li><p>理解：假设从开始到相遇位置的总距离是x+y，x是直线距离，y是在环上的距离，那么此时快指针走过的路径长度是2（x+y），也就意味着环上<strong>剩余的长度为x+y</strong>,此时将其中一个指针移动到头部，另一个保持在原地，二者都按照1的步长运动，走到入口节点的距离是<strong>相同</strong>的都是x+y，所以必定会在环的入口相遇</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="literal">nullptr</span> || fast-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">- 相似的思路适用于Leetcode <span class="number">287.</span> 寻找重复数，寻找一个数字范围与数组长度相同的列表中的某一个（只有一个）重复数字。</span><br></pre></td></tr></table></figure>

<h2 id="leetcode-146-LRU缓存"><a href="#leetcode-146-LRU缓存" class="headerlink" title="leetcode 146. LRU缓存"></a>leetcode 146. LRU缓存</h2><ul>
<li>实现一个在容量上限达到之后弹出上次使用时间到现在最长的缓存项目的数据结构<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cacheLine</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    cacheLine* next;</span><br><span class="line">    cacheLine* prev;</span><br><span class="line">    <span class="built_in">cacheLine</span>(<span class="keyword">int</span> b, <span class="keyword">int</span> a):<span class="built_in">value</span>(a), <span class="built_in">key</span>(b), <span class="built_in">next</span>(<span class="literal">NULL</span>), <span class="built_in">prev</span>(<span class="literal">NULL</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> capa;</span><br><span class="line">    <span class="keyword">int</span> usedCnt;</span><br><span class="line">    cacheLine* head;</span><br><span class="line">    cacheLine* tail;</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, cacheLine*&gt; m;</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        capa = capacity;</span><br><span class="line">        usedCnt = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="built_in">cacheLine</span>(<span class="number">-999</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">count</span>(key))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(usedCnt&gt;<span class="number">1</span>&amp;&amp;m[key]-&gt;prev != head)</span><br><span class="line">            &#123;</span><br><span class="line">                cacheLine* temp = head-&gt;next;</span><br><span class="line">                cacheLine* thisNode = m[key];</span><br><span class="line">                <span class="keyword">if</span>(thisNode == tail)</span><br><span class="line">                &#123;</span><br><span class="line">                    tail = tail-&gt;prev;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(thisNode-&gt;next)</span><br><span class="line">                &#123;</span><br><span class="line">                    thisNode-&gt;next-&gt;prev = thisNode-&gt;prev;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">                thisNode-&gt;prev-&gt;next = thisNode-&gt;next;</span><br><span class="line">                head-&gt;next = thisNode;</span><br><span class="line">                </span><br><span class="line">                thisNode-&gt;next = temp;</span><br><span class="line">                thisNode-&gt;prev = head;</span><br><span class="line">                temp-&gt;prev = thisNode;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(temp)</span><br><span class="line">                    thisNode-&gt;next-&gt;prev =thisNode;</span><br><span class="line">                <span class="keyword">return</span> thisNode-&gt;value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> m[key]-&gt;value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m.<span class="built_in">count</span>(key))</span><br><span class="line">        &#123;</span><br><span class="line">            m[key]-&gt;value = value;</span><br><span class="line">            <span class="built_in">get</span>(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(usedCnt&gt;<span class="number">0</span> &amp;&amp; usedCnt&lt;capa)</span><br><span class="line">        &#123;</span><br><span class="line">            cacheLine* temp = head-&gt;next;</span><br><span class="line">            cacheLine* newNode = <span class="keyword">new</span> <span class="built_in">cacheLine</span>(key, value);</span><br><span class="line">            temp-&gt;prev = newNode;</span><br><span class="line">            head-&gt;next = newNode;</span><br><span class="line">            newNode-&gt;prev = head;</span><br><span class="line">            newNode-&gt;next = temp;</span><br><span class="line">            m[key] = head-&gt;next;</span><br><span class="line">            ++usedCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(usedCnt == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head-&gt;next = <span class="keyword">new</span> <span class="built_in">cacheLine</span>(key, value);</span><br><span class="line">            m[key] = head-&gt;next;</span><br><span class="line">            head-&gt;next-&gt;prev = head;</span><br><span class="line">            tail = head-&gt;next;</span><br><span class="line">            ++usedCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(usedCnt&gt;<span class="number">1</span> &amp;&amp; usedCnt == capa)</span><br><span class="line">        &#123;</span><br><span class="line">            m.<span class="built_in">erase</span>(m.<span class="built_in">find</span>(tail-&gt;key));</span><br><span class="line">            tail-&gt;key = key;</span><br><span class="line">            tail-&gt;value = value;</span><br><span class="line">            m[key] = tail;</span><br><span class="line">            <span class="built_in">get</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m.<span class="built_in">erase</span>(m.<span class="built_in">find</span>(tail-&gt;key));</span><br><span class="line">            tail-&gt;key = key;</span><br><span class="line">            tail-&gt;value = value;</span><br><span class="line">            m[key] = tail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache* obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;get(key);</span></span><br><span class="line"><span class="comment"> * obj-&gt;put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="链表选择排序"><a href="#链表选择排序" class="headerlink" title="链表选择排序"></a>链表选择排序</h2></li>
<li>注意处理链表尾部和头部的问题</li>
<li>建立一个假头部<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">insertionSortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dumHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(INT_MIN);</span><br><span class="line">        dumHead-&gt;next = head;</span><br><span class="line">        ListNode* newHead = dumHead, *cur = head;</span><br><span class="line">        <span class="keyword">int</span> minVal = INT_MAX;</span><br><span class="line">        ListNode* prevOfMin;</span><br><span class="line">        <span class="keyword">while</span>(newHead-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = newHead;</span><br><span class="line">            <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(cur-&gt;next-&gt;val&lt;minVal)</span><br><span class="line">                &#123;</span><br><span class="line">                    prevOfMin = cur;</span><br><span class="line">                    minVal = cur-&gt;next-&gt;val;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            minVal = INT_MAX;</span><br><span class="line">            <span class="keyword">if</span>(prevOfMin == newHead)</span><br><span class="line">            &#123;</span><br><span class="line">                newHead = newHead-&gt;next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ListNode* temp = newHead-&gt;next, *temp2 = prevOfMin-&gt;next-&gt;next;</span><br><span class="line">            newHead-&gt;next = prevOfMin-&gt;next;</span><br><span class="line">            prevOfMin-&gt;next-&gt;next = temp;</span><br><span class="line">            </span><br><span class="line">            prevOfMin-&gt;next = temp2;</span><br><span class="line">            <span class="keyword">if</span>(newHead-&gt;next)</span><br><span class="line">            newHead = newHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="链表插入排序"><a href="#链表插入排序" class="headerlink" title="链表插入排序"></a>链表插入排序</h2><ul>
<li>注意首先选择一个元素作为要插入的元素（保存这个元素的上一个元素这样方便修改，否则无法修改）</li>
<li>注意没找到插入点的处理方法<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">insertionSortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* dumHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(INT_MIN);</span><br><span class="line">        dumHead-&gt;next = head;</span><br><span class="line">        ListNode* cur, *pick = dumHead-&gt;next;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(pick-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = dumHead;</span><br><span class="line">            <span class="keyword">while</span>((cur-&gt;next)&amp;&amp;(cur-&gt;next!=pick-&gt;next)&amp;&amp;(cur-&gt;next-&gt;val&lt;=pick-&gt;next-&gt;val))</span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next == pick-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                pick = pick-&gt;next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode* temp = cur-&gt;next;</span><br><span class="line">            ListNode*temp2 = pick-&gt;next-&gt;next;</span><br><span class="line">            cur-&gt;next = pick-&gt;next;</span><br><span class="line">            pick-&gt;next = temp2;</span><br><span class="line">            cur-&gt;next-&gt;next = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumHead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode-206-反转链表"><a href="#Leetcode-206-反转链表" class="headerlink" title="Leetcode 206.反转链表"></a>Leetcode 206.反转链表</h2></li>
<li>注意从堆中pop出来的时候可能会导致节点内存被释放，因此需要用自己创建的节点重建链表<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head)<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        stack&lt;ListNode*&gt; s;</span><br><span class="line">        ListNode *cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* temp = <span class="keyword">new</span> <span class="built_in">ListNode</span>(s.<span class="built_in">top</span>()-&gt;val), *newHead = temp;</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span>(s.<span class="built_in">size</span>()&amp;&amp;temp)</span><br><span class="line">        &#123;</span><br><span class="line">            temp-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(s.<span class="built_in">top</span>()-&gt;val);</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;temp-&gt;val&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-202-快乐数"><a href="#Leetcode-202-快乐数" class="headerlink" title="Leetcode 202. 快乐数"></a>Leetcode 202. 快乐数</h2><ul>
<li>用快慢指针的方法，一个指针一次走两步，一个一次走一步<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bitSquareSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> bit = n % <span class="number">10</span>;</span><br><span class="line">            sum += bit * bit;</span><br><span class="line">            n = n / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = n, fast = n;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            slow = <span class="built_in">bitSquareSum</span>(slow);</span><br><span class="line">            fast = <span class="built_in">bitSquareSum</span>(fast);</span><br><span class="line">            fast = <span class="built_in">bitSquareSum</span>(fast);</span><br><span class="line">        &#125;<span class="keyword">while</span>(slow != fast);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slow == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxSocket编程</title>
    <url>/2022/01/30/LinuxSocket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Linux-Socket编程"><a href="#Linux-Socket编程" class="headerlink" title="Linux Socket编程"></a>Linux Socket编程</h1><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ul>
<li>套接字（socket）是 Linux 下的一种进程间通信机制（socket IPC），在前面的内容中已经给大家提到过， <strong>使用 socket IPC 可以使得在不同主机上的应用程序之间进行通信</strong>（网络通信），当然也可以是<strong>同一台主机上 的不同应用程序</strong>。socket IPC 通常使用客户端&lt;—&gt;服务器这种模式完成通信，多个客户端可以同时连接到服务器中，与服务器之间完成数据交互。</li>
<li>当前网络中的主流程序设计都是使用 socket 进行编程的，因为它简单易用，它还是一个标准（BSD  socket），能在不同平台很方便移植，比如你的一个应用程序是基于 socket 接口编写的，那么它可以移植到 任何实现 BSD socket 标准的平台，譬如 LwIP，它兼容 BSD Socket；又譬如 Windows，它也实现了一套基于 socket 的套接字接口，更甚至在国产操作系统中，如 RT-Thread，它也实现了 BSD socket 标准的 socket 接 口。</li>
</ul>
<h2 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h2><h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span> <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a>socket()函数</h4><ul>
<li>socket()函数类似于 open()函数，它用于创建一个网络通信端点（打开一个网络通信），如果成功则返回 一个网络文件描述符，通常把这个文件描述符称为 socket 描述符（socket descriptor），这个 socket 描述符跟 文件描述符一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span> <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数 domain 用于指定一个通信域；这将选择将用于通信的协议族。可选的协议族如下表所示</p>
<ul>
<li><p><img src="/imgs/image-20220130165700332.png" alt="image-20220130165700332"></p>
</li>
<li><p><img src="/imgs/image-20220130165812152.png" alt="image-20220130165812152"></p>
</li>
<li><p>对于 TCP/IP 协议来说，通常选择 <strong>AF_INET</strong> 就可以了，当然如果你的 IP 协议的版本支持 IPv6，那么可 以选择 <strong>AF_INET6</strong>。</p>
</li>
</ul>
</li>
<li><p>参数 type 指定套接字的类型，当前支持的类型有</p>
<ul>
<li><img src="/imgs/image-20220130165859271.png" alt="image-20220130165859271"></li>
</ul>
</li>
<li><p>参数 protocol 通常设置为 0，表示为给定的通信域和套接字类型选择默认协议。当对同一域和套接字类 型支持多个协议时，可以使用 protocol 参数选择一个特定协议。在 AF_INET 通信域中，套接字类型为 SOCK_STREAM 的默认协议是传输控制协议（Transmission Control Protocol，TCP 协议）。在 AF_INET 通 信域中，套接字类型为 SOCK_DGRAM 的默认协议时 UDP。</p>
</li>
<li><p>调用 socket()与调用 open()函数很类似，调用成功情况下，均会返回用于文件 I/O 的文件描述符，只不 过对于 socket()来说，其<strong>返回的文件描述符一般称为 socket 描述符</strong>。当不再需要该文件描述符时，可调用 close()函数来关闭套接字，释放相应的资源。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//打开套接字</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt; socket_fd) &#123;</span><br><span class="line">     perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">close(socket_fd); <span class="comment">//关闭套接字</span></span><br></pre></td></tr></table></figure>

<h4 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind()函数"></a>bind()函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>bind()函数用于将一个 IP 地址或端口号与一个套接字进行绑定（将套接字与地址进行关联）。</li>
<li>一般来讲，会将一个服务器的 套接字绑定到一个众所周知的地址—即一个固定的与服务器进行通信的客户端应用程序提前就知道的地址 （注意这里说的地址包括 IP 地址和端口号）。因为对于客户端来说，它与服务器进行通信，首先需要知道 服务器的 IP 地址以及对应的端口号，所以通常服务器的 IP 地址以及端口号都是众所周知的。</li>
<li>参数 addr 是一个指针，指向一个 struct sockaddr 类型变量</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"> 	<span class="keyword">sa_family_t</span> sa_family;</span><br><span class="line"> 	<span class="keyword">char</span> sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>第二个成员 sa_data 是一个 char 类型数组，一共 14 个字节，在这 14 个字节中就包括了 IP 地址、端口 号等信息，这个结构对用户并不友好，它把这些信息都封装在了 sa_data 数组中，这样使得用户是无法对 sa_data 数组进行赋值。事实上，这是一个通用的 socket 地址结构体。</li>
<li>一般我们在使用的时候都会使用 struct sockaddr_in 结构体，sockaddr_in 和 sockaddr 是<strong>并列的结构</strong>（<strong>占 用的空间是一样的</strong>），<strong>指向 sockaddr_in 的结构体的指针也可以指向 sockadd 的结构体，并代替它</strong>，而且 sockaddr_in 结构对用户将更加友好，在使用的时候进行类型转换就可以了。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line"> <span class="keyword">sa_family_t</span> sin_family; <span class="comment">/* 协议族 */</span></span><br><span class="line"> <span class="keyword">in_port_t</span> sin_port; <span class="comment">/* 端口号 */</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">/* IP 地址 */</span></span><br><span class="line"> <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="listen-函数"><a href="#listen-函数" class="headerlink" title="listen()函数"></a>listen()函数</h4><ul>
<li>listen()函数只能在服务器进程中使用，让服务器进程进入监听状态，等待客户端的连接请求，listen()函 数在一般在 bind()函数之后调用，在 accept()函数之前调用</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 backlog 用来描述 sockfd 的等待连接队列能够达到的最大值。在服务器进程正处理客户端连接请 求的时候，可能还存在其它的客户端请求建立连接，因为 TCP 连接是一个过程，由于同时尝试连接的用户 过多，使得服务器进程<strong>无法快速地完成所有的连接请求</strong>.因此<strong>内核会在自己的进程空间里维护一个队列</strong>，这些连接请求就会被放入一个队 列中，服务器进程会按照先来后到的顺序去处理这些连接请求，这样的一个队列内核不可能让其任意大，所 以必须有一个大小的上限，这个 backlog 参数告诉内核使用这个数值作为队列的上限。而当一个客户端的连接请求到达并且该队列为满时，客户端可能会收到一个表示连接失败的错误，本次请求会被丢弃不作处理。</li>
</ul>
<h4 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept()函数"></a>accept()函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>服务器流程</p>
<ul>
<li>调用 socket()函数打开套接字；</li>
<li>调用 bind()函数将套接字与一个端口号以及 IP 地址进行绑定；</li>
<li>调用 listen()函数让服务器进程进入监听状态，监听客户端的连接请求；</li>
<li>调用 accept()函数处理到来的连接请求。</li>
</ul>
</li>
<li><p>accept()函数通常只用于服务器应用程序中，如果调用 accept()函数时，并没有客户端请求连接（等待连 接队列中也没有等待连接的请求），此时 accept()会进入阻塞状态，直到有客户端连接请求到达为止。</p>
</li>
<li><p>当有 客户端连接请求到达时，accept()函数与远程客户端之间建立连接，accept()函数返回一个新的套接字。这个 套接字与 socket()函数返回的套接字并不同，socket()函数返回的是服务器的套接字（以服务器为例）</p>
</li>
<li><p><strong>accept()函数返回的套接字连接到调用 connect()的客户端</strong>，服务器<strong>通过该套接字与客户端进行数据交互</strong>，譬 如向客户端发送数据、或从客户端接收数据。</p>
</li>
<li><p>参数 addr 是一个传出参数，参数 addr 用来<strong>返回已连接的客户端的 IP 地址与端口号等这些信息</strong>。参数 addrlen 应设置为 addr 所指向的对象的字节长度，如果我们对客户端的 IP 地址与端口号这些信息不感兴趣， 可以把 arrd 和 addrlen <strong>均置为空指针 NULL</strong>。</p>
</li>
</ul>
<h4 id="connect-函数"><a href="#connect-函数" class="headerlink" title="connect()函数"></a>connect()函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>该函数用于客户端应用程序中，<strong>客户端调用</strong> connect()函数将套接字 sockfd 与远程服务器进行连接，参 数 addr 指定了待连接的服务器的 IP 地址以及端口号等信息，参数 addrlen 指定了 addr 指向的 struct sockaddr 对象的字节大小。</li>
<li>客户端通过 connect()函数请求与服务器建立连接，对于 TCP 连接来说，调用该函数将发生 TCP 连接的 握手过程，并最终建立一个 TCP 连接，而对于 UDP 协议来说，调用这个函数只是在 sockfd 中记录服务器 IP 地址与端口号，而不发送任何数据。</li>
<li>函数调用成功则返回 0，失败返回-1，并设置 errno 以指示错误原因。</li>
</ul>
<h3 id="发送和接收函数"><a href="#发送和接收函数" class="headerlink" title="发送和接收函数"></a>发送和接收函数</h3><h4 id="read-函数"><a href="#read-函数" class="headerlink" title="read()函数"></a>read()函数</h4><ul>
<li>通过 read()函数从一个文件描述符中读取指定字节大小的数据并放入到指 定的缓冲区中，read()调用成功将返回读取到的字节数，此返回值受文件剩余字节数限制，当返回值小于指 定的字节数时并不意味着错误；这可能是因为当前可读取的字节数小于指定的字节数（比如已经接近文件 结尾，或者正在从管道或者终端读取数据，或者 read()函数被信号中断等），出错返回-1 并设置 errno，如果 在调 read 之前已到达文件末尾，则这次 read 返回 0。</li>
<li>套接字描述符<strong>也是文件描述符</strong>，所以使用 read()函数读取网络数据时，read()函数的参数 <strong>fd 就是对应的 套接字描述符</strong>。</li>
</ul>
<h4 id="recv-函数"><a href="#recv-函数" class="headerlink" title="recv()函数"></a>recv()函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>不论是客户端还是服务器都可以通过 revc()函数读取网络数据，它与 read()函数的功能是相似的。参数 sockfd 指定套接字描述符，参数 buf 指向了一个数据接收缓冲区，参数 len 指定了读取数据的字节大小，参 数 flags 可以指定一些标志用于控制如何接收数据。</p>
</li>
<li><p>函数 recv()与 read()很相似，但是 recv()可以通过指定 flags 标志来控制如何接收数据，这些标志如下所 示：</p>
<ul>
<li><p><img src="/imgs/image-20220130174245872.png" alt="image-20220130174245872"></p>
</li>
<li><p>通常一般我们将 flags 参数设置为 0，当然，你可以根据自己的需求设置该参数。</p>
</li>
<li><p>当指定 MSG_PEEK 标志时，可以查看下一个要读取的数据但不真正取走它，当再次调用 read 或 recv 函数时，会返回刚才查看的数据。</p>
</li>
<li><p>对于 SOCK_STREAM 类型套接字，接收的数据可以比指定的字节大小少。MSG_WAITALL 标志会阻 止这种行为，<strong>直到所请求的数据全部返回，recv 函数才会返回</strong>。对于 SOCK_DGRAM 和 SOCK_SEQPACKET 套接字，MSG_WAITALL 标志并不会改变什么行为，因为这些基于报文的套接字类型一次读取就返回整个 报文。</p>
</li>
<li><p>如果发送者已经调用 shutdown 来结束传输，或者网络协议支持按默认的顺序关闭并且发送端已经关闭， 那么当所有的数据接收完毕后，recv 会返回 0。</p>
</li>
</ul>
</li>
</ul>
<h4 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h4><ul>
<li>通过 write()函数可以向套接字描述符中写入数据，函数调用成功返回写入的字节数，失败返回-1，并设 置 errno 变量。</li>
</ul>
<h4 id="send-函数"><a href="#send-函数" class="headerlink" title="send()函数"></a>send()函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>send 和 write 很相似，但是 send 可以通过参数 flags 指定一些标志，来改变处理传输数据的方式。</p>
<ul>
<li><img src="/imgs/image-20220130174442209.png" alt="image-20220130174442209"></li>
</ul>
</li>
<li><p>即使 send()成功返回，也并不表示连接的另一端的进程就一定接收了数据，我们所能保证的只是当 send 成功返回时，数据已经被<strong>无错误的发送到网络驱动程序上</strong>。</p>
</li>
</ul>
<h4 id="close-关闭套接字"><a href="#close-关闭套接字" class="headerlink" title="close()关闭套接字"></a>close()关闭套接字</h4><ul>
<li>当不再需要套接字描述符时，可调用 close()函数来关闭套接字，释放相应的资源。</li>
</ul>
<h3 id="IP-地址格式转换函数"><a href="#IP-地址格式转换函数" class="headerlink" title="IP 地址格式转换函数"></a>IP 地址格式转换函数</h3><ul>
<li>对于人来说，我们更容易阅读的是点分十进制的 IP 地址，譬如 192.168.1.110、192.168.1.50，这其实是 一种字符串的形式，但是计算机所需要理解的是二进制形式的 IP 地址，所以我们就需要在点分十进制字符 串和二进制地址之间进行转换。</li>
<li>点分十进制字符串和二进制地址之间的转换函数主要有：inet_aton、inet_addr、inet_ntoa、inet_ntop、 inet_pton 这五个，在我们的应用程序中使用它们需要包含头文件、以及&lt;netinet/in.h&gt;。</li>
</ul>
<h4 id="inet-aton、inet-addr、inet-ntoa-函数"><a href="#inet-aton、inet-addr、inet-ntoa-函数" class="headerlink" title="inet_aton、inet_addr、inet_ntoa 函数"></a>inet_aton、inet_addr、inet_ntoa 函数</h4><ul>
<li>这些函数可将一个 IP 地址在点分十进制表示形式和二进制表示形式之间进行转换，这些函数已经废弃 了，基本不用这些函数了，但是在一些旧的代码中可能还会看到这些函数。完成此类转换工作我们应该使用 下面介绍的这些函数。</li>
</ul>
<h4 id="inet-ntop、inet-pton-函数"><a href="#inet-ntop、inet-pton-函数" class="headerlink" title="inet_ntop、inet_pton 函数"></a>inet_ntop、inet_pton 函数</h4><ul>
<li>inet_ntop()、inet_pton()与 inet_ntoa()、inet_aton()类似，但它们还支持 IPv6 地址。它们将二进制 Ipv4 或 Ipv6 地址转换成以点分十进制表示的字符串形式，或将点分十进制表示的字符串形式转换成二进制 Ipv4 或 Ipv6 地址。使用这两个函数只需包含头文件即可！</li>
<li><strong>inet_pton()函数</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>inet_pton()函数将点分十进制表示的字符串形式转换成二进制 Ipv4 或 Ipv6 地址。</p>
</li>
<li><p>inet_pton()函数将点分十进制表示的字符串形式转换成二进制 Ipv4 或 Ipv6 地址。 将字符串 src 转换为二进制地址，参数 af 必须是 AF_INET 或 AF_INET6，AF_INET 表示待转换的 Ipv4 地址，AF_INET6 表示待转换的是 Ipv6 地址；并将转换后得到的地址存放在参数 dst 所指向的对象中，如果 参数 af 被指定为 AF_INET，则参数 dst 所指对象应该是一个 struct in_addr 结构体的对象；如果参数 af 被指 定为 AF_INET6，则参数 dst 所指对象应该是一个 struct in6_addr 结构体的对象。</p>
</li>
<li><p>inet_pton()转换成功返回 1（已成功转换）。如果 src 不包含表示指定地址族中有效网络地址的字符串， 则返回 0。如果 af 不包含有效的地址族，则返回-1 并将 errno 设置为 EAFNOSUPPORT。</p>
</li>
<li><p><strong>inet_ntop()函数</strong></p>
</li>
<li><p>inet_ntop()函数执行与 inet_pton()相反的操作</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">inet_ntop</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">char</span> *dst, <span class="keyword">socklen_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 af 与 inet_pton()函数的 af 参数意义相同。 </li>
<li>参数 src 应指向一个 struct in_addr 结构体对象或 struct in6_addr 结构体对象，依据参数 af 而定。函数 inet_ntop()会将参数 src 指向的二进制 IP 地址转换为点分十进制形式的字符串，并将字符串存放在参数 dst所指的缓冲区中</li>
<li>参数 size 指定了该缓冲区的大小。 inet_ntop()在成功时会返回 dst 指针。如果 size 的值太小了，那么将会返回 NULL 并将 errno 设置为 ENOSPC。</li>
</ul>
<p><strong>使用例</strong></p>
<ul>
<li>服务端</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 8888 <span class="comment">//端口号不能发生冲突,不常用的端口号通常大于 5000</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="keyword">char</span> ip_str[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="keyword">int</span> sockfd, connfd;</span><br><span class="line"> <span class="keyword">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"> <span class="keyword">char</span> recvbuf[<span class="number">512</span>];</span><br><span class="line"> <span class="keyword">int</span> ret;</span><br><span class="line"> <span class="comment">/* 打开套接字，得到套接字描述符 */</span></span><br><span class="line"> sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> &gt; sockfd) &#123;</span><br><span class="line"> perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 将套接字与指定端口号进行绑定 */</span></span><br><span class="line"> server_addr.sin_family = AF_INET;</span><br><span class="line"> server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"> server_addr.sin_port = htons(SERVER_PORT);</span><br><span class="line"> ret = bind(sockfd, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> &gt; ret) &#123;</span><br><span class="line"> perror(<span class="string">&quot;bind error&quot;</span>);</span><br><span class="line"> close(sockfd);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 使服务器进入监听状态 */</span></span><br><span class="line"> ret = listen(sockfd, <span class="number">50</span>);</span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> &gt; ret) &#123;</span><br><span class="line"> perror(<span class="string">&quot;listen error&quot;</span>);</span><br><span class="line"> close(sockfd);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 阻塞等待客户端连接 */</span></span><br><span class="line"> connfd = accept(sockfd, (struct sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> &gt; connfd) &#123;</span><br><span class="line"> perror(<span class="string">&quot;accept error&quot;</span>);</span><br><span class="line"> close(sockfd);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;有客户端接入...\n&quot;</span>);</span><br><span class="line"> inet_ntop(AF_INET, &amp;client_addr.sin_addr.s_addr, ip_str, <span class="keyword">sizeof</span>(ip_str));</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;客户端主机的 IP 地址: %s\n&quot;</span>, ip_str);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;客户端进程的端口号: %d\n&quot;</span>, client_addr.sin_port);</span><br><span class="line"> <span class="comment">/* 接收客户端发送过来的数据 */</span></span><br><span class="line"> <span class="keyword">for</span> ( ; ; ) &#123;</span><br><span class="line"> <span class="comment">// 接收缓冲区清零</span></span><br><span class="line"> <span class="built_in">memset</span>(recvbuf, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(recvbuf));</span><br><span class="line"> <span class="comment">// 读数据</span></span><br><span class="line"> ret = recv(connfd, recvbuf, <span class="keyword">sizeof</span>(recvbuf), <span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span>(<span class="number">0</span> &gt;= ret) &#123;</span><br><span class="line"> perror(<span class="string">&quot;recv error&quot;</span>);</span><br><span class="line"> close(connfd);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 将读取到的数据以字符串形式打印出来</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;from client: %s\n&quot;</span>, recvbuf);</span><br><span class="line"> <span class="comment">// 如果读取到&quot;exit&quot;则关闭套接字退出程序</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strncmp</span>(<span class="string">&quot;exit&quot;</span>, recvbuf, <span class="number">4</span>)) &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;server exit...\n&quot;</span>);</span><br><span class="line"> close(connfd);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 关闭套接字 */</span></span><br><span class="line"> close(sockfd);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 8888 <span class="comment">//服务器的端口号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_IP <span class="meta-string">&quot;192.168.1.150&quot;</span> <span class="comment">//服务器的 IP 地址</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line"> <span class="keyword">int</span> sockfd;</span><br><span class="line"> <span class="keyword">int</span> ret;</span><br><span class="line"> <span class="comment">/* 打开套接字，得到套接字描述符 */</span></span><br><span class="line"> sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> &gt; sockfd) &#123;</span><br><span class="line"> perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 调用 connect 连接远端服务器 */</span></span><br><span class="line"> server_addr.sin_family = AF_INET;</span><br><span class="line"> server_addr.sin_port = htons(SERVER_PORT); <span class="comment">//端口号</span></span><br><span class="line"> inet_pton(AF_INET, SERVER_IP, &amp;server_addr.sin_addr);<span class="comment">//IP 地址</span></span><br><span class="line"> ret = connect(sockfd, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> &gt; ret) &#123;</span><br><span class="line"> perror(<span class="string">&quot;connect error&quot;</span>);</span><br><span class="line"> close(sockfd);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;服务器连接成功...\n\n&quot;</span>);</span><br><span class="line"> <span class="comment">/* 向服务器发送数据 */</span></span><br><span class="line"> <span class="keyword">for</span> ( ; ; ) &#123;</span><br><span class="line"> <span class="comment">// 清理缓冲区</span></span><br><span class="line"> <span class="built_in">memset</span>(buf, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"> <span class="comment">// 接收用户输入的字符串数据</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Please enter a string: &quot;</span>);</span><br><span class="line"> fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);</span><br><span class="line"> <span class="comment">// 将用户输入的数据发送给服务器</span></span><br><span class="line"> ret = send(sockfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span>(<span class="number">0</span> &gt; ret)&#123;</span><br><span class="line"> perror(<span class="string">&quot;send error&quot;</span>);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//输入了&quot;exit&quot;，退出循环</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">strncmp</span>(buf, <span class="string">&quot;exit&quot;</span>, <span class="number">4</span>))</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> close(sockfd);</span><br><span class="line"> <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux初步学习（五）</title>
    <url>/2022/01/05/Linux%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux系统知识"><a href="#Linux系统知识" class="headerlink" title="Linux系统知识"></a>Linux系统知识</h1><h2 id="apt命令"><a href="#apt命令" class="headerlink" title="apt命令"></a>apt命令</h2><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。</p>
<p>apt 命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p>
<p>apt 命令执行需要超级管理员权限(root)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt [options] [command] [package ...]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>options：</strong>可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li>
<li><strong>command：</strong>要进行的操作。</li>
<li><strong>package</strong>：安装的包名。</li>
</ul>
<p><strong>用法：</strong></p>
<ul>
<li><p>列出所有可更新的软件清单命令：<strong>sudo apt update</strong></p>
</li>
<li><p>升级软件包：<strong>sudo apt upgrade</strong></p>
<p>列出可更新的软件包及版本信息：<strong>apt list –upgradeable</strong></p>
<p>升级软件包，升级前先删除需要更新软件包：<strong>sudo apt full-upgrade</strong></p>
</li>
<li><p>安装指定的软件命令：<strong>sudo apt install <package_name></strong></p>
<p>安装多个软件包：<strong>sudo apt install <package_1> <package_2> <package_3></strong></p>
</li>
<li><p>更新指定的软件命令：<strong>sudo apt update <package_name></strong></p>
</li>
<li><p>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<strong>sudo apt show <package_name></strong></p>
</li>
<li><p>删除软件包命令：<strong>sudo apt remove <package_name></strong></p>
</li>
<li><p>清理不再使用的依赖和库文件: <strong>sudo apt autoremove</strong></p>
</li>
<li><p>移除软件包及配置文件: <strong>sudo apt purge <package_name></strong></p>
</li>
<li><p>查找软件包命令： <strong>sudo apt search <keyword></strong></p>
</li>
<li><p>列出所有已安装的包：<strong>apt list –installed</strong></p>
</li>
<li><p>列出所有已安装的包的版本信息：<strong>apt list –all-versions</strong></p>
</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/imgs/image-20220105113244292.png" alt="image-20220105113244292"></p>
<ul>
<li><p><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着<strong>最经常使用的命令</strong>。</p>
</li>
<li><p><strong>/boot：</strong><br>这里存放的是<strong>启动 Linux</strong> 时使用的一些<strong>核心文件</strong>，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的<strong>外部设备</strong>，在 Linux 中**<u>访问设备的方式和访问文件的方式是相同的</u>**。</p>
</li>
<li><p><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的<strong>系统管理所需要的配置文件和子目录</strong>。</p>
</li>
<li><p><strong>/home</strong>：<br>用户的<strong>主目录</strong>，在 Linux 中，每个<strong>用户都有一个自己的目录</strong>，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>
</li>
<li><p><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统<strong>最基本的动态连接共享库</strong>，其作用<strong>类似于 Windows 里的 DLL 文件</strong>。几乎所有的应用程序都需要用到这些共享库。</p>
</li>
<li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>/media</strong>：<br>linux 系统会<strong>自动识别一些设备</strong>，例如U盘、光驱等等，当识别后，Linux 会把识别的设备<strong>挂载到这个目录下</strong>。</p>
</li>
<li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户<strong>临时挂载别的文件系统</strong>的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p><strong>/opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机<strong>额外安装软件</strong>所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p>
</li>
<li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种<strong>伪文件系统</strong>（也即虚拟文件系统），存储的是当前<strong>内核运行状态的一系列特殊文件</strong>，这个目录是一个虚拟的目录，它<strong>是系统内存的映射</strong>，我们可以通过直接访问这个目录来获取<strong>系统信息</strong>。<br>这个目录的内容<strong>不在硬盘</strong>上而是<strong>在内存里</strong>，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li>
<li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作<strong>超级权限者的用户主目录</strong>。</p>
</li>
<li><p><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统<strong>管理员使用的系统管理程序</strong>。</p>
</li>
<li><p><strong>/selinux</strong>：<br> 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p>
</li>
<li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>/sys</strong>：</p>
<p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p>
<p>sysfs 文件系统集成了下面3种文件系统的信息：<strong>针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统</strong>。</p>
<p>该文件系统是<strong>内核设备树</strong>的一个直观反映。</p>
<p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p>
</li>
<li><p><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些<strong>临时文件</strong>的。</p>
</li>
<li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，<strong>类似于 windows 下的 program files 目录</strong>。</p>
</li>
<li><p><strong>/usr/bin：</strong><br>系统用户使用的<strong>应用程序</strong>。</p>
</li>
<li><p><strong>/usr/sbin：</strong><br><strong>超级用户</strong>使用的比较高级的<strong>管理程序和系统守护程序</strong>。</p>
</li>
<li><p><strong>/usr/src：</strong><br><strong>内核源代码</strong>默认的放置目录。</p>
</li>
<li><p><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些<strong>经常被修改的目录</strong>放在这个目录下。包括各种日志文件。</p>
</li>
<li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p>
</li>
<li><p><code>.</code>或者<code>./</code>代表当前目录，<code>..</code>或者<code>../</code>代表上一级目录</p>
</li>
<li><p>如果一个目录或文件名以一个点 . 开始，表示这个目录或文件是一个隐藏目录或文件(如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</p>
</li>
<li><p><code>~/</code>的含义：<strong>主目录</strong>：</p>
<ul>
<li><img src="/imgs/image-20220105211153744.png" alt="image-20220105211153744"></li>
<li></li>
</ul>
</li>
</ul>
<h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><ul>
<li>chown (change owner) ： 修改所属用户与组。</li>
<li>chmod (change mode) ： 修改用户的权限。</li>
<li>使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www /]# ls -l</span><br><span class="line">total 64</span><br><span class="line">dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</span><br><span class="line">dr-xr-xr-x   4 root root 4096 Apr 19  2012 boot</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<ul>
<li><p>文件属性的字符表示：</p>
</li>
<li><p>当为 <strong>d</strong> 则是目录</p>
</li>
<li><p>当为 <strong>-</strong> 则是文件；</p>
</li>
<li><p>若是 <strong>l</strong> 则表示为链接文档(link file)；</p>
</li>
<li><p>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</p>
</li>
<li><p>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</p>
</li>
<li><p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p>
</li>
<li><p><img src="/imgs/image-20220105115020261.png" alt="image-20220105115020261"></p>
</li>
<li><p>文件类型的表示：<br><img src="/imgs/image-20220105115040437.png" alt="image-20220105115040437"></p>
</li>
<li><p>更改属性：</p>
<ul>
<li><p>chgrp：更改文件属组：<code>chgrp [-R] 属组名 文件名</code></p>
</li>
<li><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
</li>
<li><p>chown：更改文件属主，也可以同时更改文件属组</p>
</li>
<li><p><code>chown [–R] 属主名 文件名</code>和<code>chown [-R] 属主名：属组名 文件名</code></p>
</li>
<li><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>Linux 文件的基本权限就有九个，分别是 <strong>owner/group/others(拥有者/组/其他)</strong> 三种身份各有自己的 <strong>read/write/execute</strong> 权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为： <strong>-rwxrwxrwx</strong> ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1</li>
</ul>
</li>
<li><p>语法：<code> chmod [-R] xyz 文件或目录</code></p>
<ul>
<li>xyz : 就是刚刚提到的<strong>数字类型</strong>的权限属性，为 rwx 属性数值的相加。</li>
<li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li>
</ul>
</li>
<li><p>比如<code>chmod 777 .bashrc</code>就是启用<code>.bashrc</code>文件的所有权限</p>
</li>
<li><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p>
<ul>
<li>user：用户</li>
<li>group：组</li>
<li>others：其他</li>
<li>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong></li>
<li><code>+</code>代表添加，<code>-</code>代表除去，<code>=</code>代表指定（对应的权限）</li>
</ul>
</li>
<li><p>方法为<code>chmod u=rwx,g=rx,o=r 文件名</code>来指定,其中的rwx等是对应的用户的权限</p>
</li>
<li><p>去掉权限：</p>
<ul>
<li>例如要拿掉全部人的可执行权限<code>chmod  a-x test1</code></li>
</ul>
</li>
<li><p>比如</p>
</li>
<li><p><img src="/imgs/image-20220105202406126.png" alt="image-20220105202406126"></p>
</li>
<li><p>此处在<code>chmod a+x test.txt</code>之后，权限可以看见全部增加了x</p>
</li>
</ul>
</li>
</ul>
<h2 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h2><ul>
<li>ls（英文全拼：list files）: 列出目录及文件名</li>
<li>cd（英文全拼：change directory）：切换目录</li>
<li>pwd（英文全拼：print work directory）：显示目前的目录</li>
<li>mkdir（英文全拼：make directory）：创建一个新的目录</li>
<li>rmdir（英文全拼：remove directory）：删除一个空的目录</li>
<li>cp（英文全拼：copy file）: 复制文件或目录</li>
<li>rm（英文全拼：remove）: 删除文件或目录</li>
<li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<h3 id="ls列出目录"><a href="#ls列出目录" class="headerlink" title="ls列出目录"></a>ls列出目录</h3><ul>
<li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<h3 id="cd变换路径"><a href="#cd变换路径" class="headerlink" title="cd变换路径"></a>cd变换路径</h3><ul>
<li><code>cd [相对路径或绝对路径]</code></li>
</ul>
<h3 id="pwd（显示当前所在的目录）"><a href="#pwd（显示当前所在的目录）" class="headerlink" title="pwd（显示当前所在的目录）"></a>pwd（显示当前所在的目录）</h3><ul>
<li><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</li>
<li><img src="/imgs/image-20220105203806376.png" alt="image-20220105203806376"></li>
</ul>
<h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><ul>
<li><code>mkdir [-mp] 目录名称</code></li>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～<ul>
<li>比如<code>mkdir -m 711 test2</code></li>
</ul>
</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)<strong>递归创建</strong>起来！<ul>
<li>比如<code>mkdir test1/test2/test3/test4</code>不能创建的时候，使用<code>-p</code>选项即可</li>
<li><img src="/imgs/image-20220105204407469.png" alt="image-20220105204407469"></li>
</ul>
</li>
</ul>
<h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><ul>
<li><code>rmdir [-p] 目录名称</code></li>
<li><strong>-p ：</strong>从该目录起，一次删除多级空目录<ul>
<li><img src="/imgs/image-20220105205146656.png" alt="image-20220105205146656"></li>
</ul>
</li>
</ul>
<h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><ul>
<li><code>cp [-adfilprsu] 来源档(source) 目标档(destination)</code></li>
<li><code>cp [options] source1 source2 source3 .... directory</code></li>
<li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li>
<li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li>
<li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li>
</ul>
<h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><ul>
<li><code>rm [-fir] 文件或目录</code></li>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
</ul>
<h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><ul>
<li><code>mv [-fiu] source destination</code></li>
<li><code>mv [options] source1 source2 source3 .... directory</code></li>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>
<li><strong>更改文件夹名称</strong>：<img src="/imgs/image-20220105212045584.png" alt="image-20220105212045584"><ul>
<li>也就是<code>mv 原名称 现名称</code></li>
</ul>
</li>
</ul>
<h3 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h3><ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<h2 id="Linux-文件链接"><a href="#Linux-文件链接" class="headerlink" title="Linux 文件链接"></a>Linux 文件链接</h2><h3 id="硬连接"><a href="#硬连接" class="headerlink" title="硬连接"></a><strong>硬连接</strong></h3><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件<strong>不管是什么类型</strong>都给它<strong>分配一个编号</strong>，称为索引节点号(Inode Index)。在 Linux 中，<strong>多个文件名指向同一索引节点</strong>是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即<strong>一个 inode 节点对应两个不同的文件名</strong>，<strong>两个</strong>文件名指向<strong>同一</strong>个文件，A 和 B 对文件系统来说是<strong>完全平等</strong>的。<strong>删除其中任何一个都不会影响另外一个的访问</strong>。</p>
<p>硬连接的作用是<strong>允许一个文件拥有多个有效路径</strong>名，这样用户就可以<strong>建立硬连接到重要文件</strong>，以<strong>防止“误删”</strong>的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只<strong>有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放</strong>。也就是说，文件<strong>真正删除</strong>的条件是<strong>与之相关的所有硬连接文件均被删除</strong>。</p>
<h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件<strong>有类似于 Windows 的快捷方式</strong>。它实际上是一个特殊的文件。在符号连接中，文件<strong>实际上</strong>是一个<strong>文本文件</strong>，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是<strong>两个不同的 inode</strong>，继而指向两块不同的数据块。但是 <strong>A 的数据块中存放的只是 B 的路径名</strong>（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，<strong>如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@Linux]$ touch f1          #创建一个测试文件f1</span><br><span class="line">[oracle@Linux]$ ln f1 f2          #创建f1的一个硬连接文件f2</span><br><span class="line">[oracle@Linux]$ ln -s f1 f3       #创建f1的一个符号连接文件f3</span><br><span class="line">[oracle@Linux]$ ls -li            # -i参数显示文件的inode节点信息</span><br><span class="line">total 0</span><br><span class="line">9797648 -rw-r--r--  2 oracle oinstall 0 Apr 21 08:11 f1</span><br><span class="line">9797648 -rw-r--r--  2 oracle oinstall 0 Apr 21 08:11 f2</span><br><span class="line">9797649 lrwxrwxrwx  1 oracle oinstall 2 Apr 21 08:11 f3 -&gt; f1</span><br></pre></td></tr></table></figure>

<p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 9797648，然而符号连接文件的 inode 节点不同。</p>
<ul>
<li>注意创建硬链接文件的语法为<code>ln 文件 硬链接</code></li>
<li>创建符号链接文件的语法为<code>ln -s 文件 符号链接</code></li>
<li><code>ls -li</code>可以显示文件的inode节点信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[oracle@Linux]$ echo &quot;I am f1 file&quot; &gt;&gt;f1</span><br><span class="line">[oracle@Linux]$ cat f1</span><br><span class="line">I am f1 file</span><br><span class="line">[oracle@Linux]$ cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[oracle@Linux]$ cat f3</span><br><span class="line">I am f1 file</span><br><span class="line">[oracle@Linux]$ rm -f f1</span><br><span class="line">[oracle@Linux]$ cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[oracle@Linux]$ cat f3</span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure>

<ul>
<li>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f3 文件无效</li>
</ul>
<h2 id="Linux-磁盘管理"><a href="#Linux-磁盘管理" class="headerlink" title="Linux 磁盘管理"></a>Linux 磁盘管理</h2><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>检查<strong>文件系统</strong>的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<ul>
<li><code>df [-ahikHTm] [目录或文件名]</code></li>
<li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/hdc2             9.5G  3.7G  5.4G  41% /</span><br><span class="line">/dev/hdc3             4.8G  139M  4.4G   4% /home</span><br><span class="line">/dev/hdc1              99M   11M   83M  12% /boot</span><br><span class="line">tmpfs                 363M     0  363M   0% /dev/shm</span><br></pre></td></tr></table></figure>

<h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对<strong>文件和目录磁盘使用</strong>的空间的查看，还是和df命令有一些区别的，这里介绍 Linux du 命令。</p>
<ul>
<li><p><code>du [-ahskm] 文件或目录名称</code></p>
</li>
<li><p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</p>
</li>
<li><p>-h ：以人们较易读的容量格式 (G/M) 显示；</p>
</li>
<li><p>-s ：列出总量而已，而不列出每个各别的目录占用容量；</p>
</li>
<li><p>-S ：不包括子目录下的总计，与 -s 有点差别。</p>
</li>
<li><p>-k ：以 KBytes 列出容量显示；</p>
</li>
<li><p>-m ：以 MBytes 列出容量显示；</p>
</li>
</ul>
<h3 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h3><p>fdisk 是 Linux 的磁盘分区表操作工具。</p>
<ul>
<li><p><code>fdisk [-l] 装置名称</code>需要超级用户（sudo）权限</p>
</li>
<li><p>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</p>
</li>
<li><p><img src="/imgs/image-20220105221448829.png" alt="image-20220105221448829"></p>
</li>
</ul>
<h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><ul>
<li><code>mkfs [-t 文件系统格式] 装置文件名</code></li>
<li><code>-t </code>：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li>
</ul>
<h3 id="磁盘检验"><a href="#磁盘检验" class="headerlink" title="磁盘检验"></a>磁盘检验</h3><p>fsck（file system check）用来检查和维护不一致的文件系统。</p>
<p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p>
<ul>
<li><code>fsck [-t 文件系统] [-ACay] 装置名称</code></li>
<li>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li>
<li>-s : 依序一个一个地执行 fsck 的指令来检查</li>
<li>-A : 对/etc/fstab 中所有列出来的 分区（partition）做检查</li>
<li>-C : 显示完整的检查进度</li>
<li>-d : 打印出 e2fsck 的 debug 结果</li>
<li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li>
<li>-R : 同时有 -A 条件时，省略 / 不检查</li>
<li>-V : 详细显示模式</li>
<li>-a : 如果检查有错则自动修复</li>
<li>-r : 如果检查有错则由使用者回答是否修复</li>
<li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li>
</ul>
<h3 id="磁盘挂载和删除"><a href="#磁盘挂载和删除" class="headerlink" title="磁盘挂载和删除"></a>磁盘挂载和删除</h3><ul>
<li>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</li>
<li><code>mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</code></li>
<li><code>umount [-fn] 装置文件名或挂载点</code></li>
</ul>
<p><strong>参考<a href="https://www.runoob.com/linux/linux-file-content-manage.html">https://www.runoob.com/linux/linux-file-content-manage.html</a></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Linux文件IO使用</title>
    <url>/2022/01/12/Linux%E6%96%87%E4%BB%B6IO%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Linux-文件IO"><a href="#Linux-文件IO" class="headerlink" title="Linux 文件IO"></a>Linux 文件IO</h1><p>简单的实例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">     <span class="keyword">int</span> fd1, fd2;</span><br><span class="line">     <span class="keyword">int</span> ret;</span><br><span class="line">     <span class="comment">/* 打开源文件 src_file(只读方式) */</span></span><br><span class="line">     fd1 = open(<span class="string">&quot;./src_file&quot;</span>, O_RDONLY);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd1)</span><br><span class="line">     <span class="keyword">return</span> fd1;</span><br><span class="line">     <span class="comment">/* 打开目标文件 dest_file(只写方式) */</span></span><br><span class="line">     fd2 = open(<span class="string">&quot;./dest_file&quot;</span>, O_WRONLY);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd2) &#123;</span><br><span class="line">     ret = fd2;</span><br><span class="line">     <span class="keyword">goto</span> out1;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 读取源文件 1KB 数据到 buff 中 */</span></span><br><span class="line">     ret = read(fd1, buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret)</span><br><span class="line">     <span class="keyword">goto</span> out2;</span><br><span class="line">     <span class="comment">/* 将 buff 中的数据写入目标文件 */</span></span><br><span class="line">     ret = write(fd2, buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret)</span><br><span class="line">     <span class="keyword">goto</span> out2;</span><br><span class="line">     ret = <span class="number">0</span>;</span><br><span class="line">out2:</span><br><span class="line">     <span class="comment">/* 关闭目标文件 */</span></span><br><span class="line">     close(fd2);</span><br><span class="line">out1:</span><br><span class="line">     <span class="comment">/* 关闭源文件 */</span></span><br><span class="line">     close(fd1);</span><br><span class="line">     <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><ul>
<li>调用 open 函数会有一个返回值，譬如示例代码 2.1.1 中的 fd1 和 fd2，这是一个 int 类型的数据，在 open 函数执行成功的情况下，会返回一个非负整数，该返回值就是一个文件描述符（file descriptor），这说明文 件描述符是一个非负整数；对于 Linux 内核而言，所有打开的文件都会通过文件描述符进行索引。</li>
<li>当调用 open 函数打开一个现有文件或创建一个新文件时，内核会向进程返回一个文件描述符，用于指 代被打开的文件，所有执行 IO 操作的系统调用都是通过文件描述符来索引到对应的文件，譬如示例代码 2.1.1 中，当调用 read/write 函数进行文件读写时，会将文件描述符传送给 read/write 函数</li>
<li>所以<u>对于一个进程来说</u>，文件描述符是一种有限资源，<u>文件描述符是从 0 开始分配的</u>，譬如说进程中第 一个被打开的文件对应的文件描述符是 0、第二个文件是 1、第三个文件是 2、第 4 个文件是 3……以此类推，所以由此可知，文件描述符数字最大值为 1023<strong>（0~1023）</strong>。每一个被打开的文件在同一个进程中都有 一个<strong>唯一的文件描述符</strong>，不会重复，如果文件被关闭后，它对应的文件描述符将会被释放，那么这个文件描 述符将可以<strong>再次分配给其它打开的文件</strong>、与对应的文件绑定起来。</li>
</ul>
<h4 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h4><ul>
<li>Linux 系统下，一切皆文件，也包括各种硬件设备，使用 open 函数打开任何文件成功情况下便会 返回对应的文件描述符 fd。每一个硬件设备都会对应于 Linux 系统下的某一个文件，把这类文件称为设备文 件。所以设备文件对应的其实是某一硬件设备，应用程序通过对设备文件进行读写等操作、来使用、操控硬 件设备，譬如 LCD 显示器、串口、音频、键盘等。</li>
<li>标准输入一般对应的是键盘，可以理解为 0 便是打开键盘对应的设备文件时所得到的文件描述符；标 准输出一般指的是 LCD 显示器，可以理解为 1 便是打开 LCD 设备对应的设备文件时所得到的文件描述符； 而标准错误一般指的也是 LCD 显示器。</li>
</ul>
<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>pathname：字符串类型，用于标识需要打开或创建的文件，可以包含路径（绝对路径或相对路径）信 息，譬如：”./src_file”（当前目录下的 src_file 文件）、”/home/dengtao/hello.c”等；如果 pathname 是一个符号 链接，会对其进行解引用。</p>
</li>
<li><p>flags：调用 open 函数时需要提供的标志，包括文件访问模式标志以及其它文件相关标志，这些标志使 用宏定义进行描述，都是常量，open 函数提供了非常多的标志，我们传入 flags 参数时既可以单独使用某一 个标志，也可以通过位或运算（|）将多个标志进行组合。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>标志</th>
<th>用途</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>O_WRONLY</td>
<td>只写</td>
<td></td>
</tr>
<tr>
<td>O_RDONLY</td>
<td>只读</td>
<td></td>
</tr>
<tr>
<td>O_RDWR</td>
<td>可读可写</td>
<td>这三个是文件访问权限标志，传入的 flags 参数中必须要包含其中一种标 志，而且只能包含一种</td>
</tr>
<tr>
<td>O_CREAT</td>
<td>如果地址指向的文件不存在就创建文件</td>
<td>使用此标志时，调用 open 函数需要 传入第 3 个参数 mode，参数 mode 用 于指定新建文件的访问权限，稍后将 对此进行说明。 open 函数的第 3 个参数只有在使用 了 O_CREAT 或 O_TMPFILE 标志 时才有效。</td>
</tr>
<tr>
<td>O_DIRECTORY</td>
<td>如果地址指向的是目录，返回调用失败</td>
<td></td>
</tr>
<tr>
<td>O_EXCL</td>
<td>此标志一般结合 O_CREAT 标志一起使用， 用于专门创建文件。 在 flags 参数同时使用到了 O_CREAT 和 O_EXCL 标志的情况下，如果 pathname 参数 指向的文件已经存在，则 open 函数返回错 误。</td>
<td>可以用于测试一个文件是否存在，如 果不存在则创建此文件，如果存在则 返回错误，这使得测试和创建两者成 为一个原子操作；关于原子操作，在 后面的内容当中将会对此进行说明。</td>
</tr>
<tr>
<td>O_NOFOLLOW</td>
<td>如果 pathname 参数指向的是一个符号链接， 将不对其进行解引用，直接返回错误。</td>
<td>不加此标志情况下，如果 pathname 参数是一个符号链接，会对其进行解引用，加了之后会对符号链接直接返回错误。</td>
</tr>
</tbody></table>
<ul>
<li>flag可以通过<code>|</code>标志添加大于一个，比如</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">open(<span class="string">&quot;./src_file&quot;</span>, O_RDONLY) <span class="comment">//单独使用某一个标志</span></span><br><span class="line">open(<span class="string">&quot;./src_file&quot;</span>, O_RDONLY | O_NOFOLLOW) <span class="comment">//多个标志组合</span></span><br></pre></td></tr></table></figure>

<h3 id="文件权限（rwx）"><a href="#文件权限（rwx）" class="headerlink" title="文件权限（rwx）"></a>文件权限（rwx）</h3><p><strong>前面的博客中已经详细介绍过了，略</strong></p>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><ul>
<li>调用 write 函数可向打开的文件写入数据，其函数原型如下所示</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>fd：文件描述符。关于文件描述符，前面已经给大家进行了简单地讲解，这里不再重述！我们需要将进 行写操作的文件所对应的文件描述符传递给 write 函数。</p>
</li>
<li><p>buf：指定写入数据对应的缓冲区。</p>
</li>
<li><p>count：指定写入的字节数。</p>
</li>
<li><p>返回值：<u>如果成功将返回写入的字节数（0 表示未写入任何字节）</u>，<strong>如果此数字小于 count 参数，这不是错误，譬如磁盘空间已满</strong>，可能会发生这种情况；如果写入出错，则返回-1。</p>
</li>
</ul>
<h4 id="针对写入文件的开始地址"><a href="#针对写入文件的开始地址" class="headerlink" title="针对写入文件的开始地址"></a>针对写入文件的开始地址</h4><ul>
<li>读写操作都是从文件的当前位置偏移量处开始，当然当前位置偏移量可以通过 lseek 系统 调用进行设置，关于此函数后面再讲；<strong>默认情况下当前位置偏移量一般是 0</strong>，也就是指向了文件起始位置， 当<strong>调用 read、write 函数读写操作完成之后，当前位置偏移量也会向后移动对应字节数</strong></li>
</ul>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><ul>
<li>调用 read 函数可从打开的文件中读取数据</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>fd：文件描述符。与 write 函数的 fd 参数意义相同。</li>
<li>buf：指定用于存储读取数据的缓冲区。</li>
<li>count：指定需要读取的字节数。</li>
<li>返回值：如果读取成功将返回读取到的字节数，<u>实际读取到的字节数可能会小于 count 参数指定的字节 数</u>，也有可能会为 0，譬如进行读操作时，<u>当前文件位置偏移量已经到了文件末尾</u>。实际读取到的字节数少 于要求读取的字节数，譬如在到达文件末尾之前有 30 个字节数据，而要求读取 100 个字节，则 read 读取成 功只能返回 30；而下一次再调用 read 读，它将返回 0（文件末尾）。</li>
</ul>
<h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><ul>
<li>close</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>fd：文件描述符，需要关闭的文件所对应的文件描述符。</p>
</li>
<li><p>返回值：如果成功返回 0，如果失败则返回-1。</p>
</li>
<li><p>在 Linux 系统中，当一个进程终止时，内核会自动关闭它打开 的所有文件，也就是说在我们的程序中打开了文件，如果程序终止退出时没有关闭打开的文件，那么内核会 自动将程序中打开的文件关闭。<u>很多程序都利用了这一功能而不显式地用 close 关闭打开的文件。</u></p>
</li>
</ul>
<h3 id="更改偏移量位置"><a href="#更改偏移量位置" class="headerlink" title="更改偏移量位置"></a>更改偏移量位置</h3><ul>
<li>lseek</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">off_t</span> <span class="title">lseek</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset, <span class="keyword">int</span> whence)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>fd：文件描述符。</p>
</li>
<li><p>offset：偏移量，以字节为单位。</p>
</li>
<li><p>whence：用于定义参数 offset 偏移量对应的参考值，该参数为下列其中一种（宏定义）：</p>
<ul>
<li>SEEK_SET：读写偏移量将指向 offset 字节位置处（从文件头部开始算）；</li>
<li>SEEK_CUR：读写偏移量将指向当前位置偏移量 + offset 字节位置处，offset 可以为正、也可以为 负，如果是正数表示往后偏移，如果是负数则表示往前偏移；</li>
<li>SEEK_END：读写偏移量将指向文件末尾 + offset 字节位置处，同样 offset 可以为正、也可以为负， 如果是正数表示往后偏移、如果是负数则表示往前偏移。</li>
</ul>
</li>
<li><p>成功将<strong>返回从文件头部开始算起的位置偏移量</strong>（字节为单位），也就是当前的读写位置；发生 错误将返回-1。可以用此函数获取文件此时的偏移量</p>
</li>
</ul>
<h2 id="Linux文件系统简单讲述"><a href="#Linux文件系统简单讲述" class="headerlink" title="Linux文件系统简单讲述"></a>Linux文件系统简单讲述</h2><ul>
<li><p>磁盘空间包括两个部分，一个是真正存储文件的区域，另一个是存储文件inode的区域（inode见前面的博客）</p>
</li>
<li><p><img src="/imgs/image-20220112130444097.png" alt="image-20220112130444097"></p>
</li>
<li><p>windows的快速格式化不会真正删除存储问文件内容的区域，只是删除了inode表的区域</p>
</li>
</ul>
<h3 id="打开文件的过程"><a href="#打开文件的过程" class="headerlink" title="打开文件的过程"></a>打开文件的过程</h3><ul>
<li><p>系统找到这个文件名所对应的 inode 编号；</p>
</li>
<li><p>通过 inode <strong>编号从 inode table 中找到对应的 inode 结构体</strong>；</p>
</li>
<li><p>根据 <strong>inode 结构体中记录的信息</strong>，确定<strong>文件数据所在的 block</strong>，并读出数据。</p>
</li>
<li><p>文件打开的时候内核会申请一段内存（一段缓冲区），并且将静态文件的数 据内容从磁盘这些存储设备中读取到内存中进行管理、缓存（也把内存中的这份文件数据叫做动态文件、内 核缓冲区）。打开文件后，以后对这个文件的读写操作，都是针对内存中这一份动态文件进行相关的操作。</p>
</li>
<li><p>因为磁盘、硬盘、U 盘等存储设备基本都是 Flash 块设备，因为块设备硬件本身有读写限制等特征，块 设备是以一块一块为单位进行读写的（一个块包含多个扇区，而一个扇区包含多个字节），一个字节的改动 也需要将该字节所在的 block 全部读取出来进行修改，修改完成之后再写入块设备中，所以导致对块设备的 读写操作非常不灵活；而内存可以按字节为单位来操作，而且可以随机操作任意地址数据，非常地很灵活， 所以对于操作系统来说，会先将磁盘中的静态文件读取到内存中进行缓存，读写操作都是针对这份动态文 件，而不是直接去操作磁盘中的静态文件，不但操作不灵活，效率也会下降很多，因为内存的读写速率远比 磁盘读写快得多。</p>
</li>
<li><p>在 Linux 系统中，<strong>内核会为每个进程</strong>（关于进程的概念，这是后面的内容，我们可以简单地理解为一个 运行的程序就是一个进程，运行了多个程序那就是存在多个进程）设置一个专门的数据结构用于管理该进 程，譬如用于记录进程的<strong>状态信息、运行特征</strong>等，我们把这个称为进程控制块（<strong>Process control block，缩写 PCB</strong>）。</p>
<ul>
<li>PCB 数据结构体中有一个指针指向了<strong>文件描述符表</strong>（File descriptors），文件描述符表中的每一个元素索引到对应的文件表（File table），文件表也是一个<strong>数据结构体</strong>，其中记录了很多文件相关的信息，譬如<strong>文 件状态标志、引用计数、当前文件的读写偏移量以及 i-node 指针</strong>（指向该文件对应的 inode）等，进程打开 的所有文件对应的文件描述符都记录在文件描述符表中，每一个文件描述符都会指向一个对应的文件表</li>
<li><img src="/imgs/image-20220112131919826.png" alt="image-20220112131919826"></li>
</ul>
</li>
</ul>
<h2 id="程序出错"><a href="#程序出错" class="headerlink" title="程序出错"></a>程序出错</h2><p>略，详见原子教程pdf</p>
<h2 id="程序退出"><a href="#程序退出" class="headerlink" title="程序退出"></a>程序退出</h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><ul>
<li>return<ul>
<li>return 0表示程序正常结束</li>
<li>return -1表示程序异常退出</li>
</ul>
</li>
</ul>
<h3 id="Linux-下的其他方法"><a href="#Linux-下的其他方法" class="headerlink" title="Linux 下的其他方法"></a>Linux 下的其他方法</h3><ul>
<li><p>进程正常退出除了可以使用 return 之外，还可以使用<code>exit()</code>、<code>_exit()</code>以及_<code>Exit()</code></p>
</li>
<li><p><code>_exit()</code></p>
</li>
<li><p>调用<code>_exit()</code>函数会 清除其使用的内存空间，并销毁其在内核中的各种数据结构，关闭进程的所有文件描述符，并结束进程、将 控制权交给操作系统。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _exit(<span class="keyword">int</span> status);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中的status含义与上面return的相同，0代表正常，其他数值代表异常</p>
</li>
<li><p><code>_Exit()</code>和<code>_exit()</code>等价，不再介绍</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _Exit(<span class="keyword">int</span> status);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>exit()</code>是一个标准 C 库函数，而_exit()和_Exit()是系统调用。<br>执行 exit()会执行一些清理工作，最后调用_exit()函数。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>不管你用哪一种都可以结束进程，但还是<strong>推荐大家使用 exit()</strong></li>
</ul>
<h2 id="空洞文件"><a href="#空洞文件" class="headerlink" title="空洞文件"></a>空洞文件</h2><ul>
<li><p>什么是空洞文件（hole file）？在上一章内容中，笔者给大家介绍了 lseek()系统调用，使用 lseek 可以修 改文件的当前读写位置偏移量，此函数不但可以改变位置偏移量，并且还允许文件偏移量超出文件长度，这 是什么意思呢？譬如有一个 test_file，该<strong>文件的大小是 4K</strong>（也就是 4096 个字节），如果通过 lseek 系统调 用将该文件的读写偏移量移动到<strong>偏移文件头部 6000 个字节处</strong>，大家想一想会怎样？如果笔者没有提前告诉 大家，大家觉得不能这样操作，但事实上 lseek 函数确实可以这样操作。</p>
</li>
<li><p>接下来使用 write()函数对文件进行写入操作，也就是说此时将是从<strong>偏移文件头部 6000 个字节处开始写 入数据</strong>，也就意味着 <strong>4096~6000 字节之间出现了一个空洞</strong>，因为这部分空间并<strong>没有写入任何数据，所以形 成了空洞</strong>，这部分区域就被称为文件空洞，那么相应的该文件也被称为<strong>空洞文件</strong>。</p>
</li>
<li><p>文件空洞部分<strong>实际上并不会占用任何物理空间</strong>，直到<strong>在某个时刻对空洞部分进行写入数据时才会为它 分配对应的空间</strong>，但是**空洞文件形成时，<u>逻辑上该文件的大小是包含了空洞部分的大小的</u>**，这点需要注意。</p>
</li>
<li><p>空洞文件对多线程共同操作文件是及其有用的，有时候我们创建 一个很大的文件，如果单个线程从头开始依次构建该文件需要很长的时间，有一种思路就是<strong>将文件分为多 段，然后使用多线程来操作</strong>，<strong>每个线程负责其中一段数据的写入</strong></p>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> fd;</span><br><span class="line">     <span class="keyword">int</span> ret;</span><br><span class="line">     <span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">     <span class="keyword">int</span> i;</span><br><span class="line">     <span class="comment">/* 打开文件 */</span></span><br><span class="line">     fd = open(<span class="string">&quot;./hole_file&quot;</span>, O_WRONLY | O_CREAT | O_EXCL,</span><br><span class="line">     S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd) </span><br><span class="line">     &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">/* 将文件读写位置移动到偏移文件头 4096 个字节(4K)处 */</span></span><br><span class="line">     ret = lseek(fd, <span class="number">4096</span>, SEEK_SET);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) </span><br><span class="line">     &#123;</span><br><span class="line">         perror(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">/* 初始化 buffer 为 0xFF */</span></span><br><span class="line">     <span class="built_in">memset</span>(buffer, <span class="number">0xFF</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line"> <span class="comment">/* 循环写入 4 次，每次写入 1K */</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">         ret = write(fd, buffer, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">         <span class="keyword">if</span> (<span class="number">-1</span> == ret) </span><br><span class="line">         &#123;</span><br><span class="line">             perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">             <span class="keyword">goto</span> err;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> 	ret = <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">     <span class="comment">/* 关闭文件 */</span></span><br><span class="line">     close(fd);</span><br><span class="line">     <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>上面的代码从文件的4k位置开始，一次写入1k，写入4次。</p>
</li>
<li><p>下面查看文件的大小</p>
</li>
<li><p><img src="/imgs/image-20220112143912056.png" alt="image-20220112143912056"></p>
</li>
<li><p>利用<code>ls</code>察看文件大小的时候，虽然文件只有4k有数据，但是文件大小查出来逻辑大小，也就是8k。</p>
</li>
<li><p>但是使用du查看的时候，只有文件占用的实际存储的大小，也就是4k。</p>
</li>
</ul>
<h2 id="O-APPEND-和-O-TRUNC-标志"><a href="#O-APPEND-和-O-TRUNC-标志" class="headerlink" title="O_APPEND 和 O_TRUNC 标志"></a>O_APPEND 和 O_TRUNC 标志</h2><p>在上一章给大家讲解 open 函数的时候介绍了一些 open 函数的 flags 标志，譬如 O_RDONLY、 O_WRONLY、O_CREAT、O_EXCL 等，本小节再给大家介绍两个标志，分别是 O_APPEND 和 O_TRUNC， 接下来对这两个标志分别进行介绍。</p>
<h3 id="O-TRUNC-标志"><a href="#O-TRUNC-标志" class="headerlink" title="O_TRUNC 标志"></a>O_TRUNC 标志</h3><ul>
<li>O_TRUNC 这个标志的作用非常简单，如果使用了这个标志，调用 open 函数打开文件的时候会<strong>将文件 原本的内容全部丢弃，文件大小变为 0</strong>；这里我们直接测试即可！测试代码如下所示：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> fd;</span><br><span class="line">     <span class="comment">/* 打开文件 */</span></span><br><span class="line">     fd = open(<span class="string">&quot;./test_file&quot;</span>, O_WRONLY | O_TRUNC);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd) </span><br><span class="line">     &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 关闭文件 */</span></span><br><span class="line">     close(fd);</span><br><span class="line">     <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="O-APPEND-标志"><a href="#O-APPEND-标志" class="headerlink" title="O_APPEND 标志"></a>O_APPEND 标志</h3><ul>
<li>如果 open 函数携带了 O_APPEND 标志，调用 open 函数打开文件， 当<strong>每次使用 write()函数对文件进行写操作时，都会自动把文件当前位置偏移量移动到文件末尾</strong>，从<strong>文件末 尾开始写入数据</strong>，也就是意味着每次写入数据都是从文件末尾开始。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> buffer[<span class="number">16</span>];</span><br><span class="line">     <span class="keyword">int</span> fd;</span><br><span class="line">     <span class="keyword">int</span> ret;</span><br><span class="line">     <span class="comment">/* 打开文件 */</span></span><br><span class="line">     fd = open(<span class="string">&quot;./test_file&quot;</span>, O_RDWR | O_APPEND);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == fd) &#123;</span><br><span class="line">         perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/* 初始化 buffer 中的数据 */</span></span><br><span class="line">     <span class="built_in">memset</span>(buffer, <span class="number">0x55</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">     <span class="comment">/* 写入数据: 写入 4 个字节数据 */</span></span><br><span class="line">     ret = write(fd, buffer, <span class="number">4</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err;</span><br><span class="line">     &#125;</span><br><span class="line">	 <span class="comment">/* 将 buffer 缓冲区中的数据全部清 0 */</span></span><br><span class="line">     <span class="built_in">memset</span>(buffer, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">     <span class="comment">/* 将位置偏移量移动到距离文件末尾 4 个字节处 */</span></span><br><span class="line">     ret = lseek(fd, <span class="number">-4</span>, SEEK_END);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err;</span><br><span class="line"> 	 &#125;</span><br><span class="line"> 	 <span class="comment">/* 读取数据 */</span></span><br><span class="line">	 ret = read(fd, buffer, <span class="number">4</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line">         perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">         <span class="keyword">goto</span> err;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;0x%x 0x%x 0x%x 0x%x\n&quot;</span>, buffer[<span class="number">0</span>], buffer[<span class="number">1</span>],</span><br><span class="line">         buffer[<span class="number">2</span>], buffer[<span class="number">3</span>]);</span><br><span class="line">     ret = <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">     <span class="comment">/* 关闭文件 */</span></span><br><span class="line">     close(fd);</span><br><span class="line">     <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><img src="/imgs/image-20220112145240871.png" alt="image-20220112145240871"></p>
</li>
<li><p>通过控制台可知，读出的内容确实是最后四个字节为0x55</p>
</li>
<li><p>O_APPEND 标志<strong>并不会影响读文件</strong>，<strong>当读取文件时，O_APPEND 标志并不会影响读位置偏移量</strong>，即使使用了 O_APPEND 标志，读文件位置偏移量默认情况下依然是文件头，关于这个问题大家可以自己进行测试，编程是一个实践 性很强的工作，有什么不能理解的问题，可以自己编写程序进行测试。</p>
</li>
<li><p>使用 lseek 函数来改变 write()时的写位置偏移量，<strong>其实这种做法并不会成功</strong>，这就是笔 者给大家提的第二个细节，使用了 O_APPEND 标志，<strong>即使是通过 lseek 函数也是无法修改写文件时对应的 位置偏移量</strong>（注意笔者这里说的是<strong>写文件，<u>并不包括读</u><strong>），</strong>写入数据依然是从文件末尾开始</strong>，lseek 并不会 该变写位置偏移量</p>
</li>
<li><p>测试</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1;</span><br><span class="line">    <span class="keyword">char</span> readBuff[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> wrBuff[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> * wrCont = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(wrCont[i]!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        wrBuff[i] = wrCont[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    wrBuff[i] = <span class="number">0</span>;</span><br><span class="line">    fd1 = open(<span class="string">&quot;./test1.txt&quot;</span>, O_RDWR|O_APPEND);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(wrBuff,<span class="string">&quot;, 0x%02x&quot;</span>, j);</span><br><span class="line">        <span class="built_in">printf</span>(wrBuff);</span><br><span class="line">        write(fd1, wrBuff, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close(fd1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>此处函数不对文件偏移位置进修修改的前提下，在文件写入4次<code>, 0xXX</code>的字符，观察效果</p>
</li>
<li><p><img src="/imgs/image-20220112151123797.png" alt="image-20220112151123797"></p>
</li>
<li><p>可以看出，在文件最后多出了四个字符串，可见每次写入的时候，文件的偏移量都自动移动到了文件的最后，即使文件在这个过程中并没有被保存。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux文件锁</title>
    <url>/2022/01/26/Linux%E6%96%87%E4%BB%B6%E9%94%81/</url>
    <content><![CDATA[<h1 id="Linux文件锁"><a href="#Linux文件锁" class="headerlink" title="Linux文件锁"></a>Linux文件锁</h1><ul>
<li>对于有些应用程序，进程有时需要确保只有它自己能够对某一文件进行 I/O 操作，在这段时间内不允许 其它进程对该文件进行 I/O 操作。为了向进程提供这种功能，Linux 系统提供了文件锁机制。</li>
<li>譬如进程对文件进行 I/O 操作时，首先对文件进行上锁，将其锁住，然后再进行读写操作；只要进程没有对 文件进行解锁，那么其它的进程将无法对其进行操作；这样就可以保证，文件被锁住期间，只有它（该进程） 可以对其进行读写操作。</li>
</ul>
<h2 id="文件锁的分类"><a href="#文件锁的分类" class="headerlink" title="文件锁的分类"></a>文件锁的分类</h2><h3 id="建议性锁"><a href="#建议性锁" class="headerlink" title="建议性锁"></a>建议性锁</h3><ul>
<li>建议性锁本质上是一种协议，程序访问文件之前，先对文件上锁，上锁成功之后再访问文件，这是建议 性锁的一种用法；但是如果你的程序不管三七二十一，在没有对文件上锁的情况下直接访问文件，也是可以 访问的，并非无法访问文件；如果是这样，那么建议性锁就没有起到任何作用，如果要使得建议性锁起作用， 那么大家就要遵守协议，访问文件之前先对文件上锁。这就好比交通信号灯，规定红灯不能通行，绿灯才可 以通行，但如果你非要在红灯的时候通行，谁也拦不住你，那么后果将会导致发生交通事故；所以必须要大 家共同遵守交通规则，交通信号灯才能起到作用。</li>
</ul>
<h3 id="强制性锁"><a href="#强制性锁" class="headerlink" title="强制性锁"></a>强制性锁</h3><ul>
<li>强制性锁比较好理解，它是一种强制性的要求，如果进程对文件上了强制性锁，其它的进程在没有获取 到文件锁的情况下是无法对文件进行访问的。其本质原因在于，强制性锁会让内核检查每一个 I/O 操作（譬 如 read()、write()），验证调用进程是否是该文件锁的拥有者，如果不是将无法访问文件。当一个文件被上 锁进行写入操作的时候，内核将阻止其它进程对其进行读写操作。采取强制性锁对性能的影响很大，每次进 行读写操作都必须检查文件锁。</li>
</ul>
<h2 id="flock-函数加锁"><a href="#flock-函数加锁" class="headerlink" title="flock()函数加锁"></a>flock()函数加锁</h2><ul>
<li>先来学习系统调用 flock()，使用该函数可以对文件加锁或者解锁，但是 flock()函数只能产生建议性锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flock</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> operation)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>fd：参数 fd 为文件描述符，指定需要加锁的文件。</p>
</li>
<li><p>operation：参数 operation 指定了操作方式，可以设置为以下值的其中一个：</p>
<ul>
<li>LOCK_SH：在 fd 引用的文件上放置一把共享锁。所谓共享，指的便是多个进程可以拥有对同一 个文件的共享锁，该共享锁可被多个进程同时拥有。</li>
<li>LOCK_EX：在 fd 引用的文件上放置一把排它锁（或叫互斥锁）。所谓互斥，指的便是互斥锁只 能同时被一个进程所拥有。</li>
<li>LOCK_UN：解除文件锁定状态，解锁、释放锁。</li>
<li>LOCK_NB：表示以<strong>非阻塞方式获取锁</strong>。默认情况下，调用 flock()无法获取到文件锁时会阻塞、直 到其它进程释放锁为止，如果不想让程序被阻塞，可以指定 LOCK_NB 标志，如果无法获取到锁 应立刻返回（错误返回，并将 errno 设置为 EWOULDBLOCK），通常与 LOCK_SH 或 LOCK_EX 一起使用，通过位或运算符组合在一起。</li>
</ul>
</li>
<li><p>注意，虽然一个程序对文件加锁之后，另一个程序企图加锁文件会失败，但是另一个程序同样可以打开并且编辑这个文件。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fd = <span class="number">-1</span>; <span class="comment">//文件描述符</span></span><br><span class="line"><span class="comment">/* 信号处理函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigint_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (SIGINT != sig)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* 解锁 */</span></span><br><span class="line">    flock(fd, LOCK_UN);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进程 1: 文件已解锁!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: %s &lt;file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 以非阻塞方式对文件加锁(排它锁) */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == flock(fd, LOCK_EX | LOCK_NB))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;进程 1: 文件加锁失败&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进程 1: 文件加锁成功!\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 为 SIGINT 信号注册处理函数 */</span></span><br><span class="line">    signal(SIGINT, sigint_handler);</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>另一个试图读写文件的程序</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: %s &lt;file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 以非阻塞方式对文件加锁(排它锁) */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == flock(fd, LOCK_EX | LOCK_NB))</span><br><span class="line">        perror(<span class="string">&quot;进程 2: 文件加锁失败&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;进程 2: 文件加锁成功!\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 写文件 */</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; write(fd, buf, len))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进程 2: 写入到文件的字符串&lt;%s&gt;\n&quot;</span>, buf);</span><br><span class="line">    <span class="comment">/* 将文件读写位置移动到文件头 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; lseek(fd, <span class="number">0x0</span>, SEEK_SET))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;lseek error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 读文件 */</span></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0x0</span>, <span class="keyword">sizeof</span>(buf)); <span class="comment">//清理 buf</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; read(fd, buf, len))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进程 2: 从文件读取的字符串&lt;%s&gt;\n&quot;</span>, buf);</span><br><span class="line">    <span class="comment">/* 解锁、退出 */</span></span><br><span class="line">    flock(fd, LOCK_UN);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>使用 kill 命令向 testApp1 进程发送编号为 2 的信号，也就是 SIGIO 信号，testApp1 接收到信号之后， 对 infile 文件进行解锁、然后退出；接着再次执行 testApp2 程序，从打印信息可知，这次能够成功对 infile 文件加锁了，读写也是没有问题的。</li>
<li>关于 flock()的几条规则<ul>
<li>同一进程对文件多次加锁<strong>不会导致死锁</strong>。当进程调用 flock()对文件加锁成功，再次调用 flock()对 文件（同一文件描述符）加锁，这样不会导致死锁，<strong>新加的锁会<u>替换</u>旧的锁</strong>。譬如调用 flock()对文 件加共享锁，再次调用 flock()对文件加排它锁，最终文件锁会由共享锁替换为排它锁。</li>
<li>文件关闭的时候，<strong>会自动解锁</strong>。进程调用 flock()对文件加锁，如果在未解锁之前将文件关闭，则会 导致文件锁自动解锁，也就是说，文件锁会在相应的文件描述符被关闭之后自动释放。同理，当一 个进程终止时，它所建立的锁将全部释放。</li>
<li>一个进程不可以对<strong>另一个进程持有</strong>的文件锁进行解锁。</li>
<li>由 fork()创建的子进程不会继承父进程所创建的锁。这意味着，若一个进程对文件加锁成功，然后 该进程调用 fork()创建了子进程，那么对父进程创建的锁而言，子进程被视为另一个进程，虽然<strong>子 进程从父进程继承了其文件描述符，但不能继承文件锁</strong>。这个约束是有道理的，因为锁的作用就是 阻止多个进程同时写同一个文件，<strong>如果子进程通过 fork()继承了父进程的锁，则</strong> <strong>父进程和子进程就 可以同时写同一个文件了</strong>。</li>
<li>除此之外，当一个<strong>文件描述符被复制时</strong>（譬如使用 dup()、dup2()或 fcntl()F_DUPFD 操作），这些通过 复制得到的文件描述符和源文件描述符都会<strong>引用同一个文件锁</strong>，使用<strong>这些文件描述符中的任何一个进行解 锁都可以</strong></li>
</ul>
</li>
</ul>
<h2 id="fcntl-函数加锁"><a href="#fcntl-函数加锁" class="headerlink" title="fcntl()函数加锁"></a>fcntl()函数加锁</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> cmd, ... <span class="comment">/* struct flock *flockptr */</span> )</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>与锁相关的 cmd 为 F_SETLK、F_SETLKW、F_GETLK，第三个参数 flockptr 是一个 struct flock 结构体 指针。使用 fcntl()实现文件锁功能与 flock()有两个比较大的区别：</p>
<ul>
<li>flock()仅支持对整个文件进行加锁/解锁；而 fcntl()可以对文件的<strong>某个区域（某部分内容）进行加锁 /解锁，可以精确到某一个字节数据</strong>。</li>
<li>flock()<strong>仅支持建议性锁类型</strong>；而 fcntl()可支持建议性锁和强制性锁两种类型。</li>
</ul>
</li>
<li><p>结构体参数如下</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flock</span> &#123;</span></span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">short</span> l_type; <span class="comment">/* Type of lock: F_RDLCK,F_WRLCK, F_UNLCK */</span></span><br><span class="line"> <span class="keyword">short</span> l_whence; <span class="comment">/* How to interpret l_start: SEEK_SET, SEEK_CUR, SEEK_END */</span></span><br><span class="line"> <span class="keyword">off_t</span> l_start; <span class="comment">/* Starting offset for lock */</span></span><br><span class="line"> <span class="keyword">off_t</span> l_len; <span class="comment">/* Number of bytes to lock */</span></span><br><span class="line"> <span class="keyword">pid_t</span> l_pid; <span class="comment">/* PID of process blocking our lock(set by F_GETLK and F_OFD_GETLK) */</span></span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>具体说明</p>
<ul>
<li>l_type：所希望的锁类型，可以设置为 F_RDLCK、F_WRLCK 和 F_UNLCK 三种类型之一，F_RDLCK 表示共享性质的读锁，F_WRLCK 表示独占性质的写锁，F_UNLCK 表示解锁一个区域。</li>
<li>l_whence 和 l_start：这两个变量用于指定要加锁或解锁区域的起始字节偏移量，与 2.7 小节所学 的 lseek()函数中的 offset 和 whence 参数相同，这里不再重述，如果忘记了，可以回到 2.7 小节再 看看。</li>
<li>l_len：需要加锁或解锁区域的字节长度。</li>
<li>l_pid：一个 pid，指向一个进程，表示该进程持有的锁能阻塞当前进程，当 cmd=F_GETLK 时有效。</li>
</ul>
</li>
<li><p>几条规则</p>
<ul>
<li>锁区域可以在当前文件末尾处开始或者越过末尾处开始，但是不能在文件起始位置之前开始。</li>
<li>若参数 l_len 设置为 0，表示将锁区域扩大到最大范围，也就是说从锁区域的起始位置开始，到文 件的最大偏移量处（也就是文件末尾）都处于锁区域范围内。而且是动态的，这意味着不管向该文 件追加写了多少数据，它们都处于锁区域范围，起始位置可以是文件的任意位置。</li>
<li>如果我们需要对整个文件加锁，可以将 l_whence 和 l_start 设置为指向文件的起始位置，并且指定 参数 l_len 等于 0。</li>
</ul>
</li>
<li><p>锁的类型</p>
</li>
<li><p>上面我们提到了两种类型的锁，分别为共享性读锁（F_RDLCK）和独占性写锁（F_WRLCK）。基本的 规则与 12.5 小节所介绍的线程同步读写锁很相似，<strong>任意多个进程在一个给定的字节上可以有一把共享的读 锁</strong>，但是<strong>在一个给定的字节上只能有一个进程有一把独占写锁</strong>，进一步而言，如果在一个给定的字节上已经 有一把或多把读锁，则不能在该字节上加写锁；如果在一个字节上<strong>已经有一把独占性写锁，则不能再对它加 任何锁</strong>（包括读锁和写锁）</p>
</li>
</ul>
<p><img src="/../imgs/image-20220126132857197.png" alt="image-20220126132857197"></p>
<ul>
<li><p>如果一个进程对文件的某个区域已经上了一把锁，后来该进程又试图在该区域再加一把锁，那么通常<strong>新 加的锁将替换旧的锁</strong>。譬如，若某一进程在文件的 100<del>200 字节区间有一把写锁，然后又试图在 100</del>200 字 节区间再加一把读锁，那么该请求将会成功执行，原来的写锁会替换为读锁。</p>
</li>
<li><p>当对文件的某一区域加读锁时，调用进程必须对该文件有读权限，譬如 open() 时 flags 参数指定了 O_RDONLY 或 O_RDWR；当对文件的某一区域加写锁时，调用进程必须对该文件有写 权限，譬如 open()时 flags 参数指定了 O_WRONLY 或 O_RDWR。</p>
</li>
<li><p>F_SETLK、F_SETLKW 和 F_GETLK</p>
<ul>
<li> F_GETLK：这种用法一般用于测试，测试调用进程对文件加一把由参数 flockptr 指向的 struct flock 对象所描述的锁是否会加锁成功。如果加锁不成功，意味着该文件的这部分区域已经存在一把锁， 并且由另一进程所持有，并且调用进程加的锁与现有锁之间存在排斥关系，现有锁会阻止调用进程 想要加的锁，并且现有锁的信息将会重写参数 flockptr 指向的对象信息。如果不存在这种情况，也 就是说 flockptr 指向的 struct flock 对象所描述的锁会加锁成功，则除了将 struct flock 对象的 l_type 修改为 F_UNLCK 之外，结构体中的其它信息保持不变。</li>
<li>F_SETLK：对文件添加由 flockptr 指向的 struct flock 对象所描述的锁。譬如试图对文件的某一区 域加读锁（l_type 等于 F_RDLCK）或写锁（l_type 等于 F_WRLCK），如果加锁失败，那么 fcntl() 将立即出错返回，此时将 errno 设置为 EACCES 或 EAGAIN。也可用于清除由 flockptr 指向的 struct  flock 对象所描述的锁（l_type 等于 F_UNLCK）。</li>
<li>F_SETLKW：此命令是 F_SETLK 的阻塞版本（命令名中的 W 表示等待 wait），如果所请求的读 锁或写锁因另一个进程当前已经对所请求区域的某部分进行了加锁，而导致请求失败，那么调用进 程将会进入阻塞状态。只有当请求的锁可用时，进程才会被唤醒。</li>
</ul>
</li>
<li><p>规则</p>
<ul>
<li>文件关闭的时候，会自动解锁。</li>
<li>一个进程不可以对另一个进程持有的文件锁进行解锁。</li>
<li>由 fork()创建的子进程不会继承父进程所创建的锁。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">flock</span> <span class="title">lock</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="comment">/* 校验传参 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: %s &lt;file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 对文件加锁 */</span></span><br><span class="line">    lock.l_type = F_WRLCK;    <span class="comment">//独占性写锁</span></span><br><span class="line">    lock.l_whence = SEEK_SET; <span class="comment">//文件头部</span></span><br><span class="line">    lock.l_start = <span class="number">0</span>;         <span class="comment">//偏移量为 0</span></span><br><span class="line">    lock.l_len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fcntl(fd, F_SETLK, &amp;lock))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;加锁失败&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对文件加锁成功!\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 对文件进行写操作 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; write(fd, buf, <span class="built_in">strlen</span>(buf)))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 解锁 */</span></span><br><span class="line">    lock.l_type = F_UNLCK; <span class="comment">//解锁</span></span><br><span class="line">    fcntl(fd, F_SETLK, &amp;lock);</span><br><span class="line">    <span class="comment">/* 退出 */</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>不同区域加锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">flock</span> <span class="title">wr_lock</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">flock</span> <span class="title">rd_lock</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">/* 校验传参 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: %s &lt;file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 将文件大小截断为 1024 字节 */</span></span><br><span class="line">    ftruncate(fd, <span class="number">1024</span>);</span><br><span class="line">    <span class="comment">/* 对 100~200 字节区间加写锁 */</span></span><br><span class="line">    wr_lock.l_type = F_WRLCK;</span><br><span class="line">    wr_lock.l_whence = SEEK_SET;</span><br><span class="line">    wr_lock.l_start = <span class="number">100</span>;</span><br><span class="line">    wr_lock.l_len = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fcntl(fd, F_SETLK, &amp;wr_lock))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;加写锁失败&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加写锁成功!\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 对 400~500 字节区间加读锁 */</span></span><br><span class="line">    rd_lock.l_type = F_RDLCK;</span><br><span class="line">    rd_lock.l_whence = SEEK_SET;</span><br><span class="line">    rd_lock.l_start = <span class="number">400</span>;</span><br><span class="line">    rd_lock.l_len = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fcntl(fd, F_SETLK, &amp;rd_lock))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;加读锁失败&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加读锁成功!\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 对文件进行 I/O 操作 */</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="comment">/* 解锁 */</span></span><br><span class="line">    wr_lock.l_type = F_UNLCK; <span class="comment">//写锁解锁</span></span><br><span class="line">    fcntl(fd, F_SETLK, &amp;wr_lock);</span><br><span class="line">    rd_lock.l_type = F_UNLCK; <span class="comment">//读锁解锁</span></span><br><span class="line">    fcntl(fd, F_SETLK, &amp;rd_lock);</span><br><span class="line">    <span class="comment">/* 退出 */</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>多个进程对同一文件的相同区域都可以加读锁，说明读锁是共享性的。由于程序 是放置在后台运行的，测试完毕之后，可以使用 kill 命令将这些进程杀死，或者直接关闭当前终端，重新启 动新的终端。</li>
<li>第一次启动的进程对文件加写锁之后，后面再启动进程对同一文件的相同区域加写 锁发现都会失败，所以由此可知，写锁是独占性的。</li>
</ul>
<p>锁的规则同上面的<code>flock()</code>函数</p>
<p><strong>强制性锁</strong>会直接影响<code>read()</code>和<code>write()</code>函数的操作（失败会报错），在此处略</p>
]]></content>
  </entry>
  <entry>
    <title>Linux线程（三）线程同步</title>
    <url>/2022/01/23/Linux%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>互斥锁（mutex）又叫互斥量，从本质上说是一把锁，在访问共享资源之前对互斥锁进行上锁，在访问 完成后释放互斥锁（解锁）；对互斥锁进行上锁之后，任何其它试图再次对互斥锁进行加锁的线程都会被阻塞，直到当前线程释放互斥锁</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>互 斥锁使 用 pthread_mutex_t 数 据类型 表示， pthread_mutex_t 其 实是一个 结构体 类型， 而宏 PTHREAD_MUTEX_INITIALIZER 其实是一个对结构体赋值操作的封装</li>
<li>使用宏定义初始化互斥锁：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER</span><br></pre></td></tr></table></figure>

<ul>
<li>使用函数初始化互斥锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex, <span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>mutex：参数 mutex 是一个 pthread_mutex_t 类型指针，指向需要进行初始化操作的互斥锁对象；</li>
<li>attr：参数 attr 是一个 pthread_mutexattr_t 类型指针，指向一个 pthread_mutexattr_t 类型对象，该对象用 于定义互斥锁的属性，若将参数 attr 设置为 NULL，则表示将互斥锁的属性设置为 <strong>默认值</strong>，在这种情况下其实就<strong>等价于 PTHREAD_MUTEX_INITIALIZER</strong> 这种方式初始化，而不同之处在于， 使用宏不进行错误检查。</li>
<li>返回值：成功返回 0；失败将返回一个非 0 的错误码。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line">pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> *mutex = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">pthread_mutex_t</span>));</span><br><span class="line">pthread_mutex_init(mutex, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<h4 id="互斥锁的属性"><a href="#互斥锁的属性" class="headerlink" title="互斥锁的属性"></a>互斥锁的属性</h4><ul>
<li>如果不使用默认属性，在调用 pthread_mutex_init()函数时，参数 attr 必须要指向一个 pthread_mutexattr_t 对象，而不能使用 NULL。当定义 pthread_mutexattr_t 对象之后，需要使用 pthread_mutexattr_init()函数对该 对象进行初始化操作，当对象不再使用时，需要使用 pthread_mutexattr_destroy()将其销毁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_destroy</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutexattr_init</span><span class="params">(<span class="keyword">pthread_mutexattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性的类型<ul>
<li>PTHREAD_MUTEX_NORMAL：一种标准的互斥锁类型，不做任何的错误检查或死锁检测。如果 线程试图对已经由自己锁定的互斥锁再次进行加锁，则发生死锁；互斥锁处于未锁定状态，或者已 由其它线程锁定，对其解锁会导致不确定结果。</li>
<li>PTHREAD_MUTEX_ERRORCHECK：此类互斥锁会提供错误检查。譬如这三种情况都会导致返 回错误：线程试图对已经由自己锁定的互斥锁再次进行加锁（同一线程对同一互斥锁加锁两次）， 返回错误；线程对由其它线程锁定的互斥锁进行解锁，返回错误；线程对处于未锁定状态的互斥锁 进行解锁，返回错误。这类互斥锁运行起来比较慢，因为它需要做错误检查，不过可将其作为调试 工具，以发现程序哪里违反了互斥锁使用的基本原则。</li>
<li>PTHREAD_MUTEX_RECURSIVE：此类互斥锁允许同一线程在互斥锁解锁之前对该互斥锁进行 多次加锁，然后维护互斥锁加锁的次数，把这种互斥锁称为递归互斥锁，但是如果解锁次数不等于加速次数，则是不会释放锁的；所以，如果对一个递归互斥锁加锁两次，然后解锁一次，那么这个 互斥锁依然处于锁定状态，对它再次进行解锁之前不会释放该锁。</li>
<li>PTHREAD_MUTEX_DEFAULT ： 此 类 互 斥 锁 提 供 默 认 的 行 为 和 特 性 。 使 用 宏 PTHREAD_MUTEX_INITIALIZER 初 始 化 的 互 斥 锁 ， 或 者 调 用 参 数 arg 为 NULL 的 pthread_mutexattr_init()函数所创建的互斥锁，都属于此类型。此类锁意在为互斥锁的实现保留最大 灵活性， Linux 上 ， PTHREAD_MUTEX_DEFAULT 类 型 互 斥 锁 的 行 为 与 PTHREAD_MUTEX_NORMAL 类型相仿。</li>
</ul>
</li>
</ul>
<h3 id="互斥锁加锁和解锁"><a href="#互斥锁加锁和解锁" class="headerlink" title="互斥锁加锁和解锁"></a>互斥锁加锁和解锁</h3><ul>
<li>互斥锁初始化之后，处于一个未锁定状态，调用函数 pthread_mutex_lock()可以对互斥锁加锁、获取互 斥锁，而调用函数 pthread_mutex_unlock()可以对互斥锁解锁、释放互斥锁。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果互斥锁处于未锁定状态，则此次调用会上锁成 功，函数调用将立马返回；如果互斥锁此时<strong>已经被其它线程锁定</strong>了，那么调用 pthread_mutex_lock()会<strong>一直 阻塞</strong>，直到该互斥锁<strong>被解锁</strong>，到那时，调用将锁定互斥锁并返回</p>
</li>
<li><p>调用 pthread_mutex_unlock()函数将已经处于锁定状态的互斥锁进行解锁。以下行为均属错误：</p>
<ul>
<li>对处于未锁定状态的互斥锁进行解锁操作；</li>
<li>解锁由<strong>其它线程锁定</strong>的互斥锁。</li>
</ul>
</li>
<li><p>如果线程加锁的时候不希望被阻塞，可以使用 <code>pthread_mutex_trylock()</code>函数</p>
<ul>
<li>如果 互斥锁已经被其它线程锁住，调用 pthread_mutex_trylock()加锁失败，但不会阻塞，而是返回错误码 EBUSY。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="销毁互斥锁"><a href="#销毁互斥锁" class="headerlink" title="销毁互斥锁"></a>销毁互斥锁</h3><ul>
<li>调用 pthread_mutex_destroy()函数来销毁互斥锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>不能销毁还没有解锁的互斥锁，否则将会出现错误；</li>
<li>没有初始化的互斥锁也不能销毁。</li>
</ul>
<h3 id="互斥锁死锁"><a href="#互斥锁死锁" class="headerlink" title="互斥锁死锁"></a>互斥锁死锁</h3><p>有时，一个线程需要同时访问两个或更多不同的共享资源，而每个资源又由不同的互斥锁管理。当超过 一个线程对同一组互斥锁（两个或两个以上的互斥锁）进行加锁时，就有可能发生死锁；譬如，程序中使用 一个以上的互斥锁，如果允许一个线程一直占有第一个互斥锁，并且在试图锁住第二个互斥锁时处于阻塞 状态，但是拥有第二个互斥锁的线程也在试图锁住第一个互斥锁。因为两个线程都在相互请求另一个线程 拥有的资源，所以这两个线程都无法向前运行，会被一直阻塞，于是就产生了死锁。</p>
<h2 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h2><p>条件变量是线程可用的另一种同步机制。条件变量用于自动阻塞线程，知道某个特定事件发生或某个条 件满足为止，通常情况下，条件变量是和互斥锁一起搭配使用的。条件变量包括</p>
<ul>
<li>一个线程等待某个条件满足而被阻塞</li>
<li>另一个线程中，条件满足时发出“信号”</li>
</ul>
<h3 id="条件变量初始化"><a href="#条件变量初始化" class="headerlink" title="条件变量初始化"></a>条件变量初始化</h3><ul>
<li>使用宏定义初始化条件变量</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br></pre></td></tr></table></figure>

<ul>
<li>pthread_cond_init()函数原型如下所示</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_destroy</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_init</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond, <span class="keyword">const</span> <span class="keyword">pthread_condattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用这些函数需要包含头文件，使用 pthread_cond_init()函数初始化条件变量，当不再 使用时，使用 pthread_cond_destroy()销毁条件变量。</p>
</li>
<li><p>参数 cond 指向 pthread_cond_t 条件变量对象，对于 pthread_cond_init()函数，类似于互斥锁，在初始化 条件变量时设置条件变量的属性，参数 attr 指向一个 pthread_condattr_t 类型对象，pthread_condattr_t 数据类 型用于描述条件变量的属性。可将参数 attr 设置为 NULL，表示使用属性的默认值来初始化条件变量，与使 用 PTHREAD_COND_INITIALIZER 宏相同。</p>
</li>
<li><p>注意事项</p>
<ul>
<li>在使用条件变量之前必须对条件变量进行初始化操作，使用 PTHREAD_COND_INITIALIZER 宏或 者函数 pthread_cond_init()都行；</li>
<li>对已经初始化的条件变量再次进行初始化，将可能会导致未定义行为；</li>
<li>对没有进行初始化的条件变量进行销毁，也将可能会导致未定义行为；</li>
<li>对某个条件变量而言，仅当没有任何线程等待它时，将其销毁才是最安全的；</li>
<li>经 pthread_cond_destroy()销毁的条件变量，可以再次调用 pthread_cond_init()对其进行重新初始化。</li>
</ul>
</li>
</ul>
<h3 id="通知和等待"><a href="#通知和等待" class="headerlink" title="通知和等待"></a>通知和等待</h3><ul>
<li>发送信号操作即是通知一个或多个处于等待状态 的线程，某个共享变量的状态已经改变，这些处于等待状态的线程收到通知之后便会被唤醒，唤醒之后再检 查条件是否满足。等待操作是指在收到一个通知前一直处于阻塞状态。</li>
<li>函数 pthread_cond_signal()和 pthread_cond_broadcast()均可向指定的条件变量发送信号，通知一个或多 个处于等待状态的线程。调用 pthread_cond_wait()函数是线程阻塞，直到收到条件变量的通知。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_broadcast</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_signal</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>pthread_cond_signal()函数至少能唤醒一个线程，而 pthread_cond_broadcast()函数 则能唤醒所有线程。</li>
<li>使用 pthread_cond_broadcast()函数总能产生正确的结果，唤醒所有等待状态的线程，但函数 pthread_cond_signal()会<strong>更为高效，因为它只需确保至少唤醒一个线程即可</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cond_wait</span><span class="params">(<span class="keyword">pthread_cond_t</span> *cond, <span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当程序当中使用条件变量，当判断某个条件不满足时，调用 pthread_cond_wait()函数将线程设置为等待 状态（阻塞）。</p>
</li>
<li><p>cond：指向需要等待的条件变量，目标条件变量；</p>
</li>
<li><p>mutex：参数 mutex 是一个 pthread_mutex_t 类型指针，指向一个互斥锁对象；前面开头便给大家介绍 了，条件变量通常是和互斥锁一起使用，因为条件的检测（条件检测通常是需要访问共享资源的）是在互斥 锁的保护下进行的，也就是说<strong>条件本身是由互斥锁保护的</strong>。</p>
<ul>
<li>在 pthread_cond_wait()函数内部会对参数 mutex 所指定的互斥锁进行操作，通常情况下，条件判断以及 pthread_cond_wait()函数调用<strong>均在互斥锁的保护下</strong>，也就是说，<strong>在此之前线程已经对互斥锁加锁了</strong>。调用 pthread_cond_wait()函数时，<strong>调用者把互斥锁传递给函数</strong>，函数会<strong>自动把调用线程放到等待条件的线程列表 上，然后将互斥锁解锁；当 pthread_cond_wait()被唤醒返回时，会再次锁住互斥锁</strong>。</li>
</ul>
</li>
<li><p>如果调用 pthread_cond_signal()和 pthread_cond_broadcast()向指定条件变量发送信号时，若无任何线程等待该条件变量， 这个信号也就会不了了之。</p>
</li>
<li><p>当调用 pthread_cond_broadcast()同时唤醒所有线程时，互斥锁也只能被某一线程锁住，其它线程获取锁 失败又会陷入阻塞。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pthread_mutex_t</span> mutex; <span class="comment">//定义互斥锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pthread_cond_t</span> cond;   <span class="comment">//定义条件变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_avail = <span class="number">0</span>;       <span class="comment">//全局共享资源</span></span><br><span class="line"><span class="comment">/* 消费者线程 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">consumer_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex); <span class="comment">//上锁</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &gt;= g_avail)</span><br><span class="line">            pthread_cond_wait(&amp;cond, &amp;mutex); <span class="comment">//等待条件满足</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt; g_avail)</span><br><span class="line">            g_avail--;                <span class="comment">//消费</span></span><br><span class="line">        pthread_mutex_unlock(&amp;mutex); <span class="comment">//解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 主线程（生产者） */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="comment">/* 初始化互斥锁和条件变量 */</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;cond, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* 创建新线程 */</span></span><br><span class="line">    ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, consumer_thread, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);   <span class="comment">//上锁</span></span><br><span class="line">        g_avail++;                    <span class="comment">//生产</span></span><br><span class="line">        pthread_mutex_unlock(&amp;mutex); <span class="comment">//解锁</span></span><br><span class="line">        pthread_cond_signal(&amp;cond);   <span class="comment">//向条件变量发送信号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上面的程序实现的功能是主线程对一个变量上互斥锁，+1，解锁互斥锁，然后发送信号唤醒子线程，线程对变量进行加锁，等待信号量，然后对变量-1，然后在解锁。</li>
</ul>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>如果在获取自旋锁时，自旋锁处于未锁定状态，那么将立即获得锁（对自旋锁上锁）；如果在获取自旋 锁时，自旋锁已经处于锁定状态了，那么获取锁操作将会在原地“自旋”，直到该自旋锁的持有者释放了锁。 由此介绍可知，自旋锁与互斥锁相似，但是互斥锁在无法获取到锁时会让线程陷入阻塞等待状态；而自旋锁 在无法获取到锁时，将会在原地“自旋”等待。“自旋”其实就是调用者一直在循环查看该自旋锁的持有者 是否已经释放了锁，“自旋”一词因此得名。</p>
<ul>
<li><p>自旋锁的不足之处在于：自旋锁一直占用的 CPU，它在未获得锁的情况下，一直处于运行状态（自旋）， 所以占着 CPU，如果不能在很短的时间内获取锁，这无疑会使 CPU 效率降低。</p>
</li>
<li><p>自旋锁通常用于以下情况：需要保护的代码段执行时间很短，这样就会使 得持有锁的线程会很快释放锁，而“自旋”等待的线程也只需等待很短的时间；在这种情况下就比较适合使 用自旋锁，效率高！</p>
</li>
<li><p>区别</p>
<ul>
<li>实现方式上的区别：互斥锁是基于自旋锁而实现的，所以自旋锁相较于互斥锁更加底层；</li>
<li>开销上的区别：获取不到互斥锁会陷入阻塞状态（休眠），直到获取到锁时被唤醒；而获取不到自 旋锁会在原地“自旋”，直到获取到锁；休眠与唤醒开销是很大的，所以互斥锁的开销要远高于自 旋锁、自旋锁的效率远高于互斥锁；但如果长时间的“自旋”等待，会使得 CPU 使用效率降低， 故自旋锁不适用于等待时间比较长的情况。</li>
<li>使用场景的区别：自旋锁在用户态应用程序中使用的比较少，通常在内核代码中使用比较多；因为 自旋锁可以在中断服务函数中使用，而互斥锁则不行，在执行中断服务函数时要求不能休眠、不能 被抢占（内核中使用自旋锁会自动禁止抢占），一旦休眠意味着执行中断服务函数时主动交出了 CPU 使用权，休眠结束时无法返回到中断服务函数中，这样就会导致死锁！</li>
</ul>
</li>
</ul>
<h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>使用 pthread_spin_init()函数对其 进行初始化，当不再使用自旋锁时，调用 pthread_spin_destroy()函数将其销毁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_destroy</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_init</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock, <span class="keyword">int</span> pshared)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 lock 指向了需要进行初始化或销毁的自旋锁对象，参数 pshared 表示自旋锁的进程共享属性，可以 取值如下：<ul>
<li>PTHREAD_PROCESS_SHARED：共享自旋锁。该自旋锁可以在多个进程中的线程之间共享；</li>
<li>PTHREAD_PROCESS_PRIVATE：私有自旋锁。只有本进程内的线程才能够使用该自旋锁。</li>
</ul>
</li>
</ul>
<h3 id="加锁和解锁"><a href="#加锁和解锁" class="headerlink" title="加锁和解锁"></a>加锁和解锁</h3><ul>
<li>可以使用 pthread_spin_lock()函数或 pthread_spin_trylock()函数对自旋锁进行加锁，<strong>前者在未获取到锁时 一直“自旋”</strong>；对于后者，如果<strong>未能获取到锁，就立刻返回错误</strong>，错误码为 EBUSY。不管以何种方式加锁， 自旋锁都可以使用 pthread_spin_unlock()函数对自旋锁进行解锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_lock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_trylock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_spin_unlock</span><span class="params">(<span class="keyword">pthread_spinlock_t</span> *lock)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果自旋锁处于未锁定状态，调用 pthread_spin_lock()会将其锁定（上锁），如果其它线程已经将自旋 锁锁住了，那本次调用将会“自旋”等待；如果试图对同一自旋锁加锁两次必然会导致死锁。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pthread_spinlock_t</span> spin; <span class="comment">//定义自旋锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">new_thread_start</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> loops = *((<span class="keyword">int</span> *)arg);</span><br><span class="line">    <span class="keyword">int</span> l_count, j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; loops; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_spin_lock(&amp;spin); <span class="comment">//自旋锁上锁</span></span><br><span class="line"></span><br><span class="line">        l_count = g_count;</span><br><span class="line">        l_count++;</span><br><span class="line">        g_count = l_count;</span><br><span class="line">        pthread_spin_unlock(&amp;spin); <span class="comment">//自旋锁解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> loops;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid1, tid2;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="comment">/* 获取用户传递的参数 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> &gt; argc)</span><br><span class="line">        loops = <span class="number">10000000</span>; <span class="comment">//没有传递参数默认为 1000 万次</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        loops = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">/* 初始化自旋锁(私有) */</span></span><br><span class="line">    pthread_spin_init(&amp;spin, PTHREAD_PROCESS_PRIVATE);</span><br><span class="line">    <span class="comment">/* 创建 2 个新线程 */</span></span><br><span class="line">    ret = pthread_create(&amp;tid1, <span class="literal">NULL</span>, new_thread_start, &amp;loops);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_create(&amp;tid2, <span class="literal">NULL</span>, new_thread_start, &amp;loops);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 等待线程结束 */</span></span><br><span class="line">    ret = pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_join error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_join error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;g_count = %d\n&quot;</span>, g_count);</span><br><span class="line">    <span class="comment">/* 销毁自旋锁 */</span></span><br><span class="line">    pthread_spin_destroy(&amp;spin);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><ul>
<li><p>读写锁有如下两个规则：</p>
<ul>
<li>当读写锁处于写加锁状态时，在这个锁被解锁之前，所有试图对这个锁进行加锁操作（不管是以读 模式加锁还是以写模式加锁）的线程都会被阻塞。</li>
<li>当读写锁处于读加锁状态时，所有试图以读模式对它进行加锁的线程都可以加锁成功；但是任何以 写模式对它进行加锁的线程都会被阻塞，直到所有持有读模式锁的线程释放它们的锁为止。</li>
</ul>
</li>
<li><p>所以，读写锁非常适合于对共享数据读的次数远大于写的次数的情况。当读写锁处于写模式加锁状态 时，它所保护的数据可以被安全的修改，因为一次只有一个线程可以在写模式下拥有这个锁；当读写锁处于 读模式加锁状态时，它所保护的数据就可以被多个获取读模式锁的线程读取。</p>
</li>
</ul>
<h3 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>使用宏定义初始化</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_rwlock_t</span> rwlock = PTHREAD_RWLOCK_INITIALIZER;</span><br></pre></td></tr></table></figure>

<ul>
<li>其他方式可以使用 pthread_rwlock_init()函数对其进行初始化，当读写锁不再使用时，需要调用 pthread_rwlock_destroy()函数将其销毁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_destroy</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_init</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock, <span class="keyword">const</span> <span class="keyword">pthread_rwlockattr_t</span> *attr)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>若将参数 attr 设置为 NULL，则表示将读写锁的属性设置为默认值，在 这种情况下其实就等价于 PTHREAD_RWLOCK_INITIALIZER 这种方式初始化，而不同之处在于，使用宏 不进行错误检查。</li>
</ul>
<h3 id="上锁和解锁"><a href="#上锁和解锁" class="headerlink" title="上锁和解锁"></a>上锁和解锁</h3><ul>
<li>以读模式对读写锁进行上锁，需要调用 pthread_rwlock_rdlock()函数；以写模式对读写锁进行上锁，需 要调用 pthread_rwlock_wrlock()函数。不管是以何种方式锁住读写锁，均可以调用 pthread_rwlock_unlock()函 数解锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_rdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_wrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_unlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当读写锁处于写模式加锁状态时，其它线程调用 pthread_rwlock_rdlock()或 pthread_rwlock_wrlock()函数 均会获取锁失败，从而陷入阻塞等待状态；当读写锁处于读模式加锁状态时，其它线程调用 pthread_rwlock_rdlock()函数可以成功获取到锁，如果调用 pthread_rwlock_wrlock()函数则不能获取到锁，从 而陷入阻塞等待状态。</p>
</li>
<li><p>如果线程不希望被阻塞，可以调用 pthread_rwlock_tryrdlock()和 pthread_rwlock_trywrlock()来尝试加锁， 如果不可以获取锁时。这两个函数都会立马返回错误，错误码为 EBUSY。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_tryrdlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_rwlock_trywrlock</span><span class="params">(<span class="keyword">pthread_rwlock_t</span> *rwlock)</span></span>;</span><br></pre></td></tr></table></figure>

<p>使用例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pthread_rwlock_t</span> rwlock; <span class="comment">//定义读写锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">read_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = *((<span class="keyword">int</span> *)arg);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_rdlock(&amp;rwlock); <span class="comment">//以读模式获取锁</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读线程&lt;%d&gt;, g_count=%d\n&quot;</span>, number + <span class="number">1</span>, g_count);</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock); <span class="comment">//解锁</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">write_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> number = *((<span class="keyword">int</span> *)arg);</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_wrlock(&amp;rwlock); <span class="comment">//以写模式获取锁</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;写线程&lt;%d&gt;, g_count=%d\n&quot;</span>, number + <span class="number">1</span>, g_count += <span class="number">20</span>);</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock); <span class="comment">//解锁</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nums[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">/* 对读写锁进行初始化 */</span></span><br><span class="line">    pthread_rwlock_init(&amp;rwlock, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* 创建 5 个读 g_count 变量的线程 */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        pthread_create(&amp;tid[j], <span class="literal">NULL</span>, read_thread, &amp;nums[j]);</span><br><span class="line">    <span class="comment">/* 创建 5 个写 g_count 变量的线程 */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        pthread_create(&amp;tid[j + <span class="number">5</span>], <span class="literal">NULL</span>, write_thread, &amp;nums[j]);</span><br><span class="line">    <span class="comment">/* 等待线程结束 */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        pthread_join(tid[j], <span class="literal">NULL</span>); <span class="comment">//回收线程</span></span><br><span class="line">    <span class="comment">/* 销毁自旋锁 */</span></span><br><span class="line">    pthread_rwlock_destroy(&amp;rwlock);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux线程（一）</title>
    <url>/2022/01/21/Linux%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux线程（一）"><a href="#Linux线程（一）" class="headerlink" title="Linux线程（一）"></a>Linux线程（一）</h1><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul>
<li>Linux中每个线程都有单独的进程ID，inux中每个线程都有单独的进程ID。在Linux中，线程其实是通过轻量级进程（LWP）实现的，因此<strong>Linux中每个线程都是一个进程</strong>，都拥有一个PID。换句话说，操作系统原理中的线程，对应的其实是Linux中的进程</li>
<li>Linux的线程中，假如主线程（也就是<code>main</code>函数）执行结束退出（比如<code>exit()</code>或者<code>return 0</code>），会导致整个进程所有线程被<strong>强制停止</strong></li>
<li>即使是正在执行尚且没有结束的线程也会被停止</li>
</ul>
<h2 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h2><ul>
<li>线程是参与系统调度的最小单位。它被包含在进程之中，是进程中的实际运行单位。一个线程指的是进 程中一个单一顺序的控制流（或者说是执行路线、执行流），一个进程中可以创建多个线程，多个线程实现 并发运行，每个线程执行不同的任务。譬如某应用程序设计了两个需要并发运行的任务 task1 和 task2，可将 两个不同的任务分别放置在两个线程中。</li>
</ul>
<h2 id="关于线程的更深层次的理解"><a href="#关于线程的更深层次的理解" class="headerlink" title="关于线程的更深层次的理解"></a>关于线程的更深层次的理解</h2><ul>
<li><a href="https://blog.csdn.net/qq_41167361/article/details/107990763">参考</a></li>
<li>对于进程来说，相同的地址(同一个虚拟地址)在不同的进程中，反复使用而不冲突。原因是他们虽虚拟址一样，但是页目录、页表、物理页面各不相同。相同的虚拟址，映射到不同的物理页面内存单元，最终访问不同的物理页面。<br>但！线程不同！两个线程具有各自独立的PCB，但共享同一个页目录，也就共享同一个页表和物理页面。所以两个PCB共享一个地址空间。</li>
<li>实际上，无论是创建进程的fork，还是创建线程的pthread_create，底层实现都是调用同一个内核函数clone</li>
<li>如果复制对方的地址空间，那么就产出一个“进程”；如果共享对方的地址空间，就产生一个“线程”</li>
<li>Linux<strong>内核是不区分进程和线程的</strong>。只在用户层面上进行区分。所以，线程所有操作函数 pthread_* 是<strong>库函数，而非系统调用</strong></li>
<li>进程：独立地址空间，拥有PCB</li>
<li>线程：<strong>也有PCB</strong>，但没有独立的地址空间</li>
</ul>
<h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><ul>
<li>当一个程序启动时，就有一个进程被操作系统（OS）创建，与此同时一个线程也立刻运行，该线程通 常叫做程序的主线程（Main Thread），因为它是程序一开始时就运行的线程。应用程序都是以 main()做为 入口开始运行的，所以 main()函数就是主线程的入口函数，main()函数所执行的任务就是主线程需要执行的 任务。</li>
<li>所以由此可知，任何一个进程都包含一个主线程，只有主线程的进程称为单线程进程，譬如前面章节内 容中所编写的所有应用程序都是单线程程序，它们只有主线程；既然有单线程进程，那自然就存在多线程进 程，所谓多线程指的是除了主线程以外，还包含其它的线程，其它线程通常由主线程来创建（调用 pthread_create 创建一个新的线程），那么创建的新线程就是主线程的子线程。<ul>
<li>其它新的线程（也就是子线程）是由主线程创建的；</li>
<li>主线程通常会在最后结束运行，执行各种清理工作，譬如回收各个子线程。</li>
</ul>
</li>
</ul>
<h3 id="线程vs进程"><a href="#线程vs进程" class="headerlink" title="线程vs进程"></a>线程vs进程</h3><ul>
<li>进程间切换开销大。多个进程同时运行（指宏观上同时运行，无特别说明，均指宏观上），微观上 依然是轮流切换运行，进程间切换开销远大于同一进程的多个线程间切换的开销，通常对于一些中 小型应用程序来说不划算。</li>
<li>进程间通信较为麻烦。每个进程都在各自的地址空间中、相互独立、隔离，处在于不同的地址空间 中，因此相互通信较为麻烦，在上一章节给大家有所介绍。</li>
<li>同一进程的多个线程间切换开销比较小。</li>
<li>同一进程的多个线程间通信容易。它们共享了进程的地址空间，所以它们都是在同一个地址空间 中，通信容易。</li>
<li>线程创建的速度远大于进程创建的速度。</li>
<li>多线程在多核处理器上更有优势！</li>
</ul>
<h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><ul>
<li><p>并行指的是可以并排/并列执行多个任务，这样的系统，它通常有多个执行单 元，所以可以实现并行运行，譬如并行运行 task1、task2、task3。</p>
</li>
<li><p><img src="/../imgs/image-20220121235908536.png" alt="image-20220121235908536"></p>
</li>
<li><p>并行运行并不一定要同时开始运行、同时结束运行</p>
</li>
<li><p>并发强调的是一种时分复用，与串行的区别在于，它不必等待上一个任务完成之后 在做下一个任务，可以打断当前执行的任务切换执行下一个任何，这就是时分复用。在同一个执行单元上， 将时间分解成不同的片段（时间片），每个任务执行一段时间，时间一到则切换执行下一个任务，依次这样 轮训（交叉/交替执行），这就是并发运行。</p>
</li>
<li><p><img src="/../imgs/image-20220122000512605.png" alt="image-20220122000512605"></p>
</li>
<li><p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接电话，这就说明你不支持并发也不支持并 行，仅仅<strong>只是串行</strong>。</p>
</li>
<li><p>你吃饭吃到一半，电话来了，你停下吃饭去接了电话，电话接完后继续吃饭，这说明你支持<strong>并发</strong>。</p>
</li>
<li><p>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你<strong>支持并行</strong>。</p>
</li>
<li><p>计算机处理器运行速度是非常快的，在单个处理核心虽然以并发方式运行着系统中的线程（微观上交替 /交叉方式运行不同的线程），但在宏观上所表现出来的效果是同时运行着系统中的所有线程，因为处理器 的运算速度太快了，交替轮训一次所花费的时间在宏观上几乎是可以忽略不计的，所以<strong>表示出来的效果就 是同时运行着所有线程。</strong></p>
</li>
</ul>
<h2 id="进程ID"><a href="#进程ID" class="headerlink" title="进程ID"></a>进程ID</h2><ul>
<li><p>每个线程也有其对应的标识，称为线程 ID。进程 ID 在整个系统 中是唯一的，但线程 ID 不同，线程 ID <strong>只有在它所属的进程上下文中才有意义</strong>。</p>
</li>
<li><p>一个线程可通过库函数 pthread_self()来获取自己的线程 ID</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pthread_t</span> <span class="title">pthread_self</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>该函数调用总是成功，返回当前线程的线程 ID</li>
<li>可以使用 pthread_equal()函数来检查两个线程 ID 是否相等</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_equal</span><span class="params">(<span class="keyword">pthread_t</span> t1, <span class="keyword">pthread_t</span> t2)</span></span>;</span><br><span class="line"><span class="comment">//如果两个线程 ID t1 和 t2 相等，则 pthread_equal()返回一个非零值；否则返回 0。</span></span><br></pre></td></tr></table></figure>

<p>在 Linux 系统中，使 用无符号长整型（unsigned long int）来表示 <code>pthread_t </code>数据类型</p>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ul>
<li>主线程可以使用库函数 <code>pthread_create()</code>负责创建一个新的线程</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span><span class="params">(<span class="keyword">pthread_t</span> *thread, <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">void</span> *(*start_routine) (<span class="keyword">void</span> *), <span class="keyword">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>thread：pthread_t 类型指针，当 pthread_create()成功返回时，新创建的线程的线程 ID 会保存在参数 thread 所指向的内存中，后续的线程相关函数会使用该标识来引用此线程。</p>
</li>
<li><p>attr：pthread_attr_t 类型指针，指向 pthread_attr_t 类型的缓冲区，pthread_attr_t 数据类型定义了线程的 各种属性，关于线程属性将会在 11.8 小节介绍。如果将参数 attr 设置为 NULL，那么表示将线程的所有属 性设置为默认值，以此创建新线程。</p>
</li>
<li><p>start_routine：<strong>参数 start_routine 是一个函数指针，指向一个函数</strong>，新创建的线程从 start_routine()函数 开始运行，该函数返回值类型为void *，并且该函数的参数只有一个void *，其实这个参数就是pthread_create() 函数的第四个参数 arg。如果需要向 start_routine()传递的参数有一个以上，那么需要把这些参数放到一个结 构体中，然后把这个结构体对象的地址作为 arg 参数传入。</p>
</li>
<li><p>arg：传递给 start_routine()函数的参数。一般情况下，需要将 arg 指向一个全局或堆变量，意思就是说 在线程的生命周期中，该 arg 指向的对象必须存在，否则如果线程中访问了该对象将会出现错误。当然也可 将参数 arg 设置为 NULL，表示不需要传入参数给 start_routine()函数。</p>
</li>
<li><p>返回值：<strong>成功返回 0；失败时将返回一个错误号</strong>，并且参数 thread 指向的内容是<strong>不确定</strong>的。</p>
</li>
<li><p>线程创建成功，新线程就会加入到系统调度队列中，获取到 CPU 之后就会立马从 start_routine()函数开 始运行该线程的任务；调用 pthread_create()函数后，通常我们无法确定系统接着会调度哪一个线程来使用 CPU 资源</p>
</li>
</ul>
<p>在编译含有<code>pthread</code>的库函数的文件的时候，需要通过gcc的<code>-l</code>选项指定链接库，比如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc -o 文件名 文件名.c -lpthread</span><br></pre></td></tr></table></figure>

<p>应用举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">new_thread_start</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;新线程: 进程 ID&lt;%d&gt; 线程 ID&lt;%lu&gt;\n&quot;</span>, getpid(), pthread_self());</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, new_thread_start, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;主线程: 进程 ID&lt;%d&gt; 线程 ID&lt;%lu&gt;\n&quot;</span>, getpid(), pthread_self());</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><img src="/../imgs/image-20220122104651258.png" alt="image-20220122104651258"></p>
<ul>
<li>主线程休眠了 1 秒钟，原因在于，<strong>如果主线程不进行休眠，它就可能会立马退出，这样可能会导致新创 建的线程还没有机会运行，整个进程就结束了</strong>。</li>
</ul>
<h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><ul>
<li>线程的 start 函数执行 return 语句并返回指定值，返回值就是线程的退出码；</li>
<li>线程调用 <code>pthread_exit()</code>函数；</li>
<li>调用 <code>pthread_cancel()</code>取消线程（将在 11.6 小节介绍）；</li>
</ul>
<p>如果进程中的任意线程调用 <code>exit()</code>、<code>_exit()</code>或者<code>_Exit()</code>，那么将会导致<strong>整个进程终止</strong>，这里需要注意！</p>
<ul>
<li><code>pthread_exit()</code>函数将终止调用它的线程</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_exit</span><span class="params">(<span class="keyword">void</span> *retval)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数 retval 的数据类型为 void *，指定了线程的返回值、也就是线程的退出码，该返回值可由另一个线 程通过调用 pthread_join()来获取；同理，如果线程是在 start 函数中执行 return 语句终止，那么 return 的返 回值也是可以通过 pthread_join()来获取的。</p>
</li>
<li><p>调用 pthread_exit()相当于在线程的 start 函数中执行 return 语句，不同之处在于，可在线程 start 函数所 调用的任意函数中调用 pthread_exit()来终止线程。如果<strong>主线程调用了 <code>pthread_exit()</code>，那么主线程也会终止</strong>， 但<strong>其它线程依然正常运行</strong>，直到进程中的<strong>所有线程终止才会使得进程终止</strong>。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">new_thread_start</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;新线程: 进程 ID&lt;%d&gt; 线程 ID&lt;%lu&gt;\n&quot;</span>, getpid(), pthread_self());</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, new_thread_start, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;主线程: 进程 ID&lt;%d&gt; 线程 ID&lt;%lu&gt;\n&quot;</span>, getpid(), pthread_self());</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意，将上一个程序中的所有<code>return</code>都改成<code>pthread_exit(NULL)</code>之后，程序会话<strong>并没有在主线程停止之后停止，而是等待子线程停止之后才停止</strong></li>
</ul>
<p>输出为</p>
<p><img src="/../imgs/image-20220122110519433.png" alt="image-20220122110519433"></p>
<h2 id="回收线程"><a href="#回收线程" class="headerlink" title="回收线程"></a>回收线程</h2><ul>
<li>调用 <code>pthread_join()</code>函数来阻塞等待线程的终止， 并获取线程的退出码，回收线程资源（类似于多进程中的<code>wait()</code>函数）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="keyword">void</span> **retval)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>thread：pthread_join()等待指定线程的终止，通过参数 thread（线程 ID）指定需要等待的线程；</p>
</li>
<li><p>retval：如果参数 retval 不为 NULL，则 pthread_join()将目标线程的退出状态（即目标线程通过 pthread_exit()退出时指定的返回值或者在线程 start 函数中执行 return 语句对应的返回值）<strong>复制到*retval 所指 向的内存区域</strong>；如果目标线程被 pthread_cancel()取消，则将 PTHREAD_CANCELED 放在*retval 中。如果对 目标线程的终止状态不感兴趣，则可将参数 retval 设置为 NULL。</p>
</li>
<li><p>返回值：成功返回 0；失败将返回错误码。</p>
</li>
<li><p>调用 pthread_join()函数将会以<strong>阻塞的形式</strong>等待指定的线程终止，如果该<strong>线程已经终止，则 pthread_join() 立刻返回</strong>。如果多个线程同时尝试调用 pthread_join()等待指定线程的终止，那么结果将是不确定的。</p>
</li>
<li><p>若线程并未分离（detached，将在 11.6.1 小节介绍），则必须使用 pthread_join()来等待线程终止，回收 线程资源；如果线程终止后，其它线程没有调用 pthread_join()函数来回收该线程，那么该线程将<strong>变成僵尸线程</strong>，与僵尸进程的概念相类似；同样，僵尸线程除了浪费系统资源外，若僵尸线程积累过多，那么会导致应 用程序无法创建新的线程。</p>
</li>
<li><p>如果进程中存在着僵尸线程并未得到回收，当进程终止之后，<strong>进程会被其父进程回收，所以僵尸 线程同样也会被回收。</strong></p>
</li>
</ul>
<p><strong>进程还具有以下特点</strong></p>
<ul>
<li><p>线程之间关系是<strong>对等</strong>的。进程中的<strong>任意线程均可调用 pthread_join()函数来等待另一个线程的终止</strong>。 譬如，如果线程 A 创建了线程 B，线程 B 再创建线程 C，那么线程 A 可以调用 pthread_join()等待 线程 C 的终止，线程 C 也可以调用 pthread_join()等待线程 A 的终止；这与进程间层次关系不同， <strong>父进程如果使用 fork()创建了子进程，那么它也是唯一能够对子进程调用 wait()的进程，线程之间 不存在这样的关系</strong>。</p>
</li>
<li><p>不能以非阻塞的方式调用 pthread_join()。对于<strong>进程</strong>，调用 waitpid()既可以实现阻塞方式等待、也可 以实现非阻塞方式等待。</p>
</li>
</ul>
<h2 id="取消线程"><a href="#取消线程" class="headerlink" title="取消线程"></a>取消线程</h2><ul>
<li>有时候，在程序设计需求当中，需要向一个线程发送一个请求，要求它立刻退出，我们把这种操作称为 取消线程，也就是向指定的线程发送一个请求，要求其立刻终止、退出。譬如，一组线程正在执行一个运算， 一旦某个线程检测到错误发生，需要其它线程退出，取消线程这项功能就派上用场了。</li>
<li>调用 pthread_cancel()库函数向一个指定的线程发送取消请求</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_cancel</span><span class="params">(<span class="keyword">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>发出取消请求之后，函数 pthread_cancel()立即返回，不会等待目标线程的退出。默认情况下，目标线程 也会立刻退出</li>
<li>线程可以设置自己不被取消或者控制如何被取消</li>
</ul>
<p>使用例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">new_thread_start</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;新线程--running\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">void</span> *tret;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="comment">/* 创建新线程 */</span></span><br><span class="line">    ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, new_thread_start, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">/* 向新线程发送取消请求 */</span></span><br><span class="line">    ret = pthread_cancel(tid);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_cancel error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 等待新线程终止 */</span></span><br><span class="line">    ret = pthread_join(tid, &amp;tret);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_join error: %s\n&quot;</span>, strerror(ret));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;新线程终止, code=%ld\n&quot;</span>, (<span class="keyword">long</span>)tret);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/image-20220122120358618.png" alt="image-20220122120358618"></p>
<ul>
<li>由打印结果可知，当主线程发送取消请求之后，<strong>新线程便退出了</strong>，而且退出码为<code>-1</code>，也就是 <code>PTHREAD_CANCELED</code>。</li>
</ul>
<h3 id="线程控制自己被取消的时候的行为"><a href="#线程控制自己被取消的时候的行为" class="headerlink" title="线程控制自己被取消的时候的行为"></a>线程控制自己被取消的时候的行为</h3><ul>
<li>默认情况下，线程是响应其它线程发送过来的取消请求的，响应请求然后退出线程。当然，线程可以选 择不被取消或者控制如何被取消，通过 pthread_setcancelstate()和 pthread_setcanceltype()来设置线程的取消性 状态和类型。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setcancelstate</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">int</span> *oldstate)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setcanceltype</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> *oldtype)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><p>PTHREAD_CANCEL_ENABLE：线程可以取消，这是新创建的线程取消性状态的默认值，所以 新建线程以及主线程默认都是可以取消的。</p>
</li>
<li><p>PTHREAD_CANCEL_DISABLE：线程不可被取消，如果此类线程接收到取消请求，则会将请求 挂起，直至线程的取消性状态变为 PTHREAD_CANCEL_ENABLE。</p>
</li>
<li><p>pthread_setcanceltype()函数执行的设置取消性类型和获取旧类型操作，这两步是一个原子操作。</p>
</li>
<li><p>参数 type 必须是以下值之一：</p>
<ul>
<li>PTHREAD_CANCEL_DEFERRED：取消请求到来时，线程还是继续运行，取消请求被挂起，直 到线程到达某个取消点（cancellation point，将在 11.6.3 小节介绍）为止，这是所有新建线程包括 主线程默认的取消性类型。</li>
<li>PTHREAD_CANCEL_ASYNCHRONOUS：可能会在任何时间点（也许是立即取消，但不一定） 取消线程，这种取消性类型应用场景很少，不再介绍！</li>
</ul>
</li>
<li><p>取消点：</p>
<ul>
<li>取消点其实就是一系列函数，当执行到这些函数的时候，才会真正响应取消请 求，这些函数就是取消点；在没有出现取消点时，取消请求是无法得到处理的，究其原因在于<strong>系统认为，但 没有到达取消点时，线程此时正在执行的工作是不能被停止的，正在执行关键代码</strong>，此时终止线程将可能会 导致出现意想不到的异常发生。</li>
</ul>
</li>
<li><p>检测线程的可取消性</p>
<ul>
<li><code> pthread_testcancel(void);</code>，头文件同上</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux线程（二）</title>
    <url>/2022/01/22/Linux%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux线程（二）"><a href="#Linux线程（二）" class="headerlink" title="Linux线程（二）"></a>Linux线程（二）</h1><h2 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h2><ul>
<li>默认情况下，当线程终止时，其它线程可以通过调用 pthread_join()获取其返回状态、回收线程资源，有 时，程序员<strong>并不关心线程的返回状态，只是希望系统在线程终止时能够自动回收线程资源并将其移除</strong>。在这 种情况下，可以调用 pthread_detach()将指定线程进行分离，也就是分离线程</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_detach</span><span class="params">(<span class="keyword">pthread_t</span> thread)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>线程分离自己</li>
<li><code>pthread_detach(pthread_self());</code></li>
<li>一旦线程处于分离状态，<strong>就不能再使用 <code>pthread_join()</code>来获取其终止状态</strong>，此过程是不可逆的，一旦处于 分离状态之后便不能再恢复到之前的状态。处于<strong>分离状态的线程，当其终止后，能够自动回收线程资源</strong>。</li>
</ul>
<h2 id="注册线程清理处理函数"><a href="#注册线程清理处理函数" class="headerlink" title="注册线程清理处理函数"></a>注册线程清理处理函数</h2><ul>
<li>当线程退出时也可以这样做，当线程终止退出时，去执行这样的处理函数， 我们把这个称为线程清理函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_cleanup_push</span><span class="params">(<span class="keyword">void</span> (*routine)(<span class="keyword">void</span> *), <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pthread_cleanup_pop</span><span class="params">(<span class="keyword">int</span> execute)</span></span>;</span><br></pre></td></tr></table></figure>

<p>当线程执行以下动作时，清理函数栈中的清理函数才会被执行：</p>
<ul>
<li>线程调用 pthread_exit()退出时；</li>
<li>线程响应取消请求时； </li>
<li>用非 0 参数调用 pthread_cleanup_pop()</li>
</ul>
<h2 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h2><ul>
<li>在 Linux 下，使用 pthread_attr_t 数据类型定义线程的所有属性</li>
</ul>
<h3 id="线程栈属性"><a href="#线程栈属性" class="headerlink" title="线程栈属性"></a>线程栈属性</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setstack</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">void</span> *stackaddr, <span class="keyword">size_t</span> stacksize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_getstack</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">void</span> **stackaddr, <span class="keyword">size_t</span> *stacksize)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="分离状态属性"><a href="#分离状态属性" class="headerlink" title="分离状态属性"></a>分离状态属性</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_setdetachstate</span><span class="params">(<span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">int</span> detachstate)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_attr_getdetachstate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr, <span class="keyword">int</span> *detachstate)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​    具体略</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><ul>
<li>当我们编写的程序是一个多线程应用程序时，就不得不考虑到线程安全的问题，确保我们编写的程序是 一个线程安全（thread-safe）的多线程应用程序，什么是线程安全以及如何保证线程安全？带着这些问题， 本小节将讨论线程安全相关的话题。</li>
</ul>
<h3 id="线程栈"><a href="#线程栈" class="headerlink" title="线程栈"></a>线程栈</h3><ul>
<li>进程中创建的每个线程都有自己的栈地址空间，将其称为线程栈。譬如主线程调用 pthread_create()创建 了一个新的线程，那么这个新的线程有它自己独立的栈地址空间、而主线程也有它自己独立的栈地址空间。 在创建一个新的线程时，可以配置线程栈的大小以及起始地址，当然在大部分情况 下，保持默认即可！</li>
<li>然每个线程都有自己的栈地址空间，那么每个线程<strong>运行过程中所定义的自动变量（局部变量）都是分 配在自己的线程栈中</strong>的，它们<strong>不会相互干扰</strong></li>
</ul>
<h3 id="可重入函数"><a href="#可重入函数" class="headerlink" title="可重入函数"></a>可重入函数</h3><ul>
<li>单线程程序只有一条执行流（一个线程就是一条执行流），贯穿程序始终；而对于 多线程程序而言，同一进程却存在多条独立、并发的执行流。</li>
<li>进程中执行流的数量除了与线程有关之外，与<strong>信号处理</strong>也有关联。因为信号是异步的，进程可能会在其 运行过程中的任何时间点收到信号，进而跳转、执行信号处理函数，从而在一个单线程进程（包含信号处理） 中形成了两条（即主程序和信号处理函数）独立的执行流。</li>
<li>如果一个函数被同一进程的多个不同的执行流同时调用，每次函数 调用总是能产生正确的结果（或者叫产生预期的结果），把这样的函数就称为可重入函数。<strong>实质上也就是该函数被多个执行流并发/并行调用</strong></li>
</ul>
<p><strong>绝对可重入函数的特点</strong></p>
<ul>
<li>函数内所使用到的变量均为局部变量，换句话说，该函数内的操作的内存地址均为本地栈地址</li>
<li> 函数参数和返回值均是值类型</li>
<li>函数内调用的其它函数也均是绝对可重入函数</li>
</ul>
<p>很多的 C 库函数有两个版本：可重入版本和不可重入版本，可重入版本函数其名称后面加上了“_r”， 用于表明该函数是一个可重入函数；而不可重入版本函数其名称后面没有“_r”，前面章节内容中也已经遇 到过很多次了，譬如 <code>asctime()</code>/<code>asctime_r()</code>、<code>ctime()</code>/<code>ctime_r()</code>、<code>localtime()</code>/<code>localtime_r()</code>等。</p>
<ul>
<li>一个函数具有<strong>引用类型</strong>的函数，<strong>传入了一个指针</strong>，并在函数内部读写该指针所指向的内存地址，该函 数是一个可重入函数，但同样需要满足一定的条件；如果多个执行流同时调用该函数时，所传入的指针是<strong>共 享变量的地址，那么在这种情况，最终可能得不到预期的结果</strong>；因为在这种情况下，函数 func()所读写的便是<strong>多个执行流的共享数据</strong>，会出现数据不一致的情况，所以是不安全的。</li>
<li>但如果每个执行流所传入的指针是其本地变量（局部变量）对应的地址，那就是没有问题的，所以呢， 这个函数就是一个带条件的可重入函数。</li>
</ul>
<h2 id="线程安全-1"><a href="#线程安全-1" class="headerlink" title="线程安全"></a>线程安全</h2><ul>
<li>一个函数被多个线程（其实也是多个执行流，但是不包括由信号处理函数所产生的执行流）同时调用 时，它总会一直产生正确的结果，把这样的函数称为线程安全函数。线程安全函数包括可重入函数，可重入 函数是线程安全函数的一个真子集，也就是说可重入函数一定是线程安全函数，但线程安全函数不一定是 可重入函数</li>
</ul>
<h3 id="用来保证线程安全的函数"><a href="#用来保证线程安全的函数" class="headerlink" title="用来保证线程安全的函数"></a>用来保证线程安全的函数</h3><ul>
<li>在多线程编程环境下，有些代码段只需要执行一次</li>
<li>  <code>pthread_once()</code>函数保证函数只执行一次</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">pthread_once_t</span> once_control = PTHREAD_ONCE_INIT;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_once</span><span class="params">(<span class="keyword">pthread_once_t</span> *once_control, <span class="keyword">void</span> (*init_routine)(<span class="keyword">void</span>))</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>once_control：这是一个 pthread_once_t 类型指针，在调用 pthread_once()函数之前，我们<strong>需要定义了一 个 pthread_once_t 类型的静态变量</strong>，调用 pthread_once()时参数 once_control 指向该变量。<strong>通常在定义变量时会使用 PTHREAD_ONCE_INIT 宏对其进行初始化</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pthread_once_t</span> once_control = PTHREAD_ONCE_INIT;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>init_routine：一个函数指针，参数init_routine所指向的函数就是要求只能被执行一次的代码段， pthread_once()函数内部会调用 init_routine()，即使 pthread_once()函数会被多次执行，但它能保证 init_routine() 仅被执行一次。</p>
</li>
<li><p>返回值：调用成功返回 0；失败则返回错误编码以指示错误原因。</p>
</li>
<li><p>如果在一个线程调用 pthread_once()时，另外一个线程也调用了 pthread_once，则该线程将<strong>会被阻塞等待</strong>，直到第一个完成初始化后返回。换言之，当调用 pthread_once 成功返回时，调用总是能够肯定所有的状态已经初始化完成了。</p>
</li>
</ul>
<h3 id="线程特有数据"><a href="#线程特有数据" class="headerlink" title="线程特有数据"></a>线程特有数据</h3><ul>
<li><p>线程特有数据也称为线程私有数据，简单点说，就是<strong>为每个调用线程分别维护一份变量的副本（copy）</strong>， 每个线程通过特有数据键（key）访问时，这个<strong>特有数据键都会获取到本线程绑定的变量副本</strong>。这样就可以 <strong>避免变量成为多个线程间的共享数据</strong>。</p>
</li>
<li><p>线程特有数据的核心思想其实非常简单，就是<strong>为每一个调用线程（调用某函数的线程，该函数就是我们 要通过线程特有数据将其实现为线程安全的函数）分配属于该线程的私有数据区</strong>，为每个调用线程分别维 护一份变量的副本。</p>
</li>
<li><p><strong>pthread_key_create()函数</strong>。在为线程分配私有数据区之前，需要调用 pthread_key_create()函数创建一个特有数据键（key）</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_create</span><span class="params">(<span class="keyword">pthread_key_t</span> *key, <span class="keyword">void</span> (*destructor)(<span class="keyword">void</span>*))</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>key：调用该函数会创建一个特有数据键，并通过参数 key 所指向的缓冲区返回给调用者，参数 key 是 一个 pthread_key_t 类型的指针，可以把 pthread_key_t 称为 key 类型。调用 pthread_key_create()之前，需要 定义一个 pthread_key_t 类型变量，调用 pthread_key_create()时参数 key 指向 pthread_key_t 类型变量。</li>
<li>destructor：参数 destructor 是一个函数指针，指向一个自定义的函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destructor</span><span class="params">(<span class="keyword">void</span> *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/* code */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用 <code>pthread_key_create()</code>函数允许调用者指定一个<strong>自定义的解构函数</strong>（类似于 C++中的析构函数），使用参数 destructor 指向该函数；该函数通常用于<strong>释放与特有数据键关联的线程私有数据区占用的内存空间</strong>， 当使用线程特有数据的线程终止时，destructor()函数会被自动调用。</li>
<li>返回值：成功返回 0；失败将返回一个错误编号以指示错误原因，返回的错误编号其实就是全局变量 errno，可以使用诸如 strerror()函数查看其错误字符串信息。</li>
</ul>
<p>调用 pthread_key_create()函数创建特有数据键（key）后通常需要为调用线程分配私有数据缓冲区，譬 如通过 malloc()（或类似函数）申请堆内存，每个调用线程分配一次，且只会在线程初次调用此函数时分配。为线程分配私有数据缓冲区之后，通常需要调用 pthread_setspecific()函数，pthread_setspecific()函数其实完成 了这样的操作：首先保存指向线程私有数据缓冲区的指针，并将其与特有数据键以及当前调用线程关联起 来</p>
<ul>
<li><strong>pthread_setspecific()函数</strong></li>
<li>调用 <code>pthread_key_create()</code> 函数创建特有数据键（key）后通常需要为调用线程分配私有数据缓冲区，譬如通过<code>malloc()</code>（或类似函数）申请堆内存，每个调用线程分配一次，且只会在线程初次调用此函数时分配。 为线程分配私有数据缓冲区之后，通常需要调用 <code>pthread_setspecific()</code>函数，<code>pthread_setspecific()</code>函数其实完成了这样的操作：<strong>首先保存指向线程私有数据缓冲区的指针，并将其与特有数据键以及当前调用线程关联起来</strong>；</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>key：pthread_key_t 类型变量，参数 key 应赋值为调用 <code>pthread_key_create()</code>函数时创建的特有数据键， 也就是 <code>pthread_key_create()</code>函数的参数 key 所指向的 <code>pthread_key_t</code>变量。</li>
<li>value：参数 value 是一个 void 类型的指针，指向<strong>由调用者分配的一块内存</strong>，<strong>作为线程的私有数据缓冲 区</strong>，当线程终止时，会<strong>自动调用</strong>参数 <strong>key 指定的特有数据键对应的解构函数</strong>来释放这一块动态申请的内存 空间。</li>
<li>返回值：调用成功返回 0；失败将返回一个错误编码，可以使用诸如<code>strerror()</code>函数查看其错误字符串信 息。</li>
</ul>
<p>调用 pthread_setspecific()函数将线程私有数据缓冲区与调用线程以及特有数据键关联之后，便可以使用<br>pthread_getspecific()函数来获取调用线程的私有数据区了。</p>
<ul>
<li><strong>pthread_getspecific()函数</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pthread_getspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread_getspecific()</code>函数应返回当前调用线程关联到特有数据键的私有数据缓冲区，<strong>返回值是一个指针</strong>， 指向该缓冲区。如果当前调用线程<strong>并没有设置</strong>线程私有数据缓冲区与特有数据键进行关联，则<strong>返回值应为 NULL</strong>，函数中可以利用这一点来判断当前调用线程是否为初次调用该函数，如果是初次调用，则必须为该 线程分配私有数据缓冲区。</li>
</ul>
<p>如果需要删除一个特有数据键（key）可以使用函数 pthread_key_delete()， pthread_key_delete()函数删除先前由 pthread_key_create()创建的键</p>
<ul>
<li><strong>pthread_key_delete()函数</strong></li>
<li>需要删除一个特有数据键（key）可以使用函数 pthread_key_delete()， pthread_key_delete()函数删除先前由 pthread_key_create()创建的键</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_delete</span><span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用 <code>pthread_key_delete()</code>函数将释放参数 key 指定的特有数据键，可以供下一次调用 <code>pthread_key_create()</code> 时使用；调用 <code>pthread_key_delete()</code>时，它并不将查当前是否有线程正在使用该键所关联的线程私有数据缓冲 区，所以它并不会触发键的解构函数，也就不会释放键关联的线程私有数据区占用的内存资源，并且调用 <code>pthread_key_delete()</code>后，当线程终止时也不再执行键的解构函数。</li>
<li>调用的条件<ul>
<li><strong>所有线程已经释放了私有数据区</strong>（显式调用解构函数或线程终止）。</li>
<li>参数 key 指定的特有数据键将不再使用。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ERROR_LEN 256</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pthread_once_t</span> once = PTHREAD_ONCE_INIT;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pthread_key_t</span> strerror_key;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">destructor</span><span class="params">(<span class="keyword">void</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(buf); <span class="comment">//释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create_key</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 创建一个键(key)，并且绑定键的解构函数 */</span></span><br><span class="line">    <span class="keyword">if</span> (pthread_key_create(&amp;strerror_key, destructor))</span><br><span class="line">        pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************</span></span><br><span class="line"><span class="comment"> * 对 strerror 函数重写</span></span><br><span class="line"><span class="comment"> * 使其变成为一个线程安全函数</span></span><br><span class="line"><span class="comment"> ******************************/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span> *<span class="title">strerror</span><span class="params">(<span class="keyword">int</span> errnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line">    <span class="comment">/* 创建一个键(只执行一次 create_key) */</span></span><br><span class="line">    <span class="keyword">if</span> (pthread_once(&amp;once, create_key))</span><br><span class="line">        pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* 获取 */</span></span><br><span class="line">    buf = pthread_getspecific(strerror_key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == buf)</span><br><span class="line">    &#123;                                <span class="comment">//首次调用 my_strerror 函数，则需给调用线程分配线程私有数据</span></span><br><span class="line">        buf = <span class="built_in">malloc</span>(MAX_ERROR_LEN); <span class="comment">//分配内存</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == buf)</span><br><span class="line">            pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">/* 保存缓冲区地址,与键、线程关联起来 */</span></span><br><span class="line">        <span class="keyword">if</span> (pthread_setspecific(strerror_key, buf))</span><br><span class="line">            pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (errnum &lt; <span class="number">0</span> || errnum &gt;= _sys_nerr || <span class="literal">NULL</span> == _sys_errlist[errnum])</span><br><span class="line">        <span class="built_in">snprintf</span>(buf, MAX_ERROR_LEN, <span class="string">&quot;Unknown error %d&quot;</span>, errnum);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(buf, _sys_errlist[errnum], MAX_ERROR_LEN - <span class="number">1</span>);</span><br><span class="line">        buf[MAX_ERROR_LEN - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//终止字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>第一步是调用 pthread_once()，以确保只会执行一次 create_key()函数，而在 create_key()函数中便是调用 pthread_key_create()创建了一个键、并绑定了相应的解构函数 destructor()，解构 函数用于释放与键关联的所有线程私有数据所占的内存空间。</li>
<li>函数 strerror()调用 pthread_getspecific()以<strong>获取该调用线程与键相关联的私有数据缓冲区地址</strong>，如 果返回为 NULL，则表明该线程是首次调用 strerror()函数，因为函数会调用 malloc()为其分配一个新的私有 数据缓冲区，并调用 pthread_setspecific()来保存缓冲区地址、并与键与该调用线程建立关联。如果 pthread_getspecific()函数的返回值并不等于 NULL，那么该值将指向以存在的私有数据缓冲区，此缓冲区由之前对 strerror()的调用所分配。</li>
</ul>
<p><strong>使用例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_key_t</span> p_key;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeBuf</span><span class="params">(<span class="keyword">void</span> * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">func</span><span class="params">(<span class="keyword">void</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pthread_setspecific(p_key, &amp;a);</span><br><span class="line">    <span class="keyword">int</span>* ptr = (<span class="keyword">int</span>*)pthread_getspecific(p_key);</span><br><span class="line">    <span class="comment">//*ptr += 1;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, str, p_key);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    *ptr += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, str, *ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> pa, pb;</span><br><span class="line"></span><br><span class="line">    pthread_key_create(&amp;p_key, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;pa, <span class="literal">NULL</span>, func, <span class="string">&quot;thread1:&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pthread_create(&amp;pb, <span class="literal">NULL</span>, func, <span class="string">&quot;thread2:&quot;</span>);</span><br><span class="line">    pthread_join(pa, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(pb, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个线程使用同一个key访问同一个全局变量，出现了线程不安全情况</p>
<p><img src="/../imgs/image-20220123144524240.png" alt="image-20220123144524240"></p>
<p>假如是使用两个不同的key：</p>
<p>代码更改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeBuf</span><span class="params">(<span class="keyword">void</span> * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">func</span><span class="params">(<span class="keyword">void</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// pthread_once_t val = PTHREAD_ONCE_INIT;</span></span><br><span class="line">    <span class="keyword">pthread_key_t</span> p_key;</span><br><span class="line">    pthread_key_create(&amp;p_key, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_setspecific(p_key, &amp;a);</span><br><span class="line">    <span class="keyword">int</span>* ptr = (<span class="keyword">int</span>*)pthread_getspecific(p_key);</span><br><span class="line">    <span class="comment">//*ptr += 1;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s(key) %d\n&quot;</span>, str, p_key);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    *ptr += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, str, *ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> pa, pb;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;pa, <span class="literal">NULL</span>, func, <span class="string">&quot;thread1:&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pthread_create(&amp;pb, <span class="literal">NULL</span>, func, <span class="string">&quot;thread2:&quot;</span>);</span><br><span class="line">    pthread_join(pa, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(pb, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/image-20220123144850517.png" alt="image-20220123144850517"></p>
<p>效果类似</p>
<p><strong>但是对于同一个key，不同的线程set不同的内存位置，再在<u>不同</u>的线程中用<u>同样的key</u>调用get得到的是<u>各自的变量空间</u></strong></p>
<p>如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeBuf</span><span class="params">(<span class="keyword">void</span> * p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">func</span><span class="params">(<span class="keyword">void</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_once_t</span> val = PTHREAD_ONCE_INIT;</span><br><span class="line">    <span class="keyword">pthread_key_t</span> p_key;</span><br><span class="line">    pthread_key_create(&amp;p_key, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_setspecific(p_key, str);</span><br><span class="line">    <span class="keyword">char</span>* ptr = pthread_getspecific(p_key);</span><br><span class="line">    <span class="comment">//*ptr += 1;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s(key) %d\n&quot;</span>, str, p_key);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> i = ptr[<span class="number">6</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, ptr, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> pa, pb;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;pa, <span class="literal">NULL</span>, func, <span class="string">&quot;thread1:&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pthread_create(&amp;pb, <span class="literal">NULL</span>, func, <span class="string">&quot;thread2:&quot;</span>);</span><br><span class="line">    pthread_join(pa, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(pb, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/image-20220123145927573.png" alt="image-20220123145927573"></p>
<h3 id="线程局部变量"><a href="#线程局部变量" class="headerlink" title="线程局部变量"></a>线程局部变量</h3><ul>
<li><p>通常情况下，程序中定义的全局变量是进程中所有线程共享的，所有线程都可以访问这些全局变量；而 线程局部存储在定义全局或静态变量时，使用__thread 修饰符修饰变量，此时，<strong>每个线程都会拥有一份对该 变量的拷贝</strong>。线程局部存储中的变量将<strong>一直存在，直至线程终止</strong>，届时会<strong>自动释放这一存储</strong>。</p>
</li>
<li><p>要创建线程局部变量，只需简单地在全 局或静态变量的声明中包含__thread 修饰符即可！</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> __thread <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>如果变量声明中使用了关键字 static 或 extern，那么关键字__thread 必须紧随其后。</li>
<li>与一般的全局或静态变量申明一眼，线程局部变量在申明时可设置一个初始值。</li>
<li>可以使用 C 语言取值操作符（&amp;）来获取线程局部变量的地址。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> __thread <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">thread_start</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">&quot;Child Thread\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;子线程: buf (%p) = %s&quot;</span>, buf, buf);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">&quot;Main Thread\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 创建子线程 */</span></span><br><span class="line">    <span class="keyword">if</span> (ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, thread_start, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_create error: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 等待回收子线程 */</span></span><br><span class="line">    <span class="keyword">if</span> (ret = pthread_join(tid, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;pthread_join error: %d\n&quot;</span>, ret);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;主线程: buf (%p) = %s&quot;</span>, buf, buf);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/../imgs/image-20220123185312283.png" alt="image-20220123185312283"></p>
<p>可见主线程和子线程的buf<strong>不是同一个东西</strong></p>
<h3 id="多线程信号处理"><a href="#多线程信号处理" class="headerlink" title="多线程信号处理"></a>多线程信号处理</h3><p>信号模型在一些方面是属于进程层面（由进程中的所有线程线程共享）的，而在另一些方面是属于单个 线程层面的</p>
<ul>
<li><p>信号的系统默认行为是属于进程层面。每一个信号都有其对应的系统默认动作， 当进程中的任一线程收到任何一个未经处理（忽略或捕获）的信号时，会执行该信号的默认操作， 信号的默认操作通常是停止或终止进程。</p>
</li>
<li><p>信号处理函数属于进程层面。进程中的所有线程共享程序中所注册的信号处理函数；</p>
</li>
<li><p>信号的发送既可针对整个进程，也可针对某个特定的线程。在满足以下三个条件中的任意一个时， 信号的发送针对的是某个线程</p>
<ul>
<li>产生了硬件异常相关信号，譬如 SIGBUS、SIGFPE、SIGILL 和 SIGSEGV 信号；这些硬件异 常信号在某个线程执行指令的过程中产生，也就是说这些硬件异常信号是由某个线程所引起； 那么在这种情况下，系统会将信号发送给该线程。</li>
<li>当线程试图对已断开的管道进行写操作时所产生的 SIGPIPE 信号；</li>
<li>由函数 pthread_kill()或 pthread_sigqueue()所发出的信号，稍后介绍这两个函数；这些函数允许 线程向同一进程下的其它线程发送一个指定的信号。</li>
</ul>
</li>
<li><p>当一个多线程进程接收到一个信号时，且该信号绑定了信号处理函数时，内核会<strong>任选一个线程来接 收</strong>这个信号，意味着由该线程接收信号并调用信号处理函数对其进行处理，并不是每个线程都会接 收到该信号并调用信号处理函数</p>
</li>
<li><p>信号掩码其实是属于线程层面的，也就是说信号掩码是针对每个线程而言。8.9 小节向大家介绍了 信号掩码的概念，并介绍了 sigprocmask()函数，通过 sigprocmask()可以设置进程的信号掩码，事实 上，信号掩码是并不是针对整个进程来说，而是针对线程，<strong>对于一个多线程应用程序来说，并不存 在一个作用于整个进程范围内的信号掩码</strong>（管理进程中的所有线程）；那么在多线程环境下，各个 线程可以调用 pthread_sigmask()函数来设置它们各自的信号掩码，譬如设置线程可以接收哪些信号、 不接收哪些信号，各线程可独立阻止或放行各种信号。</p>
</li>
<li><p>针对整个进程所挂起的信号，以及针对每个线程所挂起的信号，内核都会分别进行维护、记录。 8.11.1 小节介绍到，调用 sigpending()会返回进程中所有被挂起的信号，事实上，sigpending()会返 回针对整个进程所挂起的信号，以及针对每个线程所挂起的信号的并集。</p>
</li>
<li><p>其他内容略</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux高级IO（二）</title>
    <url>/2022/01/25/Linux%E9%AB%98%E7%BA%A7IO%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Linux高级IO（二）"><a href="#Linux高级IO（二）" class="headerlink" title="Linux高级IO（二）"></a>Linux高级IO（二）</h1><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><ul>
<li>在异步 I/O 中，当文件描述符上可以执行 I/O 操作时，进程可以请求内核为自己发送一个信号。之后进程 就可以执行任何其它的任务直到文件描述符可以执行 I/O 操作为止，此时内核会发送信号给进程。</li>
<li>要使用异步 I/O，程序需要按照如下步骤来执行：<ul>
<li>通过指定 O_NONBLOCK 标志使能非阻塞 I/O。</li>
<li>通过指定 O_ASYNC 标志使能异步 I/O。</li>
<li>设置异步 I/O 事件的接收进程。也就是当文件描述符上可执行 I/O 操作时会发送信号通知该进程， 通常将调用进程设置为异步 I/O 事件的接收进程。</li>
<li>为内核发送的通知信号注册一个信号处理函数。默认情况下，异步 I/O 的通知信号是 SIGIO，所以 内核会给进程发送信号 SIGIO。在 8.2 小节中简单地提到过该信号。</li>
<li>以上步骤完成之后，进程就可以执行其它任务了，当 I/O 操作就绪时，内核会向进程发送一个 SIGIO 信号，当进程接收到信号时，会执行预先注册好的信号处理函数，我们就可以在信号处理函数中进 行 I/O 操作。</li>
</ul>
</li>
<li><strong>O_ASYNC 标志</strong><ul>
<li>O_ASYNC 标志可用于使能文件描述符的异步 I/O 事件，当文件描述符可执行 I/O 操作时，内核会向异 步 I/O 事件的接收进程发送 SIGIO 信号（默认情况下）。</li>
<li>在调用 open()时<strong>无法通过</strong>指定 O_ASYNC 标志来使能异步 I/O，但可以<strong>使用 fcntl()函数 添加 O_ASYNC 标志使能异步 I/O</strong></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">flag = fcntl(<span class="number">0</span>, F_GETFL); <span class="comment">//先获取原来的 flag</span></span><br><span class="line">flag |= O_ASYNC; <span class="comment">//将 O_ASYNC 标志添加到 flag</span></span><br><span class="line">fcntl(fd, F_SETFL, flag); <span class="comment">//重新设置 flag</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>设置异步 I/O 事件的接收进程</strong></p>
<ul>
<li>为文件描述符设置异步 I/O 事件的接收进程，也就是设置异步 I/O 的所有者。同样也是通过 fcntl()函数 进行设置，操作命令 cmd 设置为 F_SETOWN，第三个参数传入接收进程的进程 ID（PID），通常将调用进 程的 PID 传入</li>
<li><code>fcntl(fd, F_SETOWN, getpid());</code></li>
</ul>
</li>
<li><p><strong>注册 SIGIO 信号的处理函数</strong></p>
<ul>
<li>通过 signal()或 sigaction()函数为 SIGIO 信号注册一个信号处理函数，当进程接收到内核发送过来的 SIGIO 信号时，会执行该处理函数，所以我们应该在处理函数当中执行相应的 I/O 操作。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOUSE <span class="meta-string">&quot;/dev/input/event3&quot;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fd;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sigio_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> loops = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (SIGIO != sig)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    ret = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt; ret)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;鼠标: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">    loops--;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt;= loops)</span><br><span class="line">    &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="comment">/* 打开鼠标设备文件&lt;使能非阻塞 I/O&gt; */</span></span><br><span class="line">    fd = open(MOUSE, O_RDONLY | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 使能异步 I/O */</span></span><br><span class="line">    flag = fcntl(fd, F_GETFL);</span><br><span class="line">    flag |= O_ASYNC;</span><br><span class="line">    fcntl(fd, F_SETFL, flag);</span><br><span class="line">    <span class="comment">/* 设置异步 I/O 的所有者 */</span></span><br><span class="line">    fcntl(fd, F_SETOWN, getpid());</span><br><span class="line">    <span class="comment">/* 为 SIGIO 信号注册信号处理函数 */</span></span><br><span class="line">    signal(SIGIO, sigio_handler);</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="异步IO的优化"><a href="#异步IO的优化" class="headerlink" title="异步IO的优化"></a>异步IO的优化</h2><ul>
<li><p>在一个需要同时检查大量文件描述符（譬如数千个）的 应用程序中，例如某种类型的网络服务端程序，与 select()和 poll()相比，异步 I/O 能够提供显著的性能优势。 之所以如此，原因在于：对于异步 I/O，内核可以“记住”要检查的文件描述符，且仅当这些文件描述符上 可执行 I/O 操作时，内核才会向应用程序发送信号。</p>
</li>
<li><p>问题</p>
<ul>
<li>默认的异步 I/O 通知信号 SIGIO 是非排队信号。SIGIO 信号是标准信号（非实时信号、不可靠信 号），所以它不支持信号排队机制，譬如当前正在执行 SIGIO 信号的处理函数，此时内核又发送 多次 SIGIO 信号给进程，这些信号将会被阻塞，只有当信号处理函数执行完毕之后才会传递给进 程，并且只能传递一次，而其它后续的信号都会丢失。</li>
<li>无法得知文件描述符发生了什么事件。在示例代码 13.3.1 的信号处理函数 sigio_handler()中，直接 调用了 read()函数读取鼠标，而并未判断文件描述符是否处于可读就绪态，事实上，示例代码 13.3.1 这种异步 I/O 方式并未告知应用程序文件描述符上发生了什么事件，是可读取还是可写入亦或者 发生异常等。</li>
</ul>
</li>
<li><p><strong>使用实时信号替换默认信号 SIGIO</strong></p>
</li>
<li><p>SIGIO 作为异步 I/O 通知的默认信号，是一个非实时信号，我们可以设置不使用默认信号，指定一个实 时信号作为异步 I/O 通知信号，如何指定呢？同样也是使用 fcntl()函数进行设置，调用函数时将操作命令 cmd 参数设置为 F_SETSIG，第三个参数 arg 指定一个实时信号编号即可，表示将该信号作为异步 I/O 通知 信号</p>
</li>
<li><p><code>fcntl(fd, F_SETSIG, SIGRTMIN);</code></p>
<ul>
<li>如果第三个参数 arg 设置为 0，则表示指定 SIGIO 信号作为异步 I/O 通知信号，也就是回到了默认状态。</li>
</ul>
</li>
<li><p><strong>使用 sigaction()函数注册信号处理函数</strong></p>
<ul>
<li><p>在应用程序当中需要为<strong>实时信号注册信号处理函数</strong>，使用 <strong>sigaction 函数进行注册</strong>，并为 sa_flags 参数指 定 SA_SIGINFO，表示使用 sa_sigaction 指向的函数作为信号处理函数，而不使用 sa_handler 指向的函数。</p>
</li>
<li><p><code>sigaction</code>函数的原型</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">const</span> struct sigaction *act, struct sigaction *oldact)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数参数中包括一个 siginfo_t 指针，指向 siginfo_t 类型对象，当触发信号时该对象由内核构建。siginfo_t 结构体中提供了很多信息，我们可以在信号处理函数中使用这些信息，具体定义请参考示例代码 8.4.3，就 对于异步 I/O 事件而言，传递给信号处理函数的 siginfo_t 结构体中与之相关的字段如下</p>
<ul>
<li>si_signo：引发处理函数被调用的信号。这个值与信号处理函数的第一个参数一致。</li>
<li>si_fd：表示发生异步 I/O 事件的文件描述符；</li>
<li>si_code：表示文件描述符 si_fd 发生了什么事件，读就绪态、写就绪态或者是异常事件等。该字段 中可能出现的值以及它们对应的描述信息参见表 13.4.1。</li>
<li>si_band：是一个位掩码，其中包含的值与系统调用 poll()中返回的 revents 字段中的值相同。如表 13.4.1 所示，si_code 中可能出现的值与 si_band 中的位掩码有着一一对应关系。<ul>
<li><img src="/../imgs/image-20220125210615175.png" alt="image-20220125210615175"></li>
</ul>
</li>
</ul>
</li>
<li><p>可以在信号处理函数中通过对比 siginfo_t 结构体的 si_code 变量来<strong>检查文件描述符发 生了什么事件</strong>，以采取<strong>相应的 I/O</strong> 操作。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE <span class="comment">//在源文件开头定义_GNU_SOURCE 宏</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOUSE <span class="meta-string">&quot;/dev/input/mouse0&quot;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fd;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">io_handler</span><span class="params">(<span class="keyword">int</span> sig,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">siginfo_t</span> *info,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">void</span> *context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> loops = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (SIGRTMIN != sig)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* 判断鼠标是否可读 */</span></span><br><span class="line">    <span class="keyword">if</span> (POLL_IN == info-&gt;si_code)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; ret)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;鼠标: 成功读取&lt;%d&gt;个字节数据\n&quot;</span>, ret);</span><br><span class="line">        loops--;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt;= loops)</span><br><span class="line">        &#123;</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="comment">/* 打开鼠标设备文件&lt;使能非阻塞 I/O&gt; */</span></span><br><span class="line">    fd = open(MOUSE, O_RDONLY | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 使能异步 I/O */</span></span><br><span class="line">    flag = fcntl(fd, F_GETFL);</span><br><span class="line">    flag |= O_ASYNC;</span><br><span class="line">    fcntl(fd, F_SETFL, flag);</span><br><span class="line">    <span class="comment">/* 设置异步 I/O 的所有者 */</span></span><br><span class="line">    fcntl(fd, F_SETOWN, getpid());</span><br><span class="line">    <span class="comment">/* 指定实时信号 SIGRTMIN 作为异步 I/O 通知信号 */</span></span><br><span class="line">    fcntl(fd, F_SETSIG, SIGRTMIN);</span><br><span class="line">    <span class="comment">/* 为实时信号 SIGRTMIN 注册信号处理函数 */</span></span><br><span class="line">    act.sa_sigaction = io_handler;</span><br><span class="line">    act.sa_flags = SA_SIGINFO;</span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    sigaction(SIGRTMIN, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>经过了使能异步flag、设置所有者线程、指定实时信号的种类、对sigation的对应的成员指定内容，包括处理函数、flag等等。</li>
<li><img src="/../imgs/image-20220125212351275.png" alt="image-20220125212351275"></li>
</ul>
<h2 id="存储映射I-O"><a href="#存储映射I-O" class="headerlink" title="存储映射I/O"></a>存储映射I/O</h2><ul>
<li><p>存储映射 I/O（memory-mapped I/O）是一种基于内存区域的高级 I/O 操作，它能将一个文件映射到进程 地址空间中的一块内存区域中，当从<strong>这段内存中读数据时，就相当于读文件中的数据</strong>（对文件进行 read 操 作），将<strong>数据写入这段内存时，则相当于将数据直接写入文件中</strong>（对文件进行 write 操作）。这样就可以在 不使用基本 I/O 操作函数 read()和 write()的情况下执行 I/O 操作。</p>
</li>
<li><p>为了实现存储映射 I/O 这一功能，我们需要告诉内核将一个给定的文件映射到进程地址空间中的一块 内存区域中，这由系统调用 **mmap()**来实现。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags, <span class="keyword">int</span> fd, <span class="keyword">off_t</span> offset)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>addr：参数 addr 用于指定映射到内存区域的起始地址。通常将其设置为 NULL，这表示由系统选择该 映射区的起始地址，这是最常见的设置方式；如果参数 addr 不为 NULL，则表示由自己指定映射区的起始 地址，此函数的返回值是该映射区的起始地址。</p>
</li>
<li><p>length：参数 length 指定映射长度，表示将文件中的多大部分映射到内存区域中，以字节为单位，譬如 length=1024 * 4，表示将文件的 4K 字节大小映射到内存区域中。</p>
</li>
<li><p>offset：文件映射的偏移量，通常将其设置为 0，表示从文件头部开始映射；所以参数 offset 和参数 length 就确定了文件的起始位置和长度，将文件的这部分映射到内存区域中</p>
<ul>
<li><img src="/../imgs/image-20220125213944291.png" alt="image-20220125213944291"></li>
</ul>
</li>
<li><p>fd：文件描述符，指定要映射到内存区域中的文件。</p>
</li>
<li><p>prot：参数 prot 指定了映射区的保护要求，可取值如下：</p>
<ul>
<li>PROT_EXEC：映射区可执行；</li>
<li>PROT_READ：映射区可读；</li>
<li>PROT_WRITE：映射区可写；</li>
<li>PROT_NONE：映射区不可访问。</li>
</ul>
</li>
<li><p>对指定映射区的保护要求不能超过文件 open()时的访问权限，譬 如，文件是以只读权限方式打开的，那么对映射区的不能指定为 PROT_WRITE。</p>
</li>
<li><p>flags：参数 flags 可影响映射区的多种属性，参数 flags 必须要指定以下两种标志之一：</p>
<ul>
<li><p><img src="/../imgs/image-20220125213454172.png" alt="image-20220125213454172"></p>
</li>
<li><p>通常情况下，参数 flags 中只指定了 MAP_SHARED</p>
</li>
</ul>
</li>
<li><p>返回值：成功情况下，函数的返回值便是映射区的起始地址；发生错误时，返回(void *)-1，通常使用 MAP_FAILED 来表示，并且会设置 errno 来指示错误原因。</p>
</li>
<li><p>对于 mmap()函数，参数 <code>addr</code> 和 <code>offset</code> 在不为 NULL 和 0 的情况下，addr 和 offset 的值通常被要求是系 统<strong>页大小的整数倍</strong>，可通过 sysconf()函数获取页大小</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sysconf(_SC_PAGE_SIZE)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">sysconf(_SC_PAGESIZE)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对于参数 length 任需要注意，参数 length 的值不能大于文件大小，即文件被映射的部分不能超出文件。</p>
</li>
<li><p><strong>munmap()解除映射</strong></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">munmap</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>munmap()系统调用解除指定地址范围内的映射，参数 addr 指定待解除映射地址范围的起始地址，它必 须是系统页大小的整数倍；参数 length 是一个非负整数，指定了待解除映射区域的大小（字节数），被解除 映射的区域对应的大小也必须是系统页大小的整数倍，即使参数 length 并不等于系统页大小的整数倍，与 mmap()函数相似。</p>
</li>
<li><p>需要注意的是，当进程终止时也会自动解除映射（如果程序中没有显式调用 munmap()），但<strong>调用 close() 关闭文件时并不会解除映射</strong>。</p>
</li>
<li><p>通常将参数 addr 设置为 mmap()函数的返回值，将参数 length 设置为 mmap()函数的参数 length，表示解除整个由 mmap()函数所创建的映射。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> srcfd, dstfd;</span><br><span class="line">    <span class="keyword">void</span> *srcaddr;</span><br><span class="line">    <span class="keyword">void</span> *dstaddr;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span> != argc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: %s &lt;srcfile&gt; &lt;dstfile&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打开源文件 */</span></span><br><span class="line">    srcfd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == srcfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 打开目标文件 */</span></span><br><span class="line">    dstfd = open(argv[<span class="number">2</span>], O_RDWR | O_CREAT | O_TRUNC, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == dstfd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">        ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">goto</span> out1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 获取源文件的大小 */</span></span><br><span class="line">    fstat(srcfd, &amp;sbuf);</span><br><span class="line">    <span class="comment">/* 设置目标文件的大小 */</span></span><br><span class="line">    ftruncate(dstfd, sbuf.st_size);</span><br><span class="line">    <span class="comment">/* 将源文件映射到内存区域中 */</span></span><br><span class="line">    srcaddr = mmap(<span class="literal">NULL</span>, sbuf.st_size,</span><br><span class="line">                   PROT_READ, MAP_SHARED, srcfd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (MAP_FAILED == srcaddr)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap error&quot;</span>);</span><br><span class="line">        ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">goto</span> out2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 将目标文件映射到内存区域中 */</span></span><br><span class="line">    dstaddr = mmap(<span class="literal">NULL</span>, sbuf.st_size,</span><br><span class="line">                   PROT_WRITE, MAP_SHARED, dstfd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (MAP_FAILED == dstaddr)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap error&quot;</span>);</span><br><span class="line">        ret = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">goto</span> out3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 将源文件中的内容复制到目标文件中 */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(dstaddr, srcaddr, sbuf.st_size);</span><br><span class="line">    <span class="comment">/* 程序退出前清理工作 */</span></span><br><span class="line">out4:</span><br><span class="line">    <span class="comment">/* 解除目标文件映射 */</span></span><br><span class="line">    munmap(dstaddr, sbuf.st_size);</span><br><span class="line">out3:</span><br><span class="line">    <span class="comment">/* 解除源文件映射 */</span></span><br><span class="line">    munmap(srcaddr, sbuf.st_size);</span><br><span class="line">out2:</span><br><span class="line">    <span class="comment">/* 关闭目标文件 */</span></span><br><span class="line">    close(dstfd);</span><br><span class="line">out1:</span><br><span class="line">    <span class="comment">/* 关闭源文件并退出 */</span></span><br><span class="line">    close(srcfd);</span><br><span class="line">    <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当执行程序的时候，将源文件和目标文件传递给应用程序，该程序首先会将源文件和目标文件打开，源 文件以只读方式打开，而目标文件以可读、可写方式打开，如果目标文件不存在则创建它，并且将文件的大 小截断为 0。</p>
</li>
<li><p>然后使用 fstat()函数获取源文件的大小，接着调用 ftruncate()函数设置目标文件的大小与源文件大小保 持一致。</p>
</li>
<li><p>然后对源文件和目标文件分别调用 mmap()，将文件映射到内存当中；对于源文件，调用 mmap()时将参 数 prot 指定为 PROT_READ，表示对它的映射区会进行读取操作；对于目标文件，调用 mmap()时将参数 port 指定为 PROT_WRITE，表示对它的映射区会进行写入操作。最后调用 memcpy()将源文件映射区中的内容复 制到目标文件映射区中，完成文件的复制操作。</p>
</li>
<li><p>使用系统调用 mprotect()可以更改一个现有映射区的保护要求</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数 prot 的取值与 mmap()函数的 prot 参数的一样，mprotect()函数会将指定地址范围的保护要求更改 为参数 prot 所指定的类型，参数 addr 指定该地址范围的起始地址，addr 的值必须是系统页大小的整数倍； 参数 len 指定该地址范围的大小。</li>
<li>写入到文件映射区中的数据也<strong>不会立马刷新至磁盘设备中</strong>，而是会在我们 将数据写入到映射区之后的某个时刻将映射区中的数据写入磁盘中。所以会导致映射区中的内容与磁盘文 件中的内容<strong>不同步</strong>。我们可以调用 msync()函数将映射区中的数据<strong>刷写、更新至磁盘文件中（同步操作）</strong>， 系统调用 msync()类似于 fsync()函数，不过 msync()作用于映射区。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msync</span><span class="params">(<span class="keyword">void</span> *addr, <span class="keyword">size_t</span> length, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数 addr 和 length 指定了需同步的内存区域的起始地址和大小。对于参数 addr 来说，同样也要求必须 是系统页大小的整数倍，也就是与系统页大小对齐。譬如，调用 msync()时，将 addr 设置为 mmap()函数的 返回值，将 length 设置为 mmap()函数的 length 参数，将对文件的整个映射区进行同步操作。</p>
</li>
<li><p>参数 flags 应指定为 MS_ASYNC 和 MS_SYNC 两个标志之一，除此之外，还可以根据需求选择是否指 定 MS_INVALIDATE 标志，作为一个可选标志。</p>
<ul>
<li>MS_ASYNC：以异步方式进行同步操作。调用 msync()函数之后，并不会等待数据完全写入磁盘之 后才返回。</li>
<li>MS_SYNC：以同步方式进行同步操作。调用 msync()函数之后，需等待数据全部写入磁盘之后才 返回。</li>
<li>MS_INVALIDATE：是一个可选标志，请求使同一文件的其它映射无效（以便可以用刚写入的新 值更新它们）。</li>
</ul>
</li>
<li><p>munmap()函数<strong>并不影响被映射的文件</strong>，也就是说，当调用 munmap()解除映射时<strong>并不会将映射区中的内 容写到磁盘文件中</strong>。如果 mmap()指定了 MAP_SHARED 标志，对于文件的更新，会在我们将数据写入到映 射区之后的某个时刻将映射区中的数据更新到磁盘文件中，由内核根据虚拟存储算法自动进行。</p>
</li>
<li><p>如果 mmap()指定了 MAP_PRIVATE 标志，在解除映射之后，进程对映射区的修改将会丢弃！</p>
</li>
</ul>
<h2 id="普通IO函数和存储映射IO的对比"><a href="#普通IO函数和存储映射IO的对比" class="headerlink" title="普通IO函数和存储映射IO的对比"></a>普通IO函数和存储映射IO的对比</h2><ul>
<li><p>普通IO</p>
</li>
<li><p><img src="/../imgs/image-20220126122116008.png" alt="image-20220126122116008"></p>
</li>
<li><p>存储映射IO</p>
</li>
<li><p><img src="/../imgs/image-20220126122127642.png" alt="image-20220126122127642"></p>
</li>
<li><p>首先非常直观的一点就是，使用存储映射 I/O 减少了数据的复制操作，所以在效率上会比普通 I/O 要 高，其次上面也讲了，普通 I/O 中间涉及到了很多的函数调用过程，这些都会导致普通 I/O 在效率上会比存 储映射 I/O 要低。</p>
</li>
<li><p>应用层与内核 层是不能直接进行交互的，必须要通过操作系统提供的系统调用或库函数来与内核进行数据交互，包括操 作硬件。通过存储映射 I/O 将文件直接映射到应用程序地址空间中的一块内存区域中，也就是映射区；直接 将磁盘文件直接与映射区关联起来，不用调用 read()、write()系统调用，直接对映射区进行读写操作即可操 作磁盘上的文件，而磁盘文件中的数据也可反应到映射区中</p>
</li>
<li><p>映射区就是应用层 与内核层之间的共享内存。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MakeFile基础</title>
    <url>/2022/01/09/MakeFile%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="gcc和MakeFile基础"><a href="#gcc和MakeFile基础" class="headerlink" title="gcc和MakeFile基础"></a>gcc和MakeFile基础</h1><h2 id="gcc常用参数"><a href="#gcc常用参数" class="headerlink" title="gcc常用参数"></a>gcc常用参数</h2><ul>
<li><code>gcc -c </code>指的是只把源码编译为目标文件而不进行链接。如果GCC不带-C参数，编译一个源代码文件（test.c)。那么会自动将编译和链接一步完成，并生成可执行文件。对于多个文件，需要先编译成中间目标文件(一般是.o文件），在链接成可执行文件，一般习惯目标文件都是以.o后缀，也没有硬性规定可执行文件不能用.o文件。</li>
<li><code>gcc -o</code>指的是output_filename，确定输出文件的名称为output_filename，同时这个名称不能和源文件同名。如果不给出这个选项，gcc就给出预设的可执行文件a.out。</li>
<li>其他参数详见 <a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html">https://www.runoob.com/w3cnote/gcc-parameter-detail.html</a></li>
</ul>
<h2 id="MakeFile是什么"><a href="#MakeFile是什么" class="headerlink" title="MakeFile是什么"></a>MakeFile是什么</h2><ul>
<li><p>使用 GCC 编译器在 Linux 进行 C 语言编译，通过在终端执行 gcc 命 令来完成 C 文件的编译，如果我们的工程只有一两个 C 文件还好，需要输入的命令不多，当文 件有几十、上百甚至上万个的时候用终端输入 GCC 命令的方法显然是不现实的。如果我们能够 编写一个文件，这个文件描述了编译哪些源码文件、如何编译那就好了，每次需要编译工程的 时只需要使用这个文件就行了。这种问题怎么可能难倒聪明的程序员，为此提出了一个解决大 工程编译的工具：make，描述哪些文件需要编译、哪些需要重新编译的文件就叫做 Makefile， Makefile 就跟脚本文件一样，Makefile 里面还可以执行系统命令。使用的时候只需要一个 <code>make</code>命令即可完成整个工程的自动编译，极大的提高了软件开发的效率。</p>
</li>
<li><p>在 Linux 下用的最多的是 GCC 编译器，这是个没有 UI 的编译器，因此 Makefile 就需要我们自己来编写了。</p>
</li>
</ul>
<h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2><ul>
<li>我们完成这样一个小工程，通过键盘输入两个整形数字，然后计算他们的和并将结果显示在屏幕上，在这个工程中我们有 main.c、input.c 和 calcu.c 这三个 C 文件和 input.h、calcu.h 这 两个头文件。其中 main.c 是主体，input.c 负责接收从键盘输入的数值，calcu.c 进行任意两个数 相加，其中 main.c 文件内容如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;input.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calcu.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a, b, num;</span><br><span class="line"></span><br><span class="line">	input_int(&amp;a, &amp;b);</span><br><span class="line">	num = calcu(a, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %d\r\n&quot;</span>, a, b, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>input.c 文件内容如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//input.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;input.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_int</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;input two num:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>calcu.c 文件内容如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;calcu.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calcu</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>文件 input.h 内容如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INPUT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INPUT_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_int</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>文件 calcu.h 内容如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CALCU_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CALCU_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calcu</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>假如使用gcc编译程序，那么此时需要再命令行输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc main.c calcu.c input.c -o main</span><br></pre></td></tr></table></figure>

<p>上面命令的意思就是使用 gcc 编译器对 main.c、calcu.c 和 input.c 这三个文件进行编译，编 译生成的可执行文件叫做 <code>main</code>。</p>
<p><img src="/imgs/image-20220109170757542.png" alt="image-20220109170757542"></p>
<p>执行程序用到的命令是<code>./main</code>，含义是执行当前目录下的main文件</p>
<h2 id="makefile的重要性"><a href="#makefile的重要性" class="headerlink" title="makefile的重要性"></a>makefile的重要性</h2><p>可以看出我们的代码按照我们所设想的工作了，使用命令“gcc main.c calcu.c input.c -o main” 看起来很简单是吧，只需要一行就可以完成编译，但是我们这个工程只有三个文件啊！如果几 千个文件呢？再就是如果<strong>有一个文件被修改了</strong>，使用上面的命令编译的时候<strong>所有的文件都会重新编译</strong>，如果工程有几万个文件(Linux 源码就有这么多文件！)，想想这几万个文件编译一次 所需要的时间就可怕。最好的办法肯定是<strong>哪个文件被修改了，只编译这个被修改的文件</strong>即可， 其它没有修改的文件就<strong>不需要再次重新编译了</strong>，为此我们改变我们的编译方法，如果第一次编译工程，我们先将工程中的文件都编译一遍，然后后面修改了哪个文件就编译哪个文件，命令 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c main.c</span><br><span class="line">gcc -c input.c</span><br><span class="line">gcc -c calcu.c</span><br><span class="line">gcc main.o input.o calcu.o -o main</span><br></pre></td></tr></table></figure>

<ul>
<li>注意，gcc的<code>-c</code>选项的意思是将程序编译为.o文件但是<strong>不链接</strong>为最终的可执行文件，最后一句<code>gcc main.o input.o calcu.o -o main</code>的意思是将三个.o文件链接为一个可执行文件</li>
<li>假如我们现在修改了 calcu.c 这个文件，<strong>只需要将 caclue.c 这一个文件重新编译成.o 文件</strong>，然后在<strong>将所有的.o 文件链接成可执行文件</strong>，只需要下面两条命令即可：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c calcu.c</span><br><span class="line">gcc main.o input.o calcu.o -o main</span><br></pre></td></tr></table></figure>

<h3 id="makefile的作用"><a href="#makefile的作用" class="headerlink" title="makefile的作用"></a>makefile的作用</h3><ul>
<li>如果工程没有编译过，那么工程中的所有.c 文件都要被编译并且链接成可执行程序。</li>
<li>如果工程中只有个别 C 文件被修改了，那么只编译这些被修改的 C 文件即可。</li>
<li>如果工程的头文件被修改了，那么我们需要编译所有引用这个头文件的 C 文件，并且 链接成可执行文件。</li>
</ul>
<h2 id="makeFile的使用"><a href="#makeFile的使用" class="headerlink" title="makeFile的使用"></a>makeFile的使用</h2><ul>
<li>在工程目录下创建名为“Makefile”的文件， 文件名一定要叫做“<strong>Makefile</strong>”！！！<strong>区分大小写</strong>的哦！</li>
<li><img src="/imgs/image-20220109171722524.png" alt="image-20220109171722524"></li>
</ul>
<p><strong>Makefile文件：</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main: main.o input.o calcu.o</span></span><br><span class="line">	gcc -o main main.o input.o calcu.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">	gcc -c main.c</span><br><span class="line"><span class="section">input.o: input.c</span></span><br><span class="line">	gcc -c input.c</span><br><span class="line"><span class="section">calcu.o: calcu.c</span></span><br><span class="line">	gcc -c calcu.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm *.o</span><br><span class="line">	rm main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>上述代码中所有行首需要空出来的地方一定要使用<code>TAB</code>键！<strong>不要使用空格键</strong>！这是 Makefile 的语法要求</p>
</li>
<li><p><img src="/imgs/image-20220109172156926.png" alt="image-20220109172156926"></p>
</li>
<li><p>Makefile 编写好以后我们就可以使用 <code>make </code>命令来编译我们的工程了，直接<strong>在命令行中输入</strong><code>make</code>即可，make 命令会<strong>在当前目录下查找是否存在</strong><code>Makefile</code>这个文件，如果存在的 话就会按照 <code>Makefile</code> 里面定义的编译方式进行编译</p>
</li>
</ul>
<p><img src="/imgs/image-20220109172335268.png" alt="image-20220109172335268"></p>
<p><strong>MakeFile中一般存在的错误</strong></p>
<ul>
<li>Makefile 中命令缩进没有使用 TAB 键！</li>
<li>VI/VIM 编辑器使用空格代替了 TAB 键，修改文件/etc/vim/vimrc，在文件最后面加上如 下所示代码：<ul>
<li><code>set noexpandtab</code></li>
</ul>
</li>
</ul>
<p>此时修改一下<code>input.c</code>文件，重新编译看结果</p>
<p><img src="/imgs/image-20220109172511759.png" alt="image-20220109172511759"></p>
<p>可以看出因为我们修改了 input.c 这个文件，<strong>所以 input.c 和最后的可执行文 件 main 重新编译了</strong>，其它<strong>没有修改过的文件就没有编译</strong>。</p>
<h2 id="Makefile语法"><a href="#Makefile语法" class="headerlink" title="Makefile语法"></a>Makefile语法</h2><p><img src="/imgs/image-20220109173249859.png" alt="image-20220109173249859"></p>
<ul>
<li>比如<img src="/imgs/image-20220109174534114.png" alt="image-20220109174534114"><ul>
<li>这条规则的目标是 main，<strong>main.o、input.o 和 calcu.o 是生成 main 的依赖文件</strong>，如果<strong>要更新 目标 main，就必须先更新它的所有依赖文件</strong>，如果<strong>依赖文件中的任何一个有更新</strong>，那么<strong>目标也 必须更新</strong>，<strong>“更新”就是执行一遍规则中的命令列表</strong>。</li>
<li>每条命令以tab开始</li>
<li>make 命令会为 Makefile 中的每个以 TAB 开始的命令创建一个 Shell 进程去执行。</li>
</ul>
</li>
<li>重新看一下上面的代码</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">main: main.o input.o calcu.o</span></span><br><span class="line">	gcc -o main main.o input.o calcu.o</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">	gcc -c main.c</span><br><span class="line"><span class="section">input.o: input.c</span></span><br><span class="line">	gcc -c input.c</span><br><span class="line"><span class="section">calcu.o: calcu.c</span></span><br><span class="line">	gcc -c calcu.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm *.o</span><br><span class="line">	rm main</span><br></pre></td></tr></table></figure>

<ul>
<li>首先更新第一条规则中的 main，第一条规则的目标成为默认目标，只要默认目标更新了那 么就认为 Makefile 的工作。在第一次编译的时候<strong>由于 main 还不存在</strong>，因此<strong>第一条规则会执行</strong>， 第一条规则<strong>依赖于文件 main.o、input.o 和 calcu.o 这个三个.o 文件</strong>，这三个.o 文件<strong>目前还都没 有，因此必须先更新这三个文件</strong>。make <u><strong>会查找以这三个.o 文件为目标的规则并执行</strong></u>。<strong>以 main.o 为例，发现更新 main.o 的是第二条规则，因此会执行第二条规则</strong>，第二条规则里面的命令为“gcc –c main.c”，这行命令很熟悉了吧，就是不链接编译 main.c，生成 main.o，其它两个.o 文件同理。 最后一个规则目标是 clean，它<strong>没有依赖文件，因此会默认为依赖文件都是最新的</strong>，所以其<strong>对应 的命令不会执行</strong>，当我们<strong>想要执行 clean 的话可以直接使用命令<code>make clean</code><strong>，执行以后就会</strong>删 除当前目录下所有的.o 文件以及 main</strong>，因此 <strong>clean 的功能就是完成工程的清理</strong></li>
<li><img src="/imgs/image-20220109180157902.png" alt="image-20220109180157902"></li>
<li>可见这条命令将除了源文件和Makefile以外的编译产物都删除了</li>
</ul>
<p><strong>总结一下Makefile的编译过程</strong></p>
<ul>
<li>make 命令会在当前目录下查找以 Makefile(makefile 其实也可以)命名的文件。</li>
<li>当找到 Makefile 文件以后就会按照 Makefile 中定义的规则去编译生成最终的目标文件。</li>
<li>当发现目标文件不存在，或者目标所依赖的文件比目标文件新(也就是最后修改时间比 目标文件晚)的话就会执行后面的命令来更新目标。</li>
</ul>
<p>这就是 make 的执行过程，make 工具就是在 Makefile 中<strong>一层一层的查找依赖关系</strong>，并执行相应的命令。</p>
<h3 id="Makefile-变量"><a href="#Makefile-变量" class="headerlink" title="Makefile 变量"></a>Makefile 变量</h3><ul>
<li><p>Makefile 中的变量<strong>都是字符串</strong></p>
</li>
<li><p>实例</p>
</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Makefile 变量的使用</span></span><br><span class="line">objects = main.o input.o calcu.o</span><br><span class="line"><span class="section">main: <span class="variable">$(objects)</span></span></span><br><span class="line">	gcc -o main <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Makefile 中可以写注释，<strong>注释开头要 用符号“#”</strong></p>
</li>
<li><p>变量的引用方法是<code>$(变量名)</code></p>
</li>
</ul>
<p><strong>不同赋值符号的区别</strong></p>
<ul>
<li>幅值符<code>=</code><ul>
<li>类似于引用传参，幅值的变量的值会随着被赋给它的变量的值的改变去改变</li>
</ul>
</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">name = zzk</span><br><span class="line">curname = <span class="variable">$(name)</span></span><br><span class="line">name = zuozhongkai</span><br><span class="line"><span class="section">print:</span></span><br><span class="line">	@echo curname: <span class="variable">$(curname)</span></span><br></pre></td></tr></table></figure>

<p>​        此时输出的是<code>zuozhongkai</code>，意味着变量的内容随着变量的值<strong>更新而更新</strong></p>
<p>​        <code>@</code>的意思是使得make在执行的过程中输出执行过程，否则不会输出</p>
<ul>
<li><p>幅值符<code>:=</code></p>
<ul>
<li>同样执行上面的代码，将<code>=</code>改为<code>:=</code>，则可见输出还是”zzk”，因为<code>:=</code>在幅值的时候不会采用变量修改后的值</li>
</ul>
</li>
<li><p>幅值符<code>?=</code></p>
<ul>
<li><code>curname ?= zuozhongkai</code>的意思是，假如curname前面没有被赋值，那么此变量就是“zuozhongkai”， 如果前面已经赋过值了，那么就使用前面赋的值。</li>
</ul>
</li>
<li><p>幅值符<code>+=</code></p>
<ul>
<li><p>Makefile 中的变量是字符串，有时候我们需要给前面已经定义好的变量添加一些字符串进 去，此时就要使用到符号“+=”，比如</p>
</li>
<li><p><code>objects = main.o inpiut.o</code>和<code>objects += calcu.o</code>执行完之后，objects就变成了<code>main.o input.o calcu.o</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="Makefile模式规则"><a href="#Makefile模式规则" class="headerlink" title="Makefile模式规则"></a>Makefile模式规则</h3><ul>
<li><p>自动匹配</p>
<ul>
<li><p>模式规则中，<strong>至少在规则的目标定定义中要包涵<code>%</code>，否则就是一般规则</strong>，目标中的<code>%</code> 表示对文件名的匹配，<code>%</code>表示长度任意的非空字符串，比如“%.c”就是所有的以.c 结尾的 文件，类似与通配符，<code>a.%.c</code> 就表示以 a.开头，以.c 结束的所有文件。</p>
</li>
<li><p>当“%”出现在目标中的时候，<strong>目标中“%”所代表的值决定了依赖中的“%”值</strong>，比如<code>%.o : %.c</code>中的<code>%</code>代表的是同样的内容</p>
</li>
</ul>
</li>
</ul>
<p>前面的代码可以修改如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = main.o input.o calcu.o</span><br><span class="line"><span class="section">main: <span class="variable">$(objects)</span></span></span><br><span class="line">	gcc -o main <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">%.o : %.c</span><br><span class="line">	<span class="comment">#命令</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm *.o</span><br><span class="line">	rm main</span><br></pre></td></tr></table></figure>

<h3 id="Makefile自动化变量"><a href="#Makefile自动化变量" class="headerlink" title="Makefile自动化变量"></a>Makefile自动化变量</h3><ul>
<li>如何通过一行命令来从不同的依赖文件中生 成对应的目标？自动化变量就是完成这个功能的！所谓自动化变量就是<strong>这种变量会把模式中所 定义的一系列的文件自动的挨个取出，直至所有的符合模式的文件都取完</strong>，类似于python中的变量解包，将一个数组中的变量一个一个的拆出来。自动化变量只应该出现在规则的命令中。</li>
<li><img src="/imgs/image-20220110002525509.png" alt="image-20220110002525509"></li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = main.o input.o calcu.o</span><br><span class="line"><span class="section">main: <span class="variable">$(objects)</span></span></span><br><span class="line">	gcc -o main <span class="variable">$(objects)</span></span><br><span class="line">%.o : %.c</span><br><span class="line">	gcc -c <span class="variable">$&lt;</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm *.o</span><br><span class="line">	rm main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>上面的代码中，<code>$&lt;</code>代表依赖文件(.c)的一系列集合</p>
</li>
<li><p>上述规则中并没有创建文件 clean 的命令，因此工作目录下<strong>永远都不会存在文件 clean</strong>，当 我们输入“make clean”以后，后面的“rm *.o”和“rm main”总是会执行。<strong>可是如果我们“手贱”，在工作目录下创建一个名为“clean”的文件</strong>，那就不一样了，当执行“make clean”的时 候，<strong>规则因为没有依赖文件，所以目标被认为是最新的，因此后面的 rm 命令也就不会执行</strong>，我 们预先设想的清理工程的功能也就无法完成。为了避免这个问题，我们可以将 clean 声明为伪 目标，声明方式如下：</p>
</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">.PHONY : clean</span><br></pre></td></tr></table></figure>

<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = main.o input.o calcu.o</span><br><span class="line"><span class="section">main: <span class="variable">$(objects)</span></span></span><br><span class="line">	gcc -o main <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"></span><br><span class="line">%.o : %.c</span><br><span class="line">	gcc -c <span class="variable">$&lt;</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm *.o</span><br><span class="line">	rm main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>声明 clean 为伪目标，<strong>声明 clean 为伪目标以后不管当前目录下是否存在名 为“clean”的文件，输入“make clean”的话规则后面的 rm 命令都会执行</strong>。</li>
</ul>
<h3 id="Makefile条件判断"><a href="#Makefile条件判断" class="headerlink" title="Makefile条件判断"></a>Makefile条件判断</h3><p>语法</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">&lt;条件关键字&gt;</span><br><span class="line">	&lt;条件为真时执行的语句&gt;</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;条件关键字&gt;</span><br><span class="line">	&lt;条件为真时执行的语句&gt;</span><br><span class="line">else</span><br><span class="line">	&lt;条件为假时执行的语句&gt;</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>

<p><strong>条件关键字的组成</strong></p>
<ul>
<li><code>ifeq</code>和<code>ifneq</code>，判断的是是否相等和是否不等<ul>
<li>语法</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifeq (&lt;参数 1&gt;, &lt;参数 2&gt;)</span><br><span class="line">ifeq ‘&lt;参数 1 &gt;’,‘ &lt;参数 2&gt;’</span><br><span class="line">ifeq “&lt;参数 1&gt;”, “&lt;参数 2&gt;”</span><br><span class="line">ifeq “&lt;参数 1&gt;”, ‘&lt;参数 2&gt;’</span><br><span class="line">ifeq ‘&lt;参数 1&gt;’, “&lt;参数 2&gt;”</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ifdef</code>和<code>ifndef</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifdef &lt;变量名&gt;</span><br></pre></td></tr></table></figure>

<p>​        如果“变量名”的值非空，那么表示表达式为真，否则表达式为假。“变量名”同样可以是 一个函数的返回值。ifndef 用法类似，但是含义用户 ifdef 相反。</p>
<h3 id="Makefile函数"><a href="#Makefile函数" class="headerlink" title="Makefile函数"></a>Makefile函数</h3><ul>
<li>Makefile 支持函数，类似 C 语言一样，<strong>Makefile 中的函数是已经定义好的，我们直接使用， 不支持我们自定义函数</strong>。make 所支持的函数不多，但是绝对够我们使用了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(函数名 参数集合)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;函数名 参数集合&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以看出，调用函数和调用普通变量一样，<strong>使用符号“$”来标识</strong>。参数集合是函数的多个 参数，<strong>参数之间以逗号“,”隔开</strong>，<strong>函数名和参数之间以“空格”分隔开</strong>，函数的调用以“$”开 头。</li>
</ul>
<h4 id="sbust"><a href="#sbust" class="headerlink" title="sbust"></a>sbust</h4><ul>
<li>函数 subst 用来完成字符串替换，调用形式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(subst &lt;from&gt;,&lt;to&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>此函数的功能是将字符串<text>中的<from>内容替换为<to>，函数返回被替换以后的字符 串，比如如下示例：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(subst zzk,ZZK,my name is zzk)</span><br></pre></td></tr></table></figure>

<ul>
<li>把字符串“my name is zzk”中的“zzk”替换为“ZZK”，替换完成以后的字符串为“my name  is ZZK”。</li>
</ul>
<h4 id="patsubst"><a href="#patsubst" class="headerlink" title="patsubst"></a>patsubst</h4><ul>
<li>函数 patsubst 用来完成模式字符串替换，使用方法如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>此函数查找字<strong>符串中的单词是否符合模式</strong><pattern>，如果匹配就用<replacement>来 替换掉，<pattern>可以使用通配符“%”，表示任意长度的字符串，函数返回值就是替换后的字 符串。如果<replacement>中也包涵“%”，那么<replacement>中的“%”将是<pattern>中的那个 “%”所代表的字符串,<strong>也就是说<code>%</code>代表的字符串的内容不变</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(patsubst %.c,%.o,a.c b.c c.c)</span><br></pre></td></tr></table></figure>

<ul>
<li>将字符串<code>a.c b.c c.c</code>中的所有符合<code>%.c</code>的字符串，替换为<code>%.o</code>，替换完成以后的字 符串为“a.o b.o c.o”，注意此时a，b和c是不变的。</li>
</ul>
<h4 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h4><ul>
<li>函数 dir 用来获取目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(dir &lt;names…&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>此函数用来从文件名序列中提取出目录部分，返回值是文件名序列<names>的目录 部分</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(dir &lt;/src/a.c&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>提取文件“/src/a.c”的目录部分，也就是“/src”。</li>
</ul>
<h4 id="notdir"><a href="#notdir" class="headerlink" title="notdir"></a>notdir</h4><ul>
<li>函数 notdir 看名字就是知道去除文件中的目录部分，也就是提取文件名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(notdir &lt;names…&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>此函数用与从文件名序列<names>中提取出文件名非目录部分</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(notdir &lt;/src/a.c&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>提取文件“/src/a.c”中的非目录部分，也就是文件名“a.c”。</li>
</ul>
<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><ul>
<li>foreach 函数用来完成循环</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(foreach &lt;var&gt;, &lt;list&gt;,&lt;text&gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>此函数的意思就是把参数<list>中的单词逐一取出来放到参数<var>中，然后再执行<text>所 包含的表达式。每次<text>都会返回一个字符串，循环的过程中，**<text>中所包含的每个字符串 会以空格隔开<strong>，最后当整个循环结束时，</strong><text>所返回的每个字符串所组成的整个字符串将会是 函数 foreach 函数的返回值**</li>
</ul>
<h4 id="wildcard"><a href="#wildcard" class="headerlink" title="wildcard"></a>wildcard</h4><ul>
<li>通配符<strong>“%”只能用在规则中</strong>，<strong>只有在规则中它才会展开</strong>，如果在<strong>变量定义</strong>和<strong>函数使用</strong>时， 通配符<strong>不会自动展开</strong>，这个时候就要用到函数 wildcard</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(wildcard PATTERN…)</span><br></pre></td></tr></table></figure>

<p>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(wildcard *.c)</span><br></pre></td></tr></table></figure>

<p>上面的代码是用来<strong>获取当前目录下所有的.c 文件，类似“%”</strong>。</p>
<p><strong>使用例</strong></p>
<p>（文件夹下有<code>a.c</code>, <code>b.c</code>和<code>c.c</code>三个文件）</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">list=<span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line">files=<span class="variable">$(<span class="built_in">foreach</span> filename, <span class="variable">$(list)</span>, <span class="variable">$(filename)</span> hello)</span></span><br><span class="line"><span class="section">main: </span></span><br><span class="line">	</span><br><span class="line">	@echo $&#123;list&#125;</span><br><span class="line">	</span><br><span class="line">	@echo <span class="variable">$(files)</span></span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm *.o</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><img src="/imgs/image-20220110111644323.png" alt="image-20220110111644323"></p>
]]></content>
  </entry>
  <entry>
    <title>linux进程</title>
    <url>/2022/01/21/linux%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h1><ul>
<li>main传参</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br></pre></td></tr></table></figure>

<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ul>
<li><p>进程是一个动态过程，而非静态文件，它是程序的一次运行过程，当应用程序被加载到内存中运行之后 它就称为了一个进程，当程序运行结束后也就意味着进程终止，这就是进程的一个生命周期。</p>
</li>
<li><p>Linux 系统下的每一个进程都有一个进程号（processID，简称 PID），进程号是一个正数，用于唯一标 识系统中的某一个进程。在 Ubuntu 系统下执行 **<code>ps -aux </code>**命令可以查到系统中进程相关的一些信息，包括每个进程 的进程号</p>
</li>
<li><p><img src="/../imgs/image-20220121134232404.png" alt="image-20220121134232404"></p>
</li>
<li><p>通过系统调用 getpid()来获取<strong>本进程</strong>的进程号</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">getpid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>还可以使用 getppid()系统调用获取父进程的进程号</li>
</ul>
<h2 id="进程的环境变量"><a href="#进程的环境变量" class="headerlink" title="进程的环境变量"></a>进程的环境变量</h2><ul>
<li><p>每一个进程都有一组与其相关的环境变量，这些环境变量以字符串形式存储在一个字符串数组列表中， 把这个数组称为环境列表。其中每个字符串都是以<strong>“名称=值（name=value）”</strong>形式定义</p>
</li>
<li><p>在 shell 终端下可以使用 env 命令查看到 shell 进程的所有环境变量</p>
</li>
<li><p>使用 export 命令还可以添加一个新的环境变量或删除一个环境变量</p>
<ul>
<li><code>export LINUX_APP=123456</code></li>
</ul>
</li>
<li><p>使用”export -n LINUX_APP”命令则可以删除 LINUX_APP 环境变量</p>
<ul>
<li><code>export -n LINUX_APP</code></li>
</ul>
</li>
</ul>
<p>环境变量存放在一个字符串数组中，在应用程序中，通过 environ 变量指向它，environ 是一个全局变 量，在我们的应用程序中只需申明它即可使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **environ; <span class="comment">// 申明外部全局变量 environ</span></span><br></pre></td></tr></table></figure>

<p>如果只想要<strong>获取某个指定的环境变量</strong>，可以使用库函数 getenv()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">getenv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>不应该去修改其返回的字符串，修改该字符串意味着修改了环境变量对应的值</p>
</li>
<li><p><strong>添加/修改</strong>环境变量</p>
</li>
<li><p>putenv()函数</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putenv</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​            string：参数 string 是一个字符串指针，指向 name=value 形式的字符串。 </p>
<p>​            返回值：成功返回 0；失败将返回非 0 值，并设置 errno。</p>
<ul>
<li>setenv()函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setenv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *value, <span class="keyword">int</span> overwrite)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​            name：需要添加或修改的环境变量名称。 </p>
<p>​            value：环境变量的值。 </p>
<p>​            overwrite：若参数 name 标识的环境变量已经存在，在参数 overwrite 为 0 的情况下，setenv()函数将不 改变现有环境变量的值，也就是说本次调用没有产生任何影响；如果参数 overwrite 的值为非 0，若参数 name 标识的环境变量已经存在，则覆盖，不存在则表示添加新的环境变量。</p>
<p>​             返回值：成功返回 0；失败将返回-1，并设置 errno。</p>
<p>​        setenv()函数为<strong>形如 name=value 的字符串</strong>分配一块内存缓冲区，并将参数 name 和参数 value 所指向的 字符串复制到此缓冲区中，以此来创建一个新的环境变量</p>
<ul>
<li>除了上面给大家介绍的函数之外，我们还可以通过一种更简单地方式向进程环境变量表中添加环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME=value ./app</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在执行程序的时候，<strong>在其路径前面添加环境变量，以 name=value 的形式添加</strong>，如果是<strong>多个</strong>环境变量， 则在./app 前面放置多对 name=value 即可，以<strong>空格分隔</strong>。</p>
</li>
<li><p>清除环境变量：</p>
<ul>
<li><code>environ = NULL;</code>或者</li>
<li>使用stdlib中的<code>int clearenv(void);</code></li>
</ul>
</li>
</ul>
<h3 id="环境变量的作用"><a href="#环境变量的作用" class="headerlink" title="环境变量的作用"></a>环境变量的作用</h3><ul>
<li>环境变量常见的用途之一是在 shell 中，每一个环境变量都有它所表示的含义，譬如 HOME 环境变量表 示用户的家目录，USER 环境变量表示当前用户名，SHELL 环境变量表示 shell 解析器名称，PWD 环境变 量表示当前所在目录等，在我们自己的应用程序当中，也可以使用进程的环境变量。</li>
</ul>
<h2 id="进程的内存布置"><a href="#进程的内存布置" class="headerlink" title="进程的内存布置"></a>进程的内存布置</h2><ul>
<li><p><strong>正文段。</strong>也可称为代码段，这是 CPU 执行的机器语言指令部分，文本段具有只读属性，以防止程 序由于意外而修改其指令；正文段是可以共享的，即使在多个进程间也可同时运行同一段程序。</p>
</li>
<li><p><strong>初始化数据段。</strong>通常将此段称为数据段，包含了显式初始化的全局变量和静态变量，当程序加载到 内存中时，从可执行文件中读取这些变量的值。</p>
</li>
<li><p><strong>未初始化数据段</strong>。包含了<strong>未进行显式初始化的全局变量和静态变量</strong>，通常将此段称为 bss 段，这一 名词来源于早期汇编程序中的一个操作符，意思是“由符号开始的块”（block started by symbol）， 在程序开始执行之前，系统会将本段内所有内存初始化为 0，可执行文件并没有为 bss 段变量分配 存储空间，在可执行文件中只需记录 bss 段的位置及其所需大小，直到程序运行时，由加载器来分 配这一段内存空间。</p>
</li>
<li><p><strong>栈。</strong>函数内的<strong>局部变量</strong>以及每次函数调用时所需保存的信息都放在此段中，每次调用函数时，函数 传递的实参以及函数返回值等也都存放在栈中。栈是一个动态增长和收缩的段，由栈帧组成，系统 会为每个当前调用的函数分配一个栈帧，栈帧中存储了函数的局部变量（所谓自动变量）、实参和 返回值。</p>
</li>
<li><p><strong>堆</strong>。可在运行时<strong>动态进行内存分配</strong>的一块区域，譬如使用 **malloc()**分配的内存空间，就是从系统堆 内存中申请分配的。</p>
</li>
<li><p><img src="/../imgs/image-20220121141423676.png" alt="image-20220121141423676"></p>
</li>
</ul>
<h2 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h2><ul>
<li><p>在 32 位系统中，每个进程的逻辑地址空间均为 4GB，这 4GB 的内存空间按照 3:1 的比例 进行分配，其中用户进程享有 3G 的空间，而内核独自享有剩下的 1G 空间，如下所示：</p>
</li>
<li><p><img src="/../imgs/image-20220121141526808.png" alt="image-20220121141526808"></p>
</li>
<li><p>学习过驱动开发的读者对“虚拟地址”这个概念应该并不陌生，虚拟地址会通过硬件 <strong>MMU（内存管理 单元）</strong>映射到实际的物理地址空间中，建立虚拟地址到物理地址的映射关系后，对虚拟地址的读写操作实际 上就是对物理地址的读写操作，MMU 会将物理地址“翻译”为对应的物理地址</p>
<ul>
<li>虚拟地址解决的问题</li>
<li><strong>内存使用效率低</strong>。内存空间不足时，就需要将其它程序暂时拷贝到硬盘中，然后将新的程序装入内 存。然而由于大量的数据装入装出，内存的使用效率就会非常低。（实际上不会真正给程序分配所有的空间，程序用到的时候才会分配空间）</li>
<li>进程地址<strong>空间不隔离</strong>。由于程序是直接访问物理内存的，所以每一个进程都可以修改其它进程的 内存数据，甚至修改内核地址空间中的数据，所以有些恶意程序可以随意修改别的进程，就会造成 一些破坏，系统不安全、不稳定。</li>
<li>无法<strong>确定程序的链接地址</strong>。程序运行时，链接地址和运行地址必须一致，否则程序无法运行！因为 程序代码加载到内存的地址是由系统随机分配的，是无法预知的，所以程序的运行地址在编译程序 时是无法确认的。</li>
<li>在某些应用场合下，两个或者更多进程能够共享内存。因为每个进程都有自己的映射表，可以让不 同进程的虚拟地址空间映射到相同的物理地址空间中。通常，共享内存可用于实现进程间通信。</li>
<li>便于实现内存保护机制。譬如在多个进程共享内存时，允许每个进程对内存采取不同的保护措施， 例如，一个进程可能以只读方式访问内存，而另一进程则能够以可读可写的方式访问。</li>
</ul>
</li>
</ul>
<h3 id="创建子线程"><a href="#创建子线程" class="headerlink" title="创建子线程"></a>创建子线程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>fork()调用成功后，将会<strong>在父进程中返回子进程的 PID</strong>，而<strong>在子进程中返回值是 0</strong>；如果调用失败，父进 程返回值-1，不创建子进程，并设置 errno。 </li>
<li>fork()系统调用的关键在于，完成对其调用后将存在两个进程，一个是原进程（父进程）、另一个 则是创建出来的子进程，并且<strong>每个进程都会从 fork()函数的返回处继续执行</strong>，会导致调用 fork()返回两次值， <strong>子进程返回一个值、父进程返回一个值</strong>。在程序代码中，可通过返回值来区分是子进程还是父进程。</li>
<li>fork()调用成功后，子进程和父进程会<strong>继续执行 fork()调用之后的指令</strong>，子进程、父进程<strong>各自在自己的进 程空间中运行</strong>。事实上，<strong>子进程是父进程的一个副本，譬如子进程拷贝了父进程的数据段、堆、栈以及继承 了父进程打开的文件描述符，父进程与子进程并不共享这些存储空间</strong>，这是子进程对父进程相应<strong>部分存储 空间的完全复制</strong>，执行 fork()之后，每个进程均可修改各自的栈数据以及堆段中的变量，而并不影响另一个 进程。</li>
<li>虽然子进程是父进程的一个副本，但是对于程序代码段（文本段）来说，<strong>两个进程执行相同的代码段</strong>， 因为代码段是只读的，也就是说父子进程共享代码段，在内存中只存在一份代码段数据。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">pid_t</span> pid;</span><br><span class="line"> pid = fork();</span><br><span class="line"> <span class="keyword">switch</span> (pid) </span><br><span class="line"> 	&#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">         perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;这是子进程打印信息&lt;pid: %d, 父进程 pid: %d&gt;\n&quot;</span>,</span><br><span class="line">         getpid(), getppid());</span><br><span class="line">         _exit(<span class="number">0</span>); <span class="comment">//子进程使用_exit()退出</span></span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;这是父进程打印信息&lt;pid: %d, 子进程 pid: %d&gt;\n&quot;</span>,</span><br><span class="line">         getpid(), pid);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进程和子进程之间的文件共享"><a href="#进程和子进程之间的文件共享" class="headerlink" title="进程和子进程之间的文件共享"></a>进程和子进程之间的文件共享</h3><ul>
<li><p>调用 fork()函数之后，子进程会获得父进程所有文件描述符的副本，这些副本的创建方式类似于 dup()， 这也意味着父、子进程对应的文件描述符均指向相同的文件表</p>
</li>
<li><p><img src="/../imgs/image-20220121181944858.png" alt="image-20220121181944858"></p>
</li>
<li><p>由此可知，<strong>子进程拷贝了父进程的文件描述符表</strong>，使得父、子进程中对应的<strong>文件描述符指向了相同的文 件表</strong>，也意味着父、子进程中对应的文件描述符指向了磁盘中相同的文件，因而这些文件在父、子进程间实 现了共享，譬如，如果<strong>子进程更新了文件偏移量，那么这个改变也会影响到父进程中相应文件描述符的位置 偏移量</strong>。</p>
</li>
<li><p><strong>假如是父子进程分别打开同一个文件的话（在fork()之后），则读写文件会互相覆盖，因为偏移量没有互相影响</strong></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">switch</span> (pid)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">/* 子进程 */</span></span><br><span class="line">        fd = open(<span class="string">&quot;./Text.txt&quot;</span>, O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; fd)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">            _exit(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="comment">//循环写入 4 次</span></span><br><span class="line">            write(fd, <span class="string">&quot;1122&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">/* 父进程 */</span></span><br><span class="line">        fd = open(<span class="string">&quot;./Text.txt&quot;</span>, O_WRONLY);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &gt; fd)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;open error&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) <span class="comment">//循环写入 4 次</span></span><br><span class="line">            write(fd, <span class="string">&quot;AABB&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>父进程写入5次，子进程写入4次，最终的输出为</p>
<ul>
<li><img src="/../imgs/image-20220121184306317.png" alt="image-20220121184306317"></li>
</ul>
</li>
<li><p><code>vfork()</code></p>
</li>
<li><p>除了 fork()系统调用之外，Linux 系统还提供了 vfork()系统调用用于创建子进程，vfork()与 fork()函数在 功能上是相同的，并且返回值也相同，在一些细节上存在区别</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">vfork</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>从前面的介绍可知，可以将 fork()认作对父进程的数据段、堆段、栈段以及其它一些数据结构创建拷贝， 由此可以看出，使用 fork()系统调用的代价是很大的，它复制了父进程中的数据段和堆栈段中的绝大部分内 容，这将会消耗比较多的时间，效率会有所降低，<strong>而且太浪费</strong>，原因有很多，其中之一在于，<strong>fork()函数之 后子进程通常会调用 exec 函数</strong>.子进程<strong>不再执行父程序中的代码 段</strong>，而是执行新程序的代码段，从新程序的 main 函数开始执行、并为新程序重新<strong>初始化其数据段、堆段、 栈段等.</strong></p>
</li>
<li><p>出于这一原因，引入了 vfork()系统调用，虽然在一些细节上有所不同，但其效率要高于 fork()函数。类 似于 fork()，vfork()可以为调用该函数的进程创建一个新的子进程，然而，vfork()是为子进程<strong>立即执行 exec()</strong> 新的程序而专门设计的</p>
<ul>
<li>vfork的区别：<ul>
<li>vfork()与 fork()一样都创建了子进程，但 vfork()函数并不会将父进程的地址空间完全复制到子进程 中，因为子进程会立即调用 exec（或_exit），于是也就不会引用该地址空间的数据。不过在子进程 调用 exec 或_exit 之前，它<strong>在父进程的空间中运行</strong>、子进程<strong>共享父进程的内存</strong>。这种优化工作方式 的实现提高的效率；但如果子进程修改了父进程的数据（除了 vfork 返回值的变量）、进行了函数 调用、或者没有调用 exec 或_exit 就返回将可能带来未知的结果。</li>
<li>另一个区别在于，vfork()保证<strong>子进程先运行</strong>，<strong>子进程调用 exec 之后父进程才可能被调度运行</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><p>现代的 Linux 系统内核已经采 用了写时复制技术来实现 fork()，其效率较之于早期的 fork()实现要高出许多，除非速度绝对重要的场合， 我们的程序当中应舍弃 vfork()而使用 fork()。</p>
</li>
<li><p>调用 fork()之后，子进程成为了一个独立的进程，可被系统调度运行，而父进程也继续被系统调度运行， 这里出现了一个问题，调用 fork 之后，<strong>无法确定父、子两个进程谁将率先访问 CPU</strong></p>
</li>
<li><p>此时可以采用先让某个进程堵塞，然后另一个进程<strong>向其发送信号将其唤醒</strong></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;接收到信号\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sig</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">sigset_t</span> wait_mask;</span><br><span class="line">    <span class="comment">/* 初始化信号集 */</span></span><br><span class="line">    sigemptyset(&amp;wait_mask);</span><br><span class="line">    <span class="comment">/* 设置信号处理方式 */</span></span><br><span class="line">    sig.sa_handler = sig_handler;</span><br><span class="line">    sig.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == sigaction(SIGUSR1, &amp;sig, <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;sigaction error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (fork())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">/* 子进程 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;子进程开始执行\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;子进程打印信息\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;~~~~~~~~~~~~~~~\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        kill(getppid(), SIGUSR1); <span class="comment">//发送信号给父进程、唤醒它</span></span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">/* 父进程 */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> != sigsuspend(&amp;wait_mask)) <span class="comment">//挂起、阻塞</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父进程开始执行\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父进程打印信息\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上面代码中的父进程先通过调用<code>sigsuspend(&amp;wait_mask)</code>堵塞，然后等待子线程发送<code>kill(getppid(), SIGUSR1)</code>发送信号将其唤醒</li>
</ul>
<p><strong>init 进程的 PID 总是为 1，它是所有子进程的父进程，一切从 1 开始、一切从 init 进程开始</strong></p>
<h3 id="进程的退出"><a href="#进程的退出" class="headerlink" title="进程的退出"></a>进程的退出</h3><ul>
<li>如果程序中注册了进程终止处理函数，那么会调用终止处理函数。在 9.1.2 小节给大家介绍如何注 册进程的终止处理函数；</li>
<li><strong>刷新 stdio 流缓冲区</strong>。</li>
<li>执行_exit()系统调用</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (fork())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">        perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="comment">/* 子进程 */</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">/* 父进程 */</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个程序会将其中的”Hello World”打印两次，但是假如上述字符串包含换行符的话就不会打印显示，原因如下</p>
<ul>
<li>进程的用户空间内存中维护了 stdio 缓冲区，0 小节给大家 介绍过，因此通过 fork()创建子进程时会复制这些缓冲区。标准输出设备默认使用的是行缓冲，当检测到换 行符\n 时会立即显示函数 printf()输出的字符串，此时输出之后的缓冲区的空的</li>
<li>假如没有换行符的话，系统并不会立即输出内容，这就导致在创建子线程的时候会将缓冲去等待显示的字符串也拷贝一次。当它们<strong>调用 exit()函数时，都会刷 新各自的缓冲区、显示字符串</strong>，所以就会看到打印出了两次相同的字符串<ul>
<li>防止上述问题的办法</li>
<li>在调用 fork()之前，使用函数 <code>fflush()</code>来刷新 stdio 缓冲区，当然，作为另一种选择，也可以使用 setvbuf()和 setbuf()来关闭 stdio 流的缓冲功能</li>
</ul>
</li>
</ul>
<h3 id="监视子进程"><a href="#监视子进程" class="headerlink" title="监视子进程"></a>监视子进程</h3><ul>
<li>系统调用 wait()可以等待进程的任一子进程终止，同时获取子进程 的终止状态信息</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> *status)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>status：参数 status 用于存放子进程终止时的状态信息，参数 status 可以为 NULL，表示不接收子进程 终止时的状态信息。</p>
</li>
<li><p> 返回值：若成功则返回终止的子进程对应的进程号；失败则返回-1。</p>
</li>
<li><p>wait函数的内容</p>
<ul>
<li>调用 wait()函数，如果其所有子进程都还在运行，则 <strong>wait()会一直阻塞等待，直到某一个子进程终 止</strong>；</li>
<li>如果进程调用 wait()，但是该进程并没有子进程，也就意味着该进程<strong>并没有需要等待的子进程，那 么 wait()将返回错误，也就是返回-1</strong>、并且会将 errno 设置为 ECHILD。</li>
<li>如果进程调用 wait()之前，它的子进程当中<strong>已经有一个或多个子进程已经终止了，那么调用 wait() 也不会阻塞</strong>。wait()函数的作用除了获取子进程的终止状态信息之外，更重要的一点，就是回收子 进程的一些资源，俗称为子进程“收尸”，关于这个问题后面再给大家进行介绍。所以在调用 wait() 函数之前，已经有子进程终止了，意味着正等待着父进程为其“收尸”，所以调用 wait()将不会阻 塞，而是会立即替该子进程“收尸”、处理它的“后事”，然后返回到正常的程序流程中，<strong>一次 wait() 调用只能处理一次</strong>。</li>
<li>参数 status 不为 NULL 的情况下，则 wait()会将子进程的终止时的状态信息存储在它指向的 int 变量中， 可以通过宏来检查 status 参数（略）</li>
</ul>
</li>
<li><p><code>waitpid()</code></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> *status, <span class="keyword">int</span> options)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>pid：参数 pid 用于表示需要等待的某个具体子进程，关于参数 pid 的取值范围如下：</p>
<ul>
<li>如果 pid 大于 0，表示等待进程号为 pid 的子进程；</li>
<li>如果 pid 等于 0，则等待与调用进程（父进程）同一个进程组的所有子进程；</li>
<li>如果 pid 小于-1，则会等待进程组标识符与 pid 绝对值相等的所有子进程；</li>
<li>如果 pid 等于-1，则等待任意子进程。wait(&amp;status)与 waitpid(-1, &amp;status, 0)等价。</li>
</ul>
</li>
<li><p>status：与 wait()函数的 status 参数意义相同。</p>
</li>
<li><p>参数 options 是一个位掩码，可以包括 0 个或多个标志（略）</p>
</li>
</ul>
<h2 id="僵尸进程和孤儿进程"><a href="#僵尸进程和孤儿进程" class="headerlink" title="僵尸进程和孤儿进程"></a>僵尸进程和孤儿进程</h2><h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><ul>
<li>父进程先于子进程结束，也就是意味着，此时子进程变成了一个“孤儿”，我们把这种进程就称为孤儿 进程。</li>
<li>在 Linux 系统当中，所有的孤儿进程都自动成为 init 进程（进程号为 1）的子进程，换言之，某一子 进程的父进程结束后，该子进程<strong>调用 getppid()将返回 1</strong></li>
</ul>
<h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><ul>
<li>进程结束之后，通常需要其父进程为其“收尸”，回收子进程占用的一些内存资源，父进程通过调用 wait()（或其变体 waitpid()、waitid()等）函数回收子进程资源，归还给系统。 </li>
<li>如果子进程先于父进程结束，此时父进程还未来得及给子进程“收尸”，那么此时子进程就变成了一个 僵尸进程。</li>
<li>当父进程调用 wait()（或其变体，下文不再强调）为子进程“收尸”后，僵尸进程就会被内核彻底删除。 另外一种情况，如果父进程并没有调用 wait()函数然后就退出了，那么此时 **init 进程将会接管它的子进程并 自动调用 wait()**，故而从系统中移除僵尸进程。</li>
<li>如果系统中存在大量的 僵尸进程，它们<strong>势必会填满内核进程表，从而阻碍新进程的创建</strong>。需要注意的是，僵尸进程是<strong>无法通过信号 将其杀死的</strong>，即使是“一击必杀”信号 SIGKILL 也无法将其杀死，那么这种情况下，只能<strong>杀死僵尸进程的 父进程（或等待其父进程终止）</strong>，这样 init 进程将会<strong>接管这些僵尸进程，从而将它们从系统中清理掉</strong></li>
</ul>
<h2 id="执行新程序"><a href="#执行新程序" class="headerlink" title="执行新程序"></a>执行新程序</h2><h4 id="execve"><a href="#execve" class="headerlink" title="execve()"></a><code>execve()</code></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">char</span> *<span class="keyword">const</span> argv[], <span class="keyword">char</span> *<span class="keyword">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>filename：参数 filename 指向需要载入当前进程空间的新程序的路径名，既可以是绝对路径、也可以是 相对路径。 </p>
</li>
<li><p>argv：参数 argv 则指定了传递给新程序的命令行参数。是一个字符串数组，**该数组对应于 main(int argc,  char *argv[])函数的第二个参数 argv，且格式也与之相同，是由字符串指针所组成的数组**，以 NULL 结束。 argv[0]对应的便是新程序自身路径名。 </p>
</li>
<li><p>envp：参数 envp 也是一个字符串指针数组，<strong>指定了新程序的环境变量列表</strong>，参数 envp 其实对应于新程 序的 environ 数组，同样也是以 NULL 结束，所指向的字符串格式为 <strong>name=value</strong>。</p>
</li>
<li><p>execve 调用成功将不会返回；失败将返回-1，并设置 errno。对 execve()的成功调用<strong>将永不返回</strong>，而且也无需检查它的返回值，实际上，一旦该函数返回，就表明它 发生了错误。</p>
</li>
</ul>
<h2 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h2><ul>
<li>使用 system()函数可以很方便地在我们的程序当中执行任意 shell 命令，本小节来学习下 system()函数的 用法，以及介绍 system()函数的实现方法。 首先来看看 system()函数原型，如下所示</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">system</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *command)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>system()函数其内部的是通过调用 fork()、execl()以及 waitpid()这三个函数来实现它的功能，首先 system() 会调用 fork()创建一个子进程来运行 shell（可以把这个子进程成为 shell 进程），并通过 shell 执行参数 command 所指定的命令。<ul>
<li>当参数 command 为 NULL，如果 shell 可用则返回一个非 0 值，若不可用则返回 0；针对一些非 UNIX 系统，该系统上可能是没有 shell 的，这样就会导致 shell 不可能；如果 command 参数不为 NULL，则返回值从以下的各种情况所决定。</li>
<li>如果无法创建子进程或无法获取子进程的终止状态，那么 system()返回-1；</li>
<li>如果子进程不能执行 shell，则 system()的返回值就好像是子进程通过调用_exit(127)终止了；</li>
<li>如果所有的系统调用都成功，system()函数会返回执行 command 的 shell 进程的终止状态。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>分析基于epoll的C++高性能webServer代码（三）</title>
    <url>/2022/06/29/%E5%88%86%E6%9E%90%E5%9F%BA%E4%BA%8Eepoll%E7%9A%84C-%E9%AB%98%E6%80%A7%E8%83%BDwebServer%E4%BB%A3%E7%A0%81%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="分析基于epoll的C-高性能webServer代码（三）"><a href="#分析基于epoll的C-高性能webServer代码（三）" class="headerlink" title="分析基于epoll的C++高性能webServer代码（三）"></a>分析基于epoll的C++高性能webServer代码（三）</h1><p><a href="https://blog.csdn.net/goosse/article/details/124495526">epoll用法参考</a></p>
<h2 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h2><ul>
<li><p>Socket类基于C语言的tcp通信库实现，将C语言提供的Socket相关操作函数利用C++的面向对象进行了包装</p>
</li>
<li><p>成员数据对象只有一个<code>int serverfd_;</code></p>
</li>
</ul>
<h3 id="构造函数Socket-args"><a href="#构造函数Socket-args" class="headerlink" title="构造函数Socket(/* args */)"></a>构造函数Socket(/* args */)</h3><ul>
<li>创建<code>socket</code>对象</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Socket::<span class="built_in">Socket</span>(<span class="comment">/* args */</span>)</span><br><span class="line">&#123;</span><br><span class="line">    serverfd_ = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == serverfd_)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;socket create fail!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server create socket&quot;</span> &lt;&lt; serverfd_ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><ul>
<li>关闭<code>socket</code>文件描述符</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Socket::~<span class="built_in">Socket</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">close</span>(serverfd_);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server close...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SetReuseAddr"><a href="#SetReuseAddr" class="headerlink" title="SetReuseAddr()"></a>SetReuseAddr()</h3><ul>
<li>设置地址</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Socket::SetReuseAddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(serverfd_, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="built_in"><span class="keyword">sizeof</span></span>(on));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Setnonblocking"><a href="#Setnonblocking" class="headerlink" title="Setnonblocking()"></a>Setnonblocking()</h3><ul>
<li>设置为非阻塞模式</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Socket::Setnonblocking</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opts = <span class="built_in">fcntl</span>(serverfd_, F_GETFL);</span><br><span class="line">    <span class="keyword">if</span> (opts&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl(serverfd_,GETFL)&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fcntl</span>(serverfd_, F_SETFL, opts | O_NONBLOCK) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl(serverfd_,SETFL,opts)&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server setnonblocking...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="BindAddress-int-serverport"><a href="#BindAddress-int-serverport" class="headerlink" title="BindAddress(int serverport)"></a>BindAddress(int serverport)</h3><ul>
<li>将主机对应的端口号与<code>socket</code>进行绑定</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Socket::BindAddress</span><span class="params">(<span class="keyword">int</span> serverport)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></span><br><span class="line">	<span class="built_in">memset</span>(&amp;serveraddr, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(serveraddr));</span><br><span class="line">	serveraddr.sin_family = AF_INET;</span><br><span class="line">	serveraddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">//inet_addr(_ServerIP.c_str());</span></span><br><span class="line">	serveraddr.sin_port = <span class="built_in">htons</span>(serverport);</span><br><span class="line">	<span class="keyword">int</span> resval = <span class="built_in">bind</span>(serverfd_, (struct sockaddr*)&amp;serveraddr, <span class="built_in"><span class="keyword">sizeof</span></span>(serveraddr));</span><br><span class="line">	<span class="keyword">if</span> (resval == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">close</span>(serverfd_);</span><br><span class="line">		<span class="built_in">perror</span>(<span class="string">&quot;error bind&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server bindaddress...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Listen"><a href="#Listen" class="headerlink" title="Listen()"></a>Listen()</h3><ul>
<li>就是调用C提供的<code>Listen</code>函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Socket::Listen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">listen</span>(serverfd_, <span class="number">2048</span>) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">perror</span>(<span class="string">&quot;error listen&quot;</span>);</span><br><span class="line">		<span class="built_in">close</span>(serverfd_);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server listenning...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Accept-struct-sockaddr-in-amp-clientaddr"><a href="#Accept-struct-sockaddr-in-amp-clientaddr" class="headerlink" title="Accept(struct sockaddr_in &amp;clientaddr)"></a>Accept(struct sockaddr_in &amp;clientaddr)</h3><ul>
<li>调用C提供的<code>Accept()</code>函数</li>
<li>返回用户<code>socket</code>的文件描述符</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Socket::Accept</span><span class="params">(struct sockaddr_in &amp;clientaddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">socklen_t</span> lengthofsockaddr = <span class="built_in"><span class="keyword">sizeof</span></span>(clientaddr);</span><br><span class="line">    <span class="keyword">int</span> clientfd = <span class="built_in">accept</span>(serverfd_, (struct sockaddr*)&amp;clientaddr, &amp;lengthofsockaddr);</span><br><span class="line">    <span class="keyword">if</span> (clientfd &lt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//perror(&quot;error accept&quot;);</span></span><br><span class="line">        <span class="comment">//if(errno == EAGAIN)</span></span><br><span class="line">            <span class="comment">//return 0;</span></span><br><span class="line">		<span class="comment">//std::cout &lt;&lt; &quot;error accept:there is no new connection accept...&quot; &lt;&lt; std::endl;</span></span><br><span class="line">        <span class="keyword">return</span> clientfd;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;server accept,clientfd: &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="keyword">return</span> clientfd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Close"><a href="#Close" class="headerlink" title="Close()"></a>Close()</h3><ul>
<li>关闭对应的文件描述符</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Socket::Close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">close</span>(serverfd_);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;server close...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Epoll介绍"><a href="#Epoll介绍" class="headerlink" title="Epoll介绍"></a>Epoll介绍</h2><h3 id="等待队列"><a href="#等待队列" class="headerlink" title="等待队列"></a>等待队列</h3><ul>
<li>当进程A执行到创建socket的语句时，操作系统会创建一个由文件系统管理的socket对象（如下图）。这个socket对象包含了发送缓冲区、接收缓冲区、等待队列等成员。<u>等待队列是个非常重要的结构，它指向所有需要等待该socket事件的进程</u>。</li>
</ul>
<p><img src="/imgs/v2-7ce207c92c9dd7085fb7b823e2aa5872_720w.jpg" alt="img"></p>
<ul>
<li>当程序执行到<strong>recv时</strong>，操作系统会将进程A从工作队列移动到该socket的等待队列中（如下图）。由于工作队列只剩下了进程B和C，依据进程调度，cpu会轮流执行这两个进程的程序，不会执行进程A的程序。<strong>所以进程A被阻塞，不会往下执行代码，也不会占用cpu资源</strong>。</li>
</ul>
<p><img src="/imgs/v2-1c7a96c8da16f123388e46f88772e6d8_720w.jpg" alt="img"></p>
<ul>
<li>ps：操作系统添加等待队列只是添加了对这个“等待中”进程的引用，以便在接收到数据时获取进程对象、将其唤醒，而非直接将进程管理纳入自己之下。上图为了方便说明，直接将进程挂到等待队列之下。</li>
<li>当socket接收到数据后，操作系统将该socket等待队列上的进程<strong>重新放回到工作队列</strong>，该进程变成运行状态，继续执行代码。也由于<u>socket的接收缓冲区已经有了数据，recv可以返回接收到的数据</u>。</li>
</ul>
<h3 id="内核接收网络数据全过程"><a href="#内核接收网络数据全过程" class="headerlink" title="内核接收网络数据全过程"></a>内核接收网络数据全过程</h3><ul>
<li>如下图所示，进程在recv阻塞期间，计算机收到了对端传送的数据（步骤①）。数据经由网卡传送到内存（步骤②），然后网卡通过中断信号通知cpu有数据到达，cpu执行中断程序（步骤③）。此处的中断程序主要有两项功能，先将网络数据写入到对应socket的接收缓冲区里面（步骤④），再唤醒进程A（步骤⑤），重新将进程A放入工作队列中。</li>
</ul>
<p><img src="/imgs/v2-696b131cae434f2a0b5ab4d6353864af_720w.jpg" alt="img"></p>
<ul>
<li>一个socket对应着一个端口号，而网络数据包中包含了ip和端口的信息，内核可以通过端口号找到对应的socket。当然，为了提高处理速度，操作系统会维护端口号到socket的索引结构，以快速读取。</li>
</ul>
<h3 id="同时监视多个socket的简单方法"><a href="#同时监视多个socket的简单方法" class="headerlink" title="同时监视多个socket的简单方法"></a><strong>同时监视多个socket的简单方法</strong></h3><ul>
<li>服务端需要管理多个客户端连接，而recv只能监视单个socket，这种矛盾下，人们开始寻找监视多个socket的方法。epoll的要义是<strong>高效</strong>的监视多个socket。从历史发展角度看，必然先出现一种不太高效的方法，人们再加以改进。只有先理解了不太高效的方法，才能够理解epoll的本质。</li>
<li>假如能够预先传入一个socket列表，<strong>如果列表中的socket都没有数据，挂起进程，直到有一个socket收到数据，唤醒进程</strong>。这种方法很直接，也是select的设计思想。</li>
<li>为方便理解，我们先复习select的用法。在如下的代码中，先准备一个数组（下面代码中的fds），让fds存放着所有需要监视的socket。然后调用select，如果fds中的所有socket都没有数据，select会阻塞，直到有一个socket接收到数据，select返回，唤醒进程。用户可以遍历fds，通过FD_ISSET判断具体哪个socket收到数据，然后做出处理。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> s = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);  </span><br><span class="line"><span class="built_in">bind</span>(s, ...)</span><br><span class="line"><span class="built_in">listen</span>(s, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fds[] =  存放需要监听的socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">select</span>(..., fds, ...)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; fds.count; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(fds[i], ...))&#123;</span><br><span class="line">            <span class="comment">//fds[i]的数据处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="select的流程"><a href="#select的流程" class="headerlink" title="select的流程"></a>select的流程</h3><ul>
<li>select的实现思路很直接。假如程序同时监视如下图的sock1、sock2和sock3三个socket，那么在调用select之后，操作系统把进程A分别加入这三个socket的等待队列中。</li>
</ul>
<p><img src="/imgs/v2-0cccb4976f8f2c2f8107f2b3a5bc46b3_720w.jpg" alt="img"></p>
<ul>
<li>当任何一个socket收到数据后，中断程序将唤起进程。下图展示了sock2接收到了数据的处理流程。</li>
</ul>
<p><img src="/imgs/v2-85dba5430f3c439e4647ea4d97ba54fc_720w.jpg" alt="img"></p>
<ul>
<li>所谓唤起进程，就是将进程从所有的等待队列中移除，加入到工作队列里面。如下图所示。</li>
</ul>
<p><img src="/imgs/v2-a86b203b8d955466fff34211d965d9eb_720w.jpg" alt="img"></p>
<ul>
<li><p>经由这些步骤，当进程A被唤醒后，它知道至少有一个socket接收了数据。程序只需遍历一遍socket列表，就可以得到就绪的socket。</p>
</li>
<li><p>这种简单方式<strong>行之有效</strong>，在几乎所有操作系统都有对应的实现。</p>
</li>
</ul>
<p><strong>select的缺点</strong></p>
<ul>
<li>其一，每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个fds列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定select的最大监视数量，默认只能监视1024个socket。</li>
<li>其二，进程被唤醒后，程序并不知道哪些socket收到数据，还需要遍历一次。</li>
</ul>
<h3 id="epoll的设计思路"><a href="#epoll的设计思路" class="headerlink" title="epoll的设计思路"></a>epoll的设计思路</h3><ul>
<li>epoll是在select出现N多年后才被发明的，是select和poll的增强版本。epoll通过以下一些措施来改进效率。</li>
<li>select低效的原因之一是将“维护等待队列”和“阻塞进程”两个步骤合二为一。如下图所示，每次调用select都需要这两步操作，然而大多数应用场景中，需要监视的socket相对固定，并不需要每次都修改。epoll将这两个操作分开，先用epoll_ctl维护等待队列，再调用epoll_wait阻塞进程。显而易见的，效率就能得到提升。</li>
</ul>
<p><img src="/imgs/eb0153cf87170138262d2109a7e59a447a4b085e7092880892bc91c9652d95c7.png" alt="图 1">  </p>
<ul>
<li>为方便理解后续的内容，我们先复习下epoll的用法。如下的代码中，先用epoll_create创建一个epoll对象epfd，再通过epoll_ctl将需要监视的socket添加到epfd中，最后调用epoll_wait等待数据。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> s = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);   </span><br><span class="line"><span class="built_in">bind</span>(s, ...)</span><br><span class="line"><span class="built_in">listen</span>(s, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> epfd = <span class="built_in">epoll_create</span>(...);</span><br><span class="line"><span class="built_in">epoll_ctl</span>(epfd, ...); <span class="comment">//将所有需要监听的socket添加到epfd中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">epoll_wait</span>(...)</span><br><span class="line">    <span class="keyword">for</span>(接收到数据的socket)&#123;</span><br><span class="line">        <span class="comment">//处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>select低效的另一个原因在于程序不知道哪些socket收到数据，只能一个个遍历。如果内核维护一个“就绪列表”，引用收到数据的socket，就能避免遍历。如下图所示，计算机共有三个socket，收到数据的sock2和sock3被rdlist（就绪列表）所引用。当进程被唤醒后，只要获取rdlist的内容，就能够知道哪些socket收到数据。</li>
</ul>
<p><img src="/imgs/8727b6a09712ba48bc3aa42bc9a8d91213668b9c71e598c66b38952ac63188f0.png" alt="图 2">  </p>
<h3 id="epoll的原理和流程"><a href="#epoll的原理和流程" class="headerlink" title="epoll的原理和流程"></a>epoll的原理和流程</h3><ul>
<li>创建epoll对象<ul>
<li>如下图所示，当某个进程调用epoll_create方法时，内核会创建一个eventpoll对象（也就是程序中epfd所代表的对象）。eventpoll对象也是文件系统中的一员，和socket一样，它也会有等待队列。</li>
<li><img src="/imgs/91c0d033282976eae916544255575d9624bb815e6c1035da670e0b290b4bcece.png" alt="图 3">  </li>
<li>创建一个代表该epoll的eventpoll对象是必须的，因为内核要维护“就绪列表”等数据，“就绪列表”可以作为eventpoll的成员。</li>
</ul>
</li>
<li>维护监视列表<ul>
<li>创建epoll对象后，可以用epoll_ctl添加或删除所要监听的socket。以添加socket为例，如下图，如果通过epoll_ctl添加sock1、sock2和sock3的监视，内核会将eventpoll添加到这三个socket的等待队列中。</li>
<li><img src="/imgs/8a1343796174bd11a6f73f1b52799e0ed22a766d022325d3d5cf02503a4a3ead.png" alt="图 4">  </li>
<li>当socket收到数据后，中断程序会操作eventpoll对象，而不是直接操作进程。</li>
</ul>
</li>
<li>接收数据<ul>
<li>当socket收到数据后，中断程序会给eventpoll的“就绪列表”添加socket引用。如下图展示的是sock2和sock3收到数据后，中断程序让rdlist引用这两个socket。</li>
<li><img src="/imgs/cc63dd25307e424248a1d6bea9b932f785332bf7af15817f058b6a2884fd6444.png" alt="图 5">  </li>
<li>eventpoll对象相当于是socket和进程之间的中介，socket的数据接收并不直接影响进程，而是通过改变eventpoll的就绪列表来改变进程状态。</li>
<li>当程序执行到epoll_wait时，如果rdlist已经引用了socket，那么epoll_wait直接返回，如果rdlist为空，阻塞进程。</li>
</ul>
</li>
</ul>
<h2 id="Channel类"><a href="#Channel类" class="headerlink" title="Channel类"></a>Channel类</h2><ul>
<li>该类主要用于处理服务器用到的<code>epoll</code>的各种事件以及该做出反应</li>
<li>主要内容包括设置各种回调函数的操作函数</li>
<li><code>void SetReadHandle(Callback cb)</code>, <code>void SetWriteHandle(Callback cb)</code>, <code>void SetErrorHandle(Callback cb)</code>, <code>void SetCloseHandle(Callback cb)</code>等</li>
<li>另一个是<code>epoll</code>事件的处理函数，负责检测<code>epoll</code>的<strong>读、写、对方关闭或者连接错误</strong>等情况<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Channel::HandleEvent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(events_ &amp; EPOLLRDHUP)<span class="comment">//对方异常关闭事件</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Event EPOLLRDHUP&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">closehandler_</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(events_ &amp; (EPOLLIN | EPOLLPRI))<span class="comment">//读事件，对端有数据或者正常关闭</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//std::cout &lt;&lt; &quot;Event EPOLLIN&quot; &lt;&lt; std::endl;</span></span><br><span class="line">        <span class="built_in">readhandler_</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(events_ &amp; EPOLLOUT)<span class="comment">//写事件</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Event EPOLLOUT&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">writehandler_</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Event error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">errorhandler_</span>();<span class="comment">//连接错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Poller"><a href="#Poller" class="headerlink" title="Poller"></a>Poller</h2><ul>
<li><p>这个类使用面向对象的方式封装了C传统提供的<code>epoll</code>相关的方法</p>
<h3 id="构造函数-Poller-args"><a href="#构造函数-Poller-args" class="headerlink" title="构造函数 Poller(/* args */)"></a>构造函数 Poller(/* args */)</h3></li>
<li><p>使用初始化列表初始化了一个内容为<code>epoll_event</code>的<code>vector</code>，其中<code>epoll_event</code>的结构体定义为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> events;	<span class="comment">/* Epoll events */</span></span><br><span class="line">  <span class="keyword">epoll_data_t</span> data;	<span class="comment">/* User data variable */</span></span><br><span class="line">&#125; __EPOLL_PACKED;</span><br></pre></td></tr></table></figure></li>
<li><p>初始化列表创建了一个映射关系为<code>&lt;int, Channel*&gt;</code>的map对象</p>
</li>
<li><p>然后调用<code>epoll_create</code>函数创建<code>epoll</code>对象， <code>epoll_create(int)</code>函数的参数含义是监听socket的数量</p>
<h3 id="poll-ChannelList-amp-activechannellist"><a href="#poll-ChannelList-amp-activechannellist" class="headerlink" title="poll(ChannelList &amp;activechannellist)"></a>poll(ChannelList &amp;activechannellist)</h3></li>
<li><p>等待IO事件的函数</p>
</li>
<li><p>开始使用<code>epoll_wait</code>函数等待IO事件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> nfds = <span class="built_in">epoll_wait</span>(pollfd_, &amp;*eventlist_.<span class="built_in">begin</span>(), (<span class="keyword">int</span>)eventlist_.<span class="built_in">capacity</span>(), timeout);</span><br></pre></td></tr></table></figure></li>
<li><p>然后就是从等待得到的事件列表中逐个遍历处理，包括从事件数组中取出数据、寻找数据对应的文件描述符，找到之后通过<code>Channel</code>对象的<code>SetEvents</code>设置事件类型，同时将将其加入<code>activechannellist</code>。如果没找到的话就显示未找到的提示</p>
</li>
<li><p>同时还包括假如事件数组的大小不足的时候进行扩容的部分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Poller::poll</span><span class="params">(ChannelList &amp;activechannellist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> timeout = TIMEOUT;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;epoll_wait...&quot; &lt;&lt; std::endl;(int)eventlist_.capacity()</span></span><br><span class="line">    <span class="keyword">int</span> nfds = <span class="built_in">epoll_wait</span>(pollfd_, &amp;*eventlist_.<span class="built_in">begin</span>(), (<span class="keyword">int</span>)eventlist_.<span class="built_in">capacity</span>(), timeout);</span><br><span class="line">    <span class="comment">//int nfds = epoll_wait(pollfd_, &amp;*eventlist_.begin(), (int)channelmap_.size()*0.7+1, timeout);</span></span><br><span class="line">    <span class="keyword">if</span>(nfds == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error code is:%d&quot;</span>, errno);</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll wait error&quot;</span>);</span><br><span class="line">        <span class="comment">//exit(1);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//printf(&quot;event num:%d\n&quot;, nfds);</span></span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;event num:&quot; &lt;&lt; nfds &lt;&lt; &quot;\n&quot;;// &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nfds; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> events = eventlist_[i].events;</span><br><span class="line">        <span class="comment">//int fd = eventlist_[i].data.fd;</span></span><br><span class="line">        Channel *pchannel = (Channel*)eventlist_[i].data.ptr;</span><br><span class="line">        <span class="keyword">int</span> fd = pchannel-&gt;<span class="built_in">GetFd</span>();</span><br><span class="line">        <span class="keyword">if</span>(channelmap_.<span class="built_in">find</span>(fd) != channelmap_.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            pchannel-&gt;<span class="built_in">SetEvents</span>(events);</span><br><span class="line">            activechannellist.<span class="built_in">push_back</span>(pchannel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;not find channel!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nfds == (<span class="keyword">int</span>)eventlist_.<span class="built_in">capacity</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;resize:&quot;</span> &lt;&lt; nfds &lt;&lt; std::endl;</span><br><span class="line">        eventlist_.<span class="built_in">resize</span>(nfds * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//eventlist_.clear();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AddChannel-Channel-pchannel-、RemoveChannel-Channel-pchannel-、UpdateChannel-Channel-pchannel"><a href="#AddChannel-Channel-pchannel-、RemoveChannel-Channel-pchannel-、UpdateChannel-Channel-pchannel" class="headerlink" title="AddChannel(Channel *pchannel)、RemoveChannel(Channel *pchannel)、UpdateChannel(Channel *pchannel)"></a>AddChannel(Channel *pchannel)、RemoveChannel(Channel *pchannel)、UpdateChannel(Channel *pchannel)</h3></li>
<li><p>三个函数大体的代码逻辑相同，都是利用传入的<code>Channel</code>参数获取文件描述符<code>fd</code>，然后将前文提到的映射的<code>map</code>中相应的对象做出修改。然后使用<code>epoll_ctl</code>修改epoll对其的监视。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Poller::AddChannel</span><span class="params">(Channel *pchannel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = pchannel-&gt;<span class="built_in">GetFd</span>();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = pchannel-&gt;<span class="built_in">GetEvents</span>();</span><br><span class="line">    <span class="comment">//data是联合体</span></span><br><span class="line">    <span class="comment">//ev.data.fd = fd;</span></span><br><span class="line">    ev.data.ptr = pchannel;</span><br><span class="line">    channelmap_[fd] = pchannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">epoll_ctl</span>(pollfd_, EPOLL_CTL_ADD, fd, &amp;ev) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll add error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;addchannel!&quot; &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Poller::RemoveChannel</span><span class="params">(Channel *pchannel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = pchannel-&gt;<span class="built_in">GetFd</span>();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = pchannel-&gt;<span class="built_in">GetEvents</span>();</span><br><span class="line">    <span class="comment">///ev.data.fd = fd;</span></span><br><span class="line">    ev.data.ptr = pchannel;</span><br><span class="line">    channelmap_.<span class="built_in">erase</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">epoll_ctl</span>(pollfd_, EPOLL_CTL_DEL, fd, &amp;ev) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll del error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;removechannel!&quot; &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Poller::UpdateChannel</span><span class="params">(Channel *pchannel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = pchannel-&gt;<span class="built_in">GetFd</span>();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ev</span>;</span></span><br><span class="line">    ev.events = pchannel-&gt;<span class="built_in">GetEvents</span>();</span><br><span class="line">    <span class="comment">//ev.data.fd = fd;</span></span><br><span class="line">    ev.data.ptr = pchannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">epoll_ctl</span>(pollfd_, EPOLL_CTL_MOD, fd, &amp;ev) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;epoll update error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;updatechannel!&quot; &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="epoll结构体的定义"><a href="#epoll结构体的定义" class="headerlink" title="epoll结构体的定义"></a>epoll结构体的定义</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">__uint32_t</span> u32;</span><br><span class="line">    <span class="keyword">__uint64_t</span> u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">__uint32_t</span> events; <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data; <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>events的定义</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>事件宏</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>EPOLLIN</td>
<td>表示对应的文件描述符可以读（包括对端SOCKET正常关闭）</td>
</tr>
<tr>
<td>EPOLLOUT</td>
<td>表示对应的文件描述符可以写</td>
</tr>
<tr>
<td>EPOLLPRI</td>
<td>表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）</td>
</tr>
<tr>
<td>EPOLLERR</td>
<td>表示对应的文件描述符发生错误</td>
</tr>
<tr>
<td>EPOLLHUP</td>
<td>表示对应的文件描述符被挂断</td>
</tr>
<tr>
<td>EPOLLET</td>
<td>将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</td>
</tr>
<tr>
<td>EPOLLONESHOT</td>
<td>只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</td>
</tr>
</tbody></table>
<h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><ul>
<li><p>这个类的主要作用是维护一个处理网络事件的循环，将<code>Channel</code>从<code>activechannellist</code>中取出，然后处理事件。</p>
<h3 id="构造函数-EventLoop-args"><a href="#构造函数-EventLoop-args" class="headerlink" title="构造函数 EventLoop(/* args */)"></a>构造函数 EventLoop(/* args */)</h3></li>
<li><p>构造<code>vector&lt;Functor&gt; functorlist_</code>，其中<code>functor</code>是<code>function&lt;void()&gt; Functor</code>，同时还构造两个<code>vector&lt;Channel*&gt; ChannelList</code>的数组对象，再构造一个<code>Poller</code>对象，然后将自身的<code>bool</code>标记置为true。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">EventLoop::<span class="built_in">EventLoop</span>(<span class="comment">/* args */</span>)</span><br><span class="line">    : <span class="built_in">functorlist_</span>(),</span><br><span class="line">    <span class="built_in">channellist_</span>(),</span><br><span class="line">    <span class="built_in">activechannellist_</span>(),</span><br><span class="line">    <span class="built_in">poller_</span>(),</span><br><span class="line">    <span class="built_in">quit</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环函数-EventLoop-loop"><a href="#循环函数-EventLoop-loop" class="headerlink" title="循环函数 EventLoop::loop()"></a>循环函数 EventLoop::loop()</h3></li>
<li><p>主要作用是循环调用前面的<code>epoll</code>类的<code>poll</code>函数，然后从<code>activechannellist</code>中遍历处理每个的事件。然后清空<code>activechannellist</code>，并且执行函数列表里的函数完成任务。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EventLoop::loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    quit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(!quit)</span><br><span class="line">    &#123;</span><br><span class="line">        poller_.<span class="built_in">poll</span>(activechannellist_);</span><br><span class="line">        <span class="comment">//std::cout &lt;&lt; &quot;server HandleEvent&quot; &lt;&lt; std::endl;</span></span><br><span class="line">        <span class="keyword">for</span>(Channel *pchannel : activechannellist_)</span><br><span class="line">        &#123;            </span><br><span class="line">            pchannel-&gt;<span class="built_in">HandleEvent</span>();<span class="comment">//处理事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        activechannellist_.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">ExecuteTask</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="TcpServer"><a href="#TcpServer" class="headerlink" title="TcpServer"></a>TcpServer</h2><ul>
<li><p><a href="http://naotu.baidu.com/file/1c993feb2c86cb9e3caf273d19c9d54d?token=f68ea843fc2470f4">成员对象以及函数思维导图</a></p>
</li>
<li><p>注册业务函数函数指针的部分<em>在此处略去</u></em></p>
</li>
</ul>
<h3 id="构造函数-TcpServer-EventLoop-loop-int-port"><a href="#构造函数-TcpServer-EventLoop-loop-int-port" class="headerlink" title="构造函数 TcpServer(EventLoop* loop, int port)"></a>构造函数 TcpServer(EventLoop* loop, int port)</h3><ul>
<li>利用初始化列表初始化<code>Socket</code>的<code>Serversocket</code>对象，初始化循环体<code>loop</code>对象，初始化<code>Channel</code>类型的<code>serverchannel</code>对象，初始化链接计数<code>conncount</code>对象</li>
<li><code>serversocket</code>分别进行<code>SetReuseAddr()</code>、<code>BindAddress(port)</code>, <code>Listen()</code>, <code>Setnonblocking()</code></li>
<li><code>serverchannel_</code>初始化并且设置<code>ReadHandle</code>和<code>ErrorHandle</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">TcpServer::<span class="built_in">TcpServer</span>(EventLoop* loop, <span class="keyword">int</span> port)</span><br><span class="line">    : <span class="built_in">serversocket_</span>(),</span><br><span class="line">    <span class="built_in">loop_</span>(loop),</span><br><span class="line">    <span class="built_in">serverchannel_</span>(),</span><br><span class="line">    <span class="built_in">conncount_</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//serversocket_.SetSocketOption(); </span></span><br><span class="line">    serversocket_.<span class="built_in">SetReuseAddr</span>();   </span><br><span class="line">    serversocket_.<span class="built_in">BindAddress</span>(port);</span><br><span class="line">    serversocket_.<span class="built_in">Listen</span>();</span><br><span class="line">    serversocket_.<span class="built_in">Setnonblocking</span>();</span><br><span class="line"></span><br><span class="line">    serverchannel_.<span class="built_in">SetFd</span>(serversocket_.<span class="built_in">fd</span>());</span><br><span class="line">    serverchannel_.<span class="built_in">SetReadHandle</span>(std::<span class="built_in">bind</span>(&amp;TcpServer::OnNewConnection, <span class="keyword">this</span>));</span><br><span class="line">    serverchannel_.<span class="built_in">SetErrorHandle</span>(std::<span class="built_in">bind</span>(&amp;TcpServer::OnConnectionError, <span class="keyword">this</span>));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Start-函数"><a href="#Start-函数" class="headerlink" title="Start()函数"></a>Start()函数</h3></li>
<li>设置channel的events，同时将channel添加到循环loop中<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TcpServer::Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serverchannel_.<span class="built_in">SetEvents</span>(EPOLLIN | EPOLLET);</span><br><span class="line">    loop_-&gt;<span class="built_in">AddChannelToPoller</span>(&amp;serverchannel_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="建立新连接的处理函数"><a href="#建立新连接的处理函数" class="headerlink" title="建立新连接的处理函数"></a>建立新连接的处理函数</h3><ul>
<li>主要功能是接受客户端的连接请求，然后利用接收到的文件描述符创建新的控制链接的成员对象，注册业务函数并且完成调用。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新TCP连接处理,核心功能，业务功能注册，任务分发</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TcpServer::OnNewConnection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//循环调用accept，获取所有的建立好连接的客户端fd</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> clientfd;</span><br><span class="line">    <span class="keyword">while</span>( (clientfd = serversocket_.<span class="built_in">Accept</span>(clientaddr)) &gt; <span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//std::cout &lt;&lt; &quot;New client from IP:&quot; &lt;&lt; inet_ntoa(clientaddr.sin_addr) </span></span><br><span class="line">        <span class="comment">//    &lt;&lt; &quot;:&quot; &lt;&lt; ntohs(clientaddr.sin_port) &lt;&lt; std::endl;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(++conncount_ &gt;= MAXCONNECTION)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">close</span>(clientfd);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Setnonblocking</span>(clientfd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接，注册业务函数</span></span><br><span class="line">        TcpConnection *ptcpconnection = <span class="keyword">new</span> <span class="built_in">TcpConnection</span>(loop_, clientfd, clientaddr);</span><br><span class="line">        ptcpconnection-&gt;<span class="built_in">SetMessaeCallback</span>(messagecallback_);</span><br><span class="line">        ptcpconnection-&gt;<span class="built_in">SetSendCompleteCallback</span>(sendcompletecallback_);</span><br><span class="line">        ptcpconnection-&gt;<span class="built_in">SetCloseCallback</span>(closecallback_);</span><br><span class="line">        ptcpconnection-&gt;<span class="built_in">SetErrorCallback</span>(errorcallback_);</span><br><span class="line">        ptcpconnection-&gt;<span class="built_in">SetConnectionCleanUp</span>(std::<span class="built_in">bind</span>(&amp;TcpServer::RemoveConnection, <span class="keyword">this</span>, ptcpconnection));</span><br><span class="line">        tcpconnlist_[clientfd] = ptcpconnection;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">newconnectioncallback_</span>(ptcpconnection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="RemoveConnection-TcpConnection-ptcpconnection"><a href="#RemoveConnection-TcpConnection-ptcpconnection" class="headerlink" title="RemoveConnection(TcpConnection *ptcpconnection)"></a>RemoveConnection(TcpConnection *ptcpconnection)</h3><ul>
<li>连接断开的操作<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//连接清理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TcpServer::RemoveConnection</span><span class="params">(TcpConnection *ptcpconnection)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     --conncount_;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;clean up connection, conncount is&quot; &lt;&lt; conncount_ &lt;&lt; std::endl;   </span></span><br><span class="line">    tcpconnlist_.<span class="built_in">erase</span>(ptcpconnection-&gt;<span class="built_in">fd</span>());</span><br><span class="line">    <span class="keyword">delete</span> ptcpconnection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="OnConnectionError"><a href="#OnConnectionError" class="headerlink" title="OnConnectionError()"></a>OnConnectionError()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TcpServer::OnConnectionError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;UNKNOWN EVENT&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    serversocket_.<span class="built_in">Close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Setnonblocking-int-fd"><a href="#Setnonblocking-int-fd" class="headerlink" title="Setnonblocking(int fd)"></a>Setnonblocking(int fd)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Setnonblocking</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opts = <span class="built_in">fcntl</span>(fd, F_GETFL);</span><br><span class="line">    <span class="keyword">if</span> (opts &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl(fd,GETFL)&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fcntl</span>(fd, F_SETFL, opts | O_NONBLOCK) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fcntl(fd,SETFL,opts)&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2022/08/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="从递归到动态规划"><a href="#从递归到动态规划" class="headerlink" title="从递归到动态规划"></a>从递归到动态规划</h1><ul>
<li><p>只要调用一个递归函数，总有参数不可变和参数可变的部分</p>
</li>
<li><p>不可变的参数对结果没有影响因为都是一样的</p>
</li>
<li><p>分析一个递归函数得到结果依赖下层递归返回什么内容</p>
</li>
<li><p>为什么递归慢？因为会在不同的分支重复遍历相同的情况 </p>
<h2 id="递归到记忆化搜索"><a href="#递归到记忆化搜索" class="headerlink" title="递归到记忆化搜索"></a>递归到记忆化搜索</h2><h2 id="严格表结构的动态规划"><a href="#严格表结构的动态规划" class="headerlink" title="严格表结构的动态规划"></a>严格表结构的动态规划</h2></li>
<li><p>解决重复遍历相同情况的问题</p>
</li>
<li><p>利用缓存实现递归函数的可变部分到缓存结果的映射</p>
</li>
<li><p>假如递归函数有k个参数可变，那么缓存的表具有k个维度</p>
</li>
<li><p>缓存表能区分是否计算过这个位置的内容，比如用INT MIN或者-1一类</p>
</li>
<li><p>缓存没命中的话就开始尝试，将尝试的结果存储到表中</p>
</li>
<li><p>时间复杂度O(缓存表的尺寸)，本来的复杂度是二叉树的节点数</p>
<h2 id="计算动态规划表格"><a href="#计算动态规划表格" class="headerlink" title="计算动态规划表格"></a>计算动态规划表格</h2></li>
<li><p>动态规划的顺序一定从递归函数的<strong>底层情况</strong>开始，或者说从递归的终止位置开始，知道不需要计算就直接出答案的位置</p>
</li>
<li><p>从上面的推导得出计算的顺序</p>
</li>
<li><p>利用递归函数的逻辑调用动态规划表格的内容</p>
</li>
<li><p>将<u>调用下一级的递归函数</u>更改为从下一级的递归函数的<u>可变参数位置对应的缓存表的位置取出值</u></p>
</li>
<li><p>也就是将<strong>递归调用的过程</strong>变成从<strong>动态规划表格中取值</strong>的过程</p>
</li>
<li><p><strong>小心越界</strong></p>
<h3 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h3></li>
<li><p>假如在递归的过程中出现<u>枚举行为</u>(比如计算一个格子的位置需要循环用到一系列从少到多的格子的信息)</p>
</li>
<li><p>那么可以考虑使用<u>与这个格子临近的格子</u>寻找不需要进行循环就可以直接常数时间内就得到结果的方法</p>
<h2 id="leetcode-122题-买卖股票的最佳时机II"><a href="#leetcode-122题-买卖股票的最佳时机II" class="headerlink" title="leetcode 122题 买卖股票的最佳时机II"></a>leetcode 122题 买卖股票的最佳时机II</h2></li>
<li><p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> maxTemp;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; profitCash;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; profitHold;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        profitCash = vector&lt;<span class="keyword">int</span>&gt;(prices.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        profitHold = vector&lt;<span class="keyword">int</span>&gt;(prices.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        profitHold[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            profitCash[i] = <span class="built_in">max</span>(profitHold[i<span class="number">-1</span>]+prices[i], profitCash[i<span class="number">-1</span>]);</span><br><span class="line">            profitHold[i] = <span class="built_in">max</span>(profitCash[i<span class="number">-1</span>] - prices[i], profitHold[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profitCash[prices.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>思路：状态一共两种，此时持有股票或者此时不持有股票，每种有两种操作</p>
</li>
<li><p>持有的话要决定现在卖还是现在不卖，<strong>现在卖掉的话更新现在持有现金的最大利润（跟持有现金的前一天比较），否则维持现在持有股票的最大利润</strong></p>
</li>
<li><p>不持有要决定现在买还是现在不买， <strong>现在买的话更新现在持有股票的最大利润（跟持有股票的前一天比较），否则维持现在持有现金的最大利润</strong>。</p>
<h2 id="leetcode-123-买卖股票的最佳时机III"><a href="#leetcode-123-买卖股票的最佳时机III" class="headerlink" title="leetcode 123.买卖股票的最佳时机III"></a>leetcode 123.买卖股票的最佳时机III</h2></li>
<li><p>与上一题类似，先给出递归的版本（超时）再给出转化为动态规划的版本</p>
</li>
<li><p>分析每一次持仓的时候的动作为减仓和维持不变，每一次没有持仓的时候的操作是加仓和维持不变，这样就可以给出每次状态转换的递归关系，进而通过函数的参数个数（递归函数有<strong>剩余交易次数，是否持仓，交易天数</strong>三个参数和当前的利润一个结果），给出一个三维数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>()&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">trybuyAndSell</span>(prices, <span class="number">2</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="built_in">trybuyAndSell</span>(prices, <span class="number">1</span>, <span class="literal">true</span>, -prices[<span class="number">0</span>], <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">trybuyAndSell</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices, <span class="keyword">int</span> remain, <span class="keyword">bool</span> haveStock, <span class="keyword">int</span> curProfit, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == prices.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(haveStock)<span class="keyword">return</span> curProfit+prices[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> curProfit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!haveStock&amp;&amp;remain == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> curProfit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(haveStock)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">trybuyAndSell</span>(prices, remain, <span class="literal">true</span>, curProfit, i+<span class="number">1</span>), <span class="built_in">trybuyAndSell</span>(prices, remain, <span class="literal">false</span>, curProfit+prices[i], i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!haveStock)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">trybuyAndSell</span>(prices, remain<span class="number">-1</span>, <span class="literal">true</span>, curProfit - prices[i], i+<span class="number">1</span>), <span class="built_in">trybuyAndSell</span>(prices, remain, <span class="literal">false</span>, curProfit, i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curProfit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = prices.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(prices.<span class="built_in">size</span>()&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 第一个维度是剩余次数，第二个是是否持仓，第三个是当前利润</span></span><br><span class="line">        vector&lt;vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; <span class="built_in">mat</span>(<span class="number">3</span>, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(<span class="number">2</span>, vector&lt;<span class="keyword">int</span>&gt;(prices.<span class="built_in">size</span>(), INT_MIN)));</span><br><span class="line">        mat[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        mat[<span class="number">2</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>)mat[<span class="number">0</span>][<span class="number">1</span>][i] = <span class="built_in">max</span>(mat[<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>] - prices[i], mat[<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">1</span>)mat[<span class="number">0</span>][<span class="number">0</span>][i] = <span class="built_in">max</span>(mat[<span class="number">0</span>][<span class="number">0</span>][i<span class="number">-1</span>], mat[<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]+prices[i]);</span><br><span class="line">            mat[<span class="number">1</span>][<span class="number">1</span>][i] = <span class="built_in">max</span>(mat[<span class="number">2</span>][<span class="number">0</span>][i<span class="number">-1</span>] - prices[i], mat[<span class="number">1</span>][<span class="number">1</span>][i - <span class="number">1</span>]);</span><br><span class="line">            mat[<span class="number">1</span>][<span class="number">0</span>][i] = <span class="built_in">max</span>(i&gt;<span class="number">1</span>?mat[<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>]:INT_MIN, mat[<span class="number">1</span>][<span class="number">1</span>][i<span class="number">-1</span>]+prices[i]);</span><br><span class="line">            <span class="comment">// mat[2][1][i] = max(mat[])</span></span><br><span class="line">            mat[<span class="number">2</span>][<span class="number">0</span>][i] = mat[<span class="number">2</span>][<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(mat[<span class="number">2</span>][<span class="number">0</span>][cnt], <span class="built_in">max</span>(mat[<span class="number">1</span>][<span class="number">0</span>][cnt], mat[<span class="number">0</span>][<span class="number">0</span>][cnt]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-97-交错字符串"><a href="#leetcode-97-交错字符串" class="headerlink" title="leetcode 97.交错字符串"></a>leetcode 97.交错字符串</h2></li>
<li><p>其实<strong>不需要</strong>根据s3的长度建立很多个数组，因为s1和s2遍历到的位置能<strong>直接确定s3遍历到的字符</strong>，<u>只用建立s1和s2长度为两边的二维数组即可</u>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInterleave</span><span class="params">(string s1, string s2, string s3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.<span class="built_in">size</span>() == <span class="number">0</span>)<span class="keyword">return</span> s2 == s3;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s2.<span class="built_in">size</span>() == <span class="number">0</span>)<span class="keyword">return</span> s1 == s3;</span><br><span class="line">        v = vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;(s1.<span class="built_in">size</span>()+<span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(s2.<span class="built_in">size</span>()+<span class="number">1</span>, INT_MIN));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">tryIfPos</span>(s1, s2, s3, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">tryIfPos</span><span class="params">(string&amp;s1, string&amp; s2, string&amp; s3, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2, <span class="keyword">int</span> i3)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;i1&lt;&lt;&#x27; &#x27;&lt;&lt;i2&lt;&lt;&#x27; &#x27;&lt;&lt;i3&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(v[i1][i2]!=INT_MIN)<span class="keyword">return</span> v[i1][i2];</span><br><span class="line">        <span class="keyword">if</span>(i1 == s1.<span class="built_in">size</span>() &amp;&amp; i2 == s2.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i3 == s3.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                v[i1][i2] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                v[i1][i2] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i3 == s3.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            v[i1][i2] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> temp1 = <span class="literal">false</span>, temp2 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i1&lt;s1.<span class="built_in">size</span>()&amp;&amp;s3[i3] == s1[i1])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i1+<span class="number">1</span>][i2] == INT_MIN)</span><br><span class="line">            temp1 = <span class="built_in">tryIfPos</span>(s1, s2, s3, i1+<span class="number">1</span>, i2, i3+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> temp1 = v[i1+<span class="number">1</span>][i2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i2&lt;s2.<span class="built_in">size</span>()&amp;&amp;s3[i3] == s2[i2])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i1][i2+<span class="number">1</span>] == INT_MIN)</span><br><span class="line">            temp2 = <span class="built_in">tryIfPos</span>(s1, s2, s3, i1, i2+<span class="number">1</span>, i3+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> temp2 = v[i1][i2+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&#x27;!&#x27;;</span></span><br><span class="line">        <span class="keyword">if</span>(!(s3[i3] == s1[i1] || s3[i3] == s2[i2]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// if(i1&lt;s1.size()&amp;&amp;i2&lt;s2.size()&amp;&amp;i3&lt;s3.size())</span></span><br><span class="line">            v[i1][i2] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&#x27;@&#x27;;</span></span><br><span class="line">        <span class="comment">// if(i1&lt;s1.size()&amp;&amp;i2&lt;s2.size()&amp;&amp;i3&lt;s3.size())</span></span><br><span class="line">        v[i1][i2] = temp1||temp2;</span><br><span class="line">        <span class="keyword">return</span> v[i1][i2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>击败100%</p>
<h2 id="leetcode-44-通配符匹配"><a href="#leetcode-44-通配符匹配" class="headerlink" title="leetcode 44.通配符匹配"></a>leetcode 44.通配符匹配</h2></li>
<li><p>将递归转化为动态规划的时候可以采用与递归相同的顺序，比如递归是前面引用后面的，那动态规划也可以写成倒序的方便转换</p>
</li>
<li><p>注意基础位置的条件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;p.<span class="built_in">size</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p[i]!=<span class="string">&#x27;*&#x27;</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.<span class="built_in">size</span>() == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">m</span>(s.<span class="built_in">size</span>(), vector&lt;<span class="keyword">bool</span>&gt;(p.<span class="built_in">size</span>(), <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">int</span> i = p.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[p.<span class="built_in">size</span>()<span class="number">-1</span>] == s[s.<span class="built_in">size</span>()<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            m[s.<span class="built_in">size</span>()<span class="number">-1</span>][p.<span class="built_in">size</span>()<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p[p.<span class="built_in">size</span>()<span class="number">-1</span>] == <span class="string">&#x27;?&#x27;</span>&amp;&amp;s.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            --i;</span><br><span class="line">            m[s.<span class="built_in">size</span>()<span class="number">-1</span>][p.<span class="built_in">size</span>()<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p[p.<span class="built_in">size</span>()<span class="number">-1</span>] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = s.<span class="built_in">size</span>()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                m[i][p.<span class="built_in">size</span>()<span class="number">-1</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> si = s.<span class="built_in">size</span>()<span class="number">-1</span>; si&gt;=<span class="number">0</span>; si--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[si] == p[i] || p[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(si&lt;s.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;i&lt;p.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m[si][i] = m[si+<span class="number">1</span>][i+<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(si&lt;s.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;i == p.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m[si][i] = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;p.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;si == s.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m[si][i] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = i+<span class="number">1</span>; k&lt;p.<span class="built_in">size</span>(); k++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(p[k]!=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                m[si][i] = <span class="literal">false</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        m[si][i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(p[i] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(si&lt;s.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;i&lt;p.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                    m[si][i] = m[si+<span class="number">1</span>][i+<span class="number">1</span>]|m[si+<span class="number">1</span>][i]|m[si][i+<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(si&lt;s.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;i == p.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m[si][i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(i&lt;p.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;si == s.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m[si][i] = m[si][i+<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    m[si][i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> m[si][i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">starUtil</span><span class="params">(string&amp; s, string&amp; p, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == i1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i2&lt;p.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(; i2&lt;p.<span class="built_in">size</span>(); i2++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[i2]!=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p[i2] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">starUtil</span>(s, p, i1+<span class="number">1</span>, i2)||<span class="built_in">starUtil</span>(s, p, i1, i2+<span class="number">1</span>)||<span class="built_in">starUtil</span>(s, p, i1+<span class="number">1</span>, i2+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i1] == p[i2])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">starUtil</span>(s, p, i1+<span class="number">1</span>, i2+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p[i2] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">starUtil</span>(s, p, i1+<span class="number">1</span>, i2+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-152-乘积最大子数组"><a href="#leetcode-152-乘积最大子数组" class="headerlink" title="leetcode 152.乘积最大子数组"></a>leetcode 152.乘积最大子数组</h2></li>
<li><p>注意按照<strong>最大和最小分类讨论</strong>，因为有<strong>正负</strong>的问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxI = INT_MIN;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">m</span>(<span class="number">2</span>, vector&lt;<span class="keyword">int</span>&gt;(nums.<span class="built_in">size</span>(), <span class="number">0</span>));</span><br><span class="line">        m[<span class="number">1</span>][<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        m[<span class="number">0</span>][<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        maxI = maxI&gt;=m[<span class="number">0</span>][<span class="number">0</span>]?maxI:m[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        maxI = maxI&gt;=m[<span class="number">1</span>][<span class="number">0</span>]?maxI:m[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m[<span class="number">0</span>][i] = <span class="built_in">min</span>(nums[i], <span class="built_in">min</span>(nums[i]*m[<span class="number">0</span>][i<span class="number">-1</span>], nums[i]*m[<span class="number">1</span>][i<span class="number">-1</span>]));</span><br><span class="line">            m[<span class="number">1</span>][i] = <span class="built_in">max</span>(nums[i], <span class="built_in">max</span>(nums[i]*m[<span class="number">0</span>][i<span class="number">-1</span>], nums[i]*m[<span class="number">1</span>][i<span class="number">-1</span>]));</span><br><span class="line">            maxI = maxI&gt;=m[<span class="number">0</span>][i]?maxI:m[<span class="number">0</span>][i];</span><br><span class="line">            maxI = maxI&gt;=m[<span class="number">1</span>][i]?maxI:m[<span class="number">1</span>][i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxI;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="leetcode-238-除自身以外数组的乘积"><a href="#leetcode-238-除自身以外数组的乘积" class="headerlink" title="leetcode 238.除自身以外数组的乘积"></a>leetcode 238.除自身以外数组的乘积</h2><ul>
<li>因为不能用除法，所以使用两个数组，一个记录每个位置左侧位置的所有数字乘积，另一个记录右侧，没有元素的话认为是1<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">productExceptSelf</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">lProduct</span><span class="params">(nums.size(), <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rProduct</span><span class="params">(nums.size(), <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>()<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            lProduct[i+<span class="number">1</span>] = nums[i]*lProduct[i];</span><br><span class="line">            rProduct[nums.<span class="built_in">size</span>()-i<span class="number">-2</span>] = nums[nums.<span class="built_in">size</span>()<span class="number">-1</span>-i]*rProduct[nums.<span class="built_in">size</span>()-i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">ret</span>(nums.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ret[i] = lProduct[i]*rProduct[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-322-零钱兑换"><a href="#leetcode-322-零钱兑换" class="headerlink" title="leetcode 322. 零钱兑换"></a>leetcode 322. 零钱兑换</h2></li>
<li>使用最少数目的零钱兑换到指定的面额</li>
<li>注意递归（或者动态规划的循环内外层）的次序是可以改变的，使用零钱作为外层循环和使用<strong>剩余需要兑换的额度作为外层循环，该位置的零钱选择作为内层循环</strong>要更快一些</li>
<li>要抓到递归的本质是<strong>把钱兑换完，而不是把硬币都用一遍</strong><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](<span class="keyword">int</span>&amp;a, <span class="keyword">int</span> &amp;b)-&gt;<span class="keyword">bool</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a&gt;b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">sort</span>(coins.<span class="built_in">begin</span>(), coins.<span class="built_in">end</span>());</span><br><span class="line">        m = vector&lt;<span class="keyword">int</span>&gt;(amount+<span class="number">1</span>, <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        m[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;=amount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m[i]&gt;<span class="number">10000</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j = coins.<span class="built_in">begin</span>(); j!=coins.<span class="built_in">end</span>()&amp;&amp;*j&lt;=amount-i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                m[i+*j] = <span class="built_in">min</span>(m[i+*j], m[i]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m[amount]&gt;<span class="number">10000</span>?<span class="number">-1</span>:m[amount];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-334-递增的三元子序列"><a href="#leetcode-334-递增的三元子序列" class="headerlink" title="leetcode 334. 递增的三元子序列"></a>leetcode 334. 递增的三元子序列</h2></li>
<li>这题主要是使用两个数组记录每个位置的<strong>左侧的最小值和右侧的最大值</strong>，找到某个位置的左侧的最小值小于自身和右侧的最大值大于自身的位置即可，此时只需要遍历两次，一次找每个位置左右侧的最值，一次找是否存在符合的点。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">increasingTriplet</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">3</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>]&lt;nums[<span class="number">1</span>]&amp;&amp;nums[<span class="number">1</span>]&lt;nums[<span class="number">2</span>])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">lMin</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        lMin[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">rMax</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        rMax[nums.<span class="built_in">size</span>()<span class="number">-1</span>] = nums[nums.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">int</span> nSize = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;nSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            lMin[i] = <span class="built_in">min</span>(nums[i], lMin[i<span class="number">-1</span>]);</span><br><span class="line">            rMax[nSize<span class="number">-1</span>-i] = <span class="built_in">max</span>(rMax[nSize-i], nums[nSize<span class="number">-1</span>-i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;nSize<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(lMin[i<span class="number">-1</span>]&lt;nums[i]&amp;&amp;rMax[i+<span class="number">1</span>]&gt;nums[i])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-413-等差数列划分"><a href="#leetcode-413-等差数列划分" class="headerlink" title="leetcode 413. 等差数列划分"></a>leetcode 413. 等差数列划分</h2></li>
<li>寻找的是一个数组中，最小长度为3（可以超过3）的所有子数组的数量之和</li>
<li>比如一个数组跟以他的前一个数字结束的等差数列的公差相同，那么假如前一个数字结束的等差数列的最长长度为<code>k-2</code>(k&gt;=3)，那么以这个数字结束的数组的个数就是<code>k+1-2</code>，比如前一个数字结束的数组长度为5，那么以这个数字结束的数组的长度分别是3, 4, 5, 6共4种，正好是<code>5+1-2</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">3</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>] - nums[<span class="number">1</span>] == nums[<span class="number">1</span>] - nums[<span class="number">2</span>])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.<span class="built_in">size</span>()&amp;&amp;nums[i] - nums[i<span class="number">-1</span>] != nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>])++i;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] - nums[i<span class="number">-1</span>] != nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diffArr</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">lengthArr</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        diffArr[<span class="number">1</span>] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">        diffArr[<span class="number">2</span>] = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">        lengthArr[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        i+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[i] - nums[i<span class="number">-1</span>];</span><br><span class="line">            diffArr[i] = temp;</span><br><span class="line">            <span class="keyword">if</span>(temp == diffArr[i<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                lengthArr[i] = lengthArr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                cnt+=lengthArr[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-300-最长递增子序列"><a href="#leetcode-300-最长递增子序列" class="headerlink" title="leetcode 300. 最长递增子序列"></a>leetcode 300. 最长递增子序列</h2></li>
<li>设置一个记录数组，记录以每个位置结尾的最长递增数组的长度</li>
<li>此题不能改变原来数组的排序，在原来数组中寻找一个递增的子序列（不需要连续）</li>
<li>遍历的方式是指定当前递增序列的结尾数字，在当前位置之前寻找一个比他小但是以这个位置结尾的数组最长的位置，将<u>以当前位置结尾的递增数组的长度修改为前面选定的位置的递增数组的长度+1</u><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int maxLen = 0;</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">lenArr</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&lt;nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    lenArr[i] = <span class="built_in">max</span>(lenArr[i], lenArr[j]+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(lenArr[i]&gt;maxLen)</span><br><span class="line">                    &#123;</span><br><span class="line">                        maxLen = lenArr[i];</span><br><span class="line">                        maxEnd = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="leetcode-368-最大整除子集"><a href="#leetcode-368-最大整除子集" class="headerlink" title="leetcode 368.最大整除子集"></a>leetcode 368.最大整除子集</h2></li>
<li>此题是在一个数组中寻找一个子数组（<strong>不需要</strong>连续，而且<strong>可以</strong>改变原来的数组的顺序），数组中的每个元素都能被上一个元素整除，寻找总长度最长的子数组</li>
<li>给出一个与原来的数组大小相同的长度记录数组（以当前位置作为最后一个元素的整除数组的最大长度）</li>
<li>首先将数组从小到大排序</li>
<li>然后在0位置给出当前位置的最长整除数组为1</li>
<li>然后以第<code>i</code>个元素为末尾，遍历比这个元素小的所有元素，寻找能整除第<code>i</code>个元素而且以该数字结尾的数组最长的位置，将<code>i</code>位置的<code>以该位置结束的数组</code>的最大长度设置为<code>前面找到的最长数组的长度+1</code></li>
<li>因为无法确定每个位置的数字是否需要，所以要以<code>n^2</code>的时间复杂度遍历</li>
<li>回溯寻找这个最长的数组的时候，从当前最长数组的结尾元素的前一个元素开始，假如这个元素能整除当前的结尾元素，并且以这个元素结尾的数组的长度恰好是<code>最大长度-1</code>，那么这个元素就是待求数组当前结尾元素的前一个元素，将其替换为当前待求的结尾元素，将最大长度-1，重复上述过程。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">largestDivisibleSubset</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&lt;<span class="number">2</span>)<span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;(nums);</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">lenArr</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;ret;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">m</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]%nums[j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    lenArr[i] = <span class="built_in">max</span>(lenArr[i], lenArr[j]+<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(maxLen&lt;lenArr[i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        maxLen = lenArr[i];</span><br><span class="line">                        maxEnd = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[maxEnd];</span><br><span class="line">        ret.<span class="built_in">push_back</span>(nums[maxEnd--]);</span><br><span class="line">        <span class="keyword">while</span>(maxEnd&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp%nums[maxEnd] == <span class="number">0</span>&amp;&amp;lenArr[maxEnd] == maxLen<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ret.<span class="built_in">insert</span>(ret.<span class="built_in">begin</span>(), nums[maxEnd]);</span><br><span class="line">                temp = nums[maxEnd];</span><br><span class="line">                --maxEnd;</span><br><span class="line">                --maxLen;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                --maxEnd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Leetcode-416-分割等和子集"><a href="#Leetcode-416-分割等和子集" class="headerlink" title="Leetcode 416. 分割等和子集"></a>Leetcode 416. 分割等和子集</h2><ul>
<li>注意不是一定要连续的子集</li>
<li>先通过数组的和是不是奇数筛选掉一部分</li>
<li>动态规划的时候从结尾开始遍历这个为止的<strong>可到达性</strong>，也就是能否凑的出来这个位置<ul>
<li>如果一个和减去某个数组中存在的数字的和可达，那么这个和本身也可达<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, maxNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            maxNum = <span class="built_in">max</span>(maxNum, num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> target = sum / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (maxNum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = target; j &gt;= num; --j) &#123;</span><br><span class="line">                dp[j] |= dp[j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结</title>
    <url>/2022/08/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><a href="https://github.com/algorithmzuo">zuochengyun参考链接</a></p>
<h2 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h2><ul>
<li><img src="/imgs/84e153d22a3de18ea0b798a365d4cc8db510526eedc7622eff3621eeb6a91838.png" alt="图 1">  <h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2></li>
<li>数组中相同的元素在排序前后的相对次序有没有变化？没有就是稳定的。</li>
<li>语言为java，但是因为与C++类似，所以没有专门更改</li>
<li>交换函数<ul>
<li>位运算的交换函数<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a = a^b;</span><br><span class="line">b = a^b;</span><br><span class="line">c = a^b;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>普通交换函数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">	arr[j] = arr[i];</span><br><span class="line">	arr[i] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> N = arr.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> minValueIndex = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">			minValueIndex = arr[j] &lt; arr[minValueIndex] ? j : minValueIndex;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(arr, i, minValueIndex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度O(N^2)， 空间复杂度O(1)，<em>不</em>稳定</li>
<li>思路：大循环确定每次排序的第一个位置，每次确定一个数字，确定的方法是从还未确定的范围里选出一个最小的数字，将这个数字与排序的第一个位置原来的数字交换位置，然后确定该位置的数字，将排序的起始位置前移一个<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> N = arr.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> end = N - <span class="number">1</span>; end &gt;= <span class="number">0</span>; end--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> second = <span class="number">1</span>; second &lt;= end; second++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[second - <span class="number">1</span>] &gt; arr[second]) &#123;</span><br><span class="line">				swap(arr, second - <span class="number">1</span>, second);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度O(N^2)，空间复杂度O(1)，稳定</li>
<li>首先从数组的第一个到最后一个元素执行一次冒泡，冒泡的具体行为是假如数组下表前一个位置的数字比下表位置的数字大的话，交换这两个数字，然后一次冒泡结束之后将冒泡行为的后边界前移一。<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort1</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> N = arr.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> end = <span class="number">1</span>; end &lt; N; end++) &#123;</span><br><span class="line">		<span class="keyword">int</span> newNumIndex = end;</span><br><span class="line">		<span class="keyword">while</span> (newNumIndex - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; arr[newNumIndex - <span class="number">1</span>] &gt; arr[newNumIndex]) &#123;</span><br><span class="line">			swap(arr, newNumIndex - <span class="number">1</span>, newNumIndex);</span><br><span class="line">			newNumIndex--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> N = arr.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> end = <span class="number">1</span>; end &lt; N; end++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> pre = end - <span class="number">1</span>; pre &gt;= <span class="number">0</span> &amp;&amp; arr[pre] &gt; arr[pre + <span class="number">1</span>]; pre--) &#123;</span><br><span class="line">			swap(arr, pre, pre + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>思路是从第二个元素开始，假如该元素比前一个元素小的话，就将这个元素向前移动，直到前一个元素不比这个元素小为止（类似于打扑克起牌的时候将大牌插入到前面）。然后将插入元素的起始位置向后移动一个。</li>
<li>时间复杂度O(N^2)，空间复杂度O(1)，稳定<h2 id="归并排序-2023-10-30更新"><a href="#归并排序-2023-10-30更新" class="headerlink" title="归并排序 2023-10-30更新"></a>归并排序 2023-10-30更新</h2></li>
<li>leetcode<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// vector&lt;int&gt; ret = nums;</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ret = <span class="built_in">merge</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(R-L&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(vec[L]);</span><br><span class="line">            <span class="comment">// cout&lt;&lt;vec[L]&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; leftVec = <span class="built_in">merge</span>(vec, L, L+(R-L)/<span class="number">2</span>);</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; rightVec = <span class="built_in">merge</span>(vec, L+(R-L)/<span class="number">2</span>+<span class="number">1</span>, R);</span><br><span class="line">        <span class="keyword">int</span> indL=<span class="number">0</span>, indR= <span class="number">0</span>, ind = <span class="number">0</span>; </span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(leftVec.size()+rightVec.size())</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(indL&lt;leftVec.<span class="built_in">size</span>() &amp;&amp; indR&lt;rightVec.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res[ind++] = leftVec[indL]&lt;rightVec[indR]?leftVec[indL++]:rightVec[indR++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(indL&lt;leftVec.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res[ind++] = leftVec[indL++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(indR&lt;rightVec.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            res[ind++] = rightVec[indR++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度O(N*log(N))空间复杂度O(N)，稳定</li>
<li>思路就是将数组分为左右两部分，然后对左边和右边分别递归执行，执行之后回溯到这一层的时候，左右两个数组已经是<strong>各自有序</strong>的了，然后将两个数组进行合并（merge），合并操作就是将两个数组的下表设置为各自最前，然后将两个下标位置对应的数字中较小的一个放入总的数组中，该数组的下标前进一位。假如执行到最后有一个数组的下标到达了最后，就将这个数组整个衔接在总的数组末尾（需要用到额外空间）。<h2 id="链表归并排序-2023-10-30"><a href="#链表归并排序-2023-10-30" class="headerlink" title="链表归并排序 2023-10-30"></a>链表归并排序 2023-10-30</h2></li>
<li>leetcode<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">map&lt;<span class="keyword">int</span>, ListNode*&gt; m;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* tail = head;</span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">split</span>(head, tail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">split</span><span class="params">(ListNode* h, ListNode* tail)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(h-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(h-&gt;next == tail)</span><br><span class="line">        &#123;</span><br><span class="line">            h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">merge</span>(h, tail);</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* slow = h, *fast = h;</span><br><span class="line">        <span class="keyword">while</span>(fast!=tail)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(fast!=tail)</span><br><span class="line">            &#123;</span><br><span class="line">                fast = fast-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* h2 = slow-&gt;next;</span><br><span class="line">        slow-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(<span class="built_in">split</span>(h, slow), <span class="built_in">split</span>(h2, tail));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">merge</span><span class="params">(ListNode* h1, ListNode* h2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(h1 == <span class="literal">NULL</span> || h2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> h1?h1:h2;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* vHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode* ret = vHead;</span><br><span class="line">        <span class="keyword">while</span>(h1!=<span class="literal">NULL</span>&amp;&amp;h2!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(h1-&gt;val&lt;h2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                vHead -&gt; next = h1;</span><br><span class="line">                h1 = h1-&gt;next;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                vHead -&gt; next = h2;</span><br><span class="line">                h2 = h2-&gt;next;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            vHead = vHead-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(h1!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vHead-&gt;next = h1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(h2!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vHead-&gt;next = h2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="链表归并排序的内存生命周期问题"><a href="#链表归并排序的内存生命周期问题" class="headerlink" title="链表归并排序的内存生命周期问题"></a>链表归并排序的内存生命周期问题</h3></li>
<li>链表排序的时候假如不食用一个外部的头节点的话，会可能遇到报错</li>
<li><img src="/imgs/f79ad1d7fe2b573e5a41667c002d880eb9cbca026de0e5cd6b5d84235a7dee81.png" alt="picture 0">  <ul>
<li>提示一个指针指向NULL，不可被操作了</li>
<li>在整个过程中最好手动创建一个节点的next指向头节点，使得系统指向链表的指针不丢失，防止空间被回收</li>
<li>比如如下多个链表合并的问题<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> cmp = [](ListNode*&amp; a, ListNode*&amp; b)&#123;<span class="keyword">return</span> a-&gt;val&gt;b-&gt;val;&#125;;</span><br><span class="line">        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">pq</span>(cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = lists.<span class="built_in">begin</span>(); it!=lists.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* cur = *it;</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(cur);</span><br><span class="line">                <span class="comment">// cout&lt;&lt;cur-&gt;val&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* head = pq.<span class="built_in">top</span>();</span><br><span class="line">        <span class="comment">// cout&lt;&lt;head-&gt;val;</span></span><br><span class="line">        ListNode* ret = head;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span>(pq.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            head-&gt;next = pq.<span class="built_in">top</span>();</span><br><span class="line">            <span class="comment">// cout&lt;&lt;head-&gt;next-&gt;val;</span></span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;&#x27;!&#x27;&lt;&lt;endl;</span></span><br><span class="line">        ListNode* tmp = ret;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;tmp-&gt;val&lt;&lt;endl;</span><br><span class="line">            tmp = tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>但是实际上归并多个有序数组的时候只需要在一开始<strong>遍历每个数组的第一个元素</strong>，将其添加到优先级队列中，等到合并的时候从优先级队列中<strong>弹出某个元素的时候，再将其后继的数字添加到队列中即可</strong>，<strong>不需要</strong>在一开始就把所有的节点都加入优先级队列<h2 id="快速排序-2023-10-30更新"><a href="#快速排序-2023-10-30更新" class="headerlink" title="快速排序 2023-10-30更新"></a>快速排序 2023-10-30更新</h2></li>
<li>递归版本(leetcode)<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// vector&lt;int&gt; ret = nums;</span></span><br><span class="line">        <span class="built_in">sort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(R-L&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> randInd = <span class="built_in">rand</span>()%(R-L)+L;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;vec[R]&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">swap</span>(vec, R, randInd);</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans = <span class="built_in">split</span>(vec, L, R);</span><br><span class="line">        <span class="built_in">sort</span>(vec, L, ans[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">sort</span>(vec, ans[<span class="number">1</span>], R);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">split</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> less, more;</span><br><span class="line">        less = L<span class="number">-1</span>;</span><br><span class="line">        more = R;</span><br><span class="line">        <span class="comment">// int flag = R;</span></span><br><span class="line">        <span class="keyword">while</span>(L&lt;more)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[L] &lt; vec[R])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(vec, ++less, L++);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(vec[L] == vec[R])</span><br><span class="line">            &#123;</span><br><span class="line">                ++L;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(vec, --more, L);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(vec, more, R);</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ret = &#123;less, more+<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;vec[a]&lt;&lt;&#x27; &#x27;&lt;&lt;vec[b]&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> temp = vec[a];</span><br><span class="line">        vec[a] = vec[b];</span><br><span class="line">        vec[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度O(Nlog(N))，空间复杂度O(log(N))，</li>
<li>荷兰国旗问题：将整个数组分为三个部分，左边的部分比给定的flag小，中间的部分等于flag，右边的部分大于flag。（选择最右为分割标志）<ul>
<li>其中的less是小于区的右边界，more是大于区的左边界</li>
<li>假如index位置的数字和分割标志相等，直接index++</li>
<li>假如index位置的数字比标志小，那么index位置的数字与小于区的左边界右边第一个数字交换，index和小于区的右边界各自++，相当于小于区推动等于区右移</li>
<li>假如index位置的数字比标志大，那么将index位置的数字与大于区左边界的第一个数字交换，index不动，大于区的左边界左移一个位置。</li>
<li>遍历结束之后，将数组最右边位置的数字与大于区左边界位置的数字进行交换（因为开始时候取的标志是最右的数字）</li>
</ul>
</li>
<li>递归的时候，先调用一个分割函数（就是前面描述的荷兰国旗），然后将开始到小于区右边界和大于区左边界到数组结束的位置分别递归调用分割即可。<h2 id="堆排序-2023-10-30更新"><a href="#堆排序-2023-10-30更新" class="headerlink" title="堆排序 2023-10-30更新"></a>堆排序 2023-10-30更新</h2></li>
<li>leetcode<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从后向前逐个元素向下运动，建造大根堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.<span class="built_in">size</span>()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">heapDown</span>(nums, i, nums.<span class="built_in">size</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.<span class="built_in">size</span>()<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums, <span class="number">0</span>, i);</span><br><span class="line">            <span class="built_in">heapDown</span>(nums, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向下</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heapDown</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> big;</span><br><span class="line">        <span class="keyword">while</span>(index*<span class="number">2</span>+<span class="number">1</span>&lt;size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(index*<span class="number">2</span>+<span class="number">2</span>&gt;=size)</span><br><span class="line">            &#123;</span><br><span class="line">                big = index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                big = arr[index*<span class="number">2</span>+<span class="number">1</span>] &gt; arr[index*<span class="number">2</span>+<span class="number">2</span>]?index*<span class="number">2</span>+<span class="number">1</span>:index*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(arr[index]&lt;arr[big])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(arr, index, big);</span><br><span class="line">                index = big;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向上</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heapUp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((index<span class="number">-1</span>)/<span class="number">2</span>)&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[(index<span class="number">-1</span>)/<span class="number">2</span>]&gt;arr[index])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(arr, (index<span class="number">-1</span>)/<span class="number">2</span>, index);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index = (index<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>时间复杂度O(Nlog(N))，空间复杂度O(1)，不稳定</li>
<li><code>heapInsert</code>是堆插入函数，将插入的数字向上看是否在需要的位置上</li>
<li><code>heapify</code>是将数组中某个位置的数字向下移动，直到需要的位置（向下交换的时候与两个孩子中较大的那个交换）</li>
<li>建堆的操作是从倒数第二个元素开始直到数组的第一个元素，执行向下调整函数，然后将整个数组的最后一个元素与第一个元素交换，执行向下调整函数，然后将数组的倒数第二个元素与第一个交换，执行向下调整，如此循环到数组的第二个元素与第一个元素交换并且调整结束。</li>
</ul>
<h2 id="建立堆"><a href="#建立堆" class="headerlink" title="建立堆"></a>建立堆</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMaxHeap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] heap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> limit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> heapSize;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyMaxHeap</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        heap = <span class="keyword">new</span> <span class="keyword">int</span>[limit];</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">        heapSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heapSize == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heapSize == limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heapSize == limit) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;heap is full&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        heap[heapSize] = value;</span><br><span class="line">        <span class="comment">// value heapSize</span></span><br><span class="line">        heapInsert(heap, heapSize++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户此时，让你返回最大值，并且在大根堆中，把最大值删掉</span></span><br><span class="line">    <span class="comment">// 剩下的数，依然保持大根堆组织</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = heap[<span class="number">0</span>];</span><br><span class="line">        swap(heap, <span class="number">0</span>, --heapSize);</span><br><span class="line">        heapify(heap, <span class="number">0</span>, heapSize);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新加进来的数，现在停在了index位置，请依次往上移动，</span></span><br><span class="line">    <span class="comment">// 移动到0位置，或者干不掉自己的父亲了，停！</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapInsert</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// [index] [index-1]/2</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="keyword">while</span> (arr[index] &gt; arr[(index - <span class="number">1</span>) / <span class="number">2</span>]) &#123;</span><br><span class="line">            swap(arr, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从index位置，往下看，不断的下沉</span></span><br><span class="line">    <span class="comment">// 停：较大的孩子都不再比index位置的数大；已经没孩子了</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> heapSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; heapSize) &#123; <span class="comment">// 如果有左孩子，有没有右孩子，可能有可能没有！</span></span><br><span class="line">            <span class="comment">// 把较大孩子的下标，给largest</span></span><br><span class="line">            <span class="keyword">int</span> largest = left + <span class="number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="number">1</span>] &gt; arr[left] ? left + <span class="number">1</span> : left;</span><br><span class="line">            largest = arr[largest] &gt; arr[index] ? largest : index;</span><br><span class="line">            <span class="keyword">if</span> (largest == index) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// index和较大孩子，要互换</span></span><br><span class="line">            swap(arr, largest, index);</span><br><span class="line">            index = largest;</span><br><span class="line">            left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>向堆插入数字的方法就是将堆的尺寸+1，然后从被插入数字开始上溯直到不比父亲大</li>
<li>用户从堆顶弹出的方法是弹出之后将堆尺寸-1，然后将堆最后一个元素复制到以前堆顶的位置，然后执行heapify，也就是将该元素下沉直到不比儿子小为止</li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C和Cpp语言语法注意事项小结</title>
    <url>/2023/12/04/C%E5%92%8CCpp%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="STL相关"><a href="#STL相关" class="headerlink" title="STL相关"></a>STL相关</h2><ul>
<li>注意<code>vector&lt;&gt;.size()</code>返回的是无符号整数，<code>unsigned</code>与<strong>同样大小类型的有符号整数相加的时候会将这个有符号整数类型转换为无符号的，导致表示的意思出现区别</strong></li>
</ul>
<h3 id="initializer-list-lt-gt"><a href="#initializer-list-lt-gt" class="headerlink" title="initializer_list&lt;&gt;"></a>initializer_list&lt;&gt;</h3><ul>
<li><p>用于不定参数个数的函数的传参</p>
</li>
<li><p>只能传递同一个类型的参数</p>
</li>
<li><p>复制的时候是浅拷贝</p>
<h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h3><p>函数|功能<br>|—|—|<br>find(begin, end, val)|在begin和end（不包括）之间找val，找不到返回end，找到返回位置迭代器，是<strong>线性查找</strong><br>stable_sort(begin, end, compare)|是稳定排序算法，会保证相等元素的顺序</p>
</li>
<li><p>其他</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>算法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>std::sort</code></td>
<td>对给定范围的元素进行排序。</td>
</tr>
<tr>
<td><code>std::reverse</code></td>
<td>反转给定范围的元素。</td>
</tr>
<tr>
<td><code>std::rotate</code></td>
<td>将给定范围的元素循环右移指定位置。</td>
</tr>
<tr>
<td><code>std::find</code></td>
<td>在给定范围内查找指定值，返回第一个匹配元素的迭代器。</td>
</tr>
<tr>
<td><code>std::binary_search</code></td>
<td>在有序范围内执行二分查找，返回是否找到指定值的布尔值。</td>
</tr>
<tr>
<td><code>std::count</code></td>
<td>计算给定范围内等于指定值的元素个数。</td>
</tr>
<tr>
<td><code>std::accumulate</code></td>
<td>对给定范围内的元素进行累积（求和）操作。</td>
</tr>
<tr>
<td><code>std::max_element</code></td>
<td>返回给定范围内的最大元素的迭代器。</td>
</tr>
<tr>
<td><code>std::min_element</code></td>
<td>返回给定范围内的最小元素的迭代器。</td>
</tr>
<tr>
<td><code>std::copy</code></td>
<td>将一个范围的元素复制到另一个范围。</td>
</tr>
<tr>
<td><code>std::fill</code></td>
<td>将给定范围的元素都设置为指定的值。</td>
</tr>
<tr>
<td><code>std::unique</code></td>
<td>移除给定范围内的重复元素，返回指向新范围结尾的迭代器。</td>
</tr>
<tr>
<td><code>std::next_permutation</code></td>
<td>将给定范围的元素重新排列为下一个字典序排列。</td>
</tr>
<tr>
<td><code>std::prev_permutation</code></td>
<td>将给定范围的元素重新排列为前一个字典序排列。</td>
</tr>
<tr>
<td><code>std::shuffle</code></td>
<td>将给定范围内的元素随机重排。</td>
</tr>
<tr>
<td><code>std::transform</code></td>
<td>对给定范围内的元素执行指定操作，结果存储在另一个范围。</td>
</tr>
<tr>
<td><code>std::merge</code></td>
<td>将两个有序范围合并成一个有序范围。</td>
</tr>
<tr>
<td><code>std::partition</code></td>
<td>根据指定条件对给定范围进行分区，将满足条件的元素放在前面。</td>
</tr>
<tr>
<td><code>std::nth_element</code></td>
<td>对给定范围的元素进行局部排序，使得第n个元素是排好序的。</td>
</tr>
</tbody></table>
<h3 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h3><ul>
<li>用于包装函数改变其参数列表<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> newCallable = <span class="built_in">bind</span> (callable, arg_list);</span><br></pre></td></tr></table></figure></li>
<li>将可调用对象和参数绑定成一个新的可调用对象，可以延迟调用或者传递给其他函数使用。</li>
<li>将多元（参数个数大于1）的可调用对象转换成一元或者少元的可调用对象，即只绑定部分参数，剩下的参数在调用时传入。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将print函数和一个参数绑定成一个新的可调用对象，另一个参数用占位符表示</span></span><br><span class="line"><span class="keyword">auto</span> f2 = <span class="built_in">bind</span>(print, placeholders::_1, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">f2</span>(<span class="number">1</span>); <span class="comment">// 输出 1 2</span></span><br><span class="line"><span class="built_in">f2</span>(<span class="number">3</span>); <span class="comment">// 输出 3 2</span></span><br></pre></td></tr></table></figure></li>
<li>注意bind后的函数传参是按照placeholder<strong>从小到大</strong>传参的，<strong>可以人为颠倒顺序</strong></li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>将拷贝的参数转换为引用</li>
<li><code>ref(val)</code><h3 id="hash哈希函数"><a href="#hash哈希函数" class="headerlink" title="hash哈希函数"></a>hash哈希函数</h3></li>
<li><code>hash&lt;key_type&gt;()</code>函数为内置类型，指针，string和智能指针提供了哈希函数</li>
</ul>
<h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><ul>
<li><code>shared_ptr</code>允许多个指针指向同一个对象</li>
<li><code>unique_ptr</code>独占所指向的对象<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4></li>
<li>对指针可以直接做条件判断，<code>true</code>就是非空，否则是空</li>
<li>最好<strong>不要</strong>用将<u>自己申请的动态内存转化为智能指针</u>的方式创建智能指针，可能会泄露</li>
<li><code>p.get()</code>返回指针指向的对象<ul>
<li>注意，如果智能指针被释放，那么使用get返回的指针指向的对象也会被释放</li>
</ul>
</li>
<li><code>shared_ptr</code>基本用法<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 shared_ptr，并分配一个整数</span></span><br><span class="line">    std::shared_ptr&lt;<span class="keyword">int</span>&gt; sharedInt = std::make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 shared_ptr</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; *sharedInt &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取引用计数</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Reference count: &quot;</span> &lt;&lt; sharedInt.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建另一个 shared_ptr，共享相同的整数</span></span><br><span class="line">    std::shared_ptr&lt;<span class="keyword">int</span>&gt; anotherSharedInt = sharedInt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用计数增加</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Reference count: &quot;</span> &lt;&lt; sharedInt.<span class="built_in">use_count</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>另一种初始化</li>
<li><code>shared_ptr&lt;int&gt; p(new int(1024));</code>可以用动态对象初始化指针</li>
<li>但是必须显式的调用，不能隐式类型转换</li>
<li>不要使用<code>shared_ptr</code>的<code>get</code>方法为另一个智能指针赋值，会导致内存管理混乱</li>
<li><code>unique_ptr</code>基本用法<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 unique_ptr，并分配一个整数</span></span><br><span class="line">    std::unique_ptr&lt;<span class="keyword">int</span>&gt; uniqueInt = std::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 unique_ptr</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; *uniqueInt &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unique_ptr 不能被拷贝，这会导致编译错误</span></span><br><span class="line">    <span class="comment">// std::unique_ptr&lt;int&gt; anotherUniqueInt = uniqueInt; // 错误！</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可以用<code>release</code>或者<code>reset</code>转移指针的所有权<ul>
<li>reset会<strong>释放本身指向的内存</strong>，将目标转移到函数传入的新地址上</li>
<li>release会返回自己指向的内存地址，同时放弃对这个位置的控制权（不会释放内存）</li>
</ul>
</li>
<li><code>unique_ptr</code>只有在即将被销毁（比如函数返回）或者是临时对象的时候可以被拷贝，接手自己的内存区域<h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3></li>
<li>可以绑定到<code>shared_ptr</code>但是不影响引用计数</li>
<li><code>lock</code>方法用于获取对应的shared_ptr，<strong>不存在则是空的指针对象</strong></li>
<li><code>expired</code>可以看当前是不是还有shared_ptr在指向空间<h3 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h3></li>
<li>与vector类似，但是其中数据在拷贝的时候是公用的，不是像vector是复制的</li>
<li>管理机制与共享指针类似，最后一个被释放之后存储的数据才会删除</li>
</ul>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><ul>
<li>多种不同类型的组合<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="function">std::tuple&lt;<span class="keyword">int</span>, <span class="keyword">float</span>, std::string&gt; <span class="title">myTuple</span><span class="params">(<span class="number">42</span>, <span class="number">3.14</span>, <span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">auto</span> myTuple = std::<span class="built_in">make_tuple</span>(<span class="number">42</span>, <span class="number">3.14</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;First element: &quot;</span> &lt;&lt; std::get&lt;<span class="number">0</span>&gt;(myTuple) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Second element: &quot;</span> &lt;&lt; std::get&lt;<span class="number">1</span>&gt;(myTuple) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Third element: &quot;</span> &lt;&lt; std::get&lt;<span class="number">2</span>&gt;(myTuple) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 解包为多个变量</span></span><br><span class="line"><span class="keyword">int</span> intValue;</span><br><span class="line"><span class="keyword">double</span> doubleValue;</span><br><span class="line">std::string stringValue;</span><br><span class="line">std::<span class="built_in">tie</span>(intValue, doubleValue, stringValue) = myTuple;</span><br><span class="line"><span class="comment">// 使用 std::tuple_size 获取 tuple 大小</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Tuple size: &quot;</span> &lt;&lt; std::tuple_size&lt;<span class="keyword">decltype</span>(myTuple)&gt;::value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><ul>
<li>用于位运算的类<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="comment">// 创建一个有 8 位的 bitset，初始值为 0</span></span><br><span class="line">std::bitset&lt;8&gt; myBitset1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用整数值初始化 bitset</span></span><br><span class="line"><span class="function">std::bitset&lt;8&gt; <span class="title">myBitset2</span><span class="params">(<span class="number">42</span>)</span></span>;  <span class="comment">// 使用二进制表示为 00101010</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用字符串初始化 bitset</span></span><br><span class="line"><span class="function">std::bitset&lt;8&gt; <span class="title">myBitset3</span><span class="params">(<span class="string">&quot;10101010&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 访问位</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Bit at position 3: &quot;</span> &lt;&lt; myBitset[<span class="number">3</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改位</span></span><br><span class="line">myBitset.<span class="built_in">set</span>(<span class="number">1</span>, <span class="literal">true</span>);  <span class="comment">// 将第 1 位设置为 1</span></span><br><span class="line"><span class="comment">// set不给参数的话会默认为1</span></span><br><span class="line"><span class="comment">// reset会把指定的位设置为0</span></span><br><span class="line">myBitset.<span class="built_in">flip</span>(<span class="number">4</span>);       <span class="comment">// 反转第 4 位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位与</span></span><br><span class="line">std::bitset&lt;8&gt; resultAnd = bitset1 &amp; bitset2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位或</span></span><br><span class="line">std::bitset&lt;8&gt; resultOr = bitset1 | bitset2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位异或</span></span><br><span class="line">std::bitset&lt;8&gt; resultXor = bitset1 ^ bitset2;</span><br><span class="line"><span class="comment">// 获取 bitset 的大小</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Size of myBitset: &quot;</span> &lt;&lt; myBitset.<span class="built_in">size</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否所有位都是 0</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;All zeros? &quot;</span> &lt;&lt; myBitset.<span class="built_in">none</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否有任意位是 1</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Any ones? &quot;</span> &lt;&lt; myBitset.<span class="built_in">any</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否所有位都是 1</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;All ones? &quot;</span> &lt;&lt; myBitset.<span class="built_in">all</span>() &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture list] (parameters) -&gt; &lt;<span class="keyword">return</span> type&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回类型可以省略</li>
<li>捕获的作用是比如函数作为谓词的时候，<strong>只能</strong>传递两个互相比较的参数，此时<strong>需要外部的参数</strong>就只能用捕获传入。<ul>
<li>全局变量不需要捕获也能使用</li>
<li>可以捕获引用<code>[&amp;var]</code>即可</li>
<li>支持隐式捕获，也就是编译器自己推断捕获什么不捕获什么</li>
<li><code>[=, other vals]</code>等号表示值捕获方式，可以与显式捕获混合使用</li>
<li><code>[&amp;, other vals]</code>引用符号表示引用捕获方式</li>
<li>不同种类的捕获可以互相混用</li>
<li>通过值捕获的变量一般不允许修改，除非在函数体之前加一个<code>mutable</code>关键字</li>
</ul>
</li>
<li>lambda是函数类型，不是函数指针</li>
</ul>
<h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><ul>
<li>包装器</li>
<li>可以将任何可以调用的对象存入，能使用<code>()</code>的就可以，包装为一个函数<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个函数对象</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Multiply</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 std::function 包装普通函数</span></span><br><span class="line">    std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; addFunction = Add;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Add Function Result: &quot;</span> &lt;&lt; <span class="built_in">addFunction</span>(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 std::function 包装函数对象</span></span><br><span class="line">    std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; multiplyFunction = <span class="built_in">Multiply</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Multiply Function Result: &quot;</span> &lt;&lt; <span class="built_in">multiplyFunction</span>(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">    std::function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; lambdaFunction = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Lambda Function Result: &quot;</span> &lt;&lt; <span class="built_in">lambdaFunction</span>(<span class="number">8</span>, <span class="number">2</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h3><ul>
<li>倒序排序<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">rbegin</span>(), vec.<span class="built_in">rend</span>()); <span class="comment">// 倒序</span></span><br></pre></td></tr></table></figure>
<h3 id="iostream迭代器"><a href="#iostream迭代器" class="headerlink" title="iostream迭代器"></a>iostream迭代器</h3></li>
<li>连续输入使用</li>
<li>不初始化的话就是尾后迭代器<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">istream_iterator&lt;<span class="keyword">int</span>&gt; <span class="title">in_iter</span><span class="params">(cin)</span></span>;</span><br><span class="line"><span class="comment">// 创建一个表示istream尾后位置的istream_iterator</span></span><br><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; eof; </span><br><span class="line"><span class="comment">// 创建一个int类型的vector，并用in_iter和eof初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(in_iter, eof)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读入一个元素并且赋值</span></span><br><span class="line">in_iter++;</span><br><span class="line"><span class="keyword">int</span> y = *in_iter;</span><br></pre></td></tr></table></figure></li>
<li>输出流迭代器<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个输出流迭代器，绑定到cout，数据类型为int，分隔符为&quot;,&quot;</span></span><br><span class="line"><span class="function">ostream_iterator&lt;<span class="keyword">int</span>&gt; <span class="title">out_it</span><span class="params">(cout, <span class="string">&quot;,&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 向输出流迭代器写入一个数据</span></span><br><span class="line">*out_it = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个vector容器，存储一些int数据</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用copy算法，将vector中的数据复制到输出流迭代器中</span></span><br><span class="line"><span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), out_it);</span><br></pre></td></tr></table></figure></li>
<li>向输出流迭代器<strong>写入数据</strong>就是输出</li>
<li>初始化的时候加的是每个数据之后的分隔符</li>
<li><code>*</code>, <code>++</code>等运算符对他没什么意义<h2 id="语法相关"><a href="#语法相关" class="headerlink" title="语法相关"></a>语法相关</h2></li>
<li>使用三目运算符<code>?:</code>的时候最好外加括号，否则会因为计算顺序的原因报错<h3 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h3></li>
<li><code>new</code>和<code>delete</code>是运算符一个分配动态对象一个删除动态对象</li>
</ul>
<h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><ul>
<li>作用是对一个区间内的变量每个都执行指定的操作（函数）<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个函数，用于在 for_each 中作为操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSquare</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; x * x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个向量</span></span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 for_each 遍历向量并应用操作</span></span><br><span class="line">    std::for_each(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), PrintSquare);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果：1 4 9 16 25</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul>
<li>不要返回局部对象的引用类型，否则会因为局部对象生命周期结束而失效</li>
<li>返回指向某个数组的指针的函数<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*<span class="built_in">func</span>(<span class="keyword">int</span> i))[<span class="number">10</span>];<span class="comment">// 看的时候从里往外看，先返回的是指针，指针指向的是int[10]</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="function">arr* <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span> -&gt; <span class="title">int</span><span class="params">(*)</span>[10]</span></span><br></pre></td></tr></table></figure></li>
<li>也可以直接在返回值的位置使用decltype标出类型</li>
</ul>
<h3 id="Cpp函数重载"><a href="#Cpp函数重载" class="headerlink" title="Cpp函数重载"></a>Cpp函数重载</h3><ul>
<li>函数重载只有在同一个级别的作用域才行<ul>
<li>假如在某个函数内部声明了一个与外部函数同名的函数，会导致外部同名函数被屏蔽</li>
</ul>
</li>
<li>假如有一组参数传入导致系统无法区分具体调用哪个的话会导致编译出错</li>
<li>类型转换的分类</li>
</ul>
<table>
<thead>
<tr>
<th>等级</th>
<th>转换</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>精确匹配</td>
</tr>
<tr>
<td>2</td>
<td>const转换实现匹配</td>
</tr>
<tr>
<td>3</td>
<td>类型提升实现匹配</td>
</tr>
<tr>
<td>4</td>
<td>算数类型转换实现匹配</td>
</tr>
<tr>
<td>5</td>
<td>类类型转换实现匹配</td>
</tr>
</tbody></table>
<h3 id="Cpp函数内联"><a href="#Cpp函数内联" class="headerlink" title="Cpp函数内联"></a>Cpp函数内联</h3><ul>
<li>编译器可以选择忽略内联函数请求，也可以自动优化内联函数</li>
</ul>
<h3 id="是否是开发状态"><a href="#是否是开发状态" class="headerlink" title="是否是开发状态"></a>是否是开发状态</h3><ul>
<li>定义<code>NDEBUG</code></li>
<li>如果定义了就不能使用assert等debug用的工具</li>
<li>也可以自己用<code>#ifndef NDEBUG</code>来控制自己写的代码哪些用在调试阶段<h3 id="调试输出"><a href="#调试输出" class="headerlink" title="调试输出"></a>调试输出</h3></li>
<li>可以用<code>__func__</code>打印<strong>当前函数的名字</strong></li>
<li><code>__FILE__</code>文件名</li>
<li><code>__LINE__</code>行号</li>
<li><code>__TIME__</code>编译时间</li>
<li><code>__DATE__</code>编译日期<h4 id="backtrace和backtrace-symbols函数"><a href="#backtrace和backtrace-symbols函数" class="headerlink" title="backtrace和backtrace_symbols函数"></a><code>backtrace</code>和<code>backtrace_symbols</code>函数</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;execinfo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backtrace</span><span class="params">(<span class="keyword">void</span> **buffer, <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><code>backtrace</code>函数是一个用于获取调用栈信息的函数，通常在调试或错误处理中使用。它在标准的C库中，头文件是<code>#include &lt;execinfo.h&gt;</code></li>
<li>使用<code>backtrace_symbols</code>函数将<code>backtrace</code>信息转换成字符串</li>
<li><code>char **bt_strings = backtrace_symbols(bt_buffer, bt_size);</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;execinfo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> max_frames = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">void</span> *addrlist[max_frames + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> addrlen = <span class="built_in">backtrace</span>(addrlist, <span class="built_in"><span class="keyword">sizeof</span></span>(addrlist) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">void</span> *));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addrlen == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;No stack trace available.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> **symbolList = <span class="built_in">backtrace_symbols</span>(addrlist, addrlen);</span><br><span class="line">    <span class="keyword">if</span> (symbolList == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;backtrace_symbols&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack trace:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; addrlen; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, symbolList[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(symbolList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printStackTrace</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>backtrace函数在编译时需要开启调试信息。如果使用gcc编译，可以添加<code>-g</code></li>
<li>传入的需要是一个<strong>指针数组</strong>或者是使用<code>addrlist = (void **)malloc((sizeof(void *) * addrlen));</code>分配好内存的空间<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3></li>
<li>给函数指针赋值的时候加不加取地址符号都一样<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">return</span> type&gt; (*func name)(&lt;para&gt; parameters);</span><br></pre></td></tr></table></figure></li>
<li><strong>不同种类的函数指针之间无法转换，即使形参列表能转换</strong>，也就是说必须是<em>返回类型</em>和<em>形参列表</em>与自身完全一样的函数才可以赋值给函数指针</li>
<li>但是<strong>调用</strong>的时候可以发生类型转换</li>
<li>返回的时候不能返回函数，因为函数不能拷贝，只能返回函数指针<h4 id="如何返回函数指针"><a href="#如何返回函数指针" class="headerlink" title="如何返回函数指针"></a>如何返回函数指针</h4></li>
<li><code>int (*f1(int))(int, int);</code>返回的是一个<code>int(*)(int, int)</code>类型的函数指针</li>
<li>或者写<code>auto f(int) -&gt; int(*)(int, int)</code></li>
</ul>
<h2 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h2><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><ul>
<li><code>int*a = new int[10];</code>是未初始化的</li>
<li><code>int*a = new int[10]();</code>是已经值初始化为0的</li>
<li><code>int* a = new int[3]&#123;0, 1, 2&#125;;</code>是显式初始化列表的</li>
<li>创建长度为0的动态数组可以，但<strong>不能解引用</strong></li>
<li>释放的时候必须用<code>delete [] ptr</code></li>
</ul>
<h3 id="allocator类申请内存"><a href="#allocator类申请内存" class="headerlink" title="allocator类申请内存"></a>allocator类申请内存</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 std::allocator 分配一块内存来存储 int 类型的元素</span></span><br><span class="line">    std::allocator&lt;<span class="keyword">int</span>&gt; allocator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存以存储一个 int</span></span><br><span class="line">    <span class="keyword">int</span>* ptr = allocator.<span class="built_in">allocate</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在分配的内存上构造 int 对象</span></span><br><span class="line">    allocator.<span class="built_in">construct</span>(ptr, <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用构造的对象</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁对象并释放内存</span></span><br><span class="line">    allocator.<span class="built_in">destroy</span>(ptr);</span><br><span class="line">    allocator.<span class="built_in">deallocate</span>(ptr, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>alloccate</code>仅仅是分配内存</li>
<li><code>construct</code>才构造对象</li>
<li>删除的时候先<code>destroy</code></li>
<li>然后再解除内存占用<code>deallocate</code></li>
<li>使用<code>allocator</code>构造内存的时候可以像使用指针一样对指针做加减，只要不超出构造的范围即可<h4 id="一次初始化多个元素"><a href="#一次初始化多个元素" class="headerlink" title="一次初始化多个元素"></a>一次初始化多个元素</h4></li>
<li>`std::uninitialized_fill(intPtr, intPtr + 3, 1);<ul>
<li>注意，<code>uninitialized_fill</code>的第二个参数类似于尾后迭代器，不会真的被赋值</li>
</ul>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><ul>
<li><p>常量成员函数<code>&lt;return type&gt; func() const &#123;&#125;</code></p>
<ul>
<li>不修改类对象的函数</li>
<li>对这个类的const实例的时候会调用const的成员函数</li>
<li>但是假如某个成员有<code>mutable</code>关键字，那么也可以修改<h3 id="访问说明符"><a href="#访问说明符" class="headerlink" title="访问说明符"></a>访问说明符</h3></li>
</ul>
</li>
<li><p><code>public</code>和<code>private</code>可以反复出现多次</p>
<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3></li>
<li><p>类内声明</p>
</li>
<li><p><code>friend &lt;return type&gt; func();</code></p>
</li>
<li><p>即使这个类被内嵌在一个子类中，也可以访问相应部分的成员</p>
<h3 id="不同类别的继承"><a href="#不同类别的继承" class="headerlink" title="不同类别的继承"></a>不同类别的继承</h3></li>
<li><p>private继承会把所有从基类继承的成员都作为private对象</p>
</li>
<li><p>protected会把所有的作为protected</p>
</li>
<li><p>public则不改变权限</p>
</li>
<li><p>可以手动在public、protected或者private后面使用<code>using 基类名:: 基类成员</code>手动变更访问权限</p>
</li>
<li><p>继承的时候子类的同名成员会覆盖基类的，无论是变量还是成员函数</p>
<h3 id="作用域运算符"><a href="#作用域运算符" class="headerlink" title="作用域运算符::"></a>作用域运算符<code>::</code></h3></li>
<li><p>访问全局作用域中的变量直接用<code>::&lt;variable&gt;</code>即可</p>
</li>
<li><p>访问类的就用<code>&lt;class name&gt;::&lt;var&gt;</code></p>
<h3 id="类成员初始化"><a href="#类成员初始化" class="headerlink" title="类成员初始化"></a>类成员初始化</h3></li>
<li><p>无论初始化列表里怎么写，类成员的初始化顺序是<strong>按照他们在类中定义的顺序的</strong></p>
<h3 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h3></li>
<li><p>类的多个构造函数中一个构造函数借用类的其他功能强大的构造函数构造对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string data;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">test</span>(string s):<span class="built_in">data</span>(s)&#123;&#125;</span><br><span class="line">    <span class="built_in">test</span>():<span class="built_in">test</span>(<span class="string">&quot;Hello World&quot;</span>)&#123;&#125; <span class="comment">// 这里是委托带参数的构造函数test(string s)构造对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用默认构造函数（无参数）的时候不能加括号，否则编译器会认为你想声明一个函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">className <span class="title">obj</span><span class="params">()</span></span>;<span class="comment">// 看起来就是声明一个叫obj的函数</span></span><br></pre></td></tr></table></figure>
<h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3></li>
<li><p><code>className(const className&amp; cName)&#123;&#125;;</code></p>
</li>
<li><p>第一个参数必须是自身的引用</p>
</li>
<li><p>其他参数必须有默认值</p>
</li>
<li><p>注意形如<code>&lt;className&gt; val = valOld;</code>的是拷贝初始化</p>
<h3 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h3></li>
<li><p>移动语义的目的是在<strong>避免不必要的数据复制</strong>的同时，更高效地管理资源。</p>
</li>
<li><p>在 C++11 引入右值引用之前，对象的拷贝构造函数是唯一的构造函数，用于复制对象。然而，对于临时对象或即将销毁的对象，进行深拷贝可能是不必要的开销。移动构造函数通过使用右值引用，允许在不复制底层资源的情况下将资源从一个对象“移动”到另一个对象。</p>
</li>
<li><p>必须是<code>noexcept</code>标明的</p>
</li>
<li><p>传入的参数是一个右值引用</p>
</li>
<li><p>有不具备移动构造功能的成员，自身也不能移动构造</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 移动构造函数</span></span><br><span class="line">    <span class="built_in">MyString</span>(MyString&amp;&amp; other) <span class="keyword">noexcept</span></span><br><span class="line">        : <span class="built_in">data</span>(other.data), <span class="built_in">length</span>(other.length) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Move Constructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 移动构造函数中，将原对象的资源指针置为空，避免资源被析构</span></span><br><span class="line">        other.data = <span class="literal">nullptr</span>;</span><br><span class="line">        other.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span><br><span class="line">        : <span class="built_in">data</span>(<span class="built_in">strdup</span>(str)), <span class="built_in">length</span>(<span class="built_in">strlen</span>(str)) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Constructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">MyString</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Destructor&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        <span class="built_in">free</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* data;</span><br><span class="line">    std::<span class="keyword">size_t</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象</span></span><br><span class="line">    <span class="function">MyString <span class="title">source</span><span class="params">(<span class="string">&quot;Hello, World!&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用移动构造函数，将资源从 source 移动到 target</span></span><br><span class="line">    MyString target = std::<span class="built_in">move</span>(source);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Source String: &quot;</span> &lt;&lt; (source.<span class="built_in">GetData</span>() ? source.<span class="built_in">GetData</span>() : <span class="string">&quot;nullptr&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Target String: &quot;</span> &lt;&lt; (target.<span class="built_in">GetData</span>() ? target.<span class="built_in">GetData</span>() : <span class="string">&quot;nullptr&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3></li>
<li><p>可以是成员函数也可以直接是函数</p>
</li>
<li><p>如果运算符是某个类的成员函数那么左侧的操作数<strong>必须是这个类的对象</strong></p>
</li>
<li><p>重载输入输出运算符的时候必须不是成员函数</p>
</li>
<li><p>下标运算符必须是成员函数</p>
</li>
<li><p>赋值运算符必须是成员函数</p>
<h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4></li>
<li><p><code>className&amp; operator++();</code>前置</p>
</li>
<li><p><code>className&amp; operator(int); </code>后置，参数无用，用于与前置区分</p>
</li>
<li><p>一般是成员函数</p>
</li>
</ul>
<h4 id="重载-gt-运算符"><a href="#重载-gt-运算符" class="headerlink" title="重载-&gt;运算符"></a>重载<code>-&gt;</code>运算符</h4><ul>
<li>返回值必须是指针（<strong>可以是某个成员函数类型的指针</strong>）<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Displaying MyClass&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载 -&gt; 运算符</span></span><br><span class="line">    MyClass* <span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass myObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用重载的 -&gt; 运算符</span></span><br><span class="line">    myObject-&gt;<span class="built_in">Display</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="等号运算符"><a href="#等号运算符" class="headerlink" title="等号运算符"></a>等号运算符</h3><ul>
<li><code>className&amp; operator=(const className&amp;);</code></li>
<li>控制等号的行为</li>
<li><code>return *this;</code>即可</li>
<li>注意处理等号左右是同一个变量的情况</li>
</ul>
<h3 id="要求系统合成一个默认的构造-析构函数"><a href="#要求系统合成一个默认的构造-析构函数" class="headerlink" title="要求系统合成一个默认的构造/析构函数"></a>要求系统合成一个默认的构造/析构函数</h3><ul>
<li><code>ClassName() = default;</code></li>
<li><code>=default;</code><h3 id="禁止一个构造-复制函数被调用"><a href="#禁止一个构造-复制函数被调用" class="headerlink" title="禁止一个构造/复制函数被调用"></a>禁止一个构造/复制函数被调用</h3></li>
<li><code>ClassName &amp;operator=(const ClassName&amp;) = delete;</code></li>
<li><code>=delete;</code></li>
<li>可以对于任何函数使用</li>
<li>删除析构函数的类型，不能定义该类型的变量或者释放该类型动态对象的指针</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li>如果类具有只接受一个参数的构造函数，那么编译器可以将<strong>这个参数类型的对象</strong>自动转换为这个类的对象<ul>
<li>给构造函数增加一个<code>explicit</code>参数可以禁止这种转换</li>
<li>但是static_cast可以调用<code>explicit</code>的构造函数</li>
</ul>
</li>
</ul>
<h3 id="重载类型转换运算符"><a href="#重载类型转换运算符" class="headerlink" title="重载类型转换运算符"></a>重载类型转换运算符</h3><ul>
<li>类型转换运算符通常不显式声明返回类型，因为它们没有返回类型<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Distance</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> feet;</span><br><span class="line">    <span class="keyword">float</span> inches;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Distance</span>(<span class="keyword">int</span> ft, <span class="keyword">float</span> in) : <span class="built_in">feet</span>(ft), <span class="built_in">inches</span>(in) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型转换运算符，将 Distance 转换为 float</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">float</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(feet) + inches / <span class="number">12.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Distance <span class="title">d</span><span class="params">(<span class="number">5</span>, <span class="number">9.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用类型转换运算符将 Distance 转换为 float</span></span><br><span class="line">    <span class="keyword">float</span> totalInches = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(d);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Total Inches: &quot;</span> &lt;&lt; totalInches &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>注意防止类型转换运算符与某些具有隐式类型转换功能的构造函数出现二义性</li>
<li>只要有多个用户自定义的类型转换都能达到目的，编译器就认为出线了二义性</li>
</ul>
<h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><ul>
<li><code>override</code>的主要作用是在子类中表明某个<strong>函数是覆盖基类的虚函数的</strong>，方便检查是否真的覆盖了</li>
</ul>
<h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><ul>
<li>使用一个基类的指针调用一个虚函数</li>
<li>根据不同的子类对虚函数的继承，产生不同的结果  </li>
</ul>
<h3 id="多态和虚函数"><a href="#多态和虚函数" class="headerlink" title="多态和虚函数"></a>多态和虚函数</h3><ul>
<li>使用基类的指针（或引用）<strong>不能</strong>直接访问子类中定义了但是基类中没定义的成员函数和变量<ul>
<li>需要使用类型转换才能访问</li>
</ul>
</li>
<li>但是可以访问子类中重载了的基类的虚函数</li>
<li>虚函数继承的时候<u><strong>必须函数头完全一致才行，这样才能实现多态</strong></u><ul>
<li>不一样的话会直接覆盖基类的虚函数，不会产生多态，用基类的指针的时候还是会调用基类的函数</li>
</ul>
</li>
<li>可以使用类名和<strong>作用域运算符</strong>手动指定通过指针调用的是哪个函数，从而防止运行时才知道是哪个<h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4></li>
<li>基类的析构函数最好写成虚函数，方便多态调用的时候析构掉整个的，否则析构基类的动态对象的时候会只析构基类的部分导致内存泄漏</li>
<li>具有手动析构函数的类，编译器一般<strong>不会</strong>自动合成移动构造函数、拷贝构造函数、等号运算符重载等，需要的话最好手动指出<ul>
<li><u>否则会因此导致继承他的子类因为父类没有这些函数而无法复制构造</u><h4 id="基类的拷贝构造函数和移动构造函数"><a href="#基类的拷贝构造函数和移动构造函数" class="headerlink" title="基类的拷贝构造函数和移动构造函数"></a>基类的拷贝构造函数和移动构造函数</h4></li>
</ul>
</li>
<li>必须显式的子类的相应函数中的初始化列表中调用基类的拷贝构造函数或者移动构造函数<ul>
<li><img src="/imgs/44be057dc9bca19ac215614aa2ab6479eb8204fa537f43cb20a96756074c76f2.png" alt="picture 0">  </li>
</ul>
</li>
</ul>
<h4 id="基类和派生类的-赋值运算符"><a href="#基类和派生类的-赋值运算符" class="headerlink" title="基类和派生类的=赋值运算符"></a>基类和派生类的<code>=</code>赋值运算符</h4><ul>
<li>需要在派生类的<code>=</code>赋值运算符函数体中手动调用基类的赋值运算符</li>
</ul>
<h4 id="构造函数虚函数的情况"><a href="#构造函数虚函数的情况" class="headerlink" title="构造函数虚函数的情况"></a>构造函数虚函数的情况</h4><ul>
<li>在派生类的构造函数初始化列表中调用基类的构造函数的时候最好手动通过<code>类名::</code>的形式指定需要调用的函数，防止因为多态导致调用了继承的构造函数</li>
</ul>
<h4 id="智能指针的情况"><a href="#智能指针的情况" class="headerlink" title="智能指针的情况"></a>智能指针的情况</h4><ul>
<li>涉及智能指针的情况也可以实现多态</li>
<li><code>make_shared</code>或者其他构造一个子类对象即可</li>
</ul>
<h3 id="抽象类和纯虚函数"><a href="#抽象类和纯虚函数" class="headerlink" title="抽象类和纯虚函数"></a>抽象类和纯虚函数</h3><ul>
<li>在一个成员函数后面加上<code>=0;</code>即可实现</li>
<li>类不能被实例化</li>
<li>纯虚函数的定义必须在外部</li>
</ul>
<h3 id="集成的时候的构造函数"><a href="#集成的时候的构造函数" class="headerlink" title="集成的时候的构造函数"></a>集成的时候的构造函数</h3><ul>
<li>基类的数据成员必须调用基类的构造函数构造（在初始化列表直接调用）</li>
<li>然后再按声明的顺序构造自身的对象</li>
</ul>
<h3 id="不能被继承的类"><a href="#不能被继承的类" class="headerlink" title="不能被继承的类"></a>不能被继承的类</h3><ul>
<li>类声明之后加一个<code>final</code></li>
</ul>
<h3 id="private和protected"><a href="#private和protected" class="headerlink" title="private和protected"></a><code>private</code>和<code>protected</code></h3><ul>
<li><code>protected</code>是继承的类能拿到但是别的类拿不到</li>
<li><code>private</code>继承的类也拿不到</li>
<li>派生类的友元对基类的保护对象访问没有任何特权，无法访问protected</li>
</ul>
<h3 id="聚合类"><a href="#聚合类" class="headerlink" title="聚合类"></a>聚合类</h3><ul>
<li>所有成员public</li>
<li>没有构造函数</li>
<li>类内没给初始值</li>
<li>没有基类和虚函数</li>
<li><strong>可以用花括号直接初始化，类似于struct</strong><h3 id="字面值类"><a href="#字面值类" class="headerlink" title="字面值类"></a>字面值类</h3></li>
<li>数据成员必须都是字面值类型</li>
<li>至少有一个常量表达式的构造函数</li>
<li>析构函数必须是默认的</li>
<li>内置类型必须是常量表达式，类调用自己的常量构造函数</li>
<li><code>constexpr</code>的构造函数的函数体必须是空的</li>
<li>此时可以在构造的时候加一个<code>constexpr</code><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3></li>
<li><code>static</code></li>
<li>对象的内存不包含静态对象</li>
<li>static函数不含有this指针，<strong>不能处理非static成员</strong></li>
<li>可以使用类作用域直接调用，也可以用对象的<code>.</code>调用</li>
<li>static关键字只出现在类内声明的场合，定义的时候不出现</li>
<li>初始化<ul>
<li>只有是constexpr的情况下可以在类内声明，但是无法在外部使用</li>
<li><code>int &lt;class name&gt;:: var = blabla;</code></li>
</ul>
</li>
<li>可以在一个类还没被初始化完的时候就声明它的静态对象</li>
<li>类的（不一定是静态）成员函数操作静态成员的时候可以直接操作，<strong>不需要加作用域运算符</strong></li>
</ul>
<h3 id="IO流对象"><a href="#IO流对象" class="headerlink" title="IO流对象"></a>IO流对象</h3><ul>
<li><code>iostream</code>, <code>fstream</code>, <code>sstream</code> </li>
<li>不能修改，赋值</li>
<li>输出<code>endl</code>是刷新缓冲区附带一个回车，输出<code>flush</code>则只刷新缓冲区，输出<code>ends</code>刷新缓冲区的同时附带一个空格</li>
<li>输入和输出流可以绑定，多个输入可以绑定到一个输出<ul>
<li>用<code>.tie(&lt;some stream&gt;)</code>函数</li>
<li>输入与输出绑定的时候，调用输入流的时候自动刷新输出缓冲区</li>
</ul>
</li>
<li><code>fstream</code>可以用<code>open</code>或者<code>close</code>打开或者关闭文件</li>
<li>析构的时候会自动close文件<h4 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h4>open函数flag|功能<br>|—|—|<br>in|读<br>out|写<br>app|追加(每次操作都从末尾开始)<br>ate|打开的时候定位到结尾<br>trunc|如果存在，丢弃内容<br>binary|二进制</li>
<li>只有app和in方式可以保留原来的内容</li>
<li>不指定的话是<code>out</code>和<code>trunc</code><h3 id="sstream"><a href="#sstream" class="headerlink" title="sstream"></a>sstream</h3></li>
<li>自身就是个string</li>
<li>可以初始化也可以不初始化<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 将一个整数转换为string</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">123</span>;</span><br><span class="line">    stringstream ss1;</span><br><span class="line">    ss1 &lt;&lt; n; <span class="comment">// 向stringstream写入整数</span></span><br><span class="line">    string s1 = ss1.<span class="built_in">str</span>(); <span class="comment">// 获取stringstream内部的string</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl; <span class="comment">// 输出s1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将一个string分割为单词</span></span><br><span class="line">    string s2 = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss2</span><span class="params">(s2)</span></span>; <span class="comment">// 用string初始化stringstream</span></span><br><span class="line">    string word;</span><br><span class="line">    <span class="keyword">while</span> (ss2 &gt;&gt; word) <span class="comment">// 从stringstream读取单词</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;word = &quot;</span> &lt;&lt; word &lt;&lt; endl; <span class="comment">// 输出单词</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="std-istringstream"><a href="#std-istringstream" class="headerlink" title="std::istringstream"></a>std::istringstream</h3><ul>
<li>一个字符串输入流，允许你从字符串中读取数据，就像从标准输入流中读取数据一样<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string inputString = <span class="string">&quot;123 4.56 Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 istringstream 对象，并将字符串传入</span></span><br><span class="line">    <span class="function">std::istringstream <span class="title">iss</span><span class="params">(inputString)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> intValue;</span><br><span class="line">    <span class="keyword">float</span> floatValue;</span><br><span class="line">    std::string stringValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从字符串流中读取数据</span></span><br><span class="line">    iss &gt;&gt; intValue &gt;&gt; floatValue &gt;&gt; stringValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出读取到的数据</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Int: &quot;</span> &lt;&lt; intValue &lt;&lt; <span class="string">&quot;, Float: &quot;</span> &lt;&lt; floatValue &lt;&lt; <span class="string">&quot;, String: &quot;</span> &lt;&lt; stringValue &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="std-ostringstream"><a href="#std-ostringstream" class="headerlink" title="std::ostringstream"></a>std::ostringstream</h3></li>
<li>一个字符串输出流，允许你将数据写入字符串，就像写入标准输出流一样<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> intValue = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">float</span> floatValue = <span class="number">3.14</span>;</span><br><span class="line">    std::string stringValue = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ostringstream 对象</span></span><br><span class="line">    std::ostringstream oss;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据写入字符串流</span></span><br><span class="line">    oss &lt;&lt; <span class="string">&quot;Int: &quot;</span> &lt;&lt; intValue &lt;&lt; <span class="string">&quot;, Float: &quot;</span> &lt;&lt; floatValue &lt;&lt; <span class="string">&quot;, String: &quot;</span> &lt;&lt; stringValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取字符串</span></span><br><span class="line">    std::string resultString = oss.<span class="built_in">str</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出写入的字符串</span></span><br><span class="line">    std::cout &lt;&lt; resultString &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="iostream格式化"><a href="#iostream格式化" class="headerlink" title="iostream格式化"></a>iostream格式化</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="comment">// 进制</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Default: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hexadecimal: &quot;</span> &lt;&lt; std::hex &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Octal: &quot;</span> &lt;&lt; std::oct &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Decimal: &quot;</span> &lt;&lt; std::dec &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//填充字符</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Default fill: &quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Fill with &#x27;*&#x27;: &quot;</span> &lt;&lt; std::<span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//对齐</span></span><br><span class="line"> std::cout &lt;&lt; <span class="string">&quot;Default alignment: &quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Left alignment: &quot;</span> &lt;&lt; std::left &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Right alignment: &quot;</span> &lt;&lt; std::right &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Internal alignment: &quot;</span> &lt;&lt; std::internal &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; -num &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 精度</span></span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.141592653589793</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Default precision: &quot;</span> &lt;&lt; pi &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Precision 4: &quot;</span> &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">4</span>) &lt;&lt; pi &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 设置宽度</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Width 10: &quot;</span> &lt;&lt; std::<span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure>

<h2 id="iostream其他用法"><a href="#iostream其他用法" class="headerlink" title="iostream其他用法"></a>iostream其他用法</h2><ul>
<li><code>cin.get</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cin.<span class="built_in">get</span>();</span><br><span class="line">istream&amp; cin.<span class="built_in">get</span>(<span class="keyword">char</span>&amp; var);</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span> <span class="params">( <span class="keyword">char</span>* s, streamsize n )</span></span>;</span><br><span class="line"><span class="function">istream&amp; <span class="title">get</span> <span class="params">( <span class="keyword">char</span>* s,  streamsize  n, <span class="keyword">char</span> delim )</span>。</span></span><br></pre></td></tr></table></figure></li>
<li><code>cin.getline</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">getline</span><span class="params">(<span class="keyword">char</span>* s, streamsize count)</span></span>; <span class="comment">//默认以换行符结束</span></span><br><span class="line"><span class="function">istream&amp; <span class="title">getline</span><span class="params">(<span class="keyword">char</span>* s, streamsize count, <span class="keyword">char</span> delim)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><code>gets</code></li>
<li>gets是C中的库函数，在<code>&lt;stdio.h&gt;</code>申明，从标准输入设备读字符串，可以无限读取</li>
<li>不会判断上限，以回车结束或者EOF时停止读取<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> array[<span class="number">20</span>]=&#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="built_in">gets</span>(array);</span><br><span class="line">    cout&lt;&lt;array&lt;&lt;endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    <span class="keyword">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2></li>
<li>声明模板类型</li>
<li><code>template&lt;typename T&gt;</code>或者<code>template&lt;typename T, class U&gt;</code></li>
<li><code>class</code>和<code>typename</code>相同，都可以， <strong>但每个类型钱都必须有这二者之一</strong></li>
</ul>
<h3 id="声明未定大小的数组"><a href="#声明未定大小的数组" class="headerlink" title="声明未定大小的数组"></a>声明未定大小的数组</h3><ul>
<li><code>template&lt;unsigned N, unsigned M&gt;</code>其中N和M是未定的大小，比如用于<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">unsigned</span> N, <span class="keyword">unsigned</span> M&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> (&amp;p1)[N], <span class="keyword">const</span> <span class="keyword">char</span> (&amp;p2)[M])</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="类模板和类模板的成员函数"><a href="#类模板和类模板的成员函数" class="headerlink" title="类模板和类模板的成员函数"></a>类模板和类模板的成员函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类模板定义</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTemplate</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">SimpleTemplate</span>(T value) : <span class="built_in">data</span>(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter 函数</span></span><br><span class="line">    <span class="function">T <span class="title">getData</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        data = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>在类外定义类的成员函数注意也要写模板参数<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类模板的声明</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数的声明</span></span><br><span class="line">    <span class="built_in">MyClass</span>(T value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数的声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的定义</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">MyClass&lt;T&gt;::<span class="built_in">MyClass</span>(T value) : <span class="built_in">data</span>(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员函数的定义</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> MyClass&lt;T&gt;::<span class="built_in">display</span>() <span class="keyword">const</span> &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>一个模板类的成员函数在<strong>用到</strong>的时候才被实例化</li>
<li>在一个类模板的作用域内，不必在类名之后带<code>&lt;T&gt;</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">retType className&lt;T&gt;::<span class="built_in">func</span>(val)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里使用类的时候直接用className就行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类模板的友元函数"><a href="#类模板的友元函数" class="headerlink" title="类模板的友元函数"></a>类模板的友元函数</h3></li>
<li>只有实例化为同一种类型才成立的友元<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置声明</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 友元类模板的特例化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FriendClass</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 友元函数模板的特例化</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">FriendFunction</span><span class="params">(<span class="keyword">const</span> MyClass&lt;T&gt;&amp; obj)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类模板的声明</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(T value) : <span class="built_in">data</span>(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 友元声明</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendClass</span>&lt;</span>T&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Data: &quot;</span> &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>可以通过在<code>friend</code>函数前面独立增加一个<code>template &lt;typename X&gt;</code>来打破友元必须与类实例化为相同的类型才能成为友元的要求，从而使得所有情况下友元都成立<h3 id="模板类型别名"><a href="#模板类型别名" class="headerlink" title="模板类型别名"></a>模板类型别名</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> twin = pair&lt;T, T&gt;;</span><br><span class="line">twin&lt;string&gt; authors; <span class="comment">// 相当于`pair&lt;string, string&gt;`</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模板类的静态成员"><a href="#模板类的静态成员" class="headerlink" title="模板类的静态成员"></a>模板类的静态成员</h3><ul>
<li>不同实例化的模板类不共享静态数据成员，只有相同实例化的共享<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化静态数据成员</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">retType ClassName&lt;T&gt;:: val - <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="模板默认参数"><a href="#模板默认参数" class="headerlink" title="模板默认参数"></a>模板默认参数</h3></li>
<li><code>template &lt;typename T = int&gt;</code></li>
<li>希望使用默认模板参数的时候使用<code>&lt;&gt;</code>即可但是<strong>不能省略</strong></li>
</ul>
<h3 id="模板参数推导"><a href="#模板参数推导" class="headerlink" title="模板参数推导"></a>模板参数推导</h3><ul>
<li>编译器会默认进行模板参数推导，比如调用模板函数的时候，编译器会根据调用的方式自动推导函数模板实例化成哪种函数</li>
<li>用给好类型的函数指针指向模板函数的时候，编译器也会根据<strong>要赋值的函数指针的类型</strong>推断模板函数的实例化方式</li>
</ul>
<h3 id="需要置顶尾置返回类型的场合"><a href="#需要置顶尾置返回类型的场合" class="headerlink" title="需要置顶尾置返回类型的场合"></a>需要置顶尾置返回类型的场合</h3><ul>
<li>需要使用模板参数结合<code>decltype</code>推断返回类型的场合<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, U u)</span> -&gt; <span class="title">decltype</span><span class="params">(t + u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模板函数的重载"><a href="#模板函数的重载" class="headerlink" title="模板函数的重载"></a>模板函数的重载</h3><ul>
<li>用别的模板函数重载<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板函数接受一个模板参数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Template Function with one template parameter: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载模板函数，接受两个模板参数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(T t, U u)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Template Function with two template parameters: &quot;</span> &lt;&lt; t &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; u &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>用非模板函数重载<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Template Function: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非模板函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Non-Template Function: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>匹配的原则是谁更特殊就匹配谁，非模板版本优先。谁的范围更窄，先匹配谁</li>
</ul>
<h3 id="可变参数类型的类模板"><a href="#可变参数类型的类模板" class="headerlink" title="可变参数类型的类模板"></a>可变参数类型的类模板</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板递归终止条件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;End of recursion&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变模板参数的模板函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printValues</span><span class="params">(T first, Args... args)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; first &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">printValues</span>(args...);  <span class="comment">// 递归调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printValues</span>(<span class="number">1</span>, <span class="number">3.14</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Args...</code> 表示一个参数包，可以接受零个或多个类型。在递归调用中，<code>args...</code> 用于<strong>展开参数包</strong>，使得每个参数都能够被单独处理<ul>
<li>就是每次递归调用的时候都把第一个赋值给fisrt，后面的还在<code>args...</code>内部</li>
</ul>
</li>
<li>使用<code>sizeof...</code>计算参数数量<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变模板参数的模板函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">countArgs</span><span class="params">(Args... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span>...(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Number of arguments: &quot;</span> &lt;&lt; <span class="built_in">countArgs</span>(<span class="number">1</span>, <span class="number">3.14</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&#x27;A&#x27;</span>) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模板函数特例化"><a href="#模板函数特例化" class="headerlink" title="模板函数特例化"></a>模板函数特例化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用模板函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFunction</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Generic Template Function: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板特化 - 针对int类型</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">void</span> myFunction&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span> value) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Specialized Template Function for int: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>就是专门为<code>T</code>是某种特定的类型而设定的版本</li>
</ul>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="built_in">divide</span>(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Result: &quot;</span> &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> std::exception&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Exception caught: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>写了<code>noexcept</code>的函数抛出异常不会被<code>catch</code>，会导致程序崩溃<ul>
<li><code>noexept(false)</code>表示可能抛出异常</li>
<li>反之认为不可能抛出异常</li>
</ul>
</li>
</ul>
<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> :</span> <span class="keyword">public</span> std::exception &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string errorMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyException</span>(<span class="keyword">const</span> std::string&amp; message) : <span class="built_in">errorMessage</span>(message) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errorMessage.<span class="built_in">c_str</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> MyNamespace &#123;</span><br><span class="line">    <span class="keyword">int</span> globalVar = <span class="number">42</span>;  <span class="comment">// 命名空间中的全局变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello from MyNamespace!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Inside MyClass&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以不连续，<code>namespace name&#123;&#125;</code>可以在文件中反复出现多次</li>
<li>别名<code>namespace A = B;</code></li>
</ul>
]]></content>
      <tags>
        <tag>c++</tag>
        <tag>cpp</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>编写基于Flask的mp4分块流式传输前后端</title>
    <url>/2023/04/14/%E7%BC%96%E5%86%99%E5%9F%BA%E4%BA%8EFlask%E7%9A%84mp4%E5%88%86%E5%9D%97%E6%B5%81%E5%BC%8F%E4%BC%A0%E8%BE%93%E5%89%8D%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="Mp4视频文件相关信息的取得"><a href="#Mp4视频文件相关信息的取得" class="headerlink" title="Mp4视频文件相关信息的取得"></a>Mp4视频文件相关信息的取得</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/26374202">使用 MediaSource 搭建流式播放器</a></li>
<li><a href="https://blog.csdn.net/u010164190/article/details/127798833">参考2</a></li>
<li><a href="https://blog.csdn.net/qq_34754747/article/details/122617904">参考3</a></li>
<li>MP4文件具有几个关键的信息用于流式传输<ul>
<li>AVCProfileIndication</li>
<li>profile_compability</li>
<li>AVCLevelIndication</li>
</ul>
</li>
<li>使用十六进制文件浏览器读取MP4文件，chrome有<a href="https://chrome.google.com/webstore/detail/hexreader/fejgbfmdlplhjkbpmnedfonifhajinck/related">相关插件</a><strong>HexReader</strong></li>
<li>打开之后搜索<code>avcC</code><ul>
<li><img src="/imgs/cd88851124ce1abe09da02e6c07c3503e1ebfccc23b739f0c6c382b09ac1f810.png" alt="picture 1">  </li>
</ul>
</li>
<li>其后紧跟的第一个是<code>configurationVersion</code>，后面三个就是<code>AVCProfileIndication</code>, <code>profile_compatibility</code>和<code>AVCLevelIndication</code>三个十六进制数字比如本文中是<code>4D</code>, <code>40</code>和<code>28</code><h2 id="python读取部分文件并且使用生成器"><a href="#python读取部分文件并且使用生成器" class="headerlink" title="python读取部分文件并且使用生成器"></a>python读取部分文件并且使用生成器</h2></li>
<li><a href="https://www.runoob.com/python/python-func-open.html">参考</a></li>
<li><a href="https://www.python51.com/jc/73715.html">生成器参考</a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chunked_file_reader</span>(<span class="params">block_size=<span class="number">5</span>*<span class="number">1024</span>*<span class="number">1024</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成器函数：分块读取文件内容</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&quot;文件地址&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = fp.read(block_size)</span><br><span class="line">        <span class="comment"># 当文件没有更多内容时，read 调用将会返回空字符串 &#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> chunk</span><br></pre></td></tr></table></figure>
<h2 id="后端FLask和前端JS"><a href="#后端FLask和前端JS" class="headerlink" title="后端FLask和前端JS"></a>后端FLask和前端JS</h2></li>
<li><a href="https://www.jb51.net/html5/726345.html">参考</a></li>
<li>里面<code>mime</code>部分需要利用上文的方法进行一定的修改</li>
<li>但是直接参考样例撰写会遇到问题如图(更正上述参数之后)</li>
<li><img src="/imgs/b7f23ec7038f35bf7ee06f1d6d1c296df4629239b21ce797039e73e5a6f1cf38.png" alt="picture 2">  </li>
<li><a href="https://blog.csdn.net/z591102/article/details/107687358">video标签的一些性质</a></li>
<li><a href="https://blog.csdn.net/maoxiaozhu/article/details/127036457">Audio/Video的各种事件</a></li>
<li><a href="https://www.w3.org/TR/media-source/#mediasource">mediaSource参考</a></li>
<li><a href="https://blog.csdn.net/weixin_52148548/article/details/124703828">fetch参考</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/570453447">mediaSource中文详细参考 知乎</a></li>
<li><a href="https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/samples/dn551368(v=vs.85)?redirectedfrom=MSDN">微软MSE教程（最终修改的基础）</a></li>
<li><a href="https://blog.csdn.net/shadow_zed/article/details/106850049">一个全面的参考</a></li>
</ul>
<hr>
<ul>
<li><strong>最终仍然没有解决，可能是MP4格式不支持导致的</strong></li>
</ul>
<h2 id="webm格式"><a href="#webm格式" class="headerlink" title="webm格式"></a>webm格式</h2><ul>
<li><p>比如网上例子中的<code>video/webm; codecs=&quot;vorbis,vp8&quot;</code></p>
<ul>
<li>其中<code>vorbis</code>是音频(audio)的编码格式，<code>vp8</code>则是视频编码格式<h3 id="webm在线转码网站"><a href="#webm在线转码网站" class="headerlink" title="webm在线转码网站"></a>webm在线转码网站</h3></li>
</ul>
</li>
<li><p>微软自带的剪辑工具（难用）</p>
<ul>
<li><img src="/imgs/2bf1f2d0319564c5d3cad1d7486b2ab0c0a0be2f75e3b49d372982bca8bfa864.png" alt="picture 3">  </li>
</ul>
</li>
<li><p><a href="https://cloudconvert.com/mp4-to-webm">网站</a></p>
<h2 id="最终方案与代码逻辑"><a href="#最终方案与代码逻辑" class="headerlink" title="最终方案与代码逻辑"></a>最终方案与代码逻辑</h2></li>
<li><p>JS的代码分同步和异步执行，异步执行的代码在时间上与其他代码的先后顺序是独立的。</p>
</li>
<li><p>同步执行的代码可能因为多线程的原因，并、<u>不是严格的按照前后顺序执行的</u>，这可能导致一些问题</p>
</li>
<li><p><strong>因此需要设法控制代码的执行时序和时机</strong></p>
<ul>
<li><code>setTimeOut</code>是异步的</li>
<li><code>sourceBuffer</code>的<code>appendBuffer</code>也是异步的</li>
</ul>
</li>
<li><p>通过事件和<code>addEventListener</code>控制代码的执行顺序和时机</p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3></li>
<li><p>video控件加载的时候<code>mediaSource</code>触发<code>sourceopen</code>事件</p>
</li>
<li><p><code>sourceopen</code>实现对于<code>initVideo</code>的调用</p>
</li>
<li><p><code>initVideo</code>中添加对于<code>SourceBuffer</code>的<code>updateend</code>事件的监听，该事件表示<code>buffer</code>中<code>append</code>操作已经结束，可以进一步添加或者进行其他操作，通过这个事件监听器调用<code>playSegment</code>。这个事件发生的时候<code>SourceBuffer</code>的<code>updating</code>变为<code>False</code>表示添加完成</p>
</li>
<li><p>为了应对某些场合因为<code>sourceBuffer</code>满导致无法继续加载的情况，会将<code>sourceBuffer</code>中的内容全部删除，重新从需要的位置开始缓存加载，假如网速够快的话这个时间忽略不计，因为是从需要的位置开始加载的，</p>
</li>
<li><h3 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h3></li>
<li><p>可以在某个函数的调用函数中添加调用这个函数的事件监听器，同时在这个函数本身中删除调用这个函数的事件监听器，否则会导致这个函数在事件发生的时候被<strong>反复调用</strong></p>
</li>
<li><p>系统自动提前调用了<code>endOfStream</code>导致<code>readyState</code>变成<code>ended</code>，使得系统无法继续加载</p>
<ul>
<li>可能是视频源导致的<code>webm</code>存在这类问题，但是<code>mp4</code>没有，然而<code>mp4</code>始终无法播放只能用<code>webm</code>，此时可以适当修改<code>webm</code>的<code>trunk</code>分割方式<a href="https://www.jianshu.com/p/019afde7e402">参考</a></li>
<li>可以将<code>sourceended</code>事件对象log出来看下调用的时间和情况</li>
</ul>
</li>
<li><p>appendBuffer之前要判断<code>!videoSource.updating &amp;&amp; mediaSource.readyState === &quot;open&quot;</code>否则也会报错</p>
<h2 id="async和await异步处理"><a href="#async和await异步处理" class="headerlink" title="async和await异步处理"></a>async和await异步处理</h2></li>
<li><p><a href="https://blog.csdn.net/lnmgmgggggdd/article/details/120616652">讲解</a></p>
<h2 id="前后端源代码（v2-0）"><a href="#前后端源代码（v2-0）" class="headerlink" title="前后端源代码（v2.0）"></a>前后端源代码（v2.0）</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_from_directory</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> send_file</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def chunked_file_reader(block_size=5 * 1024 * 1024):</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;生成器函数：分块读取文件内容</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     fp = open(&quot;F:/JohnWick.mp4&quot;, &#x27;rb&#x27;)</span></span><br><span class="line"><span class="comment">#     while True:</span></span><br><span class="line"><span class="comment">#         chunk = fp.read(block_size)</span></span><br><span class="line"><span class="comment">#         # 当文件没有更多内容时，read 调用将会返回空字符串 &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         if not chunk:</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#         yield chunk</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">segmentNum = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page/video&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">streamVideo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    fileStr = <span class="string">&quot;D:/selfLearning/pyTrunk/JW2.webm&quot;</span></span><br><span class="line">    <span class="comment"># fileStr = &quot;D:/selfLearning/pyTrunk/JWSmall.mp4&quot;</span></span><br><span class="line">    size = os.stat(fileStr).st_size</span><br><span class="line">    dataReceived = json.loads(request.get_data())</span><br><span class="line">    fpStart = dataReceived[<span class="string">&#x27;current&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;index is &quot;</span>, fpStart)</span><br><span class="line">    fpSeek = <span class="built_in">int</span>(size / segmentNum * fpStart)</span><br><span class="line">    fp = <span class="built_in">open</span>(fileStr, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    fp.seek(fpSeek)</span><br><span class="line">    chunk = fp.read((<span class="built_in">int</span>)(size / segmentNum))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># streamFile = chunked_file_reader()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(&quot;page is loading...&quot;)</span></span><br><span class="line">    <span class="comment"># i=i+1</span></span><br><span class="line">    <span class="comment"># response = Response(chunk, content_type=&quot;video/webm&quot;)</span></span><br><span class="line">    <span class="comment"># return response</span></span><br><span class="line">    <span class="keyword">return</span> make_response(chunk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page/video/segment&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">returnSegmentNum</span>():</span></span><br><span class="line">    returnDict = &#123;&#125;</span><br><span class="line">    returnDict[<span class="string">&#x27;segments&#x27;</span>] = segmentNum</span><br><span class="line">    <span class="keyword">return</span> json.dumps(returnDict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">returnPage</span>():</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;mainNew.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def count_chunks(fname):</span></span><br><span class="line"><span class="comment">#     count = 0</span></span><br><span class="line"><span class="comment">#     with open(fname, &#x27;rb&#x27;) as fp:</span></span><br><span class="line"><span class="comment">#         for chunk in chunked_file_reader(fp):</span></span><br><span class="line"><span class="comment">#             count += 1</span></span><br><span class="line"><span class="comment">#     return count</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># print(count_chunks(&quot;F:/JohnWick.mp4&quot;))</span></span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前端-基于微软MSE和其他修改得到"><a href="#前端-基于微软MSE和其他修改得到" class="headerlink" title="前端(基于微软MSE和其他修改得到)"></a>前端(基于微软MSE和其他修改得到)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;title&gt;Title&lt;/title&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;video id=&quot;video&quot; width=&quot;1024&quot; height=&quot;768&quot; src=&quot;page/video&quot;&gt;&lt;/video&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">height</span>=<span class="string">&quot;768&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input id=&quot;range&quot; type=&quot;range&quot; min=&quot;0&quot; step=&quot;1&quot; max=&quot;100&quot; value=&quot;0&quot; width=&quot;1024px&quot; onmouseup=&quot;dragRange()&quot;&gt;&lt;/input&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    videoElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> videoSource;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bufferIndex = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// segments = 0;</span></span></span><br><span class="line"><span class="javascript">    currentPos = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    numOfSeg = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> curIndex;</span></span><br><span class="line"><span class="javascript">    file = <span class="string">&quot;page/video&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getNumOfSeg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ret;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&quot;page/video/segment&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> dict = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;dict:&quot;</span>, dict[<span class="string">&#x27;segments&#x27;</span>]);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.numOfSeg = dict[<span class="string">&#x27;segments&#x27;</span>];</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;video State is&quot;</span>, videoElement.readyState);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// if(videoElement.readyState&lt;3)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     playSegment();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    setupVideo();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setupVideo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        getNumOfSeg();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// clearLog(); // Clear console log</span></span></span><br><span class="line"><span class="javascript">        bufferIndex = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Create the media source</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.MediaSource) &#123;</span></span><br><span class="line"><span class="javascript">            mediaSource = <span class="keyword">new</span> <span class="built_in">window</span>.MediaSource();</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;mediasource or syntax not supported&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (videoElement.src) &#123;</span></span><br><span class="line"><span class="javascript">            URL.revokeObjectURL(videoElement.src);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> url = URL.createObjectURL(mediaSource);</span></span><br><span class="line"><span class="javascript">        videoElement.pause();</span></span><br><span class="line"><span class="javascript">        videoElement.src = url;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.width = width;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.height = height;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Wait for event that tells us that our media source object is</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   ready for a buffer to be added.</span></span></span><br><span class="line"><span class="javascript">        videoElement.addEventListener(<span class="string">&#x27;load&#x27;</span>, handleVideoLoad);</span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceopen&#x27;</span>, toInit, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceended&#x27;</span>, handleSourceEnd);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Handler to switch button text to Play</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;pause&quot;, function () &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     playButton.innerText = &quot;Play&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// // Handler to switch button text to pause</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;playing&quot;, function () &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     playButton.innerText = &quot;Pause&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// // Remove the handler for the timeupdate event</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;ended&quot;, function () &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     videoElement.removeEventListener(&quot;timeupdate&quot;, checkTime);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">toInit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;toInit&quot;</span>)</span></span><br><span class="line"><span class="javascript">            videoSource = mediaSource.addSourceBuffer(<span class="string">&#x27;video/webm; codecs=&quot;vorbis,vp8&quot;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// videoSource = mediaSource.addSourceBuffer(&#x27;video/mp4; codecs=&quot;avc1.4D2029, mp4a.40.2&quot;&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(initVideo, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;Exception calling addSourceBuffer for video&#x27;</span>, e);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">initVideo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">&quot;page/video&quot;</span>,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">&#x27;current&#x27;</span>: index&#125;),</span></span><br><span class="line"><span class="javascript">                <span class="comment">// responseType: &#x27;blob&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;init&quot;</span>, index);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(index);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.arrayBuffer();</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.blob();</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> response.arrayBuffer();</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.appendBuffer(new Uint8Array(response));</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var sourceBuffer = mediaSource.sourceBuffers[bufferIndex];</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// sourceBuffer.appendBuffer(response);</span></span></span><br><span class="line"><span class="javascript">                    videoSource.appendBuffer(response);</span></span><br><span class="line"><span class="javascript">                    index++;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoElement.play();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// index+=1;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// Wait for the update complete event before continuing</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// mediaSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.addEventListener(&quot;updateend&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript">                    videoElement.addEventListener(<span class="string">&quot;timeupdate&quot;</span>, getStarted);</span></span><br><span class="line"><span class="javascript">                    videoElement.play().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(err)</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">updateFunct</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//  This is a one shot function, when init segment finishes loading,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    update the buffer flag, call getStarted, and then remove this event.</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// bufferUpdated = true;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.removeEventListener(&quot;updateend&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Now that video has started, remove the event listener</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.removeEventListener(&quot;update&quot;, updateFunct);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log((&quot;updating...&quot;));</span></span></span><br><span class="line"><span class="javascript">        getStarted(); <span class="comment">// Get video playback started</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getStarted</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Start by loading the first segment of media</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 根据现在的播放进度决定是否进行加载</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.curIndex = <span class="built_in">Math</span>.ceil(videoElement.currentTime / mediaSource.duration * <span class="built_in">window</span>.numOfSeg);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;timeupdate&quot;, curIndex);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// if (index - curIndex &gt; 0&amp;&amp; !(mediaSource.readyState === &quot;HAVE_METADATA&quot;)) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     return;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// if (!videoSource.updating &amp;&amp; mediaSource.readyState === &quot;open&quot;) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     if (index &gt;= window.numOfSeg) &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         // mediaSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         console.log(&quot;ended!&quot;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         // console.log(videoSource.sourceBuffers[0].length)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         // videoElement.play();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         // videoSource.removeEventListener(&quot;updateend&quot;, updateFunct);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//         return;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     // playSegment();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;curIndex index&quot;</span>, curIndex, index);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(videoElement.buffered);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (index - curIndex &lt; <span class="number">1</span> &amp;&amp; index &lt; <span class="built_in">window</span>.numOfSeg) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(&quot;updating&quot;);</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(playSegment, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(updateFunct, <span class="number">300</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curIndex - index &lt; -<span class="number">1</span> &amp;&amp; (videoElement.readyState &lt; <span class="number">3</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            videoElement.removeEventListener(<span class="string">&quot;timeupdate&quot;</span>, getStarted);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(handleVideoLoad, <span class="number">50</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Start showing video time</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// requestId = window.requestAnimationFrame(render);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Display current index</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// curIndex.textContent = index + 1;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// bufferIndex++;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Continue in a loop where approximately every x seconds reload the buffer</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;timeupdate&quot;, fileChecks, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.addEventListener(&quot;updateend&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleVideoLoad</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = curIndex &lt; 1 ? curIndex : curIndex - 1;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mediaSource.removeSourceBuffer(videoSource);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setTimeout(function ()&#123;window.videoSource = mediaSource.addSourceBuffer(&#x27;video/webm; codecs=&quot;vorbis,vp8&quot;&#x27;);index = 0;&#125;, 500);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = 0;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = curIndex &lt; 1 ? curIndex : curIndex - 1;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;handing source load&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = curIndex-1;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// if(index&lt;numOfSeg-1)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     videoSource.remove((index+1)*mediaSource.duration/numOfSeg, mediaSource.duration);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setTimeout(function ()&#123;videoSource.remove(0, index*mediaSource.duration/numOfSeg);index = 0;&#125;, 200);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = 0;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;videoSource.remove(<span class="number">0</span>, mediaSource.duration);index = curIndex-<span class="number">1</span>;&#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(playSegment, <span class="number">400</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;videoElement.addEventListener(<span class="string">&quot;timeupdate&quot;</span>, getStarted)&#125;,<span class="number">600</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleSourceEnd</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;replaying, remove&quot;, 0, mediaSource.duration);</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;handling source end&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> prevTme = videoElement.currentTime;</span></span><br><span class="line"><span class="javascript">        index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.remove(0, videoElement.duration);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mediaSource.removeSourceBuffer(videoSource);</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.mediaSource = <span class="keyword">new</span> MediaSource();</span></span><br><span class="line"><span class="javascript">        URL.revokeObjectURL(videoElement.src);</span></span><br><span class="line"><span class="javascript">        videoElement.src = URL.createObjectURL(mediaSource);</span></span><br><span class="line"><span class="javascript">        videoElement.currentTime = prevTme;</span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceopen&#x27;</span>, toInit, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceended&#x27;</span>, handleSourceEnd);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">playSegment</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">&quot;page/video&quot;</span>,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">&#x27;current&#x27;</span>: index&#125;),</span></span><br><span class="line"><span class="javascript">                <span class="comment">// responseType: &#x27;blob&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(response);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.arrayBuffer();</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.blob();</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> response.arrayBuffer();</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;loading: &quot;</span>, index);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span> <span class="title">stampAndAppend</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;ready to append&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// mediaSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// function setTimeOffset()</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     // if (!videoSource.updating &amp;&amp; mediaSource.readyState === &#x27;open&#x27;)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     // videoSource.timestampOffset = index * 7;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     return 0;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(videoElement.error);</span></span></span><br><span class="line"><span class="javascript">                        videoSource.appendBuffer(response);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(videoElement.error);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// videoSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// videoElement.click();</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// videoSource.removeEventListener(&quot;update&quot;, stampAndAppend);</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;buffer appended&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        index++;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(&quot;duration:&quot;, videoSource.duration)</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(mediaSource.readyState);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (!videoSource.updating &amp;&amp; mediaSource.readyState === <span class="string">&quot;open&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(mediaSource.duration);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(videoElement.currentTime);</span></span><br><span class="line"><span class="javascript">                        stampAndAppend();</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// setTimeout(stampAndAppend, Math.floor(mediaSource.duration / numOfSeg / 2 * 1000));</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// stampAndAppend();</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.addEventListener(&quot;update&quot;, stampAndAppend);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var sourceBuffer = mediaSource.sourceBuffers[mediaSource.sourceBuffers.length-1];</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// // while(mediaSource.sourceBuffers.updating)&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// sourceBuffer.appendBuffer(response);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// bufferIndex++;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoElement.play();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// Wait for the update complete event before continuing</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.addEventListener(&quot;update&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var buffer = mediaSource.addSourceBuffer(&#x27;video/webm; codecs=&quot;vorbis,vp8&quot;&#x27;);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// buffer.appendBuffer(response);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(mediaSource.error);</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// player.load();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(&quot;loading&quot;);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;input id=&quot;range&quot; type=&quot;range&quot; min=&quot;0&quot; step=&quot;1&quot; max=&quot;100&quot; value=&quot;0&quot; width=&quot;1024px&quot;&gt;&lt;/input&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;button onclick=&quot;reloadVideo()&quot;&gt;reload&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// function reloadVideo() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     player = document.getElementById(&quot;video&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     // setVideoLoad();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     player.load();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     player.play();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&quot;reloading...&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// reloadVideo();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setVideoLoad();</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;button id=&quot;pause&quot;&gt;pause&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    player = <span class="built_in">document</span>.getElementById(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// player.onclick = function pauseAndPlay() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&quot;clicked!&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     if (player.paused) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         player.play()</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125; else &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         player.pause()</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// range = document.getElementById(&quot;range&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// function refreshRange() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     range.innerHTML = currentPos;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setInterval(function () &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     refreshRange();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;, 1000);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><strong>还是存在很多问题，比如<code>sourceend</code>经常被莫名触发，导致整个重新加载，推测是ffmpeg转码为webm的时候出现问题，但是难以找到正确结果</strong></p>
</li>
</ul>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><ul>
<li><img src="/imgs/7c682a31d8fda178cda9ce1e6642ba0a3941d9e089cd567597e8ebadead2eb4b.png" alt="picture 4">  </li>
<li>进度条可以拖动<h3 id="ffmpeg用法"><a href="#ffmpeg用法" class="headerlink" title="ffmpeg用法"></a>ffmpeg用法</h3></li>
<li><a href="https://www.gyan.dev/ffmpeg/builds/">下载</a></li>
<li><a href="https://avmedia.0voice.com/?id=340">转换webm参考</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/434020409">ffmpeg命令参考</a></li>
<li><a href="https://ffmpeg.org/ffmpeg.html">ffmpeg官方文档</a></li>
<li>参考命令<code>./ffmpeg.exe -threads 12 -i D:\selfLearning\pyTrunk\JW2.mp4 -vcodec vp8 -acodec libvorbis -b:v 0 -crf 30 D:\selfLearning\pyTrunk\JW2.webm</code><ul>
<li>其中<code>-crf</code>指定的是质量系数，越小质量越高</li>
</ul>
</li>
<li><ul>
<li>MediaSource 仅支持使用 MPEG-DASH 编码的 MP4 文件，或集群以关键帧开头的 WebM 文件(否则会引发错误:媒体片段未以关键帧开头)</li>
</ul>
</li>
<li>mp4控制关键帧间隔：<code>-g</code>参数，以及<code>-keyint_min</code>参数</li>
<li>注意，将mp4转换为fmp4文件是根据关键帧划分的，<a href="https://www.bilibili.com/read/cv22236159/">参考</a><h3 id="前端-v3-0"><a href="#前端-v3-0" class="headerlink" title="前端 v3.0"></a>前端 v3.0</h3></li>
<li>将通过<code>timeupdate</code>判断是否往回拖动了进度条改为了通过<code>video</code>节点的<code>updating</code>事件判断（注意使用<code>updated</code>判断的时候有时候因为没有加载出来导致卡死）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;title&gt;Title&lt;/title&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;video id=&quot;video&quot; width=&quot;1024&quot; height=&quot;768&quot; src=&quot;page/video&quot;&gt;&lt;/video&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">height</span>=<span class="string">&quot;768&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">controls</span> <span class="attr">loop</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;input id=&quot;range&quot; type=&quot;range&quot; min=&quot;0&quot; step=&quot;1&quot; max=&quot;100&quot; value=&quot;0&quot; width=&quot;1024px&quot; onmouseup=&quot;dragRange()&quot;&gt;&lt;/input&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    videoElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> videoSource;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bufferIndex = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// segments = 0;</span></span></span><br><span class="line"><span class="javascript">    currentPos = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    numOfSeg = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> curIndex;</span></span><br><span class="line"><span class="javascript">    file = <span class="string">&quot;page/video&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mime = <span class="string">&#x27;video/webm; codecs=&quot;vorbis,vp8&quot;&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// var mime = &#x27;video/mp4; codecs=&quot;avc1.64001F, mp4a.40.2&quot;&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getNumOfSeg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ret;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&quot;page/video/segment&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> dict = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;dict:&quot;</span>, dict[<span class="string">&#x27;segments&#x27;</span>]);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.numOfSeg = dict[<span class="string">&#x27;segments&#x27;</span>];</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;video State is&quot;</span>, videoElement.readyState);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// if(videoElement.readyState&lt;3)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     playSegment();</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    setupVideo();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setupVideo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        getNumOfSeg();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// clearLog(); // Clear console log</span></span></span><br><span class="line"><span class="javascript">        bufferIndex = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Create the media source</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.MediaSource) &#123;</span></span><br><span class="line"><span class="javascript">            mediaSource = <span class="keyword">new</span> <span class="built_in">window</span>.MediaSource();</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;mediasource or syntax not supported&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (videoElement.src) &#123;</span></span><br><span class="line"><span class="javascript">            URL.revokeObjectURL(videoElement.src);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> url = URL.createObjectURL(mediaSource);</span></span><br><span class="line"><span class="javascript">        videoElement.pause();</span></span><br><span class="line"><span class="javascript">        videoElement.src = url;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.width = width;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.height = height;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Wait for event that tells us that our media source object is</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   ready for a buffer to be added.</span></span></span><br><span class="line"><span class="javascript">        videoElement.addEventListener(<span class="string">&#x27;seeking&#x27;</span>, handleSeek);</span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceopen&#x27;</span>, toInit, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceended&#x27;</span>, handleSourceEnd);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Handler to switch button text to Play</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;pause&quot;, function () &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     playButton.innerText = &quot;Play&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// // Handler to switch button text to pause</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;playing&quot;, function () &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     playButton.innerText = &quot;Pause&quot;;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// // Remove the handler for the timeupdate event</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;ended&quot;, function () &#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     videoElement.removeEventListener(&quot;timeupdate&quot;, checkTime);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;, false);</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">toInit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;toInit&quot;</span>)</span></span><br><span class="line"><span class="javascript">            videoSource = mediaSource.addSourceBuffer(mime);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// videoSource = mediaSource.addSourceBuffer(&#x27;video/mp4; codecs=&quot;avc1.4D2029, mp4a.40.2&quot;&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(initVideo, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;Exception calling addSourceBuffer for video&#x27;</span>, e);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">initVideo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">&quot;page/video&quot;</span>,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">&#x27;current&#x27;</span>: index&#125;),</span></span><br><span class="line"><span class="javascript">                <span class="comment">// responseType: &#x27;blob&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(response);</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;init&quot;</span>, index);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(index);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.arrayBuffer();</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.blob();</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> response.arrayBuffer();</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.appendBuffer(new Uint8Array(response));</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var sourceBuffer = mediaSource.sourceBuffers[bufferIndex];</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// sourceBuffer.appendBuffer(response);</span></span></span><br><span class="line"><span class="javascript">                    videoSource.appendBuffer(response);</span></span><br><span class="line"><span class="javascript">                    index++;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoElement.play();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// index+=1;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// Wait for the update complete event before continuing</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// mediaSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.addEventListener(&quot;updateend&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript">                    videoElement.addEventListener(<span class="string">&quot;timeupdate&quot;</span>, getStarted);</span></span><br><span class="line"><span class="javascript">                    videoElement.play().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(err)</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">updateFunct</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//  This is a one shot function, when init segment finishes loading,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//    update the buffer flag, call getStarted, and then remove this event.</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// bufferUpdated = true;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.removeEventListener(&quot;updateend&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Now that video has started, remove the event listener</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.removeEventListener(&quot;update&quot;, updateFunct);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log((&quot;updating...&quot;));</span></span></span><br><span class="line"><span class="javascript">        getStarted(); <span class="comment">// Get video playback started</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getStarted</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Start by loading the first segment of media</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 根据现在的播放进度决定是否进行加载</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.curIndex = <span class="built_in">Math</span>.ceil(videoElement.currentTime / mediaSource.duration * <span class="built_in">window</span>.numOfSeg);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;curIndex index&quot;</span>, curIndex, index);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(videoElement.buffered);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (index - curIndex &lt; <span class="number">1</span> &amp;&amp; index &lt; <span class="built_in">window</span>.numOfSeg) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(&quot;updating&quot;);</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(playSegment, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(updateFunct, <span class="number">300</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curIndex - index &lt; -<span class="number">1</span> &amp;&amp; (videoElement.readyState &lt; <span class="number">3</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// videoElement.removeEventListener(&quot;timeupdate&quot;, getStarted);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// setTimeout(handleVideoLoad, 50);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Start showing video time</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// requestId = window.requestAnimationFrame(render);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Display current index</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// curIndex.textContent = index + 1;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// bufferIndex++;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  Continue in a loop where approximately every x seconds reload the buffer</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoElement.addEventListener(&quot;timeupdate&quot;, fileChecks, false);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.addEventListener(&quot;updateend&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleSeek</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;handling seek&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(index - curIndex&lt;<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> <span class="keyword">if</span>(videoElement.readyState&lt;<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;seek to handle load&quot;</span>);</span></span><br><span class="line"><span class="javascript">            videoElement.removeEventListener(<span class="string">&quot;timeupdate&quot;</span>, getStarted);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(handleVideoLoad, <span class="number">200</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleVideoLoad</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = curIndex &lt; 1 ? curIndex : curIndex - 1;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mediaSource.removeSourceBuffer(videoSource);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setTimeout(function ()&#123;window.videoSource = mediaSource.addSourceBuffer(&#x27;video/webm; codecs=&quot;vorbis,vp8&quot;&#x27;);index = 0;&#125;, 500);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = 0;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = curIndex &lt; 1 ? curIndex : curIndex - 1;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;handing source load&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = curIndex-1;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// if(index&lt;numOfSeg-1)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     videoSource.remove((index+1)*mediaSource.duration/numOfSeg, mediaSource.duration);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// setTimeout(function ()&#123;videoSource.remove(0, index*mediaSource.duration/numOfSeg);index = 0;&#125;, 200);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// index = 0;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;videoSource.remove(<span class="number">0</span>, (index&gt;<span class="number">0</span>?index-<span class="number">1</span>:index)*mediaSource.duration/<span class="built_in">window</span>.numOfSeg);index = curIndex-<span class="number">1</span>;&#125;, <span class="number">200</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(playSegment, <span class="number">400</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;videoElement.addEventListener(<span class="string">&quot;timeupdate&quot;</span>, getStarted)&#125;,<span class="number">600</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleSourceEnd</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">    </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&quot;replaying, remove&quot;, 0, mediaSource.duration);</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;handling source end&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> prevTme = videoElement.currentTime;</span></span><br><span class="line"><span class="javascript">        index = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// videoSource.remove(0, videoElement.duration);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// mediaSource.removeSourceBuffer(videoSource);</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.mediaSource = <span class="keyword">new</span> MediaSource();</span></span><br><span class="line"><span class="javascript">        URL.revokeObjectURL(videoElement.src);</span></span><br><span class="line"><span class="javascript">        videoElement.src = URL.createObjectURL(mediaSource);</span></span><br><span class="line"><span class="javascript">        videoElement.currentTime = prevTme;</span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceopen&#x27;</span>, toInit, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        mediaSource.addEventListener(<span class="string">&#x27;sourceended&#x27;</span>, handleSourceEnd);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">playSegment</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        fetch(<span class="string">&quot;page/video&quot;</span>,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;<span class="string">&#x27;current&#x27;</span>: index&#125;),</span></span><br><span class="line"><span class="javascript">                <span class="comment">// responseType: &#x27;blob&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(response);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.arrayBuffer();</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// return response.blob();</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> response.arrayBuffer();</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;loading: &quot;</span>, index);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="function"><span class="keyword">function</span> <span class="title">stampAndAppend</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;ready to append&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// mediaSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// function setTimeOffset()</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     // if (!videoSource.updating &amp;&amp; mediaSource.readyState === &#x27;open&#x27;)</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     // videoSource.timestampOffset = index * 7;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     return 0;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(videoElement.error);</span></span></span><br><span class="line"><span class="javascript">                        videoSource.appendBuffer(response);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(videoElement.error);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// videoSource.endOfStream();</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// videoElement.click();</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// videoSource.removeEventListener(&quot;update&quot;, stampAndAppend);</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&quot;buffer appended&quot;</span>)</span></span><br><span class="line"><span class="javascript">                        index++;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(&quot;duration:&quot;, videoSource.duration)</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(mediaSource.readyState);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (!videoSource.updating &amp;&amp; mediaSource.readyState === <span class="string">&quot;open&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(mediaSource.duration);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(videoElement.currentTime);</span></span><br><span class="line"><span class="javascript">                        stampAndAppend();</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// setTimeout(stampAndAppend, Math.floor(mediaSource.duration / numOfSeg / 2 * 1000));</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// stampAndAppend();</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.addEventListener(&quot;update&quot;, stampAndAppend);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var sourceBuffer = mediaSource.sourceBuffers[mediaSource.sourceBuffers.length-1];</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// // while(mediaSource.sourceBuffers.updating)&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// sourceBuffer.appendBuffer(response);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// bufferIndex++;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoElement.play();</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// Wait for the update complete event before continuing</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// videoSource.addEventListener(&quot;update&quot;, updateFunct, false);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// var buffer = mediaSource.addSourceBuffer(&#x27;video/webm; codecs=&quot;vorbis,vp8&quot;&#x27;);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// buffer.appendBuffer(response);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(mediaSource.error);</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// player.load();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(&quot;loading&quot;);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;input id=&quot;range&quot; type=&quot;range&quot; min=&quot;0&quot; step=&quot;1&quot; max=&quot;100&quot; value=&quot;0&quot; width=&quot;1024px&quot;&gt;&lt;/input&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;button onclick=&quot;reloadVideo()&quot;&gt;reload&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// function reloadVideo() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     player = document.getElementById(&quot;video&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     // setVideoLoad();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     player.load();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     player.play();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&quot;reloading...&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// reloadVideo();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setVideoLoad();</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;button id=&quot;pause&quot;&gt;pause&lt;/button&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    player = <span class="built_in">document</span>.getElementById(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// player.onclick = function pauseAndPlay() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&quot;clicked!&quot;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     if (player.paused) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         player.play()</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125; else &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//         player.pause()</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// range = document.getElementById(&quot;range&quot;);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// function refreshRange() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     range.innerHTML = currentPos;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setInterval(function () &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     refreshRange();</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;, 1000);</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Flask</tag>
        <tag>Html</tag>
      </tags>
  </entry>
</search>
